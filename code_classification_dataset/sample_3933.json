{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\\n2\\n0\\n2\\n4\\n7\\n4\"]",
    "src_uid": "4d9b6b5eb97c14bfa433efa11af0e5c8",
    "prob_desc_notes": "NoteIn the first test case, Burenka can choose segment $$$l = 1$$$, $$$r = 4$$$, and $$$x=5$$$. so it will fill the array with zeros in $$$2$$$ seconds.In the second test case, Burenka first selects segment $$$l = 1$$$, $$$r = 2$$$, and $$$x = 1$$$, after which $$$a = [0, 2, 2]$$$, and then the segment $$$l = 2$$$, $$$r = 3$$$, and $$$x=2$$$, which fills the array with zeros. In total, Burenka will spend $$$2$$$ seconds.",
    "prob_desc_description": "This is the easy version of this problem. The difference between easy and hard versions is only the constraints on $$$a_i$$$ and on $$$n$$$. You can make hacks only if both versions of the problem are solved.Burenka is the crown princess of Buryatia, and soon she will become the $$$n$$$-th queen of the country. There is an ancient tradition in Buryatia — before the coronation, the ruler must show their strength to the inhabitants. To determine the strength of the $$$n$$$-th ruler, the inhabitants of the country give them an array of $$$a$$$ of exactly $$$n$$$ numbers, after which the ruler must turn all the elements of the array into zeros in the shortest time. The ruler can do the following two-step operation any number of times:   select two indices $$$l$$$ and $$$r$$$, so that $$$1 \\le l \\le r \\le n$$$ and a non-negative integer $$$x$$$, then  for all $$$l \\leq i \\leq r$$$ assign $$$a_i := a_i \\oplus x$$$, where $$$\\oplus$$$ denotes the bitwise XOR operation. It takes $$$\\left\\lceil \\frac{r-l+1}{2} \\right\\rceil$$$ seconds to do this operation, where $$$\\lceil y \\rceil$$$ denotes $$$y$$$ rounded up to the nearest integer. Help Burenka calculate how much time she will need.",
    "prob_desc_output_spec": "For each test case, output a single number  — the minimum time that Burenka will need.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 500$$$) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 5000$$$) — the size of the array. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\le a_i \\le 5000$$$) — elements of the array.  It is guaranteed that the sum of $$$n$$$ in all tests does not exceed $$$5000$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_087.jsonl",
    "code_uid": "ee8993c0c9bed802725fe5a147c37b02",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7\\n\\n4\\n\\n5 5 5 5\\n\\n3\\n\\n1 3 2\\n\\n2\\n\\n0 0\\n\\n3\\n\\n2 5 7\\n\\n6\\n\\n1 2 3 3 2 1\\n\\n10\\n\\n27 27 34 32 2 31 23 56 52 4\\n\\n5\\n\\n1822 1799 57 23 55\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\nfrom array import array\r\n\r\ninput = lambda: sys.stdin.buffer.readline().decode().strip()\r\nfor _ in range(int(input())):\r\n    n, a = int(input()), array('h', [int(x) for x in input().split()])\r\n    dp = array('h', [0] * (n + 1))\r\n\r\n    for i in range(n):\r\n        cur, dp[i] = 0, dp[i - 1]\r\n\r\n        for j in range(i, -1, -1):\r\n            cur ^= a[j]\r\n            if not cur:\r\n                dp[i] = max(dp[i], dp[j - 1] + 1)\r\n\r\n    print(n - dp[n - 1])\r\n",
    "prob_desc_created_at": "1660660500",
    "tags": [
        "dp",
        "greedy"
    ],
    "hidden_unit_tests": ""
}