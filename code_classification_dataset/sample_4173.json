{
    "prob_desc_time_limit": "10 seconds",
    "prob_desc_sample_outputs": "[\"NO\\nYES\\n1 2\\n6\\n2 3\\nYES\\n1 1\\n1\\n1\\nYES\\n3 2\\n3 7 4\\n12 14\"]",
    "src_uid": "f596e0bcefde8227e8a7b9d923da828a",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given two sets of positive integers $$$A$$$ and $$$B$$$. You have to find two non-empty subsets $$$S_A \\subseteq A$$$, $$$S_B \\subseteq B$$$ so that the least common multiple (LCM) of the elements of $$$S_A$$$ is equal to the least common multiple (LCM) of the elements of $$$S_B$$$.",
    "prob_desc_output_spec": "For each test case, if there do not exist two subsets with equal least common multiple, output one line with NO. Otherwise, output one line with YES, followed by a line with two integers $$$|S_A|, |S_B|$$$ ($$$1 \\leq |S_A| \\leq n$$$, $$$1 \\leq |S_B| \\leq m$$$), the sizes of the subsets $$$S_A$$$ and $$$S_B$$$ The next line should contain $$$|S_A|$$$ integers $$$x_1, x_2, \\ldots, x_{|S_A|}$$$, the elements of $$$S_A$$$, followed by a line with $$$|S_B|$$$ integers $$$y_1, y_2, \\ldots, y_{|S_B|}$$$, the elements of $$$S_B$$$. If there are multiple possible pairs of subsets, you can print any.",
    "prob_desc_input_spec": "The input consists of multiple test cases. The first line of the input contains one integer $$$t$$$ ($$$1 \\leq t \\leq 200$$$), the number of test cases. For each test case, there is one line containing two integers $$$n, m$$$ ($$$1 \\leq n, m \\leq 1000$$$), the sizes of the sets $$$A$$$ and $$$B$$$, respectively. The next line contains $$$n$$$ distinct integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 4 \\cdot 10^{36}$$$), the elements of $$$A$$$. The next line contains $$$m$$$ distinct integers $$$b_1, b_2, \\ldots, b_m$$$ ($$$1 \\leq b_i \\leq 4 \\cdot 10^{36}$$$), the elements of $$$B$$$. The sum of $$$n$$$ for all test cases and the sum of $$$m$$$ for all test cases is at most $$$1000$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 3200,
    "file_name": "train_092.jsonl",
    "code_uid": "f0c2aece285fddc23cc7af1d79bbbf3e",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n3 4\\n5 6 7\\n2 8 9 10\\n4 4\\n5 6 7 8\\n2 3 4 9\\n1 3\\n1\\n1 2 3\\n5 6\\n3 4 9 7 8\\n2 15 11 14 20 12\"]",
    "exec_outcome": "PASSED",
    "source_code": "import math\r\nfor _ in range(int(input())):\r\n    n, m = [*map(int, input().split())]\r\n    N, M = 1<<(len(bin(n-1))-2), 1<<(len(bin(m-1))-2)\r\n    a = [*map(int, input().split())]\r\n    b = [*map(int, input().split())]\r\n    d = [[math.gcd(i,j) for i in b] for j in a]\r\n    d1, d2 = [[0]*(M<<1) for i in range(n)], [[0]*(N<<1) for i in range(m)]\r\n    def upd(d, i): \r\n        while i>1: d[i>>1]=math.gcd(d[i], d[i^1]); i>>=1\r\n    s1, s2 = set(range(n)), set(range(m))\r\n    def updr(s1, s2, d1, d2, t, i, now):\r\n        s1.discard(i)\r\n        for idx in list(s2):\r\n            if idx > now: break\r\n            x=d2[idx]\r\n            if x[1] == 1:\r\n                x[i+t]=0\r\n                upd(x,i+t)\r\n                if x[1] != 1: updr(s2, s1, d2, d1, M+N-t, idx, now)\r\n    for i in range(max(m,n)):\r\n        if i < n:\r\n            for j in s2: d1[i][j+M] = a[i] // d[i][j]\r\n            for j in range(M-1, 0, -1): d1[i][j] = math.gcd(d1[i][j<<1], d1[i][j<<1|1])\r\n            if d1[i][1] != 1: updr(s1, s2, d1, d2, N, i, i)\r\n        if i < m:\r\n            for j in s1: d2[i][j+N] = b[i] // d[j][i]\r\n            for j in range(N-1, 0, -1): d2[i][j] = math.gcd(d2[i][j<<1], d2[i][j<<1|1])\r\n            if d2[i][1] != 1: updr(s2, s1, d2, d1, M, i, i)\r\n        # print(i, len(s1), len(s2))\r\n    if len(s1): print('YES'); print(len(s1), len(s2)); print(*[a[i] for i in s1]); print(*[b[i] for i in s2])\r\n    else: print('NO')",
    "prob_desc_created_at": "1648132500",
    "tags": [
        "data structures",
        "math",
        "number theory"
    ],
    "hidden_unit_tests": ""
}