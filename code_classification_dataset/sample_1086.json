{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\", \"YES\", \"NO\"]",
    "src_uid": "2c58d94f37a9dd5fb09fd69fc7788f0d",
    "prob_desc_notes": "NoteIn the first sample the initial array fits well.In the second sample Yaroslav can get array: 1, 2, 1. He can swap the last and the second last elements to obtain it.In the third sample Yarosav can't get the array he needs.      ",
    "prob_desc_description": "Yaroslav has an array that consists of n integers. In one second Yaroslav can swap two neighboring array elements. Now Yaroslav is wondering if he can obtain an array where any two neighboring elements would be distinct in a finite time.Help Yaroslav.",
    "prob_desc_output_spec": "In the single line print \"YES\" (without the quotes) if Yaroslav can obtain the array he needs, and \"NO\" (without the quotes) otherwise.",
    "prob_desc_input_spec": "The first line contains integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the array elements.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_006.jsonl",
    "code_uid": "bca8c1127737176135c0149a92c5f935",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1\\n1\", \"3\\n1 1 2\", \"4\\n7 7 7 7\"]",
    "exec_outcome": "PASSED",
    "source_code": "#!/usr/bin/env python\n# coding: utf-8\n\n# In[204]:\n\n\n# # n = int(input())\n# # line = list(map(int, input().split()))\n# # line = list(str(input()))\n\n\n# In[1]:\n\n\nfrom collections import Counter\n\n\n# In[ ]:\n\n\n# 56\n# 516 76 516 197 516 427 174 516 706 813 94 37 516 815 516 516 937 483 16 516 842 516 638 691 516 635 516 516 453 263 516 516 635 257 125 214 29 81 516 51 362 516 677 516 903 516 949 654 221 924 516 879 516 516 972 516\n# 100\n# 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n# 46\n# 314 723 314 314 314 235 314 314 314 314 270 314 59 972 314 216 816 40 314 314 314 314 314 314 314 381 314 314 314 314 314 314 314 789 314 957 114 942 314 314 29 314 314 72 314 314\n\n\n# In[33]:\n\n\nn = int(input())\nline = list(map(int, input().split()))\n\n\n# In[36]:\n\n\nif len(line) == 1:\n    print(\"YES\")\nelse:\n    count_dict = Counter(line)\n    seg_val = []\n    seg_tmp = []\n    seg_len = 0\n    n_seg = 0\n    \n    max_count = max(count_dict.values())\n    max_key = []\n    accum = 0\n    for k, v in count_dict.items():\n        if v != max_count:\n            accum += count_dict[k]\n        else:\n            max_key.append(k)\n    max_key = set(max_key)\n\n    for i in range(n):\n        if i == 0 or line[i] == line[i-1]:\n            seg_tmp.append(line[i])\n\n        if len(seg_tmp) > 1 and (line[i] != line[i-1] or i == n-1):\n            seg_len = max(seg_len, len(seg_tmp))\n            n_seg += 1\n            seg_val.append(seg_tmp[0])\n            seg_tmp = []\n    seg_val = set(seg_val)\n    \n    max_len = n//2 if n%2 == 0 else (n//2 + 1)\n    \n    if (seg_len > max_len) or (accum < max_count - 1 and len(max_key) < 2):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n\n# In[ ]:\n\n\n\n\n",
    "prob_desc_created_at": "1365694200",
    "tags": [
        "greedy",
        "math"
    ],
    "hidden_unit_tests": ""
}