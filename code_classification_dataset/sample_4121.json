{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"a\\nz\"]",
    "src_uid": "b663dadb1033d435775bf000c2041d43",
    "prob_desc_notes": "NoteTest case 1:Initially $$$s$$$ is \"a\". In the first operation, Keine chooses \"a\", and replaces it with \"ab\". $$$s$$$ becomes \"ab\". In the second operation, Keine chooses \"b\", and replaces it with \"cd\". $$$s$$$ becomes \"acd\".So the final string is \"acd\", and $$$t=[$$$\"a\", \"ab\", \"b\", \"cd\"$$$]$$$ before being shuffled.Test case 2:Initially $$$s$$$ is \"z\". In the first operation, Keine chooses \"z\", and replaces it with \"aa\". $$$s$$$ becomes \"aa\". In the second operation, Keine chooses \"a\", and replaces it with \"ran\". $$$s$$$ becomes \"aran\". In the third operation, Keine chooses \"a\", and replaces it with \"yakumo\". $$$s$$$ becomes \"yakumoran\".So the final string is \"yakumoran\", and $$$t=[$$$\"z\", \"aa\", \"a\", \"ran\", \"a\", \"yakumo\"$$$]$$$ before being shuffled.",
    "prob_desc_description": "As a human, she can erase history of its entirety. As a Bai Ze (Hakutaku), she can create history out of nothingness.—Perfect Memento in Strict SenseKeine has the ability to manipulate history. The history of Gensokyo is a string $$$s$$$ of length $$$1$$$ initially. To fix the chaos caused by Yukari, she needs to do the following operations $$$n$$$ times, for the $$$i$$$-th time:  She chooses a non-empty substring $$$t_{2i-1}$$$ of $$$s$$$. She replaces $$$t_{2i-1}$$$ with a non-empty string, $$$t_{2i}$$$. Note that the lengths of strings $$$t_{2i-1}$$$ and $$$t_{2i}$$$ can be different.Note that if $$$t_{2i-1}$$$ occurs more than once in $$$s$$$, exactly one of them will be replaced.For example, let $$$s=$$$\"marisa\", $$$t_{2i-1}=$$$\"a\", and $$$t_{2i}=$$$\"z\". After the operation, $$$s$$$ becomes \"mzrisa\" or \"marisz\".After $$$n$$$ operations, Keine got the final string and an operation sequence $$$t$$$ of length $$$2n$$$. Just as Keine thinks she has finished, Yukari appears again and shuffles the order of $$$t$$$. Worse still, Keine forgets the initial history. Help Keine find the initial history of Gensokyo!Recall that a substring is a sequence of consecutive characters of the string. For example, for string \"abc\" its substrings are: \"ab\", \"c\", \"bc\" and some others. But the following strings are not its substring: \"ac\", \"cba\", \"acb\".HacksYou cannot make hacks in this problem.",
    "prob_desc_output_spec": "For each test case, print the initial string in one line.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains a single integer $$$T$$$ ($$$1 \\leq T \\leq 10^3$$$) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n &lt; 10 ^ 5$$$) — the number of operations. The next $$$2n$$$ lines contains one non-empty string $$$t_{i}$$$ — the $$$i$$$-th string of the shuffled sequence $$$t$$$. The next line contains one non-empty string $$$s$$$ — the final string. It is guaranteed that the total length of given strings (including $$$t_i$$$ and $$$s$$$) over all test cases does not exceed $$$2 \\cdot 10 ^ 5$$$. All given strings consist of lowercase English letters only. It is guaranteed that the initial string exists. It can be shown that the initial string is unique.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_091.jsonl",
    "code_uid": "d913e274e1869d4367950f1c8da0dd29",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n\\n2\\n\\na\\n\\nab\\n\\nb\\n\\ncd\\n\\nacd\\n\\n3\\n\\nz\\n\\na\\n\\na\\n\\naa\\n\\nyakumo\\n\\nran\\n\\nyakumoran\"]",
    "exec_outcome": "PASSED",
    "source_code": "from __future__ import print_function\r\nfrom collections import defaultdict\r\nimport os,sys,io\r\nimport random\r\n\r\n#from io import BytesIO, IOBase\r\n\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n\r\ndef ii():  return int(input())\r\ndef si():  return input()\r\ndef mi():  return map(int,input().strip().split(\" \"))\r\ndef msi(): return map(str,input().strip().split(\" \"))\r\ndef li():  return list(mi())\r\ndef di():  return defaultdict(int)\r\ndef dl():  return defaultdict(list)\r\n\r\ndef ceil(x,y):\r\n    if x%y==0:\r\n        return x//y\r\n    else:\r\n        return x//y+1\r\n \r\ndef powerMod(x,y,p):\r\n    res = 1\r\n    x %= p\r\n    while y > 0:\r\n        if y&1:\r\n            res = (res*x)%p\r\n        y = y>>1\r\n        x = (x*x)%p\r\n    return res\r\n \r\ndef gcd(x, y):\r\n    while y:\r\n        x, y = y, x % y\r\n    return x\r\n    \r\ndef isPrime(n) : # Check Prime Number or not \r\n    if (n <= 1) : return False\r\n    if (n <= 3) : return True\r\n    if (n % 2 == 0 or n % 3 == 0) : return False\r\n    i = 5\r\n    while(i * i <= n) : \r\n        if (n % i == 0 or n % (i + 2) == 0) : \r\n            return False\r\n        i = i + 6\r\n    return True\r\n \r\n \r\n \r\ndef read():\r\n    sys.stdin  = open('tests.txt', 'r')  \r\n    sys.stdout = open('result.txt', 'w') \r\n\r\n\r\n\r\ndef main():\r\n\r\n\r\n    for _ in range(ii()):\r\n        n = ii()\r\n        ocurrence = di()\r\n        #dict = defaultdict(str)\r\n        for i in range(2*n):\r\n            s = input()\r\n            for j in range(len(s)):\r\n                ocurrence[(s[j])] = ocurrence[(s[j])] + 1\r\n        final = input()\r\n        \r\n        \r\n        for k in range(len(final)):\r\n            ocurrence[(final[k])] = ocurrence[(final[k])] + 1\r\n        \r\n        res = -1\r\n        for x in ocurrence:\r\n            if ocurrence[x] != 0 and ocurrence[x] % 2 == 1:\r\n                res = x\r\n                break\r\n        \r\n        print(res)\r\n\r\n\r\n   \r\n\r\n\r\n\r\n\r\n\r\n#read()\r\nmain()\r\n\r\n\r\n\r\n\r\n \r\n \r\n \r\n ",
    "prob_desc_created_at": "1654266900",
    "tags": [
        "constructive algorithms",
        "greedy",
        "strings"
    ],
    "hidden_unit_tests": ""
}