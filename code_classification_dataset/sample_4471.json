{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2 1 3 4\\n1 2 3 4 5\\n4 5 1 2 3 6\"]",
    "src_uid": "9cc18b914678cb18213b2a52259de35d",
    "prob_desc_notes": null,
    "prob_desc_description": "Let's define the value of the permutation $$$p$$$ of $$$n$$$ integers $$$1$$$, $$$2$$$, ..., $$$n$$$ (a permutation is an array where each element from $$$1$$$ to $$$n$$$ occurs exactly once) as follows:  initially, an integer variable $$$x$$$ is equal to $$$0$$$;  if $$$x &lt; p_1$$$, then add $$$p_1$$$ to $$$x$$$ (set $$$x = x + p_1$$$), otherwise assign $$$0$$$ to $$$x$$$;  if $$$x &lt; p_2$$$, then add $$$p_2$$$ to $$$x$$$ (set $$$x = x + p_2$$$), otherwise assign $$$0$$$ to $$$x$$$;  ...  if $$$x &lt; p_n$$$, then add $$$p_n$$$ to $$$x$$$ (set $$$x = x + p_n$$$), otherwise assign $$$0$$$ to $$$x$$$;  the value of the permutation is $$$x$$$ at the end of this process. For example, for $$$p = [4, 5, 1, 2, 3, 6]$$$, the value of $$$x$$$ changes as follows: $$$0, 4, 9, 0, 2, 5, 11$$$, so the value of the permutation is $$$11$$$.You are given an integer $$$n$$$. Find a permutation $$$p$$$ of size $$$n$$$ with the maximum possible value among all permutations of size $$$n$$$. If there are several such permutations, you can print any of them.",
    "prob_desc_output_spec": "For each test case, print $$$n$$$ integers — the permutation $$$p$$$ of size $$$n$$$ with the maximum possible value among all permutations of size $$$n$$$.",
    "prob_desc_input_spec": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 97$$$) — the number of test cases. The only line of each test case contains one integer $$$n$$$ ($$$4 \\le n \\le 100$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_098.jsonl",
    "code_uid": "876b775b75377939e0f15040e4f88721",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n\\n4\\n\\n5\\n\\n6\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin\r\ninput = stdin.buffer.readline\r\n\r\ndef func():\r\n\tans = [0 for __ in range(n)]\r\n\r\n\tif n % 2 != 0:\r\n\t\tans[-1] = n\r\n\t\tans[-2] = n-2\r\n\t\tans[-3] = 1\r\n\t\t# ans[-4] = 2\r\n\t\toffset = 0\r\n\t\tfor i in range(n-3):\r\n\t\t\tif i == 1:\r\n\t\t\t\toffset += 1\r\n\r\n\t\t\tans[i] = n-i-1-offset\r\n\r\n\telse:\r\n\t\tans[-1] = n\r\n\t\tans[-2] = n-1\r\n\r\n\t\tfor i in range(n-2):\r\n\t\t\tans[i] = n-i-2\r\n\r\n\tprint(*ans)\r\n\r\n\r\nfor _ in range(int(input())):\r\n\tn = int(input())\r\n\tfunc()\r\n",
    "prob_desc_created_at": "1662647700",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "hidden_unit_tests": ""
}