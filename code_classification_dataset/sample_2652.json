{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"? 3 1 2 3\\n? 1 1\\n? 1 3\\n! 1 3\"]",
    "src_uid": "95206a124d0c651de2aca72106f7e962",
    "prob_desc_notes": "NoteThe answer for the first question is .The answer for the second and the third questions is 1, therefore, special icicles are indexes 1 and 3.You can read more about bitwise XOR operation here: https://en.wikipedia.org/wiki/Bitwise_operation#XOR.",
    "prob_desc_description": "Pay attention: this problem is interactive.Penguin Xoriy came up with a new game recently. He has n icicles numbered from 1 to n. Each icicle has a temperature — an integer from 1 to 109. Exactly two of these icicles are special: their temperature is y, while a temperature of all the others is x ≠ y. You have to find those special icicles. You can choose a non-empty subset of icicles and ask the penguin what is the bitwise exclusive OR (XOR) of the temperatures of the icicles in this subset. Note that you can't ask more than 19 questions.You are to find the special icicles.",
    "prob_desc_output_spec": "To give your answer to the penguin you have to print character \"!\" (without quotes), then print two integers p1, p2 (p1 &lt; p2) — the indexes of the special icicles in ascending order. Note that \"!\" and p1 should be separated by a space; the indexes should be separated by a space too. After you gave the answer your program should terminate immediately.",
    "prob_desc_input_spec": "The first line contains three integers n, x, y (2 ≤ n ≤ 1000, 1 ≤ x, y ≤ 109, x ≠ y) — the number of icicles, the temperature of non-special icicles and the temperature of the special icicles.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_027.jsonl",
    "code_uid": "2dd79ec7714330321786a3c0ed39a1a9",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 2 1\\n2\\n1\\n1\"]",
    "exec_outcome": "PASSED",
    "source_code": "class Game:\n    def __init__(self, n, x, y):\n        self.n = n\n        self.x = x\n        self.y = y\n\n    def ask(self, ps):\n        print('? ' + str(len(ps)) + ' ' + ' '.join(str(p + 1) for p in ps), flush=True)\n        res = int(input().strip())\n        return res == self.y or res == self.x ^ self.y\n\n    def mask_by_bit(self, b):\n        return [i for i in range(self.n) if (i & 2 ** b) != 0]\n\n    def same_bit(self, b):\n        ps = self.mask_by_bit(b)\n        if len(ps) == 0:\n            return True\n        return not self.ask(ps)\n\n    def filter_out(self, ps):\n        if len(ps) == 1:\n            return ps[0]\n        first_part = ps[:len(ps) // 2]\n        second_part = ps[len(ps) // 2:]\n        if self.ask(first_part):\n            return self.filter_out(first_part)\n        else:\n            return self.filter_out(second_part)\n\n\ndef main():\n    n, x, y = map(int, input().split())\n    game = Game(n, x, y)\n    xor = 0\n    potential = None\n    for b in range(10):\n        same_bit = game.same_bit(b)\n        if not same_bit:\n            xor += 2 ** b\n            potential = game.mask_by_bit(b)\n    a = game.filter_out(potential)\n    b = a ^ xor\n    a, b = sorted((a, b))\n    print('! {} {}'.format(a + 1, b + 1))\n\n\nmain()\n",
    "prob_desc_created_at": "1501511700",
    "tags": [
        "constructive algorithms",
        "binary search",
        "interactive"
    ],
    "hidden_unit_tests": ""
}