{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"3\\n6 1 3\", \"3\\n1 3 1\", \"0\"]",
    "src_uid": "16c2969b3532c912221825af6040b5c7",
    "prob_desc_notes": "NoteIn the first example, the bitwise XOR of the subsegments are $$$\\{6,7,4,1,2,3\\}$$$.",
    "prob_desc_description": "Given two integers $$$n$$$ and $$$x$$$, construct an array that satisfies the following conditions:   for any element $$$a_i$$$ in the array, $$$1 \\le a_i&lt;2^n$$$;  there is no non-empty subsegment with bitwise XOR equal to $$$0$$$ or $$$x$$$,  its length $$$l$$$ should be maximized. A sequence $$$b$$$ is a subsegment of a sequence $$$a$$$ if $$$b$$$ can be obtained from $$$a$$$ by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.",
    "prob_desc_output_spec": "The first line should contain the length of the array $$$l$$$. If $$$l$$$ is positive, the second line should contain $$$l$$$ space-separated integers $$$a_1$$$, $$$a_2$$$, $$$\\dots$$$, $$$a_l$$$ ($$$1 \\le a_i &lt; 2^n$$$) — the elements of the array $$$a$$$. If there are multiple solutions, print any of them.",
    "prob_desc_input_spec": "The only line contains two integers $$$n$$$ and $$$x$$$ ($$$1 \\le n \\le 18$$$, $$$1 \\le x&lt;2^{18}$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_015.jsonl",
    "code_uid": "9e62a36eaaf808c38d0d3b228390e50c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 5\", \"2 4\", \"1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\ninput = sys.stdin.readline\n\nn,x=map(int,input().split())\n\nif n==x==1:\n    print(0)\n    sys.exit()\n\n\nANS=[]\nfor i in range(n):\n    if i+1==(x).bit_length():\n        continue\n    ANS=ANS+[(1<<i)]+ANS\n\nprint(len(ANS))\nprint(*ANS)\n",
    "prob_desc_created_at": "1559570700",
    "tags": [
        "constructive algorithms",
        "bitmasks"
    ],
    "hidden_unit_tests": ""
}