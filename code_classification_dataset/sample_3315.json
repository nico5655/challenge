{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"4\", \"2\"]",
    "src_uid": "37bef742c08e1969b609e39fd6eb8f69",
    "prob_desc_notes": "NoteIn the first example, the possible pairs $$$(r_0, r_1)$$$ are as follows:  \"a\", \"aaaaa\"  \"aa\", \"aaaa\"  \"aaaa\", \"aa\"  \"aaaaa\", \"a\"  The pair \"aaa\", \"aaa\" is not allowed, since $$$r_0$$$ and $$$r_1$$$ must be different.In the second example, the following pairs are possible:   \"ko\", \"kokotlin\"  \"koko\", \"tlin\" ",
    "prob_desc_description": "One of Arkady's friends works at a huge radio telescope. A few decades ago the telescope has sent a signal $$$s$$$ towards a faraway galaxy. Recently they've received a response $$$t$$$ which they believe to be a response from aliens! The scientists now want to check if the signal $$$t$$$ is similar to $$$s$$$.The original signal $$$s$$$ was a sequence of zeros and ones (everyone knows that binary code is the universe-wide language). The returned signal $$$t$$$, however, does not look as easy as $$$s$$$, but the scientists don't give up! They represented $$$t$$$ as a sequence of English letters and say that $$$t$$$ is similar to $$$s$$$ if you can replace all zeros in $$$s$$$ with some string $$$r_0$$$ and all ones in $$$s$$$ with some other string $$$r_1$$$ and obtain $$$t$$$. The strings $$$r_0$$$ and $$$r_1$$$ must be different and non-empty.Please help Arkady's friend and find the number of possible replacements for zeros and ones (the number of pairs of strings $$$r_0$$$ and $$$r_1$$$) that transform $$$s$$$ to $$$t$$$.",
    "prob_desc_output_spec": "Print a single integer — the number of pairs of strings $$$r_0$$$ and $$$r_1$$$ that transform $$$s$$$ to $$$t$$$. In case there are no such pairs, print $$$0$$$.",
    "prob_desc_input_spec": "The first line contains a string $$$s$$$ ($$$2 \\le |s| \\le 10^5$$$) consisting of zeros and ones — the original signal. The second line contains a string $$$t$$$ ($$$1 \\le |t| \\le 10^6$$$) consisting of lowercase English letters only — the received signal. It is guaranteed, that the string $$$s$$$ contains at least one '0' and at least one '1'.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_052.jsonl",
    "code_uid": "18bbeefd5aab1c0c88bcdd0ff95f7d4d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"01\\naaaaaa\", \"001\\nkokokokotlin\"]",
    "exec_outcome": "PASSED",
    "source_code": "s = input()\nt = input()\n\nn,m = len(s), len(t)\na = s.count('0')\nb = len(s) - a\n\n\npow = [1] * m\nh = [0] * (m+1)\np, mod = 31, 10**9+9\nfor i in range(1, m):\n    pow[i] = pow[i-1] * p % mod\n\nfor i in range(m):\n    h[i+1] = (h[i] + (ord(t[i])-ord('a')+1) * pow[i]) % mod\n\n\ndef get_hash(i, j):\n    hash_value = (h[j] - h[i] + mod) % mod\n    hash_value = (hash_value * pow[m-i-1]) % mod\n    return hash_value\n\n\ndef check(x, y):\n    index = 0\n    hash_x = hash_y = -1\n    for i in range(n):\n        if s[i] == '0':\n            if hash_x == -1:\n                hash_x = get_hash(index, index+x)\n            else:\n                if get_hash(index, index+x) != hash_x: return False\n            index += x\n        else:\n            if hash_y == -1:\n                hash_y = get_hash(index, index+y)\n            else:\n                if get_hash(index, index+y) != hash_y: return False\n            index += y\n    return hash_x != hash_y\n\n\nres = 0\nfor x in range(1, m//a+1):\n    if (m - a*x) % b == 0:\n        y = (m - a*x) // b\n        if y == 0: continue\n        if check(x ,y):\n            res += 1\n\nprint(res)",
    "prob_desc_created_at": "1543163700",
    "tags": [
        "data structures",
        "hashing",
        "brute force",
        "strings"
    ],
    "hidden_unit_tests": ""
}