{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"15\", \"-1\", \"13\", \"250\", \"16\"]",
    "src_uid": "02d62bb1eb4cc0e373b862a980d6b29c",
    "prob_desc_notes": "NoteIn the first example Petya buys the first, the second and the fourth juice. He spends $$$5 + 6 + 4 = 15$$$ and obtains all three vitamins. He can also buy just the third juice and obtain three vitamins, but its cost is $$$16$$$, which isn't optimal.In the second example Petya can't obtain all three vitamins, as no juice contains vitamin \"C\".",
    "prob_desc_description": "Berland shop sells $$$n$$$ kinds of juices. Each juice has its price $$$c_i$$$. Each juice includes some set of vitamins in it. There are three types of vitamins: vitamin \"A\", vitamin \"B\" and vitamin \"C\". Each juice can contain one, two or all three types of vitamins in it.Petya knows that he needs all three types of vitamins to stay healthy. What is the minimum total price of juices that Petya has to buy to obtain all three vitamins? Petya obtains some vitamin if he buys at least one juice containing it and drinks it.",
    "prob_desc_output_spec": "Print -1 if there is no way to obtain all three vitamins. Otherwise print the minimum total price of juices that Petya has to buy to obtain all three vitamins.",
    "prob_desc_input_spec": "The first line contains a single integer $$$n$$$ $$$(1 \\le n \\le 1\\,000)$$$ — the number of juices. Each of the next $$$n$$$ lines contains an integer $$$c_i$$$ $$$(1 \\le c_i \\le 100\\,000)$$$ and a string $$$s_i$$$ — the price of the $$$i$$$-th juice and the vitamins it contains. String $$$s_i$$$ contains from $$$1$$$ to $$$3$$$ characters, and the only possible characters are \"A\", \"B\" and \"C\". It is guaranteed that each letter appears no more than once in each string $$$s_i$$$. The order of letters in strings $$$s_i$$$ is arbitrary.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1200,
    "file_name": "train_003.jsonl",
    "code_uid": "5017b87fd523921890acef50b69427ea",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n5 C\\n6 B\\n16 BAC\\n4 A\", \"2\\n10 AB\\n15 BA\", \"5\\n10 A\\n9 BC\\n11 CA\\n4 A\\n5 B\", \"6\\n100 A\\n355 BCA\\n150 BC\\n160 AC\\n180 B\\n190 CA\", \"2\\n5 BA\\n11 CB\"]",
    "exec_outcome": "PASSED",
    "source_code": "n=int(input())\np={\n    \"A\":10**9,\n    \"B\":10**9,\n    \"C\":10**9,\n    \"AB\":10**9,\n    \"BC\":10**9,\n    \"AC\":10**9,\n    \"ABC\":10**9\n}\n\nfor i in range(n):\n    x,y=input().split()\n    x=int(x)\n    y=''.join(sorted(y))\n    p[y]=min(p[y],x)\n\nx=min(\n        p[\"A\"]+p[\"B\"]+p[\"C\"],\n        p[\"AB\"]+p[\"C\"],\n        p[\"AC\"]+p[\"B\"],\n        p[\"BC\"]+p[\"A\"],\n        p[\"ABC\"],\n        p[\"AB\"]+p[\"BC\"],\n        p[\"AB\"]+p[\"AC\"],\n        p[\"BC\"]+p[\"AC\"],\n        p[\"A\"]+p[\"ABC\"],\n        p[\"B\"]+p[\"ABC\"],\n        p[\"C\"]+p[\"ABC\"],\n        p[\"AB\"]+p[\"ABC\"],\n        p[\"AC\"]+p[\"ABC\"],\n        p[\"BC\"]+p[\"ABC\"],\n    )\nprint(x) if x<10**7 else print(\"-1\")\n    \n\n    ",
    "prob_desc_created_at": "1537171500",
    "tags": [
        "dp",
        "implementation",
        "bitmasks",
        "brute force"
    ],
    "hidden_unit_tests": ""
}