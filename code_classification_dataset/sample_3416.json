{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"Kira is childish and he hates losing\", \"HI there HeLLo\"]",
    "src_uid": "5d3fc6a6c4f53d53c38ab4387282a55c",
    "prob_desc_notes": "NoteIn sample case 2 there may be multiple accepted outputs, \"HI there HeLLo\" and \"HI there hello\" you may output any of them. ",
    "prob_desc_description": "After observing the results of Spy Syndrome, Yash realised the errors of his ways. He now believes that a super spy such as Siddhant can't use a cipher as basic and ancient as Caesar cipher. After many weeks of observation of Siddhant’s sentences, Yash determined a new cipher technique.For a given sentence, the cipher is processed as:   Convert all letters of the sentence to lowercase.  Reverse each of the words of the sentence individually.  Remove all the spaces in the sentence. For example, when this cipher is applied to the sentenceKira is childish and he hates losingthe resulting string isariksihsidlihcdnaehsetahgnisolNow Yash is given some ciphered string and a list of words. Help him to find out any original sentence composed using only words from the list. Note, that any of the given words could be used in the sentence multiple times.",
    "prob_desc_output_spec": "Print one line — the original sentence. It is guaranteed that at least one solution exists. If there are multiple solutions, you may output any of those.",
    "prob_desc_input_spec": "The first line of the input contains a single integer n (1 ≤ n ≤ 10 000) — the length of the ciphered text. The second line consists of n lowercase English letters — the ciphered text t. The third line contains a single integer m (1 ≤ m ≤ 100 000) — the number of words which will be considered while deciphering the text. Each of the next m lines contains a non-empty word wi (|wi| ≤ 1 000) consisting of uppercase and lowercase English letters only. It's guaranteed that the total length of all words doesn't exceed 1 000 000.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_058.jsonl",
    "code_uid": "7960ffbf24c34af2b8083f1857c70544",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"30\\nariksihsidlihcdnaehsetahgnisol\\n10\\nKira\\nhates\\nis\\nhe\\nlosing\\ndeath\\nchildish\\nL\\nand\\nNote\", \"12\\niherehtolleh\\n5\\nHI\\nHo\\nthere\\nHeLLo\\nhello\"]",
    "exec_outcome": "PASSED",
    "source_code": "#!/usr/bin/env python3\n\n# http://codeforces.com/contest/633/problem/C\n\nfrom collections import deque\n\n# import sys\n# sys.setrecursionlimit(10001)\n\nn = int(input())\ns = input()\nm = int(input())\nwords = []\nfor i in range(0, m):\n    words.append(input())\n\ndict_words = {}\nfor word in words:\n    dict_words[word.lower()[::-1]] = word\n\ntrie_words = {}\nfor word in dict_words.keys():\n    d = trie_words\n    for letter in word:\n        d = d.setdefault(letter, {})\n    d['word'] = word\n\ndef find_sentence(s):\n    # stack = [0, '', dict_words, []] # position, used words so far, pos in trie we stopped on, children\n    roots = deque() # position, used words so far, pos in trie we stopped on, children\n\n    d = trie_words\n    for i in range(0, len(s)):\n        if not s[i] in d:\n            break;\n        d = d[s[i]]\n        if 'word' in d:\n            word = d['word']\n            new_root = [i + 1, word, None]\n            roots.append(new_root)\n            if i + 1 == len(s):\n                return new_root\n\n    while len(roots) > 0:\n        root = roots.popleft()\n        d = trie_words\n\n        for i in range(root[0], len(s)):\n            if not s[i] in d:\n                break;\n            d = d[s[i]]\n            if 'word' in d:\n                word = d['word']\n                new_root = [i + 1, word, root]\n                roots.appendleft(new_root)\n                if i + 1 == len(s):\n                    return new_root\n\nresult = find_sentence(s)\nwords = []\nwhile not result is None:\n    word = result[1]\n    words.append(dict_words[word])\n    result = result[2]\nprint(' '.join(reversed(words)))\n\n",
    "prob_desc_created_at": "1456506900",
    "tags": [
        "dp",
        "hashing",
        "string suffix structures",
        "implementation",
        "sortings",
        "data structures",
        "strings"
    ],
    "hidden_unit_tests": ""
}