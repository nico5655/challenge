{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"1\", \"2\", \"1\", \"0\"]",
    "src_uid": "ed308777f7122ca6279b522acd3e58f9",
    "prob_desc_notes": "NoteIn the first example, it is enough to delete one element $$$a_4=5$$$. The remaining elements form the sequence $$$[4, 7, 1, 4, 9]$$$, which is good.",
    "prob_desc_description": "A sequence $$$a_1, a_2, \\dots, a_n$$$ is called good if, for each element $$$a_i$$$, there exists an element $$$a_j$$$ ($$$i \\ne j$$$) such that $$$a_i+a_j$$$ is a power of two (that is, $$$2^d$$$ for some non-negative integer $$$d$$$).For example, the following sequences are good:  $$$[5, 3, 11]$$$ (for example, for $$$a_1=5$$$ we can choose $$$a_2=3$$$. Note that their sum is a power of two. Similarly, such an element can be found for $$$a_2$$$ and $$$a_3$$$),  $$$[1, 1, 1, 1023]$$$,  $$$[7, 39, 89, 25, 89]$$$,  $$$[]$$$. Note that, by definition, an empty sequence (with a length of $$$0$$$) is good.For example, the following sequences are not good:  $$$[16]$$$ (for $$$a_1=16$$$, it is impossible to find another element $$$a_j$$$ such that their sum is a power of two),  $$$[4, 16]$$$ (for $$$a_1=4$$$, it is impossible to find another element $$$a_j$$$ such that their sum is a power of two),  $$$[1, 3, 2, 8, 8, 8]$$$ (for $$$a_3=2$$$, it is impossible to find another element $$$a_j$$$ such that their sum is a power of two). You are given a sequence $$$a_1, a_2, \\dots, a_n$$$. What is the minimum number of elements you need to remove to make it good? You can delete an arbitrary set of elements.",
    "prob_desc_output_spec": "Print the minimum number of elements needed to be removed from the given sequence in order to make it good. It is possible that you need to delete all $$$n$$$ elements, make it empty, and thus get a good sequence.",
    "prob_desc_input_spec": "The first line contains the integer $$$n$$$ ($$$1 \\le n \\le 120000$$$) â€” the length of the given sequence. The second line contains the sequence of integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1300,
    "file_name": "train_004.jsonl",
    "code_uid": "d38e6fd87b66ae00e1de29289714d61d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n4 7 1 5 4 9\", \"5\\n1 2 3 4 5\", \"1\\n16\", \"4\\n1 1 1 1023\"]",
    "exec_outcome": "PASSED",
    "source_code": "N = int(input())\nA = list(map(int, input().split()))\nA = sorted(A)\n\nimport bisect as bi\n\ncount = 0\n\npowers = []\nfor i in range (1, 36):\n    powers.append(2**i)\n\nimport copy\ncount = 0\n\nif len(A) == 1:\n    print(1)\n    exit()\n\nfor j in range (0, N):\n    copypower = copy.copy(powers)\n    for i in range (0, 35):\n        copypower[i]-=A[j]\n    for i in range (0, 35):\n        if copypower[i] == A[j]:\n            if bi.bisect_right(A, copypower[i])-bi.bisect_left(A, copypower[i])>1:\n                count+=1\n                break\n            else:\n                continue\n        else:\n            if bi.bisect_right(A, copypower[i])-bi.bisect_left(A, copypower[i])>0:\n                count+=1\n                break\n            else:\n                continue\n\nprint(N-count)",
    "prob_desc_created_at": "1531150500",
    "tags": [
        "implementation",
        "greedy",
        "brute force"
    ],
    "hidden_unit_tests": ""
}