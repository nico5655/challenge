{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"2\", \"11\"]",
    "src_uid": "bd7b85c0204f6b36dc07f8a96fc36161",
    "prob_desc_notes": "NoteIn the first sample, the distance between watchman 1 and watchman 2 is equal to |1 - 7| + |1 - 5| = 10 for Doctor Manhattan and  for Daniel. For pairs (1, 1), (1, 5) and (7, 5), (1, 5) Doctor Manhattan and Daniel will calculate the same distances.",
    "prob_desc_description": "Watchmen are in a danger and Doctor Manhattan together with his friend Daniel Dreiberg should warn them as soon as possible. There are n watchmen on a plane, the i-th watchman is located at point (xi, yi).They need to arrange a plan, but there are some difficulties on their way. As you know, Doctor Manhattan considers the distance between watchmen i and j to be |xi - xj| + |yi - yj|. Daniel, as an ordinary person, calculates the distance using the formula .The success of the operation relies on the number of pairs (i, j) (1 ≤ i &lt; j ≤ n), such that the distance between watchman i and watchmen j calculated by Doctor Manhattan is equal to the distance between them calculated by Daniel. You were asked to compute the number of such pairs.",
    "prob_desc_output_spec": "Print the number of pairs of watchmen such that the distance between them calculated by Doctor Manhattan is equal to the distance calculated by Daniel.",
    "prob_desc_input_spec": "The first line of the input contains the single integer n (1 ≤ n ≤ 200 000) — the number of watchmen. Each of the following n lines contains two integers xi and yi (|xi|, |yi| ≤ 109). Some positions may coincide.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_018.jsonl",
    "code_uid": "f51dde9ddf8a351a16c54a1d9bc2c5a4",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n1 1\\n7 5\\n1 5\", \"6\\n0 0\\n0 1\\n0 2\\n-1 1\\n0 1\\n1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "\n\npoints = []\nrow_count = int(input())\nfor _ in range(row_count):\n    rawLine = input().split()\n    points.append([int(rawLine[0]),int(rawLine[1])])\n\n\ntotal = 0\nfor i in range(2):\n    points.sort(key= lambda x : x[i])\n    previous = 1\n    for j in range(1,row_count+1):\n        if j != row_count and points[j][i] == points[j-1][i]:\n            previous += 1\n        else:\n            total += (previous*(previous-1))/2\n            previous = 1\n\npoints.sort(key= lambda x : (x[0],x[1]))\nprevious = 1\nfor j in range(1,row_count+1):\n    if j != row_count and points[j][0] == points[j-1][0] and points[j][1] == points[j-1][1]:\n        previous += 1\n    else:\n        total -= (previous*(previous-1))/2 # Duplicates\n        previous = 1\n\nprint(int(total))",
    "prob_desc_created_at": "1457342700",
    "tags": [
        "data structures",
        "geometry",
        "implementation",
        "sortings"
    ],
    "hidden_unit_tests": ""
}