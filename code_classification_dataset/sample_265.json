{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"6\\n2\\n3\"]",
    "src_uid": "c358bce566a846bd278329ef2c029dff",
    "prob_desc_notes": "NoteIn the first test case, it is possible to achieve $$$a_k = 1$$$ for every $$$k$$$. To do so, you may use the following operations:  swap $$$a_k$$$ and $$$a_4$$$;  swap $$$a_2$$$ and $$$a_2$$$;  swap $$$a_5$$$ and $$$a_5$$$. In the second test case, only $$$k = 1$$$ and $$$k = 2$$$ are possible answers. To achieve $$$a_1 = 1$$$, you have to swap $$$a_1$$$ and $$$a_1$$$ during the second operation. To achieve $$$a_2 = 1$$$, you have to swap $$$a_1$$$ and $$$a_2$$$ during the second operation.",
    "prob_desc_description": "You are given an array consisting of $$$n$$$ integers $$$a_1$$$, $$$a_2$$$, ..., $$$a_n$$$. Initially $$$a_x = 1$$$, all other elements are equal to $$$0$$$.You have to perform $$$m$$$ operations. During the $$$i$$$-th operation, you choose two indices $$$c$$$ and $$$d$$$ such that $$$l_i \\le c, d \\le r_i$$$, and swap $$$a_c$$$ and $$$a_d$$$.Calculate the number of indices $$$k$$$ such that it is possible to choose the operations so that $$$a_k = 1$$$ in the end.",
    "prob_desc_output_spec": "For each test case print one integer — the number of indices $$$k$$$ such that it is possible to choose the operations so that $$$a_k = 1$$$ in the end.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. Then the description of $$$t$$$ testcases follow. The first line of each test case contains three integers $$$n$$$, $$$x$$$ and $$$m$$$ ($$$1 \\le n \\le 10^9$$$; $$$1 \\le m \\le 100$$$; $$$1 \\le x \\le n$$$). Each of next $$$m$$$ lines contains the descriptions of the operations; the $$$i$$$-th line contains two integers $$$l_i$$$ and $$$r_i$$$ ($$$1 \\le l_i \\le r_i \\le n$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1300,
    "file_name": "train_001.jsonl",
    "code_uid": "99716b2822970c255965782ba88caa05",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n6 4 3\\n1 6\\n2 3\\n5 5\\n4 1 2\\n2 4\\n1 2\\n3 3 2\\n2 3\\n1 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "for _ in range(int(input())):\n    \n    n,x,m = map(int,input().split())\n    \n    lst = []\n    for i in range(m):\n        \n        tmp = list(map(int,input().split()))\n        lst.append(tmp)\n        \n    while lst and not lst[0][0]<=x<=lst[0][1]:\n        lst.pop(0)\n        \n    if not lst:\n        print(1)\n    \n    else:\n        ans = [lst[0]]\n        \n        for i in range(1,len(lst)):\n            \n            if lst[i][0]<ans[-1][0] and ans[-1][1]<lst[i][1]:\n                ans[-1] = lst[i]\n            \n            elif ans[-1][0]<=lst[i][1]<=ans[-1][1] and lst[i][0]<ans[-1][0]:\n                ans[-1][0] = lst[i][0]\n                \n            elif ans[-1][0]<=lst[i][0]<=ans[-1][1] and lst[i][1]>ans[-1][1]:\n                ans[-1][1] = lst[i][1]\n         \n        if ans:       \n            print(ans[-1][1]-ans[-1][0]+1)\n            \n        else:\n            print(1)\n            \n        \n        \n        \n        \n        \n        \n        \n    ",
    "prob_desc_created_at": "1591886100",
    "tags": [
        "two pointers",
        "math"
    ],
    "hidden_unit_tests": ""
}