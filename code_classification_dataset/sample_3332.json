{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"14\", \"9\"]",
    "src_uid": "158a9e5471928a9c7b4e728b68a954d4",
    "prob_desc_notes": "NoteIn the first test case best partition into segments is: [4, 4] [2, 5, 2] [3], answer is calculated as follows: 4 + (2 xor 5) + 3 = 4 + 7 + 3 = 14In the second test case best partition into segments is: 5 1 [3] 1 5 [2, 4, 2] 5, answer calculated as follows: 3 + (2 xor 4) = 3 + 6 = 9.",
    "prob_desc_description": "Vladik often travels by trains. He remembered some of his trips especially well and I would like to tell you about one of these trips:Vladik is at initial train station, and now n people (including Vladik) want to get on the train. They are already lined up in some order, and for each of them the city code ai is known (the code of the city in which they are going to).Train chief selects some number of disjoint segments of the original sequence of people (covering entire sequence by segments is not necessary). People who are in the same segment will be in the same train carriage. The segments are selected in such way that if at least one person travels to the city x, then all people who are going to city x should be in the same railway carriage. This means that they can’t belong to different segments. Note, that all people who travel to the city x, either go to it and in the same railway carriage, or do not go anywhere at all.Comfort of a train trip with people on segment from position l to position r is equal to XOR of all distinct codes of cities for people on the segment from position l to position r. XOR operation also known as exclusive OR.Total comfort of a train trip is equal to sum of comfort for each segment.Help Vladik to know maximal possible total comfort.",
    "prob_desc_output_spec": "The output should contain a single integer — maximal possible total comfort.",
    "prob_desc_input_spec": "First line contains single integer n (1 ≤ n ≤ 5000) — number of people. Second line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 5000), where ai denotes code of the city to which i-th person is going.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_053.jsonl",
    "code_uid": "37a916c257b1e6155d2058e2b6996de8",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n4 4 2 5 2 3\", \"9\\n5 1 3 1 5 2 4 2 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input())\na = list(map(int, input().split()))\n\ndp = [0]*(n + 1)\nf,l = {}, {}\nfor i in range(len(a)):\n    x = a[i]\n    if x not in f:\n        f[x] = i\n    l[x] = i\npr = [a[0]]\n\nfor i in range(1, len(a) + 1):\n    j = i\n    mx = 0\n    nums = set()\n    curxor = 0\n    b = i\n    while j > 0:\n        x = a[j-1]\n        if l[x] > i - 1:\n            break\n        if x not in nums:\n            nums.add(x)\n            curxor ^= x\n        b = min(b, f[x] + 1)\n        if b == j:\n            mx = max(mx, dp[j-1] + curxor)\n        j -= 1\n    dp[i] = max(dp[i-1], mx)\nprint(dp[len(a)])",
    "prob_desc_created_at": "1495877700",
    "tags": [
        "dp",
        "implementation"
    ],
    "hidden_unit_tests": ""
}