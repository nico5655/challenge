{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"? 1 4\\n\\n? 3 5\\n\\n! 2\\n\\n? 1 1\\n\\n! 1\"]",
    "src_uid": "0942e9cbce56ff3becd03d8e34962bf3",
    "prob_desc_notes": "NoteIn the first test, the interaction proceeds as follows. SolutionJuryExplanation$$$\\texttt{2}$$$There are 2 test cases.$$$\\texttt{5}$$$In the first test case, the hidden array is $$$[4,2,5,1,3]$$$, with length $$$5$$$.$$$\\texttt{? 1 4}$$$$$$\\texttt{1 2 4 5}$$$The solution requests the subarray $$$[4,2,5,1]$$$ in increasing order, and the jury responds with $$$[1,2,4,5]$$$.$$$\\texttt{? 3 5}$$$$$$\\texttt{1 3 5}$$$The solution requests the subarray $$$[5,1,3]$$$ in increasing order, and the jury responds with $$$[1,3,5]$$$.$$$\\texttt{! 2}$$$The solution has somehow determined that $$$a_2=2$$$, and outputs it. Since the output is correct, the jury continues to the next test case.$$$\\texttt{3}$$$In the second test case, the hidden array is $$$[1,3,2]$$$, with length $$$3$$$.$$$\\texttt{? 1 1}$$$$$$\\texttt{1}$$$The solution requests the number $$$[1]$$$ only, and the jury responds with $$$[1]$$$.$$$\\texttt{! 1}$$$The solution has determined that $$$a_1=1$$$, and outputs it. Since the output is correct and there are no more test cases, the jury and the solution exit. Note that the line breaks in the example input and output are for the sake of clarity, and do not occur in the real interaction.",
    "prob_desc_description": "This is an interactive problem.Initially, there is an array $$$a = [1, 2, \\ldots, n]$$$, where $$$n$$$ is an odd positive integer. The jury has selected $$$\\frac{n-1}{2}$$$ disjoint pairs of elements, and then the elements in those pairs are swapped. For example, if $$$a=[1,2,3,4,5]$$$, and the pairs $$$1 \\leftrightarrow 4$$$ and $$$3 \\leftrightarrow 5$$$ are swapped, then the resulting array is $$$[4, 2, 5, 1, 3]$$$. As a result of these swaps, exactly one element will not change position. You need to find this element.To do this, you can ask several queries. In each query, you can pick two integers $$$l$$$ and $$$r$$$ ($$$1 \\leq l \\leq r \\leq n$$$). In return, you will be given the elements of the subarray $$$[a_l, a_{l + 1}, \\dots, a_r]$$$ sorted in increasing order. Find the element which did not change position. You can make at most $$$\\mathbf{15}$$$ queries.The array $$$a$$$ is fixed before the interaction and does not change after your queries.Recall that an array $$$b$$$ is a subarray of the array $$$a$$$ if $$$b$$$ can be obtained from $$$a$$$ by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.",
    "prob_desc_output_spec": null,
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 500$$$) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer $$$n$$$ ($$$3 \\leq n &lt; 10^4$$$; $$$n$$$ is odd) — the length of the array $$$a$$$. After reading the first line of each test case, you should begin the interaction. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^4$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_102.jsonl",
    "code_uid": "a16327a4580b752ddd5ce4969bb27dfd",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n5\\n\\n1 2 4 5\\n\\n1 3 5\\n\\n3\\n\\n1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import os\r\nimport sys\r\nfrom io import BytesIO, IOBase\r\n\r\nBUFSIZE = 8192\r\n \r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n \r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n \r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n \r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n \r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n \r\n \r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n \r\n \r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n\r\ndef query(l, r):\r\n    print(\"? {} {}\".format(l, r))\r\n    sys.stdout.flush()\r\n\r\n    return list(map(int, input().split()))\r\n\r\ndef answer(x):\r\n    print(\"! \" + str(x))\r\n    sys.stdout.flush()\r\n\r\nT = int(input())\r\nfor _ in range(T):\r\n    n = int(input())\r\n\r\n    if n <= 15:\r\n        for i in range(1, n + 1):\r\n            L = query(i, i)\r\n            if L[0] == i:\r\n                answer(i)\r\n                break\r\n    else:\r\n        l, r = 1, n\r\n        while l + 1 < r:\r\n            m = (l + r)//2\r\n            L = query(1, m)\r\n\r\n            count = 0\r\n            for e in L:\r\n                if 1 <= e <= m:\r\n                    count += 1\r\n\r\n            if m % 2 == 0:\r\n                if count % 2 == 0:\r\n                    l = m\r\n                else:\r\n                    r = m\r\n            else:\r\n                if count % 2 == 0:\r\n                    l = m\r\n                else:\r\n                    r = m\r\n                \r\n\r\n        L = query(l, l)\r\n        answer(l if L[0] == l else r)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "prob_desc_created_at": "1656426900",
    "tags": [
        "binary search",
        "constructive algorithms",
        "interactive"
    ],
    "hidden_unit_tests": ""
}