{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\\n1 2 2 1 \\n6\\n1 2 3 4 5 6 \\n1\\n1 1 1 1 1 \\n4\\n1 1 1 1 1 2 3 4\"]",
    "src_uid": "de57b6b1aa2b6ec4686d1348988c0c63",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given a binary string $$$s$$$ consisting of $$$n$$$ zeros and ones.Your task is to divide the given string into the minimum number of subsequences in such a way that each character of the string belongs to exactly one subsequence and each subsequence looks like \"010101 ...\" or \"101010 ...\" (i.e. the subsequence should not contain two adjacent zeros or ones).Recall that a subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements without changing the order of the remaining elements. For example, subsequences of \"1011101\" are \"0\", \"1\", \"11111\", \"0111\", \"101\", \"1001\", but not \"000\", \"101010\" and \"11100\".You have to answer $$$t$$$ independent test cases.",
    "prob_desc_output_spec": "For each test case, print the answer: in the first line print one integer $$$k$$$ ($$$1 \\le k \\le n$$$) — the minimum number of subsequences you can divide the string $$$s$$$ to. In the second line print $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le k$$$), where $$$a_i$$$ is the number of subsequence the $$$i$$$-th character of $$$s$$$ belongs to. If there are several answers, you can print any.",
    "prob_desc_input_spec": "The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 2 \\cdot 10^4$$$) — the number of test cases. Then $$$t$$$ test cases follow. The first line of the test case contains one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the length of $$$s$$$. The second line of the test case contains $$$n$$$ characters '0' and '1' — the string $$$s$$$. It is guaranteed that the sum of $$$n$$$ does not exceed $$$2 \\cdot 10^5$$$ ($$$\\sum n \\le 2 \\cdot 10^5$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_007.jsonl",
    "code_uid": "d16ed5f85be0e5c4eb228f9d5a42d0d3",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n4\\n0011\\n6\\n111111\\n5\\n10101\\n8\\n01010000\"]",
    "exec_outcome": "PASSED",
    "source_code": "t = int(input())\nfor _ in range(t):\n\tn = int(input())\n\ts = input()\n\tk = 0\n\tout = []\n\tlast_chars = [[], []]\n\tfor i in range(n):\n\t\tc = s[i]\n\t\toppc = '1' if (c == '0') else '0'\n\t\tif len(last_chars[int(oppc)]) > 0:\n\t\t\ta = last_chars[int(oppc)].pop()\n\t\t\tlast_chars[int(c)].append(a)\n\t\t\tout.append(str(a))\n\t\telse:\n\t\t\tk += 1\n\t\t\tlast_chars[int(c)].append(k)\n\t\t\tout.append(str(k))\n\tprint(k)\n\tprint(' '.join(out))\n",
    "prob_desc_created_at": "1596638100",
    "tags": [
        "data structures",
        "constructive algorithms",
        "implementation",
        "greedy"
    ],
    "hidden_unit_tests": ""
}