{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\\n0\\n4\\n1\"]",
    "src_uid": "dea37a75a4aedd3a3a6fd51efdc3f8b2",
    "prob_desc_notes": "NoteIn the first test case, the only $$$X$$$ for which the permutation is $$$X$$$-sortable are $$$X = 0$$$ and $$$X = 2$$$, maximum of which is $$$2$$$.Sorting using $$$X = 0$$$:   Swap $$$p_1$$$ and $$$p_4$$$, $$$p = [2, 1, 3, 0]$$$.  Swap $$$p_3$$$ and $$$p_4$$$, $$$p = [2, 1, 0, 3]$$$.  Swap $$$p_1$$$ and $$$p_3$$$, $$$p = [0, 1, 2, 3]$$$. Sorting using $$$X = 2$$$:   Swap $$$p_3$$$ and $$$p_4$$$, $$$p = [0, 1, 2, 3]$$$. In the second test case, we must swap $$$p_1$$$ and $$$p_2$$$ which is possible only with $$$X = 0$$$.",
    "prob_desc_description": "You are given a permutation $$$p$$$ of integers from $$$0$$$ to $$$n-1$$$ (each of them occurs exactly once). Initially, the permutation is not sorted (that is, $$$p_i&gt;p_{i+1}$$$ for at least one $$$1 \\le i \\le n - 1$$$). The permutation is called $$$X$$$-sortable for some non-negative integer $$$X$$$ if it is possible to sort the permutation by performing the operation below some finite number of times:   Choose two indices $$$i$$$ and $$$j$$$ $$$(1 \\le i \\lt j \\le n)$$$ such that $$$p_i \\&amp; p_j = X$$$.  Swap $$$p_i$$$ and $$$p_j$$$. Here $$$\\&amp;$$$ denotes the bitwise AND operation.Find the maximum value of $$$X$$$ such that $$$p$$$ is $$$X$$$-sortable. It can be shown that there always exists some value of $$$X$$$ such that $$$p$$$ is $$$X$$$-sortable.",
    "prob_desc_output_spec": "For each test case output a single integer — the maximum value of $$$X$$$ such that $$$p$$$ is $$$X$$$-sortable.",
    "prob_desc_input_spec": "The input consists of multiple test cases. The first line contains a single integer $$$t$$$ $$$(1 \\le t \\le 10^4)$$$  — the number of test cases. Description of test cases follows. The first line of each test case contains a single integer $$$n$$$ $$$(2 \\le n \\le 2 \\cdot 10^5)$$$  — the length of the permutation. The second line of each test case contains $$$n$$$ integers $$$p_1, p_2, ..., p_n$$$ ($$$0 \\le p_i \\le n-1$$$, all $$$p_i$$$ are distinct)  — the elements of $$$p$$$. It is guaranteed that $$$p$$$ is not sorted. It is guaranteed that the sum of $$$n$$$ over all cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_101.jsonl",
    "code_uid": "4bc9a17db1d1ce98ea4d9e79c335d0b5",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n\\n4\\n\\n0 1 3 2\\n\\n2\\n\\n1 0\\n\\n7\\n\\n0 1 2 3 5 6 4\\n\\n5\\n\\n0 3 2 1 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "for _ in range(int(input())):\r\n    n = int(input())-1\r\n\r\n    ms = []\r\n    for i, el in enumerate(map(int, input().split())):\r\n        if i != el:\r\n            ms.append(el)\r\n    ans = ms[0]\r\n    for x in ms:\r\n        ans &= x\r\n    print(ans)\r\n\r\n\r\n",
    "prob_desc_created_at": "1653230100",
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "sortings"
    ],
    "hidden_unit_tests": ""
}