{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1\\n2\\n2\\n5\"]",
    "src_uid": "130fdf010c228564611a380b6dd37a34",
    "prob_desc_notes": "NoteIn the first test case, we can achieve the goal with a single operation: choose $$$v = 2$$$ and $$$c = [1, 2]$$$, resulting in $$$a_1 = 1, a_2 = 2$$$.In the second test case, we can achieve the goal with two operations: first, choose $$$v = 2$$$ and $$$c = [3, 3]$$$, resulting in $$$a_1 = 3, a_2 = 3, a_3 = 0$$$. Then, choose $$$v = 3, c = [2, 7]$$$, resulting in $$$a_1 = 5, a_2 = 3, a_3 = 7$$$.",
    "prob_desc_description": "We are given a rooted tree consisting of $$$n$$$ vertices numbered from $$$1$$$ to $$$n$$$. The root of the tree is the vertex $$$1$$$ and the parent of the vertex $$$v$$$ is $$$p_v$$$.There is a number written on each vertex, initially all numbers are equal to $$$0$$$. Let's denote the number written on the vertex $$$v$$$ as $$$a_v$$$.For each $$$v$$$, we want $$$a_v$$$ to be between $$$l_v$$$ and $$$r_v$$$ $$$(l_v \\leq a_v \\leq r_v)$$$.In a single operation we do the following:   Choose some vertex $$$v$$$. Let $$$b_1, b_2, \\ldots, b_k$$$ be vertices on the path from the vertex $$$1$$$ to vertex $$$v$$$ (meaning $$$b_1 = 1$$$, $$$b_k = v$$$ and $$$b_i = p_{b_{i + 1}}$$$). Choose a non-decreasing array $$$c$$$ of length $$$k$$$ of nonnegative integers: $$$0 \\leq c_1 \\leq c_2 \\leq \\ldots \\leq c_k$$$. For each $$$i$$$ $$$(1 \\leq i \\leq k)$$$, increase $$$a_{b_i}$$$ by $$$c_i$$$. What's the minimum number of operations needed to achieve our goal?",
    "prob_desc_output_spec": "For each test case output the minimum number of operations needed.",
    "prob_desc_input_spec": "The first line contains an integer $$$t$$$ $$$(1\\le t\\le 1000)$$$  — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer $$$n$$$ $$$(2\\le n\\le 2 \\cdot 10^5)$$$  — the number of the vertices in the tree. The second line of each test case contains $$$n - 1$$$ integers, $$$p_2, p_3, \\ldots, p_n$$$ $$$(1 \\leq p_i &lt; i)$$$, where $$$p_i$$$ denotes the parent of the vertex $$$i$$$. The $$$i$$$-th of the following $$$n$$$ lines contains two integers $$$l_i$$$ and $$$r_i$$$ $$$(1 \\le l_i \\le r_i \\le 10^9)$$$. It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_083.jsonl",
    "code_uid": "084838375de70eaf0619dec6dded977e",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n\\n2\\n\\n1\\n\\n1 5\\n\\n2 9\\n\\n3\\n\\n1 1\\n\\n4 5\\n\\n2 4\\n\\n6 10\\n\\n4\\n\\n1 2 1\\n\\n6 9\\n\\n5 6\\n\\n4 5\\n\\n2 4\\n\\n5\\n\\n1 2 3 4\\n\\n5 5\\n\\n4 4\\n\\n3 3\\n\\n2 2\\n\\n1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import collections, math, bisect, heapq, random, functools, itertools, copy, typing\nimport platform; LOCAL = (platform.uname().node == 'AMO')\n\n# Fast IO Region\nimport os, sys; from io import BytesIO, IOBase\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n\ndef debug(*args):\n    if LOCAL:\n        print('\\033[92m', end='')\n        printf(*args)\n        print('\\033[0m', end='')\n\ndef printf(*args):\n    if LOCAL:\n        print('>>>: ', end='')\n    for arg in args:\n        if isinstance(arg, typing.Iterable) and \\\n                not isinstance(arg, str) and \\\n                not isinstance(arg, dict):\n            print(' '.join(map(str, arg)), end=' ')\n        else:\n            print(arg, end=' ')\n    print()\n\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(lambda x: int(x)-1, input().split()))\n\n    l, r = [], []\n    for i in range(n):\n        a, b = map(int, input().split())\n        l.append(a)\n        r.append(b)\n        \n    g = [[] for _ in range(n)]\n    for i, x in enumerate(p):\n        g[x].append(i+1)\n        \n    a = [0] * n\n    ans = 0\n\n    for u in range(n-1, -1, -1):\n\n        for v in g[u]:\n            a[u] += a[v]\n        \n        a[u] = min(a[u], r[u])\n        if a[u] < l[u]: \n            ans += 1\n            a[u] = r[u]\n        \n    print(ans)\n",
    "prob_desc_created_at": "1655390100",
    "tags": [
        "dfs and similar",
        "dp",
        "greedy",
        "trees"
    ],
    "hidden_unit_tests": ""
}