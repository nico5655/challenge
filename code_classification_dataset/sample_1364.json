{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1 1 1 2 -1 1 1 3 1 1\"]",
    "src_uid": "9271c88a3bc3c69855daeda9bb6bbaf5",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given an array $$$a$$$ consisting of $$$n$$$ integers. In one move, you can jump from the position $$$i$$$ to the position $$$i - a_i$$$ (if $$$1 \\le i - a_i$$$) or to the position $$$i + a_i$$$ (if $$$i + a_i \\le n$$$).For each position $$$i$$$ from $$$1$$$ to $$$n$$$ you want to know the minimum the number of moves required to reach any position $$$j$$$ such that $$$a_j$$$ has the opposite parity from $$$a_i$$$ (i.e. if $$$a_i$$$ is odd then $$$a_j$$$ has to be even and vice versa).",
    "prob_desc_output_spec": "Print $$$n$$$ integers $$$d_1, d_2, \\dots, d_n$$$, where $$$d_i$$$ is the minimum the number of moves required to reach any position $$$j$$$ such that $$$a_j$$$ has the opposite parity from $$$a_i$$$ (i.e. if $$$a_i$$$ is odd then $$$a_j$$$ has to be even and vice versa) or -1 if it is impossible to reach such a position.",
    "prob_desc_input_spec": "The first line of the input contains one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) â€” the number of elements in $$$a$$$. The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le n$$$), where $$$a_i$$$ is the $$$i$$$-th element of $$$a$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_008.jsonl",
    "code_uid": "65a43994e1db0c200db1350790b7b34e",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"10\\n4 5 7 6 7 5 4 4 6 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "\nclass Solution(object):\n    def solve(self,array):\n        \"\"\"\n        :type arr: List[int]\n        :type start: int\n        :rtype: bool\n        \"\"\"\n        from collections import defaultdict,deque\n        D=defaultdict(list)\n        self.t_max=float('inf')\n        for i in range(0,len(array)):\n            if array[i]+i<len(array):\n                D[array[i]+i].append(i)\n            if i-array[i]>=0:\n                D[i-array[i]].append(i)\n                \n        close=[self.t_max]*len(array)\n        \n        Q=deque()\n        for target in D:\n            for source in D[target]:\n                if (array[target]+array[source])%2==1:\n                    close[source]=1\n                    Q.append((source,2))\n\n        while(Q):\n            #print Q\n            target,step=Q.popleft()\n            #print \"target,step:\",target,step\n            for source in D[target]:\n                if close[source]<=step:\n                    continue\n                    \n                if (array[target]+array[source])%2==1:\n                    close[source]=1\n                    continue\n                else:\n                    close[source]=min(close[source],step)\n                    Q.append((source,step+1))\n        \n        for i in range(0,len(close)):\n            if close[i]==self.t_max:\n                close[i]=-1\n        return close\n                \n\nif __name__==\"__main__\":\n  input_len=int(raw_input().strip())\n  array=map(int,raw_input().split(\" \"))\n  T=Solution()\n  ans= T.solve(array)\n  for i in range(0,len(ans)-1):\n  \tprint ans[i],\n  print ans[-1]\n\n",
    "prob_desc_created_at": "1576157700",
    "tags": [
        "graphs",
        "dfs and similar",
        "shortest paths"
    ],
    "hidden_unit_tests": ""
}