{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\", \"1\", \"1\"]",
    "src_uid": "7c0c80d86aa2a5904f8b95b5d8c31f44",
    "prob_desc_notes": "NoteFor the first example, there are two tuples: $$$(1,1,3)$$$ and $$$(1,2,3)$$$. The blue edges in the picture denote the $$$c_i$$$-th smallest edges for each vertex, which Boboniu chooses to go through.  For the third example, there's only one tuple: $$$(1,2,2,2)$$$.  The out-degree of vertex $$$u$$$ means the number of edges outgoing from $$$u$$$.",
    "prob_desc_description": "Boboniu has a directed graph with $$$n$$$ vertices and $$$m$$$ edges.The out-degree of each vertex is at most $$$k$$$.Each edge has an integer weight between $$$1$$$ and $$$m$$$. No two edges have equal weights.Boboniu likes to walk on the graph with some specific rules, which is represented by a tuple $$$(c_1,c_2,\\ldots,c_k)$$$. If he now stands on a vertex $$$u$$$ with out-degree $$$i$$$, then he will go to the next vertex by the edge with the $$$c_i$$$-th $$$(1\\le c_i\\le i)$$$ smallest weight among all edges outgoing from $$$u$$$.Now Boboniu asks you to calculate the number of tuples $$$(c_1,c_2,\\ldots,c_k)$$$ such that  $$$1\\le c_i\\le i$$$ for all $$$i$$$ ($$$1\\le i\\le k$$$).  Starting from any vertex $$$u$$$, it is possible to go back to $$$u$$$ in finite time by walking on the graph under the described rules. ",
    "prob_desc_output_spec": "Print one integer: the number of tuples.",
    "prob_desc_input_spec": "The first line contains three integers $$$n$$$, $$$m$$$ and $$$k$$$ ($$$2\\le n\\le 2\\cdot 10^5$$$, $$$2\\le m\\le \\min(2\\cdot 10^5,n(n-1) )$$$, $$$1\\le k\\le 9$$$). Each of the next $$$m$$$ lines contains three integers $$$u$$$, $$$v$$$ and $$$w$$$ $$$(1\\le u,v\\le n,u\\ne v,1\\le w\\le m)$$$, denoting an edge from $$$u$$$ to $$$v$$$ with weight $$$w$$$. It is guaranteed that there are no self-loops or multiple edges and each vertex has at least one edge starting from itself. It is guaranteed that the out-degree of each vertex is at most $$$k$$$ and no two edges have equal weight.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_048.jsonl",
    "code_uid": "3d669f1817c7a33b4132bed5f6728f4b",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 6 3\\n4 2 1\\n1 2 2\\n2 4 3\\n4 1 4\\n4 3 5\\n3 1 6\", \"5 5 1\\n1 4 1\\n5 1 2\\n2 5 3\\n4 3 4\\n3 2 5\", \"6 13 4\\n3 5 1\\n2 5 2\\n6 3 3\\n1 4 4\\n2 6 5\\n5 3 6\\n4 1 7\\n4 3 8\\n5 2 9\\n4 2 10\\n2 1 11\\n6 1 12\\n4 6 13\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\ninput = sys.stdin.buffer.readline\n \nn,m,k = map(int,input().split())\nedge = [[] for _ in range(n)]\n \ndg = 10**6\nMOD = 10**9+7\n \nfor _ in range(m):\n    u,v,w = map(int,input().split())\n    edge[u-1].append(w*dg + v-1)\n \nnum = [[] for i in range(k+1)]\n \none = set()\n \nfor i in range(n):\n    num[len(edge[i])].append(i)\n    edge[i].sort()\n \nq = [[0]*(k+1) for i in range(k+1)]\nq2 = [[0]*(k+1) for i in range(k+1)]\n\n \nfor i in range(1,k+1):\n    for j in range(i):\n        for e in num[i]:\n            go = edge[e][j]%dg\n            q[i][j] = (q[i][j] + ((go*go*go%MOD + go +122312)%MOD)*1213 + 12316)%MOD\n            q2[i][j] = (q2[i][j] + (go*go+12231312)*1213 + 12316)%MOD\n \ncor = 0\ncor2 = 0\nfor i in range(n):\n    cor = (cor + ((i*i*i%MOD + i +122312)%MOD)*1213 + 12316)%MOD \n    cor2 = (cor2 + (i*i+12231312)*1213 + 12316)%MOD\n\nfac = 1\nfor i in range(2,k+1):\n    fac *= i\n \n \n \nres = 0\nfor w in range(1,fac+1):\n \n    tmp = w\n    nxt = 0\n    nxt2 = 0\n    tank = []\n    for r in range(k,0,-1):\n        tmp,c = divmod(tmp,r)\n        tank.append(c)\n        nxt = (nxt + q[r][c])%MOD\n        nxt2 = (nxt2 + q2[r][c])%MOD\n    if nxt == cor and nxt2 == cor2:\n\n        res += 1\n        \n \nprint(res)",
    "prob_desc_created_at": "1597242900",
    "tags": [
        "hashing",
        "brute force",
        "graphs",
        "dfs and similar"
    ],
    "hidden_unit_tests": ""
}