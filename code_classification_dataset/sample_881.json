{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"10 9 3 4\", \"6 5 4 3 2 3 3 1 1 3 2 2 1 2 3\"]",
    "src_uid": "fe01ddb5bd5ef534a6a568adaf738151",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given a rooted tree with root in vertex 1. Each vertex is coloured in some colour.Let's call colour c dominating in the subtree of vertex v if there are no other colours that appear in the subtree of vertex v more times than colour c. So it's possible that two or more colours will be dominating in the subtree of some vertex.The subtree of vertex v is the vertex v and all other vertices that contains vertex v in each path to the root.For each vertex v find the sum of all dominating colours in the subtree of vertex v.",
    "prob_desc_output_spec": "Print n integers — the sums of dominating colours for each vertex.",
    "prob_desc_input_spec": "The first line contains integer n (1 ≤ n ≤ 105) — the number of vertices in the tree. The second line contains n integers ci (1 ≤ ci ≤ n), ci — the colour of the i-th vertex. Each of the next n - 1 lines contains two integers xj, yj (1 ≤ xj, yj ≤ n) — the edge of the tree. The first vertex is the root of the tree.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_004.jsonl",
    "code_uid": "e4aa09f18c3693b7eb68dddcffdd421a",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n1 2 3 4\\n1 2\\n2 3\\n2 4\", \"15\\n1 2 3 1 2 3 3 1 1 3 2 2 1 2 3\\n1 2\\n1 3\\n1 4\\n1 14\\n1 15\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\\n3 10\\n4 11\\n4 12\\n4 13\"]",
    "exec_outcome": "PASSED",
    "source_code": "def main():\n    import sys\n    from collections import deque\n    input = sys.stdin.readline\n\n    N = int(input())\n    color = list(map(int, input().split()))\n    color.insert(0, 0)\n    adj = [[] for _ in range(N+1)]\n    for _ in range(N-1):\n        a, b = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n\n    que = deque()\n    que.append(1)\n    seen = [-1] * (N+1)\n    seen[1] = 0\n    par = [0] * (N+1)\n    child = [[] for _ in range(N+1)]\n    seq = []\n    while que:\n        v = que.popleft()\n        seq.append(v)\n        for u in adj[v]:\n            if seen[u] == -1:\n                seen[u] = seen[v] + 1\n                par[u] = v\n                child[v].append(u)\n                que.append(u)\n    seq.reverse()\n\n    cnt = [{color[i]: 1} for i in range(N+1)]\n    cnt_size = [1] * (N+1)\n    dom_num = [1] * (N+1)\n    ans = [color[i] for i in range(N+1)]\n    for v in seq:\n        big = cnt[v]\n        size_big = cnt_size[v]\n        for u in child[v]:\n            small = cnt[u]\n            size_small = cnt_size[u]\n            if size_big < size_small:\n                small, big = big, small\n                dom_num[v] = dom_num[u]\n                ans[v] = ans[u]\n            size_big += size_small\n            for c in small:\n                if c not in big:\n                    big[c] = small[c]\n                else:\n                    big[c] += small[c]\n                cnt_size[v] += small[c]\n                if big[c] > dom_num[v]:\n                    dom_num[v] = big[c]\n                    ans[v] = c\n                elif big[c] == dom_num[v]:\n                    ans[v] += c\n        cnt_size[v] = size_big\n        cnt[v] = big\n    print(*ans[1:])\n    #print(child)\n    #print(cnt)\n    #print(cnt_size)\n\n\nif __name__ == '__main__':\n    main()\n",
    "prob_desc_created_at": "1448636400",
    "tags": [
        "data structures",
        "dsu",
        "dfs and similar",
        "trees"
    ],
    "hidden_unit_tests": ""
}