{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\\n3\\n3 1 4\", \"0\\n0\", \"2\\n2\\n1 2\"]",
    "src_uid": "5294cad0d35a6c8ed40a8322ba5fd7b1",
    "prob_desc_notes": "NoteIn the first example, you should solve problems 3, 1, and 4. In this case you'll spend 80 + 100 + 90 = 270 milliseconds, falling within the length of the exam, 300 milliseconds (and even leaving yourself 30 milliseconds to have a rest). Problems 3 and 1 will bring you a point each, while problem 4 won't. You'll score two points.In the second example, the length of the exam is catastrophically not enough to solve even a single problem.In the third example, you have just enough time to solve both problems in 42 + 58 = 100 milliseconds and hand your solutions to the teacher with a smile.",
    "prob_desc_description": "You are preparing for an exam on scheduling theory. The exam will last for exactly T milliseconds and will consist of n problems. You can either solve problem i in exactly ti milliseconds or ignore it and spend no time. You don't need time to rest after solving a problem, either.Unfortunately, your teacher considers some of the problems too easy for you. Thus, he assigned an integer ai to every problem i meaning that the problem i can bring you a point to the final score only in case you have solved no more than ai problems overall (including problem i).Formally, suppose you solve problems p1, p2, ..., pk during the exam. Then, your final score s will be equal to the number of values of j between 1 and k such that k ≤ apj.You have guessed that the real first problem of the exam is already in front of you. Therefore, you want to choose a set of problems to solve during the exam maximizing your final score in advance. Don't forget that the exam is limited in time, and you must have enough time to solve all chosen problems. If there exist different sets of problems leading to the maximum final score, any of them will do.",
    "prob_desc_output_spec": "In the first line, output a single integer s — your maximum possible final score. In the second line, output a single integer k (0 ≤ k ≤ n) — the number of problems you should solve. In the third line, output k distinct integers p1, p2, ..., pk (1 ≤ pi ≤ n) — the indexes of problems you should solve, in any order. If there are several optimal sets of problems, you may output any of them.",
    "prob_desc_input_spec": "The first line contains two integers n and T (1 ≤ n ≤ 2·105; 1 ≤ T ≤ 109) — the number of problems in the exam and the length of the exam in milliseconds, respectively. Each of the next n lines contains two integers ai and ti (1 ≤ ai ≤ n; 1 ≤ ti ≤ 104). The problems are numbered from 1 to n.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_024.jsonl",
    "code_uid": "36a423ee56d7d0ff7d7de729ac357ca3",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 300\\n3 100\\n4 150\\n4 80\\n2 90\\n2 300\", \"2 100\\n1 787\\n2 788\", \"2 100\\n2 42\\n2 58\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin, stdout\nfrom itertools import repeat\ndef main():\n    n, T = map(int, stdin.readline().split())\n    dat = map(int, stdin.read().split(), repeat(10, 2 * n))\n    a = [(dat[2*i+1], dat[2*i], i + 1) for i in xrange(n)]\n    a.sort()\n    lo, hi = 0, n + 1\n    while lo + 1 < hi:\n        mid = (lo + hi) / 2\n        k = 0\n        c = mid\n        for t, x, i in a:\n            if not c:\n                break\n            if x >= mid:\n                k += t\n                c -= 1\n        if not c and k <= T:\n            lo = mid\n        else:\n            hi = mid\n    ans = []\n    c = lo\n    for t, x, i in a:\n        if not c:\n            break\n        if x >= lo:\n            ans.append(i)\n            c -= 1\n    print lo\n    print len(ans)\n    stdout.write(' '.join(map(str, ans)))\n    stdout.write('\\n')\nmain()\n",
    "prob_desc_created_at": "1515422700",
    "tags": [
        "greedy",
        "sortings",
        "data structures",
        "binary search",
        "brute force"
    ],
    "hidden_unit_tests": ""
}