{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"-1\", \"2\"]",
    "src_uid": "1b83529ea4057c76ae8483f8aa506c56",
    "prob_desc_notes": null,
    "prob_desc_description": "A newspaper is published in Walrusland. Its heading is s1, it consists of lowercase Latin letters. Fangy the little walrus wants to buy several such newspapers, cut out their headings, glue them one to another in order to get one big string. After that walrus erase several letters from this string in order to get a new word s2. It is considered that when Fangy erases some letter, there's no whitespace formed instead of the letter. That is, the string remains unbroken and it still only consists of lowercase Latin letters.For example, the heading is \"abc\". If we take two such headings and glue them one to the other one, we get \"abcabc\". If we erase the letters on positions 1 and 5, we get a word \"bcac\".Which least number of newspaper headings s1 will Fangy need to glue them, erase several letters and get word s2?",
    "prob_desc_output_spec": "If it is impossible to get the word s2 in the above-described manner, print \"-1\" (without the quotes). Otherwise, print the least number of newspaper headings s1, which Fangy will need to receive the word s2.",
    "prob_desc_input_spec": "The input data contain two lines. The first line contain the heading s1, the second line contains the word s2. The lines only consist of lowercase Latin letters (1 ≤ |s1| ≤ 104, 1 ≤ |s2| ≤ 106).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_046.jsonl",
    "code_uid": "665f65b7d658042e5783f4b435345ed2",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"abc\\nxyz\", \"abcd\\ndabc\"]",
    "exec_outcome": "PASSED",
    "source_code": "from bisect import bisect_right as bl\ns1, s2 = input(), input()\n\ntry:\n  inv_map = {}\n  for k, v in enumerate(s1):\n    inv_map[v] = inv_map.get(v, [])\n    inv_map[v].append(k)\n\n  pointer = inv_map[s2[0]][0]\n  count = 1\n  for i in s2[1:]:\n    pos = bl(inv_map[i],pointer)\n    if len(inv_map[i])==pos:\n      count+=1\n      pointer = inv_map[i][0]\n      continue\n    pointer = inv_map[i][pos]\n  print(count)\nexcept:\n  print(-1)\n",
    "prob_desc_created_at": "1308582000",
    "tags": [
        "greedy",
        "strings"
    ],
    "hidden_unit_tests": ""
}