{
    "prob_desc_time_limit": "4 seconds",
    "prob_desc_sample_outputs": "[\"11\", \"5\"]",
    "src_uid": "dc93c41e70c7eb82af407359b194d28a",
    "prob_desc_notes": "NoteIn the first example Polycarp can buy travel card for the route \"BerBank  University\" and spend 8 burles. Note that his second trip \"University\"  \"BerMall\" was made after transshipment, so for this trip Polycarp payed 3 burles. So the minimum total sum equals to 8 + 3 = 11 burles.In the second example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.",
    "prob_desc_description": "In the evening Polycarp decided to analyze his today's travel expenses on public transport.The bus system in the capital of Berland is arranged in such a way that each bus runs along the route between two stops. Each bus has no intermediate stops. So each of the buses continuously runs along the route from one stop to the other and back. There is at most one bus running between a pair of stops.Polycarp made n trips on buses. About each trip the stop where he started the trip and the the stop where he finished are known. The trips follow in the chronological order in Polycarp's notes.It is known that one trip on any bus costs a burles. In case when passenger makes a transshipment the cost of trip decreases to b burles (b &lt; a). A passenger makes a transshipment if the stop on which he boards the bus coincides with the stop where he left the previous bus. Obviously, the first trip can not be made with transshipment.For example, if Polycarp made three consecutive trips: \"BerBank\"  \"University\", \"University\"  \"BerMall\", \"University\"  \"BerBank\", then he payed a + b + a = 2a + b burles. From the BerBank he arrived to the University, where he made transshipment to the other bus and departed to the BerMall. Then he walked to the University and returned to the BerBank by bus.Also Polycarp can buy no more than k travel cards. Each travel card costs f burles. The travel card for a single bus route makes free of charge any trip by this route (in both directions). Once purchased, a travel card can be used any number of times in any direction.What is the smallest amount of money Polycarp could have spent today if he can buy no more than k travel cards?",
    "prob_desc_output_spec": "Print the smallest amount of money Polycarp could have spent today, if he can purchase no more than k travel cards.",
    "prob_desc_input_spec": "The first line contains five integers n, a, b, k, f (1 ≤ n ≤ 300, 1 ≤ b &lt; a ≤ 100, 0 ≤ k ≤ 300, 1 ≤ f ≤ 1000) where:   n — the number of Polycarp trips,  a — the cost of a regualar single trip,  b — the cost of a trip after a transshipment,  k — the maximum number of travel cards Polycarp can buy,  f — the cost of a single travel card.  The following n lines describe the trips in the chronological order. Each line contains exactly two different words separated by a single space — the name of the start stop and the name of the finish stop of the trip. All names consist of uppercase and lowercase English letters and have lengths between 1 to 20 letters inclusive. Uppercase and lowercase letters should be considered different.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_020.jsonl",
    "code_uid": "36c3079dda728fc9a05f5e95d041a1d5",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 5 3 1 8\\nBerBank University\\nUniversity BerMall\\nUniversity BerBank\", \"4 2 1 300 1000\\na A\\nA aa\\naa AA\\nAA a\"]",
    "exec_outcome": "PASSED",
    "source_code": "def main():\n  trips, reg, cheap, cards, card_cost = map(int, input().split())\n\n  costs = []\n  indexes = {}\n  total = 0\n  last = \"\"\n\n  for i in range(trips):\n    a, b = input().split()\n    pair = (min(a, b), max(a, b))\n\n    if pair in indexes:\n      index = indexes[pair]\n    else:\n      costs.append(0)\n      indexes[pair] = len(costs) - 1\n      index = len(costs) - 1\n\n    total += (cheap if a == last else reg)\n    costs[index] += (cheap if a == last else reg)\n    last = b\n\n  costs = sorted(costs, reverse = True)\n\n  for c in costs:\n    if c < card_cost or cards <= 0:\n      break\n    total -= c\n    total += card_cost\n    cards -= 1\n\n  print(total)\n\nmain()\n",
    "prob_desc_created_at": "1505739900",
    "tags": [
        "implementation",
        "sortings",
        "greedy"
    ],
    "hidden_unit_tests": ""
}