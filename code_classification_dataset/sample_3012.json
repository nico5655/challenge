{
    "prob_desc_time_limit": "1.5 seconds",
    "prob_desc_sample_outputs": "[\"10\\n3 2 3 1\\n8\\n2 1 3 1\"]",
    "src_uid": "3daa5e0aed7d18479171b3ad5eafb5d1",
    "prob_desc_notes": null,
    "prob_desc_description": "Drazil likes heap very much. So he created a problem with heap:There is a max heap with a height $$$h$$$ implemented on the array. The details of this heap are the following:This heap contains exactly $$$2^h - 1$$$ distinct positive non-zero integers. All integers are distinct. These numbers are stored in the array $$$a$$$ indexed from $$$1$$$ to $$$2^h-1$$$. For any $$$1 &lt; i &lt; 2^h$$$, $$$a[i] &lt; a[\\left \\lfloor{\\frac{i}{2}}\\right \\rfloor]$$$.Now we want to reduce the height of this heap such that the height becomes $$$g$$$ with exactly $$$2^g-1$$$ numbers in heap. To reduce the height, we should perform the following action $$$2^h-2^g$$$ times:Choose an index $$$i$$$, which contains an element and call the following function $$$f$$$ in index $$$i$$$:Note that we suppose that if $$$a[i]=0$$$, then index $$$i$$$ don't contain an element.After all operations, the remaining $$$2^g-1$$$ element must be located in indices from $$$1$$$ to $$$2^g-1$$$. Now Drazil wonders what's the minimum possible sum of the remaining $$$2^g-1$$$ elements. Please find this sum and find a sequence of the function calls to achieve this value.",
    "prob_desc_output_spec": "For each test case, print two lines. The first line should contain one integer denoting the minimum sum after reducing the height of heap to $$$g$$$. The second line should contain $$$2^h - 2^g$$$ integers $$$v_1, v_2, \\ldots, v_{2^h-2^g}$$$. In $$$i$$$-th operation $$$f(v_i)$$$ should be called.",
    "prob_desc_input_spec": "The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 70\\,000$$$): the number of test cases. Each test case contain two lines. The first line contains two integers $$$h$$$ and $$$g$$$ ($$$1 \\leq g &lt; h \\leq 20$$$). The second line contains $$$n = 2^h-1$$$ distinct positive integers $$$a[1], a[2], \\ldots, a[n]$$$ ($$$1 \\leq a[i] &lt; 2^{20}$$$). For all $$$i$$$ from $$$2$$$ to $$$2^h - 1$$$, $$$a[i] &lt; a[\\left \\lfloor{\\frac{i}{2}}\\right \\rfloor]$$$. The total sum of $$$n$$$ is less than $$$2^{20}$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_038.jsonl",
    "code_uid": "bff220a5f8d9b2a32ae83e5a75c771e1",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n3 2\\n7 6 3 5 4 2 1\\n3 2\\n7 6 5 4 3 2 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import io, os\ninput = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\nT = int(input())\nfor _ in range(T):\n    H, G = map(int, input().split())\n    A = [0] + list(map(int, input().split()))\n    N = len(A)\n    target_N = 2**G - 1\n    target_ans_len = 2**H - 2**G\n    Ans = []\n    Roots = [True] * (N+1)\n    idx_Roots = 1\n    while True:\n        idx = idx_Roots\n        st = []\n        while True:\n            idx_l = idx<<1\n            idx_r = idx_l+1\n            st.append((idx, A[idx]))\n            if idx_l >= N or A[idx_l] == A[idx_r] == 0:\n                A[idx] = 0\n                break\n            elif A[idx_l] > A[idx_r]:\n                A[idx] = A[idx_l]\n                idx = idx_l\n            else:\n                A[idx] = A[idx_r]\n                idx = idx_r\n        if st[-1][0] <= target_N:\n            for idx, a in st:\n                A[idx] = a\n                Roots[idx] = False\n            while not Roots[idx_Roots]:\n                idx_Roots += 1\n        else:\n            Ans.append(idx_Roots)\n            if len(Ans) == target_ans_len:\n                break\n    print(sum(A))\n    print(\" \".join(map(str, Ans)))\n",
    "prob_desc_created_at": "1585924500",
    "tags": [
        "data structures",
        "constructive algorithms",
        "implementation",
        "greedy"
    ],
    "hidden_unit_tests": ""
}