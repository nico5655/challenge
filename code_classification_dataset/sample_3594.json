{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"13\", \"44\", \"4\"]",
    "src_uid": "99cf10673cb275ad3b90bcd3757ecd47",
    "prob_desc_notes": null,
    "prob_desc_description": "Dima liked the present he got from Inna very much. He liked the present he got from Seryozha even more. Dima felt so grateful to Inna about the present that he decided to buy her n hares. Inna was very happy. She lined up the hares in a row, numbered them from 1 to n from left to right and started feeding them with carrots. Inna was determined to feed each hare exactly once. But in what order should she feed them?Inna noticed that each hare radiates joy when she feeds it. And the joy of the specific hare depends on whether Inna fed its adjacent hares before feeding it. Inna knows how much joy a hare radiates if it eats when either both of his adjacent hares are hungry, or one of the adjacent hares is full (that is, has been fed), or both of the adjacent hares are full. Please note that hares number 1 and n don't have a left and a right-adjacent hare correspondingly, so they can never have two full adjacent hares.Help Inna maximize the total joy the hares radiate. :)",
    "prob_desc_output_spec": "In a single line, print the maximum possible total joy of the hares Inna can get by feeding them.",
    "prob_desc_input_spec": "The first line of the input contains integer n (1 ≤ n ≤ 3000) — the number of hares. Then three lines follow, each line has n integers. The first line contains integers a1 a2 ... an. The second line contains b1, b2, ..., bn. The third line contains c1, c2, ..., cn. The following limits are fulfilled: 0 ≤ ai, bi, ci ≤ 105. Number ai in the first line shows the joy that hare number i gets if his adjacent hares are both hungry. Number bi in the second line shows the joy that hare number i radiates if he has exactly one full adjacent hare. Number сi in the third line shows the joy that hare number i radiates if both his adjacent hares are full.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_072.jsonl",
    "code_uid": "e77f18100c9a1e083fa69725faa1c510",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n1 2 3 4\\n4 3 2 1\\n0 1 1 0\", \"7\\n8 5 7 6 1 8 9\\n2 7 9 5 4 3 1\\n2 3 3 4 1 1 3\", \"3\\n1 1 1\\n1 2 1\\n1 1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "\n\nclass Solution():\n\tdef max_radiance(n, a, b, c):\n\t\tdp = [[0 for i in range(2)] for j in range(n+1)]\n\t\tdp[n-1][0] = a[n-1]\n\t\tdp[n-1][1] = b[n-1]\n\n\n\t\t# dp[i][0] - Max radiance for range [i:] when none on the left is yet fed\n\t\t# dp[i][1] - Max radiance for range [i:] when one of the left is fed\n\t\t\n\t\tfor i in range(n-2, -1, -1):\n\t\t\tdp[i][0] = max(a[i]+dp[i+1][1], b[i]+dp[i+1][0])\n\t\t\tdp[i][1] = max(b[i]+dp[i+1][1], c[i]+dp[i+1][0])\n\n\t\treturn dp[0][0]\n\nn = int(input())\n\na = list(map(int, input().strip(' ').split(' ')))\nb = list(map(int, input().strip(' ').split(' ')))\nc = list(map(int, input().strip(' ').split(' ')))\n\nprint(Solution.max_radiance(n, a, b, c))\n",
    "prob_desc_created_at": "1382715000",
    "tags": [
        "dp",
        "greedy"
    ],
    "hidden_unit_tests": ""
}