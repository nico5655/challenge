{
    "prob_desc_time_limit": "1.5 seconds",
    "prob_desc_sample_outputs": "[\"1\\n3\\n3\"]",
    "src_uid": "107773724bd8a898f9be8fb3f9ee9ac9",
    "prob_desc_notes": "NoteFor first test case, $$$1$$$ is the only number and therefore lonely.For second test case where $$$n=5$$$, numbers $$$1$$$, $$$3$$$ and $$$5$$$ are lonely.For third test case where $$$n=10$$$, numbers $$$1$$$, $$$5$$$ and $$$7$$$ are lonely.",
    "prob_desc_description": "In number world, two different numbers are friends if they have a lot in common, but also each one has unique perks.More precisely, two different numbers $$$a$$$ and $$$b$$$ are friends if $$$gcd(a,b)$$$, $$$\\frac{a}{gcd(a,b)}$$$, $$$\\frac{b}{gcd(a,b)}$$$ can form sides of a triangle.Three numbers $$$a$$$, $$$b$$$ and $$$c$$$ can form sides of a triangle if $$$a + b &gt; c$$$, $$$b + c &gt; a$$$ and $$$c + a &gt; b$$$.In a group of numbers, a number is lonely if it doesn't have any friends in that group.Given a group of numbers containing all numbers from $$$1, 2, 3, ..., n$$$, how many numbers in that group are lonely?",
    "prob_desc_output_spec": "For each test case, print the answer on separate lines: number of lonely numbers in group $$$1, 2, 3, ..., n_i$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ $$$(1 \\leq t \\leq 10^6)$$$ - number of test cases. On next line there are $$$t$$$ numbers, $$$n_i$$$ $$$(1 \\leq n_i \\leq 10^6)$$$ - meaning that in case $$$i$$$ you should solve for numbers $$$1, 2, 3, ..., n_i$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_007.jsonl",
    "code_uid": "c1129e2b38ea6d6b71930c4bc4dc5f66",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n1 5 10\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin\n\n\ndef count_prime(n):\n    for i in range(2, n):\n        if prim[i] == 1:\n            if i * i < Max:\n                prim[i * i] = -1\n            for j in range(i * i + i, n, i):\n                prim[j] = 0\n\n    for i in range(2, n):\n        prim[i] += prim[i - 1]\n\n\nn, a, Max = int(input()), [int(x) for x in stdin.readline().split()], 1000001\nprim = [1] * Max\ncount_prime(Max)\nprint('\\n'.join(map(str, [prim[i] for i in a])))\n",
    "prob_desc_created_at": "1601903100",
    "tags": [
        "two pointers",
        "binary search",
        "number theory",
        "math"
    ],
    "hidden_unit_tests": ""
}