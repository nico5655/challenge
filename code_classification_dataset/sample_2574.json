{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2 1\", \"1 3 4 2\"]",
    "src_uid": "add2285f3f710eb41185d6a83e44b37a",
    "prob_desc_notes": null,
    "prob_desc_description": "Hiking club \"Up the hill\" just returned from a walk. Now they are trying to remember which hills they've just walked through.It is known that there were N stops, all on different integer heights between 1 and N kilometers (inclusive) above the sea level. On the first day they've traveled from the first stop to the second stop, on the second day they've traveled from the second to the third and so on, and on the last day they've traveled from the stop N - 1 to the stop N and successfully finished their expedition.They are trying to find out which heights were their stops located at. They have an entry in a travel journal specifying how many days did they travel up the hill, and how many days did they walk down the hill.Help them by suggesting some possible stop heights satisfying numbers from the travel journal.",
    "prob_desc_output_spec": "Output N space-separated distinct integers from 1 to N inclusive, denoting possible heights of the stops in order of visiting.",
    "prob_desc_input_spec": "In the first line there is an integer non-negative number A denoting the number of days of climbing up the hill. Second line contains an integer non-negative number B — the number of days of walking down the hill (A + B + 1 = N, 1 ≤ N ≤ 100 000).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1000,
    "file_name": "train_025.jsonl",
    "code_uid": "60b340ced7c4399ba691b9285cda156c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"0\\n1\", \"2\\n1\"]",
    "exec_outcome": "PASSED",
    "source_code": "a = int(input())  # ������� ���� �����������\nb = int(input())  # ������� ���� ����������\nn = a+b+1  # �����\nans = [i for i in range(1, n+1)]  # ������ ������������ ������������������\n# �������: ������ ������� ��������� ��������, ���� b �� <= 0\n# ���� ����� ������� ��������, ����� �������� ���������� ��������\n\nif b % 2 == 1:\n    ans[n//2-1] = ans[n//2-1] + ans[n//2]\n    ans[n//2] = ans[n//2-1] - ans[n//2]\n    ans[n//2-1] = ans[n//2-1] - ans[n//2]\n    b -= 1\n    \nleft = 0\nright = n-1\n\nwhile b > 0:\n    ans[left] = ans[left]+ans[right]\n    ans[right] = ans[left] - ans[right]\n    ans[left] = ans[left] - ans[right]\n    left += 1\n    right -= 1\n    b -= 2\n    \nfor i in range(n-1):\n    print(ans[i], end = ' ')\nprint(ans[n-1])",
    "prob_desc_created_at": "1416519000",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "hidden_unit_tests": ""
}