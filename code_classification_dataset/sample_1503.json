{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\\n1 1\\n1 2\", \"3\\n1 1\\n1 3\\n3 1\\n3 3\"]",
    "src_uid": "6bd7cab93a779e066af39a671aba3239",
    "prob_desc_notes": "NoteIn the first example, you can't place the two pieces on a $$$1\\times1$$$ chessboard without breaking the rule. But you can place two pieces on a $$$2\\times2$$$ chessboard like this:In the second example, you can't place four pieces on a $$$2\\times2$$$ chessboard without breaking the rule. For example, if you place the pieces like this:then $$$|r_1-r_3|+|c_1-c_3|=|1-2|+|1-1|=1$$$, $$$|1-3|=2$$$, $$$1&lt;2$$$; and $$$|r_1-r_4|+|c_1-c_4|=|1-2|+|1-2|=2$$$, $$$|1-4|=3$$$, $$$2&lt;3$$$. It doesn't satisfy the rule.However, on a $$$3\\times3$$$ chessboard, you can place four pieces like this:",
    "prob_desc_description": "Nauuo is a girl who loves playing chess.One day she invented a game by herself which needs $$$n$$$ chess pieces to play on a $$$m\\times m$$$ chessboard. The rows and columns are numbered from $$$1$$$ to $$$m$$$. We denote a cell on the intersection of the $$$r$$$-th row and $$$c$$$-th column as $$$(r,c)$$$.The game's goal is to place $$$n$$$ chess pieces numbered from $$$1$$$ to $$$n$$$ on the chessboard, the $$$i$$$-th piece lies on $$$(r_i,\\,c_i)$$$, while the following rule is satisfied: for all pairs of pieces $$$i$$$ and $$$j$$$, $$$|r_i-r_j|+|c_i-c_j|\\ge|i-j|$$$. Here $$$|x|$$$ means the absolute value of $$$x$$$.However, Nauuo discovered that sometimes she couldn't find a solution because the chessboard was too small.She wants to find the smallest chessboard on which she can put $$$n$$$ pieces according to the rules.She also wonders how to place the pieces on such a chessboard. Can you help her?",
    "prob_desc_output_spec": "The first line contains a single integer — the minimum value of $$$m$$$, where $$$m$$$ is the length of sides of the suitable chessboard. The $$$i$$$-th of the next $$$n$$$ lines contains two integers $$$r_i$$$ and $$$c_i$$$ ($$$1\\le r_i,c_i\\le m$$$) — the coordinates of the $$$i$$$-th chess piece. If there are multiple answers, print any.",
    "prob_desc_input_spec": "The only line contains a single integer $$$n$$$ ($$$1\\le n\\le 1000$$$) — the number of chess pieces for the game.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_009.jsonl",
    "code_uid": "f1ba5e50b3e3a12d18c0277d2f977acc",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\", \"4\"]",
    "exec_outcome": "PASSED",
    "source_code": "#import resource\nimport sys\n#resource.setrlimit(resource.RLIMIT_STACK, [0x100000000, resource.RLIM_INFINITY])\n#import threading\n#threading.Thread(target=main).start()\n#threading.stack_size(2**26)\n#sys.setrecursionlimit(10**6)\nmod=(10**9)+7\nfact=[1]\n#for i in range(1,100001):\n#    fact.append((fact[-1]*i)%mod)\n#ifact=[0]*10000001\n#ifact[10000000]=pow(fact[10000000],mod-2,mod)\n#for i in range(10000000,0,-1):\n#    ifact[i-1]=(i*ifact[i])%mod\nfrom sys import stdin, stdout\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nimport itertools\nimport math\nimport heapq\nfrom random import randint as rn\nfrom Queue import Queue as Q\ndef modinv(n,p):\n    return pow(n,p-2,p)\ndef ncr(n,r,p):\n    t=((fact[n])*((ifact[r]*ifact[n-r])%p))%p\n    return t\ndef ain():\n    return map(int,sin().split())\ndef sin():\n    return stdin.readline()\ndef GCD(x,y):\n    while(y):\n        x, y = y, x % y\n    return x\ndef isprime(x):\n    if(x==1):\n        return False\n    elif(x<4):\n        return True\n    for i in range(2,int(math.sqrt(x))+1):\n        if(x%i==0):\n            return False\n    return True\n\"\"\"**************************************************************************\"\"\"\nn=input()\nk=(n+2)/2\nprint k\nfor i in range(1,k+1):\n    stdout.write(\"1 \"+str(i)+\"\\n\")\np=n-k\nt=k-p+1\nfor i in range(t,k+1):\n    stdout.write(str(k)+\" \"+str(i)+\"\\n\")\n",
    "prob_desc_created_at": "1559909100",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "hidden_unit_tests": ""
}