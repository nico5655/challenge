{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1\\n3\\n2\", \"4\\nNothing\\n3\"]",
    "src_uid": "1f6675459b1eca7a3fdb422f03f91563",
    "prob_desc_notes": null,
    "prob_desc_description": "Programmer Sasha has recently begun to study data structures. His coach Stas told him to solve the problem of finding a minimum on the segment of the array in , which Sasha coped with. For Sasha not to think that he had learned all, Stas gave him a new task. For each segment of the fixed length Sasha must find the maximum element of those that occur on the given segment exactly once. Help Sasha solve this problem. ",
    "prob_desc_output_spec": "Print n–k + 1 numbers, one per line: on the i-th line print of the maximum number of those numbers from the subarray ai ai + 1 … ai + k - 1 that occur in this subarray exactly 1 time. If there are no such numbers in this subarray, print \"Nothing\".",
    "prob_desc_input_spec": "The first line contains two positive integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ n) — the number of array elements and the length of the segment.  Then follow n lines: the i-th one contains a single number ai ( - 109 ≤ ai ≤ 109). ",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_006.jsonl",
    "code_uid": "da9bbdd45c7d66ddf9166ce6d0e178c9",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 3\\n1\\n2\\n2\\n3\\n3\", \"6 4\\n3\\n3\\n3\\n4\\n4\\n2\"]",
    "exec_outcome": "PASSED",
    "source_code": "import heapq\ninf=10**9\nn,k=map(int,input().split())\na,d=[],{}\nfor i in range(n):\n    a.append(-int(input()))\n    d[a[-1]]=0\nfor i in range(k):d[a[i]]+=1\nh=[inf]\nfor x in d:\n    if d[x]==1:\n        h.append(x)\nheapq.heapify(h)\nd[inf]=1\nprint (-h[0] if h[0]<inf else 'Nothing')\nfor x,y in zip(a,a[k:]):\n    d[x]-=1\n    d[y]+=1\n    if d[x]==1: heapq.heappush(h,x)\n    if d[y]==1: heapq.heappush(h,y)\n    while d[h[0]]!=1: heapq.heappop(h)\n    print (-h[0] if h[0]<inf else 'Nothing')\n    \n",
    "prob_desc_created_at": "1300809600",
    "tags": [
        "data structures",
        "implementation"
    ],
    "hidden_unit_tests": ""
}