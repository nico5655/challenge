{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2 0 0 5 \\n0 2 0 6 5 \\n-1\\n0 6 0 7 0 8 0 9\\n-1\"]",
    "src_uid": "6628bd89b4d4fdfa90d2357f7cc1b795",
    "prob_desc_notes": null,
    "prob_desc_description": "Monocarp and Polycarp are learning new programming techniques. Now they decided to try pair programming.It's known that they have worked together on the same file for $$$n + m$$$ minutes. Every minute exactly one of them made one change to the file. Before they started, there were already $$$k$$$ lines written in the file.Every minute exactly one of them does one of two actions: adds a new line to the end of the file or changes one of its lines.Monocarp worked in total for $$$n$$$ minutes and performed the sequence of actions $$$[a_1, a_2, \\dots, a_n]$$$. If $$$a_i = 0$$$, then he adds a new line to the end of the file. If $$$a_i &gt; 0$$$, then he changes the line with the number $$$a_i$$$. Monocarp performed actions strictly in this order: $$$a_1$$$, then $$$a_2$$$, ..., $$$a_n$$$.Polycarp worked in total for $$$m$$$ minutes and performed the sequence of actions $$$[b_1, b_2, \\dots, b_m]$$$. If $$$b_j = 0$$$, then he adds a new line to the end of the file. If $$$b_j &gt; 0$$$, then he changes the line with the number $$$b_j$$$. Polycarp performed actions strictly in this order: $$$b_1$$$, then $$$b_2$$$, ..., $$$b_m$$$.Restore their common sequence of actions of length $$$n + m$$$ such that all actions would be correct — there should be no changes to lines that do not yet exist. Keep in mind that in the common sequence Monocarp's actions should form the subsequence $$$[a_1, a_2, \\dots, a_n]$$$ and Polycarp's — subsequence $$$[b_1, b_2, \\dots, b_m]$$$. They can replace each other at the computer any number of times.Let's look at an example. Suppose $$$k = 3$$$. Monocarp first changed the line with the number $$$2$$$ and then added a new line (thus, $$$n = 2, \\: a = [2, 0]$$$). Polycarp first added a new line and then changed the line with the number $$$5$$$ (thus, $$$m = 2, \\: b = [0, 5]$$$).Since the initial length of the file was $$$3$$$, in order for Polycarp to change line number $$$5$$$ two new lines must be added beforehand. Examples of correct sequences of changes, in this case, would be $$$[0, 2, 0, 5]$$$ and $$$[2, 0, 0, 5]$$$. Changes $$$[0, 0, 5, 2]$$$ (wrong order of actions) and $$$[0, 5, 2, 0]$$$ (line $$$5$$$ cannot be edited yet) are not correct.",
    "prob_desc_output_spec": "For each test case print any correct common sequence of Monocarp's and Polycarp's actions of length $$$n + m$$$ or -1 if such sequence doesn't exist.",
    "prob_desc_input_spec": "The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 1000$$$). Then $$$t$$$ test cases follow. Before each test case, there is an empty line. Each test case contains three lines. The first line contains three integers $$$k$$$, $$$n$$$, $$$m$$$ ($$$0 \\le k \\le 100$$$, $$$1 \\le n, m \\le 100$$$) — the initial number of lines in file and lengths of Monocarp's and Polycarp's sequences of changes respectively. The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$0 \\le a_i \\le 300$$$). The third line contains $$$m$$$ integers $$$b_1, b_2, \\dots, b_m$$$ ($$$0 \\le b_j \\le 300$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_103.jsonl",
    "code_uid": "ddec8a0df0525e77ae4dbefb9b720b0d",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n\\n3 2 2\\n2 0\\n0 5\\n\\n4 3 2\\n2 0 5\\n0 6\\n\\n0 2 2\\n1 0\\n2 3\\n\\n5 4 4\\n6 0 8 0\\n0 7 0 9\\n\\n5 4 1\\n8 7 8 0\\n0\"]",
    "exec_outcome": "PASSED",
    "source_code": "t = int(input())\r\nfor _ in range(t):\r\n    input()\r\n    k,n,m = map(int, input().split())\r\n    a = list(map(int, input().split()))\r\n    b = list(map(int, input().split()))\r\n    c = a + b\r\n    i=0\r\n    j=0\r\n    out = []\r\n    while i < n or j < m:\r\n        if i < n and j < m:\r\n            if a[i] == 0:\r\n                out.append(a[i])\r\n                i += 1\r\n                k += 1\r\n            elif b[j] == 0:\r\n                out.append(b[j])\r\n                j += 1\r\n                k += 1\r\n            else:\r\n                if a[i] < b[j] and a[i] <= k:\r\n                    out.append(a[i])\r\n                    i += 1\r\n                elif a[i] >= b[j] and b[j] <= k:\r\n                    out.append(b[j])\r\n                    j += 1\r\n                else:\r\n                    print(-1)\r\n                    break\r\n        elif i < n:\r\n            if a[i] == 0:\r\n                out.append(a[i])\r\n                i += 1\r\n                k += 1\r\n            else:\r\n                if a[i] <= k:\r\n                    out.append(a[i])\r\n                    i += 1\r\n                else:\r\n                    print(-1)\r\n                    break\r\n        elif j < m:\r\n            if b[j] == 0:\r\n                out.append(b[j])\r\n                j += 1\r\n                k += 1\r\n            else:\r\n                if b[j] <= k:\r\n                    out.append(b[j])\r\n                    j += 1\r\n                else:\r\n                    print(-1)\r\n                    break\r\n        if len(out)==n+m:\r\n            for i in out:\r\n                print(i, end=\" \")\r\n            print()\r\n",
    "prob_desc_created_at": "1625927700",
    "tags": [
        "greedy",
        "two pointers"
    ],
    "hidden_unit_tests": ""
}