{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"54\", \"1010\", \"1009\", \"41\", \"52\", \"10\"]",
    "src_uid": "aa3b5895046ed34e89d5fcc3264b3944",
    "prob_desc_notes": "NoteIn the first example you can choose hits with numbers $$$[1, 3, 4, 5, 6, 7]$$$ with the total damage $$$1 + 16 + 18 + 7 + 2 + 10 = 54$$$.In the second example you can choose all hits so the total damage is $$$2 + 4 + 1 + 3 + 1000 = 1010$$$.In the third example you can choose all hits expect the third one so the total damage is $$$2 + 4 + 3 + 1000 = 1009$$$.In the fourth example you can choose hits with numbers $$$[2, 3, 6, 8]$$$. Only this way you can reach the maximum total damage $$$15 + 2 + 8 + 16 = 41$$$.In the fifth example you can choose only hits with numbers $$$[2, 4, 6]$$$ with the total damage $$$18 + 19 + 15 = 52$$$.In the sixth example you can change either first hit or the second hit (it does not matter) with the total damage $$$10$$$.",
    "prob_desc_description": "You are playing a new famous fighting game: Kortal Mombat XII. You have to perform a brutality on your opponent's character.You are playing the game on the new generation console so your gamepad have $$$26$$$ buttons. Each button has a single lowercase Latin letter from 'a' to 'z' written on it. All the letters on buttons are pairwise distinct.You are given a sequence of hits, the $$$i$$$-th hit deals $$$a_i$$$ units of damage to the opponent's character. To perform the $$$i$$$-th hit you have to press the button $$$s_i$$$ on your gamepad. Hits are numbered from $$$1$$$ to $$$n$$$.You know that if you press some button more than $$$k$$$ times in a row then it'll break. You cherish your gamepad and don't want to break any of its buttons.To perform a brutality you have to land some of the hits of the given sequence. You are allowed to skip any of them, however changing the initial order of the sequence is prohibited. The total damage dealt is the sum of $$$a_i$$$ over all $$$i$$$ for the hits which weren't skipped.Note that if you skip the hit then the counter of consecutive presses the button won't reset.Your task is to skip some hits to deal the maximum possible total damage to the opponent's character and not break your gamepad buttons.",
    "prob_desc_output_spec": "Print one integer $$$dmg$$$ — the maximum possible damage to the opponent's character you can deal without breaking your gamepad buttons.",
    "prob_desc_input_spec": "The first line of the input contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 2 \\cdot 10^5$$$) — the number of hits and the maximum number of times you can push the same button in a row. The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$), where $$$a_i$$$ is the damage of the $$$i$$$-th hit. The third line of the input contains the string $$$s$$$ consisting of exactly $$$n$$$ lowercase Latin letters — the sequence of hits (each character is the letter on the button you need to press to perform the corresponding hit).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1300,
    "file_name": "train_000.jsonl",
    "code_uid": "f8c9ea7969d69d219c508f1fbcec68dc",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7 3\\n1 5 16 18 7 2 10\\nbaaaaca\", \"5 5\\n2 4 1 3 1000\\naaaaa\", \"5 4\\n2 4 1 3 1000\\naaaaa\", \"8 1\\n10 15 2 1 4 8 15 16\\nqqwweerr\", \"6 3\\n14 18 9 19 2 15\\ncccccc\", \"2 1\\n10 10\\nqq\"]",
    "exec_outcome": "PASSED",
    "source_code": "#from sys import stdin,stdout\n#import operator\n#from collections import OrderedDict \n#def getKey(item):\n#     return item[0]\nn,k=map(int,input().strip().split(\" \"))\n#n,k=map(int,stdin.readline().rstrip().split(\" \"))\nlst=list(map(int,input().strip().split(\" \")))\n#lst=list(map(int,stdin.readline().rstrip().split()))\ns=input()\n#s=stdin.readline()\n#l=[0]*n\n#for i in range(n):\n#    l[i]=[lst[i],s[i]]\n\n#l=sorted(l, key=getKey,reverse=True) \nss=0\ns+=' '\nnum=[]            \nsss=0\ni=0\nwhile i<n:\n    cnt=0\n    sss=0\n    if s[i]==s[i+1]:\n        for j in range(i,n):\n            num.append(lst[j])\n            cnt+=1\n            sss+=lst[j]\n            if s[j]!=s[j+1]:\n                break\n        i+=cnt\n        if cnt<=k:\n            ss+=sss\n        else:\n            num.sort(reverse=True)\n            for j in range(k):\n                ss+=num[j]\n     \n        num=[]\n    else:\n        ss+=lst[i]\n        i+=1\n        \nprint(ss)",
    "prob_desc_created_at": "1548516900",
    "tags": [
        "two pointers",
        "sortings",
        "greedy"
    ],
    "hidden_unit_tests": ""
}