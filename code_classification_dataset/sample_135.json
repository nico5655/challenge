{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\\n010001\\n100100\\n001010\\nNO\\nYES\\n11\\n11\\nYES\\n1100\\n1100\\n0011\\n0011\\nYES\\n1\\n1\"]",
    "src_uid": "8aa648ff5adc0cf7b20fea52d2c34759",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given four positive integers $$$n$$$, $$$m$$$, $$$a$$$, $$$b$$$ ($$$1 \\le b \\le n \\le 50$$$; $$$1 \\le a \\le m \\le 50$$$). Find any such rectangular matrix of size $$$n \\times m$$$ that satisfies all of the following conditions:  each row of the matrix contains exactly $$$a$$$ ones;  each column of the matrix contains exactly $$$b$$$ ones;  all other elements are zeros. If the desired matrix does not exist, indicate this.For example, for $$$n=3$$$, $$$m=6$$$, $$$a=2$$$, $$$b=1$$$, there exists a matrix satisfying the conditions above:$$$$$$ \\begin{vmatrix} 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 1 \\\\ 1 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 &amp; 0 &amp; 1 &amp; 0 \\end{vmatrix} $$$$$$",
    "prob_desc_output_spec": "For each test case print:   \"YES\" (without quotes) and the required matrix (if there are several answers, print any) if it exists, or  \"NO\" (without quotes) if it does not exist.  To print the matrix $$$n \\times m$$$, print $$$n$$$ rows, each of which consists of $$$m$$$ numbers $$$0$$$ or $$$1$$$ describing a row of the matrix. Numbers must be printed without spaces.",
    "prob_desc_input_spec": "The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases. Then $$$t$$$ test cases follow. Each test case is described by four positive integers $$$n$$$, $$$m$$$, $$$a$$$, $$$b$$$ ($$$1 \\le b \\le n \\le 50$$$; $$$1 \\le a \\le m \\le 50$$$), where $$$n$$$ and $$$m$$$ are the sizes of the matrix, and $$$a$$$ and $$$b$$$ are the number of ones for rows and columns, respectively.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_000.jsonl",
    "code_uid": "94a7d72264d735562157d6bb6d342f3e",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n3 6 2 1\\n2 2 2 1\\n2 2 2 2\\n4 4 2 2\\n2 1 1 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "# python3 q7.py < test.txt\nt = int(input())\n\nfor i in range(t):\n    n, m, a, b = map(int, input().split())\n    \n    if n * a != m * b:\n        print('NO')\n        continue\n    print('YES')\n    shift = 0\n    for j in range(1, m):\n        if (j * n) % m == 0:\n            shift = j\n            break\n    \n    col = [j for j in range(a)]\n    ans = [[0 for j in range(m)] for k in range(n)]\n    for j in range(n):\n        for k in col:\n            ans[j][k] = 1\n        \n        for k in range(m):\n            print(ans[j][k], end = '')\n        print('')\n        col = [(x + shift) % (m) for x in col]\n        \n            \n    \n    ",
    "prob_desc_created_at": "1590327300",
    "tags": [
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "hidden_unit_tests": ""
}