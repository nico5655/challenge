{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\\n0\\n1\\n0\", \"0\\n1\\n1\"]",
    "src_uid": "ba7d6cd00c49da90e7021bc4717af054",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given n segments on a line. There are no ends of some segments that coincide. For each segment find the number of segments it contains.",
    "prob_desc_output_spec": "Print n lines. The j-th of them should contain the only integer aj — the number of segments contained in the j-th segment.",
    "prob_desc_input_spec": "The first line contains a single integer n (1 ≤ n ≤ 2·105) — the number of segments on a line. Each of the next n lines contains two integers li and ri ( - 109 ≤ li &lt; ri ≤ 109) — the coordinates of the left and the right ends of the i-th segment. It is guaranteed that there are no ends of some segments that coincide.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_013.jsonl",
    "code_uid": "b6af2b15de23ec95bf199439a212b57b",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n1 8\\n2 3\\n4 7\\n5 6\", \"3\\n3 4\\n1 5\\n2 6\"]",
    "exec_outcome": "PASSED",
    "source_code": "#!/usr/bin/env python3\n\nfrom __future__ import division, print_function\n\ndef least_significant_bit(i):\n    return ((i) & -(i))\n\nclass FenwickTree():\n    def __init__(self, n):\n        # 1-indexed\n        self.n = n + 1 \n        self.data = [0,] * self.n\n    \n    def add(self, index, value):\n        # 1-indexed\n        i = index + 1\n        while i < self.n:\n            self.data[i] += value\n            i += least_significant_bit(i)\n        \n    def prefix_sum(self, index):\n        # 1-indexed\n        i = index + 1\n        result = 0\n        while i > 0:\n            result += self.data[i]\n            i -= least_significant_bit(i)\n        return result\n\ndef solver(ifs):\n    n = int(ifs.readline().strip())\n    left = [0,] * n\n    right = [0,] * n\n    for i in range(n):\n        left[i], right[i] = map(int, ifs.readline().split())\n    order = list(range(n))\n    order.sort(key=lambda x: left[x])\n    for i, k in enumerate(order):\n        left[k] = i\n    order.sort(key=lambda x:right[x])\n    res = [0, ] * n\n    ft = FenwickTree(n)\n    for i, k in enumerate(order):\n        a = left[k]\n        res[k] = i - ft.prefix_sum(a-1)\n        ft.add(a, 1)\n    print('\\n'.join(str(x) for x in res))\n\n        \ndef main():\n    import sys\n    if sys.version_info.major == 3:\n        from io import StringIO as StreamIO\n    else:\n         from io import BytesIO as StreamIO\n    \n    with StreamIO(sys.stdin.read()) as ifs, StreamIO() as ofs:\n        _stdout = sys.stdout\n        sys.stdout = ofs\n        solver(ifs)\n        sys.stdout = _stdout\n        sys.stdout.write(ofs.getvalue())\n    return 0\n\nif __name__ == '__main__':\n    main()\n",
    "prob_desc_created_at": "1458910800",
    "tags": [
        "data structures",
        "sortings"
    ],
    "hidden_unit_tests": ""
}