{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"6 4\\n4 6 10\\n14 10 12 8\"]",
    "src_uid": "cf4d8a5caa37def0b7c0007743139e36",
    "prob_desc_notes": null,
    "prob_desc_description": "Today the kindergarten has a new group of $$$n$$$ kids who need to be seated at the dinner table. The chairs at the table are numbered from $$$1$$$ to $$$4n$$$. Two kids can't sit on the same chair. It is known that two kids who sit on chairs with numbers $$$a$$$ and $$$b$$$ ($$$a \\neq b$$$) will indulge if:   $$$gcd(a, b) = 1$$$ or,  $$$a$$$ divides $$$b$$$ or $$$b$$$ divides $$$a$$$. $$$gcd(a, b)$$$ — the maximum number $$$x$$$ such that $$$a$$$ is divisible by $$$x$$$ and $$$b$$$ is divisible by $$$x$$$.For example, if $$$n=3$$$ and the kids sit on chairs with numbers $$$2$$$, $$$3$$$, $$$4$$$, then they will indulge since $$$4$$$ is divided by $$$2$$$ and $$$gcd(2, 3) = 1$$$. If kids sit on chairs with numbers $$$4$$$, $$$6$$$, $$$10$$$, then they will not indulge.The teacher really doesn't want the mess at the table, so she wants to seat the kids so there are no $$$2$$$ of the kid that can indulge. More formally, she wants no pair of chairs $$$a$$$ and $$$b$$$ that the kids occupy to fulfill the condition above.Since the teacher is very busy with the entertainment of the kids, she asked you to solve this problem.",
    "prob_desc_output_spec": "Output $$$t$$$ lines, which contain $$$n$$$ distinct integers from $$$1$$$ to $$$4n$$$ — the numbers of chairs that the kids should occupy in the corresponding test case. If there are multiple answers, print any of them. You can print $$$n$$$ numbers in any order.",
    "prob_desc_input_spec": "The first line contains one integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases. Then $$$t$$$ test cases follow. Each test case consists of one line containing an integer $$$n$$$ ($$$1 \\leq n \\leq 100$$$) — the number of kids.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_000.jsonl",
    "code_uid": "f5253bb8a387871bc32aa5abf40fb248",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n2\\n3\\n4\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import Counter, defaultdict, deque\nimport bisect\nimport heapq\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math\nimport random\nimport copy\n\n# sys.stdin = open('input')\n\ndef mod(x, y, mod):\n    re = 1\n    now = x\n    while y:\n        if y&1:\n            re *= now\n            re %= mod\n        y >>= 1\n        now = (now*now)%mod\n    return re\n\ndef inp(force_list=False):\n    re = map(int, raw_input().split())\n    if len(re) == 1 and not force_list:\n        return re[0]\n    return re\n\ndef inst():\n    return raw_input().strip()\n\ndef gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\ndef ggcd(x, y):\n    if y:\n        return ggcd(y, x%y)\n    return x\n\nMOD = int(1e9+7)\n\n\ndef my_main():\n    T = inp()\n    for _ in range(T):\n        n = inp()\n        c = 4*n\n        for i in range(n):\n            print c - i*2,\n        print ''\n\n\nmy_main()\n",
    "prob_desc_created_at": "1604327700",
    "tags": [
        "constructive algorithms",
        "math"
    ],
    "hidden_unit_tests": ""
}