{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\\n1 2\\n4 1\\n3 1\\n2 5\\nYES\\n4 3\\n2 5\\n1 5\\n5 3\\nNO\\nYES\\n2 4\\n4 1\\n2 5\\n5 3\\nYES\\n5 4\\n4 1\\n2 5\\n3 5\\nYES\\n2 3\\n3 4\\n1 3\\nNO\\nYES\\n4 3\\n1 2\\n2 4\\nNO\"]",
    "src_uid": "4750029f0a5e802099a6dd4dff2974d5",
    "prob_desc_notes": null,
    "prob_desc_description": "A tree is a connected undirected graph without cycles. Note that in this problem, we are talking about not rooted trees.You are given four positive integers $$$n, d_{12}, d_{23}$$$ and $$$d_{31}$$$. Construct a tree such that:  it contains $$$n$$$ vertices numbered from $$$1$$$ to $$$n$$$,  the distance (length of the shortest path) from vertex $$$1$$$ to vertex $$$2$$$ is $$$d_{12}$$$,  distance from vertex $$$2$$$ to vertex $$$3$$$ is $$$d_{23}$$$,  the distance from vertex $$$3$$$ to vertex $$$1$$$ is $$$d_{31}$$$. Output any tree that satisfies all the requirements above, or determine that no such tree exists.",
    "prob_desc_output_spec": "For each test case, print YES if the suitable tree exists, and NO otherwise.  If the answer is positive, print another $$$n-1$$$ line each containing a description of an edge of the tree — a pair of positive integers $$$x_i, y_i$$$, which means that the $$$i$$$th edge connects vertices $$$x_i$$$ and $$$y_i$$$.  The edges and vertices of the edges can be printed in any order. If there are several suitable trees, output any of them.",
    "prob_desc_input_spec": "The first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) —the number of test cases in the test. This is followed by $$$t$$$ test cases, each written on a separate line. Each test case consists of four positive integers $$$n, d_{12}, d_{23}$$$ and $$$d_{31}$$$ ($$$3 \\le n \\le 2\\cdot10^5; 1 \\le d_{12}, d_{23}, d_{31} \\le n-1$$$). It is guaranteed that the sum of $$$n$$$ values for all test cases does not exceed $$$2\\cdot10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_103.jsonl",
    "code_uid": "fc86ad687e2e01c04e0dc7c53bad0ee6",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"9\\n\\n5 1 2 1\\n\\n5 2 2 2\\n\\n5 2 2 3\\n\\n5 2 2 4\\n\\n5 3 2 3\\n\\n4 2 1 1\\n\\n4 3 1 1\\n\\n4 1 2 3\\n\\n7 1 4 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "t=int(input())\r\nfor i in range(t):\r\n    n,a,b,c=[int(x) for x in input().split()]\r\n    l=[1]\r\n    l2=[]\r\n    x=4\r\n    check=True\r\n    '''for i in range(a-1):\r\n        l.append(x)\r\n        x+=1\r\n    l.append(2)'''\r\n    if c+b==a and n>a:\r\n        '''l.pop(-2)\r\n        x-=1\r\n        l.insert(c,3)'''\r\n        a1=1\r\n        a2=x\r\n        print('YES')\r\n        for i in range(a):\r\n            if c==i+1:\r\n                a2=3\r\n                if x > 4 or i == 0:\r\n                    x -= 1\r\n            elif a==i+1:\r\n                a2=2\r\n                z=2\r\n            print(a1,a2)\r\n            if a1==n or a2==n:\r\n                check=False\r\n            x += 1\r\n            a1=a2\r\n            a2=x\r\n        x-=1\r\n    elif a + c == b and n>b:\r\n        '''for i in range(c - 1):\r\n            l.insert(0, x)\r\n            x += 1\r\n        l.insert(0, 3)'''\r\n        print('YES')\r\n        a1=3\r\n        a2=x\r\n        for i in range(b):\r\n            if c==i+1:\r\n                a2=1\r\n                if x > 4 or i == 0:\r\n                    x -= 1\r\n            elif b==i+1:\r\n                a2=2\r\n                z=2\r\n            print(a1,a2)\r\n            if a1==n or a2==n:\r\n                check=False\r\n            x += 1\r\n            a1=a2\r\n            a2=x\r\n        x-=1\r\n    elif a + b == c and n>c:\r\n        '''for i in range(b - 1):\r\n            l.append(x)\r\n            x += 1\r\n        l.append(3)'''\r\n        print('YES')\r\n        a1=1\r\n        a2=x\r\n        for i in range(c):\r\n            if a==i+1:\r\n                a2=2\r\n                if x>4 or i==0:\r\n                    x-=1\r\n            elif c==i+1:\r\n                a2=3\r\n                z=3\r\n            print(a1,a2)\r\n            if a1==n or a2==n:\r\n                check=False\r\n            x+=1\r\n            a1=a2\r\n            a2=x\r\n        x-=1\r\n    else:\r\n        if (c - b + a) % 2 == 0 and c - b + a > 0 and c+b-a>0 and a+b-c>0 and n>(int((c+b-a)/2)+a):\r\n            '''l2.append(l[int((c - b + a) / 2)])\r\n            while (c + b - a) / 2 - 1 != 0:\r\n                l2.append(x)\r\n                x += 1\r\n            l2.append(3)'''\r\n            print('YES')\r\n            a1=1\r\n            a2=x\r\n            index=2\r\n            for i in range(a):\r\n                if a==i+1:\r\n                    a2=2\r\n                    z=2\r\n                    if x>4:\r\n                        x-=1\r\n                elif int((c-b+a)/2)==i+1:\r\n                    index=a2\r\n                print(a1,a2)\r\n                if a1 == n or a2 == n:\r\n                    check = False\r\n                x+=1\r\n                a1=a2\r\n                a2=x\r\n            a1=index\r\n            a2=x\r\n            for i in range(int((c+b-a)/2)):\r\n                if int((c+b-a)/2)==i+1:\r\n                    a2=3\r\n                print(a1,a2)\r\n                if a1 == n or a2 == n:\r\n                    check = False\r\n                x+=1\r\n                a1=a2\r\n                a2=x\r\n            x-=1\r\n        else:\r\n            print('NO')\r\n            continue\r\n\r\n    '''if x - 1 > n:\r\n        print(x)\r\n        print('NO')\r\n        continue\r\n    else:\r\n        print('YES')\r\n    for i in range(len(l) - 1):\r\n        print(l[i], l[i + 1])\r\n    for i in range(len(l2) - 1):\r\n        print(l2[i], l2[i + 1])\r\n    z = l[-1]'''\r\n    if check:\r\n        while x <=n:\r\n            print(z,x)\r\n            z = x\r\n            x += 1",
    "prob_desc_created_at": "1659364500",
    "tags": [
        "constructive algorithms",
        "implementation",
        "trees"
    ],
    "hidden_unit_tests": ""
}