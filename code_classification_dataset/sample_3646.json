{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1.916666666666666666666666666667\"]",
    "src_uid": "977aef0dfcf65b60bfe805757057aa73",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given a permutation of integers from 1 to n. Exactly once you apply the following operation to this permutation: pick a random segment and shuffle its elements. Formally:  Pick a random segment (continuous subsequence) from l to r. All  segments are equiprobable.  Let k = r - l + 1, i.e. the length of the chosen segment. Pick a random permutation of integers from 1 to k, p1, p2, ..., pk. All k! permutation are equiprobable.  This permutation is applied to elements of the chosen segment, i.e. permutation a1, a2, ..., al - 1, al, al + 1, ..., ar - 1, ar, ar + 1, ..., an is transformed to a1, a2, ..., al - 1, al - 1 + p1, al - 1 + p2, ..., al - 1 + pk - 1, al - 1 + pk, ar + 1, ..., an. Inversion if a pair of elements (not necessary neighbouring) with the wrong relative order. In other words, the number of inversion is equal to the number of pairs (i, j) such that i &lt; j and ai &gt; aj. Find the expected number of inversions after we apply exactly one operation mentioned above.",
    "prob_desc_output_spec": "Print one real value — the expected number of inversions. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 9.  Namely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if .",
    "prob_desc_input_spec": "The first line contains a single integer n (1 ≤ n ≤ 100 000) — the length of the permutation. The second line contains n distinct integers from 1 to n — elements of the permutation.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_076.jsonl",
    "code_uid": "a93f478b0633e05e0cef9e3684cc2c7f",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n2 3 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "\n\n# Python3 program to count inversions using  \n# Binary Indexed Tree  \n  \n# Returns sum of arr[0..index]. This function \n# assumes that the array is preprocessed and  \n# partial sums of array elements are stored  \n# in BITree[].  \ndef getSum( BITree, index): \n    sum = 0 # Initialize result  \n      \n    # Traverse ancestors of BITree[index]  \n    while (index > 0):  \n  \n        # Add current element of BITree to sum  \n        sum += BITree[index]  \n  \n        # Move index to parent node in getSum View  \n        index -= index & (-index)  \n  \n    return sum\n  \n# Updates a node in Binary Index Tree (BITree)  \n# at given index in BITree. The given value \n# 'val' is added to BITree[i] and all of its \n# ancestors in tree.  \ndef updateBIT(BITree, n, index, val): \n  \n    # Traverse all ancestors and add 'val'  \n    while (index <= n):  \n  \n        # Add 'val' to current node of BI Tree  \n        BITree[index] += val  \n  \n        # Update index to that of parent \n        # in update View  \n        index += index & (-index)  \n  \n# Returns count of inversions of size three  \ndef getInvCount(arr, n): \n  \n    invcount = 0 # Initialize result  \n  \n    # Find maximum element in arrays  \n    maxElement = max(arr) \n  \n    # Create a BIT with size equal to  \n    # maxElement+1 (Extra one is used  \n    # so that elements can be directly  \n    # be used as index) \n    BIT = [0] * (maxElement + 1)  \n    for i in range(1, maxElement + 1):  \n        BIT[i] = 0\n    for i in range(n - 1, -1, -1): \n        invcount += getSum(BIT, arr[i] - 1)  \n        updateBIT(BIT, maxElement, arr[i], 1)  \n    return invcount  \n\ndef getInvCountAdv(arr, n): \n  \n    invcount = 0 # Initialize result  \n  \n    # Find maximum element in arrays  \n    maxElement = max(arr) \n  \n    # Create a BIT with size equal to  \n    # maxElement+1 (Extra one is used  \n    # so that elements can be directly  \n    # be used as index) \n    BIT = [0] * (maxElement + 1)  \n    for i in range(1, maxElement + 1):  \n        BIT[i] = 0\n    for i in range(n - 1, -1, -1): \n        invcount += (i + 1) * getSum(BIT, arr[i] - 1)  \n        updateBIT(BIT, maxElement, arr[i], n-i)  \n    return invcount  \n      \n# Driver code  \nn = int(input())\na = list(map(int,input().split())) \nInvCount = getInvCount(a, n)\nInvCountAdv = getInvCountAdv(a,n)\nthirdSum = 0\nfor i in range(1,n+1):\n    thirdSum += i * (i - 1) * (n- i + 1) / 2\nprint(InvCount - InvCountAdv / (n * (n + 1)) * 2 + thirdSum / (n * (n + 1)))\n      \n# This code is contributed by \n# Shubham Singh(SHUBHAMSINGH10) ",
    "prob_desc_created_at": "1482165300",
    "tags": [
        "data structures",
        "probabilities"
    ],
    "hidden_unit_tests": ""
}