{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"0\\n1\\n1\\n-1\\n2\\n1\"]",
    "src_uid": "96f0df1c8e014229e5ef773789aa2205",
    "prob_desc_notes": "NoteIn the first test case, the product of all elements is initially $$$2$$$, so no operations needed.In the second test case, the product of elements initially equals $$$6$$$. We can apply the operation for $$$i = 2$$$, and then $$$a_2$$$ becomes $$$2\\cdot2=4$$$, and the product of numbers becomes $$$3\\cdot4=12$$$, and this product of numbers is divided by $$$2^n=2^2=4$$$. In the fourth test case, even if we apply all possible operations, we still cannot make the product of numbers divisible by $$$2^n$$$  — it will be $$$(13\\cdot1)\\cdot(17\\cdot2)\\cdot(1\\cdot3)\\cdot(1\\cdot4)=5304$$$, which does not divide by $$$2^n=2^4=16$$$.In the fifth test case, we can apply operations for $$$i = 2$$$ and $$$i = 4$$$. ",
    "prob_desc_description": "You are given an array of positive integers $$$a_1, a_2, \\ldots, a_n$$$.Make the product of all the numbers in the array (that is, $$$a_1 \\cdot a_2 \\cdot \\ldots \\cdot a_n$$$) divisible by $$$2^n$$$.You can perform the following operation as many times as you like:  select an arbitrary index $$$i$$$ ($$$1 \\leq i \\leq n$$$) and replace the value $$$a_i$$$ with $$$a_i=a_i \\cdot i$$$. You cannot apply the operation repeatedly to a single index. In other words, all selected values of $$$i$$$ must be different.Find the smallest number of operations you need to perform to make the product of all the elements in the array divisible by $$$2^n$$$. Note that such a set of operations does not always exist.",
    "prob_desc_output_spec": "For each test case, print the least number of operations to make the product of all numbers in the array divisible by $$$2^n$$$. If the answer does not exist, print -1.",
    "prob_desc_input_spec": "The first line of the input contains a single integer $$$t$$$ $$$(1 \\leq t \\leq 10^4$$$) — the number test cases. Then the descriptions of the input data sets follow. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) — the length of array $$$a$$$. The second line of each test case contains exactly $$$n$$$ integers: $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$). It is guaranteed that the sum of $$$n$$$ values over all test cases in a test does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1200,
    "file_name": "train_094.jsonl",
    "code_uid": "2d43814374b3975000b8628c444355b5",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n\\n1\\n\\n2\\n\\n2\\n\\n3 2\\n\\n3\\n\\n10 6 11\\n\\n4\\n\\n13 17 1 1\\n\\n5\\n\\n1 1 12 1 1\\n\\n6\\n\\n20 7 14 18 3 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "def countPow2(k):\r\n    count = 0\r\n    while k % 2 == 0:\r\n        count += 1\r\n        k //= 2\r\n\r\n    return count\r\n\r\n\r\nfor _ in [0] * int(input()):\r\n    n = int(input())\r\n    nums = list(map(int, input().rstrip().split()))\r\n\r\n    total = extra = 0\r\n    extArr = []\r\n    for num in nums:\r\n        total += countPow2(num)\r\n\r\n    for i in range(2, n+1):\r\n        temp = countPow2(i)\r\n        extra += temp\r\n        extArr += [temp]\r\n\r\n    extArr.sort(reverse=True)\r\n\r\n    if total >= n:\r\n        print(0)\r\n    elif total + extra < n:\r\n        print(-1)\r\n\r\n    else:\r\n        ans = 0\r\n        for i in range(len(extArr)):\r\n            ans += 1\r\n\r\n            if total + extArr[i] >= n:\r\n                break\r\n\r\n            total += extArr[i]\r\n\r\n        print(ans)\r\n",
    "prob_desc_created_at": "1665930900",
    "tags": [
        "greedy",
        "math",
        "sortings"
    ],
    "hidden_unit_tests": ""
}