{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"1\\n3\\n1\", \"1\", \"547558588\\n277147129\\n457421435\\n702277623\"]",
    "src_uid": "0afd29ef1b720d2baad2f1c91a583933",
    "prob_desc_notes": "NoteIn the first example:   The first query is only the empty path — length $$$0$$$;  The second query are paths $$$[(12, 4), (4, 2), (2, 1)]$$$ (length $$$3+1+1=5$$$), $$$[(12, 6), (6, 2), (2, 1)]$$$ (length $$$2+2+1=5$$$) and $$$[(12, 6), (6, 3), (3, 1)]$$$ (length $$$2+2+1=5$$$).  The third query is only the path $$$[(3, 1), (1, 2), (2, 4)]$$$ (length $$$1+1+1=3$$$). ",
    "prob_desc_description": "You are given a positive integer $$$D$$$. Let's build the following graph from it:   each vertex is a divisor of $$$D$$$ (not necessarily prime, $$$1$$$ and $$$D$$$ itself are also included);  two vertices $$$x$$$ and $$$y$$$ ($$$x &gt; y$$$) have an undirected edge between them if $$$x$$$ is divisible by $$$y$$$ and $$$\\frac x y$$$ is a prime;  the weight of an edge is the number of divisors of $$$x$$$ that are not divisors of $$$y$$$. For example, here is the graph for $$$D=12$$$:   Edge $$$(4,12)$$$ has weight $$$3$$$ because $$$12$$$ has divisors $$$[1,2,3,4,6,12]$$$ and $$$4$$$ has divisors $$$[1,2,4]$$$. Thus, there are $$$3$$$ divisors of $$$12$$$ that are not divisors of $$$4$$$ — $$$[3,6,12]$$$.There is no edge between $$$3$$$ and $$$2$$$ because $$$3$$$ is not divisible by $$$2$$$. There is no edge between $$$12$$$ and $$$3$$$ because $$$\\frac{12}{3}=4$$$ is not a prime.Let the length of the path between some vertices $$$v$$$ and $$$u$$$ in the graph be the total weight of edges on it. For example, path $$$[(1, 2), (2, 6), (6, 12), (12, 4), (4, 2), (2, 6)]$$$ has length $$$1+2+2+3+1+2=11$$$. The empty path has length $$$0$$$.So the shortest path between two vertices $$$v$$$ and $$$u$$$ is the path that has the minimal possible length.Two paths $$$a$$$ and $$$b$$$ are different if there is either a different number of edges in them or there is a position $$$i$$$ such that $$$a_i$$$ and $$$b_i$$$ are different edges.You are given $$$q$$$ queries of the following form:   $$$v$$$ $$$u$$$ — calculate the number of the shortest paths between vertices $$$v$$$ and $$$u$$$. The answer for each query might be large so print it modulo $$$998244353$$$.",
    "prob_desc_output_spec": "Print $$$q$$$ integers — for each query output the number of the shortest paths between the two given vertices modulo $$$998244353$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$D$$$ ($$$1 \\le D \\le 10^{15}$$$) — the number the graph is built from. The second line contains a single integer $$$q$$$ ($$$1 \\le q \\le 3 \\cdot 10^5$$$) — the number of queries. Each of the next $$$q$$$ lines contains two integers $$$v$$$ and $$$u$$$ ($$$1 \\le v, u \\le D$$$). It is guaranteed that $$$D$$$ is divisible by both $$$v$$$ and $$$u$$$ (both $$$v$$$ and $$$u$$$ are divisors of $$$D$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_056.jsonl",
    "code_uid": "12061450f6c37e564559281f95b37b1c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"12\\n3\\n4 4\\n12 1\\n3 4\", \"1\\n1\\n1 1\", \"288807105787200\\n4\\n46 482955026400\\n12556830686400 897\\n414 12556830686400\\n4443186242880 325\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys, __pypy__\nrange = xrange\ninput = raw_input\n\nMOD = 998244353\nmulmod = __pypy__.intop.int_mulmod\n\ninp = [int(x) for x in sys.stdin.read().split()]; ii = 0\n\nD = inp[ii]; ii += 1\nq = inp[ii]; ii += 1\n\nU = inp[ii + 0: ii + 2 * q: 2]\nV = inp[ii + 1: ii + 2 * q: 2]\n\nPdiv = []\nif D & 1 == 0:\n    Pdiv.append(2)\n    while D & 1 == 0:\n        D >>= 1\n\ni = 3\nwhile i * i <= D:\n    if D % i == 0:\n        while D % i == 0:\n            D //= i\n        Pdiv.append(i)\n    i += 2\nif D > 1:\n    Pdiv.append(D)\n\n\nfac = [1]\nfor i in range(1,200):\n    fac.append(mulmod(fac[-1], i, MOD))\nifac = [pow(f, MOD-2, MOD) for f in fac]\n\ndef multi(A):\n    prod = fac[sum(A)]\n    for a in A:\n        prod = mulmod(prod, ifac[a], MOD)\n    return prod\n\nout = []\nfor _ in range(q):\n    u = U[_]\n    v = V[_]\n    if u > v:\n        v,u = u,v\n\n    add = []\n    rem = []\n\n    for p in Pdiv:\n        cu = 0\n        while u % p == 0:\n            u //= p\n            cu += 1\n\n        cv = 0\n        while v % p == 0:\n            v //= p\n            cv += 1\n\n        if cu > cv:\n            rem.append(cu - cv)\n        elif cu < cv:\n            add.append(cv - cu)\n    out.append(mulmod(multi(add), multi(rem), MOD))\n\nprint '\\n'.join(str(x) for x in out)\n",
    "prob_desc_created_at": "1586529300",
    "tags": [
        "greedy",
        "graphs",
        "combinatorics",
        "number theory",
        "math"
    ],
    "hidden_unit_tests": ""
}