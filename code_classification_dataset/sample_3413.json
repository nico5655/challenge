{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"13 2\", \"-1\", \"3 4\"]",
    "src_uid": "8e8437c62ea72f01f7e921e99dca931f",
    "prob_desc_notes": null,
    "prob_desc_description": "Little Timofey likes integers a lot. Unfortunately, he is very young and can't work with very big integers, so he does all the operations modulo his favorite prime m. Also, Timofey likes to look for arithmetical progressions everywhere.One of his birthday presents was a sequence of distinct integers a1, a2, ..., an. Timofey wants to know whether he can rearrange the elements of the sequence so that is will be an arithmetical progression modulo m, or not.Arithmetical progression modulo m of length n with first element x and difference d is sequence of integers x, x + d, x + 2d, ..., x + (n - 1)·d, each taken modulo m.",
    "prob_desc_output_spec": "Print -1 if it is not possible to rearrange the elements of the sequence so that is will be an arithmetical progression modulo m. Otherwise, print two integers — the first element of the obtained progression x (0 ≤ x &lt; m) and its difference d (0 ≤ d &lt; m). If there are multiple answers, print any of them.",
    "prob_desc_input_spec": "The first line contains two integers m and n (2 ≤ m ≤ 109 + 7, 1 ≤ n ≤ 105, m is prime) — Timofey's favorite prime module and the length of the sequence. The second line contains n distinct integers a1, a2, ..., an (0 ≤ ai &lt; m) — the elements of the sequence.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2600,
    "file_name": "train_058.jsonl",
    "code_uid": "7bab6dfbf20b5857223dbbe23ec88431",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"17 5\\n0 2 4 13 15\", \"17 5\\n0 2 4 13 14\", \"5 3\\n1 2 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "def solve(n, m, a):\n    if n == 0:\n        return 0, 1\n    if n == 1:\n        return a[0], 1\n    d = (a[1]-a[0]) % m\n    if d < 0: d += m\n    st = set(a)\n    cnt = 0\n    for v in a:\n        cnt += ((v + d) % m) in st\n    cnt = n-cnt\n    d = (d * pow(cnt, m-2, m)) % m\n    now = a[0]\n    while (now + m - d) % m in st:\n        now = (now + m - d) % m\n    for i in range(n):\n        if (now + i*d) % m not in st:\n            return -1, -1\n    return now, d\n\n\nm, n = map(int, input().split())\na = list(map(int, input().split()))\nif n * 2 > m:\n    st = set(a)\n    b = [i for i in range(m) if i not in st]\n    f, d = solve(len(b), m, b)\n    f = (f + d * (m-n)) % m\nelse:\n    f, d = solve(n, m, a)\nif f < 0 or d < 0:\n    print(-1)\nelse:\n    print(f, d)\n\n\n\n# Made By Mostafa_Khaled",
    "prob_desc_created_at": "1486042500",
    "tags": [
        "implementation",
        "number theory",
        "brute force",
        "math"
    ],
    "hidden_unit_tests": ""
}