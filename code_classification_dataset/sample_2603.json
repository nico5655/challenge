{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"0 1 3\", \"0 0 0\", \"1 1 1\"]",
    "src_uid": "34fb8f05351998266403dbecd15d7191",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given an array of n integer numbers. Let sum(l, r) be the sum of all numbers on positions from l to r non-inclusive (l-th element is counted, r-th element is not counted). For indices l and r holds 0 ≤ l ≤ r ≤ n. Indices in array are numbered from 0. For example, if a = [ - 5, 3, 9, 4], then sum(0, 1) =  - 5, sum(0, 2) =  - 2, sum(1, 4) = 16 and sum(i, i) = 0 for each i from 0 to 4.Choose the indices of three delimiters delim0, delim1, delim2 (0 ≤ delim0 ≤ delim1 ≤ delim2 ≤ n) and divide the array in such a way that the value of res = sum(0, delim0) - sum(delim0, delim1) + sum(delim1, delim2) - sum(delim2, n) is maximal. Note that some of the expressions sum(l, r) can correspond to empty segments (if l = r for some segment).",
    "prob_desc_output_spec": "Choose three indices so that the value of res is maximal. If there are multiple answers, print any of them.",
    "prob_desc_input_spec": "The first line contains one integer number n (1 ≤ n ≤ 5000). The second line contains n numbers a0, a1, ..., an - 1 ( - 109 ≤ ai ≤ 109).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_026.jsonl",
    "code_uid": "194b50f85f95bbc725383f0f98bc65f5",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n-1 2 3\", \"4\\n0 0 -1 0\", \"1\\n10000\"]",
    "exec_outcome": "PASSED",
    "source_code": "class MaxSegTree:\n  def __init__(self, zero, data=None, size=None):\n    if data is None and size is None:\n      raise Exception('data and size both cannot be None simultaneously')\n    if size is None:\n      size = len(data)\n    depth = (size-1).bit_length()\n    self.size = 1 << depth\n    self.zero = zero\n    if data is None:\n      self.data = [zero]*(2*self.size)\n    else:\n      self.data = [zero]*self.size + data + [zero]*(self.size-size)\n      for d in reversed(range(depth)):\n        t = 1 << d\n        for i in range(t, 2*t):\n          self.data[i] = max(self.data[2*i],self.data[2*i+1])\n\n  def _max_interval(self, a, b):\n    result = self.zero\n    a += self.size\n    b += self.size\n    while a < b:\n      if a & 1:\n        result = max(result,self.data[a])\n        a += 1\n      if b & 1:\n        b -= 1\n        result = max(result,self.data[b])\n      a >>= 1\n      b >>= 1\n    return result\n\n  def _set_val(self, a, val):\n    a += self.size\n    while self.data[a] != val and a > 0:\n      self.data[a] = val\n      val = max(val,self.data[a^1])\n      a >>= 1\n\n  def __getitem__(self, i):\n    if isinstance(i, slice):\n      return self._max_interval(\n                  0 if i.start is None else i.start,\n                  self.size if i.stop is None else i.stop)\n    elif isinstance(i, int):\n      return self.data[i+self.size]\n\n  def __setitem__(self, i, x):\n    self._set_val(i,x)\n\n  def __iter__(self):\n    return iter(self.data[self.size:])\n\nn = int(input())\n\nfrom itertools import accumulate, chain\n\nC = list((v,i) for i,v in enumerate(chain((0,), accumulate(map(int,input().split())))))\n\nmst = MaxSegTree((-float('inf'),0),C)\n\na,b,c = None,None,None\nbest = -float('inf')\n\nfor v2,j in C:\n  v1,i = mst[:j+1]\n  v3,k = mst[j:]\n  if v1-v2+v3 > best:\n    best = v1-v2+v3\n    a,b,c = i,j,k\n    \nprint(a,b,c)\n",
    "prob_desc_created_at": "1504623900",
    "tags": [
        "dp",
        "data structures",
        "brute force"
    ],
    "hidden_unit_tests": ""
}