{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\\n1\\n2\"]",
    "src_uid": "aab052bf49da6528641f655342fa4848",
    "prob_desc_notes": null,
    "prob_desc_description": "Polycarp was gifted an array $$$a$$$ of length $$$n$$$. Polycarp considers an array beautiful if there exists a number $$$C$$$, such that each number in the array occurs either zero or $$$C$$$ times. Polycarp wants to remove some elements from the array $$$a$$$ to make it beautiful.For example, if $$$n=6$$$ and $$$a = [1, 3, 2, 1, 4, 2]$$$, then the following options are possible to make the array $$$a$$$ array beautiful:   Polycarp removes elements at positions $$$2$$$ and $$$5$$$, array $$$a$$$ becomes equal to $$$[1, 2, 1, 2]$$$;  Polycarp removes elements at positions $$$1$$$ and $$$6$$$, array $$$a$$$ becomes equal to $$$[3, 2, 1, 4]$$$;  Polycarp removes elements at positions $$$1, 2$$$ and $$$6$$$, array $$$a$$$ becomes equal to $$$[2, 1, 4]$$$; Help Polycarp determine the minimum number of elements to remove from the array $$$a$$$ to make it beautiful.",
    "prob_desc_output_spec": "For each test case, output one integer — the minimum number of elements that Polycarp has to remove from the array $$$a$$$ to make it beautiful.",
    "prob_desc_input_spec": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. Then $$$t$$$ test cases follow. The first line of each test case consists of one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the length of the array $$$a$$$. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$) — array $$$a$$$. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_098.jsonl",
    "code_uid": "82792d9090de522418aae5355a424ac5",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n6\\n1 3 2 1 4 2\\n4\\n100 100 4 100\\n8\\n1 2 3 3 3 2 6 6\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import Counter\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    l = list(map(int , input().split()))\r\n \r\n    occ = []\r\n    occ = list( Counter(l).values() )\r\n    occ.sort()\r\n    size = len(occ)\r\n    behind = [0]*size\r\n    s = 0\r\n    i = 0\r\n    while i < size:\r\n        cur = occ[i]\r\n        add = 0\r\n        while i < size and cur == occ[i]:\r\n            behind[i] = s\r\n            add += occ[i]\r\n            i += 1\r\n        \r\n        s += add\r\n    \r\n \r\n    sum_ahead = [0]*size\r\n    ahead_sum = 0\r\n    i = size-1\r\n    while i >= 0:\r\n        freq = size-1-i\r\n \r\n        cur_ans = ahead_sum - freq*occ[i] \r\n        sum_add = 0\r\n        cur = occ[i]\r\n \r\n        while i>=0 and cur == occ[i]:\r\n            sum_add += occ[i]\r\n            sum_ahead[i] = cur_ans\r\n            i -= 1\r\n        ahead_sum += sum_add\r\n    \r\n    ans = float('inf')\r\n    for i in range(size):\r\n        ans = min( ans , sum_ahead[i] + behind[i])\r\n \r\n    print(ans)\r\n ",
    "prob_desc_created_at": "1613486100",
    "tags": [
        "binary search",
        "data structures",
        "greedy",
        "math",
        "sortings"
    ],
    "hidden_unit_tests": ""
}