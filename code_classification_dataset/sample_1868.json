{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"25\", \"2\", \"Impossible\"]",
    "src_uid": "14b65af01caf1f3971a2f671589b86a8",
    "prob_desc_notes": null,
    "prob_desc_description": "Generous sponsors of the olympiad in which Chloe and Vladik took part allowed all the participants to choose a prize for them on their own. Christmas is coming, so sponsors decided to decorate the Christmas tree with their prizes. They took n prizes for the contestants and wrote on each of them a unique id (integer from 1 to n). A gift i is characterized by integer ai — pleasantness of the gift. The pleasantness of the gift can be positive, negative or zero. Sponsors placed the gift 1 on the top of the tree. All the other gifts hung on a rope tied to some other gift so that each gift hung on the first gift, possibly with a sequence of ropes and another gifts. Formally, the gifts formed a rooted tree with n vertices.The prize-giving procedure goes in the following way: the participants come to the tree one after another, choose any of the remaining gifts and cut the rope this prize hang on. Note that all the ropes which were used to hang other prizes on the chosen one are not cut. So the contestant gets the chosen gift as well as the all the gifts that hang on it, possibly with a sequence of ropes and another gifts.Our friends, Chloe and Vladik, shared the first place on the olympiad and they will choose prizes at the same time! To keep themselves from fighting, they decided to choose two different gifts so that the sets of the gifts that hang on them with a sequence of ropes and another gifts don't intersect. In other words, there shouldn't be any gift that hang both on the gift chosen by Chloe and on the gift chosen by Vladik. From all of the possible variants they will choose such pair of prizes that the sum of pleasantness of all the gifts that they will take after cutting the ropes is as large as possible.Print the maximum sum of pleasantness that Vladik and Chloe can get. If it is impossible for them to choose the gifts without fighting, print Impossible.",
    "prob_desc_output_spec": "If it is possible for Chloe and Vladik to choose prizes without fighting, print single integer — the maximum possible sum of pleasantness they can get together. Otherwise print Impossible.",
    "prob_desc_input_spec": "The first line contains a single integer n (1 ≤ n ≤ 2·105) — the number of gifts. The next line contains n integers a1, a2, ..., an ( - 109 ≤ ai ≤ 109) — the pleasantness of the gifts. The next (n - 1) lines contain two numbers each. The i-th of these lines contains integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — the description of the tree's edges. It means that gifts with numbers ui and vi are connected to each other with a rope. The gifts' ids in the description of the ropes can be given in arbirtary order: vi hangs on ui or ui hangs on vi.  It is guaranteed that all the gifts hang on the first gift, possibly with a sequence of ropes and another gifts.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_014.jsonl",
    "code_uid": "18e5cdd84f36fc2a2ccf6d53818ed86e",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"8\\n0 5 -1 4 3 2 6 5\\n1 2\\n2 4\\n2 5\\n1 3\\n3 6\\n6 7\\n6 8\", \"4\\n1 -5 1 1\\n1 2\\n1 4\\n2 3\", \"1\\n-1\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import defaultdict\n#import sys\n#sys.setrecursionlimit(3*10**5)\n\nn = int(raw_input())\nA = [0]+map(int, raw_input().split())\nAdjOf = [ [] for x in xrange(n+5)]\n\nfor i in xrange(n-1):\n    u,v = map(int, raw_input().split())\n    AdjOf[u].append(v)    \n    AdjOf[v].append(u)\n\nChildrenOf = [ [] for x in xrange(n+5)]#defaultdict(list)\nSeen = [0] * (n+5)\nque = [1]*n\ndq,cq = 0,0\nwhile dq<=cq:\n    u = que[dq]\n    dq+=1\n    Seen[u]=1\n    for v in AdjOf[u]:\n        if Seen[v]<1:\n            ChildrenOf[u].append(v)\n            cq+=1\n            que[cq]=v\n\nNINF = -10**16\nTakeSum = [NINF] * (n+5)\nBestSum = [NINF]* (n+5)\nans = NINF\n\nfor x in que[::-1]:\n    if len(ChildrenOf[x])<1: \n        TakeSum[x] = A[x]\n        BestSum[x] = A[x]\n        continue\n    TakeSum[x]=A[x]\n    #for c in ChildrenOf[x]:\n    #    TakeSum[x] += TakeSum[c]\n    BestSum[x] = NINF\n    fi,se = NINF, NINF\n    for c in ChildrenOf[x]:\n        TakeSum[x] += TakeSum[c]\n        BestSum[x] = max(BestSum[x], BestSum[c])\n        if BestSum[c]>fi:\n            se,fi = fi, BestSum[c]\n        elif BestSum[c]>se:\n            se = BestSum[c]\n    BestSum[x] = max(BestSum[x], TakeSum[x])\n    if fi>NINF and se>NINF:\n        ans = max(ans, fi+se)\n\n\"\"\"\ndef takeSum(x):\n    global TakeSum\n    if len(ChildrenOf[x])<1: \n        TakeSum[x] = A[x]\n        return A[x]\n    if TakeSum[x]>NINF: return TakeSum[x]\n    TakeSum[x]=A[x]\n    for c in ChildrenOf[x]:\n        TakeSum[x] += takeSum(c)\n    return TakeSum[x]\n\ndef bestSum(x):\n    global BestSum\n    if len(ChildrenOf[x])<1: \n        BestSum[x] = A[x]\n        return A[x]\n    if BestSum[x]>NINF: return BestSum[x]\n    BestSum[x] = takeSum(x)\n    for c in ChildrenOf[x]:\n        if A[x]>0:\n            BestSum[x] = max(BestSum[x], bestSum(c))\n        else:\n            BestSum[x] = max(BestSum[x], bestSum(c))\n    return BestSum[x]\n\nfor u in que[::-1]:\n    takeSum(u)\n    bestSum(u)\n\n#print TakeSum\n#print BestSum\n#print ChildrenOf\n\ndef getAns(bestList):\n    if len(bestList)<2: return NINF\n    fi,se = NINF, NINF\n    for x in bestList:\n        if x>fi:\n            se=fi\n            fi=x\n        elif x>se:\n            se=x\n    return fi+se        \n\nans = NINF\nfor x in que:#[::-1]:\n    fi,se = NINF, NINF\n    bestList = [BestSum[c] for c in ChildrenOf[x] if BestSum[c]>NINF]\n    if len(bestList)<2: continue\n    fi,se = NINF, NINF\n    for x in bestList:\n        if x>fi:\n            se=fi\n            fi=x\n        elif x>se:\n            se=x\n    ans = max(ans, se+fi)\n    #if ans>NINF: break\n\n\nans = NINF\nSeen = set([1])\nque = [1]\ndq,cq = 0,0\nwhile dq<=cq:\n    u = que[dq]\n    dq+=1\n    Seen.add(u)\n    best=[]\n    for v in ChildrenOf[u]:\n        if v not in Seen:            \n            que.append(v)\n            cq+=1\n        if BestSum[v]>NINF: best.append(BestSum[v])    \n    ans = max(ans, getAns(best))\n\"\"\"\nprint ans if ans>NINF else \"Impossible\"\n",
    "prob_desc_created_at": "1481726100",
    "tags": [
        "dp",
        "dfs and similar",
        "trees",
        "graphs"
    ],
    "hidden_unit_tests": ""
}