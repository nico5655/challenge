{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"4 1 5 2 3\", \"2 3 1 4\"]",
    "src_uid": "3c73d33682dc4548646fd240b6e22471",
    "prob_desc_notes": null,
    "prob_desc_description": "Let A = {a1, a2, ..., an} be any permutation of the first n natural numbers {1, 2, ..., n}. You are given a positive integer k and another sequence B = {b1, b2, ..., bn}, where bi is the number of elements aj in A to the left of the element at = i such that aj ≥ (i + k).For example, if n = 5, a possible A is {5, 1, 4, 2, 3}. For k = 2, B is given by {1, 2, 1, 0, 0}. But if k = 3, then B = {1, 1, 0, 0, 0}.For two sequences X = {x1, x2, ..., xn} and Y = {y1, y2, ..., yn}, let i-th elements be the first elements such that xi ≠ yi. If xi &lt; yi, then X is lexicographically smaller than Y, while if xi &gt; yi, then X is lexicographically greater than Y.Given n, k and B, you need to determine the lexicographically smallest A.",
    "prob_desc_output_spec": "Print on a single line n integers of A = {a1, a2, ..., an} such that A is lexicographically minimal. It is guaranteed that the solution exists.",
    "prob_desc_input_spec": "The first line contains two space separated integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ n). On the second line are n integers specifying the values of B = {b1, b2, ..., bn}.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_035.jsonl",
    "code_uid": "555d5c78bb6cfb3aafe1e574c600e124",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 2\\n1 2 1 0 0\", \"4 2\\n1 0 0 0\"]",
    "exec_outcome": "PASSED",
    "source_code": "# /*******************************************************************************\n# * Author       : Quantum Of Excellence\n# * email        : quantumofexcellence (at) gmail (dot) com\n# * copyright    : 2014 - 2015\n# * date         : 6 - 11 - 2015\n# * Judge Status : \n# * file name    : 67B.py\n# * version      : 1.0\n# *\n# * TERMS OF USE - Write a mail to the author before copying or reusing the content of this file \n# * seeking our permission for the same.\n# * Copying/reuse of the below code without the permission of the author is prohibited and illegal.\n# *\n# * All rights reserved by Quantum Of Excellence.\n# ******************************************************************************/\n\n# /*******************************************************************************\n# * some pointers on the logic/idea - \n# *\n# * \n# *******************************************************************************/\n\n\n# test cases-\n\n\n#import sys\n#fi = open(\"G:\\DUMP\\input.in\",\"r\")\n#sys.stdin = fi\nu=input\nn,k=map(int,u().split())\nM=[int(i) for i in u().split()]\nm=0\nfor j in range(n):\n # find unvisited zeros\n for p in range(n):\n  if(0==M[p]):\n   print(p+1,end=' ')\n   break\n for l in range(p+1-k):M[l]-=1\n  # make the visited zero negative\n M[p]-=1\n",
    "prob_desc_created_at": "1300033800",
    "tags": [
        "greedy"
    ],
    "hidden_unit_tests": ""
}