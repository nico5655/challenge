{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"8\\n9\\n6\", \"5\"]",
    "src_uid": "290d9779a6be44ce6a2e62989aee0dbd",
    "prob_desc_notes": "NoteLet's see how the table changes in the second test case.After the first operation is fulfilled, the table looks like that:2 1 41 3 5After the second operation is fulfilled, the table looks like that:1 3 52 1 4So the answer to the third query (the number located in the first row and in the third column) will be 5.",
    "prob_desc_description": "The Free Meteor Association (FMA) has got a problem: as meteors are moving, the Universal Cosmic Descriptive Humorous Program (UCDHP) needs to add a special module that would analyze this movement. UCDHP stores some secret information about meteors as an n × m table with integers in its cells. The order of meteors in the Universe is changing. That's why the main UCDHP module receives the following queries:  The query to swap two table rows;  The query to swap two table columns;  The query to obtain a secret number in a particular table cell. As the main UCDHP module is critical, writing the functional of working with the table has been commissioned to you.",
    "prob_desc_output_spec": "For each query to obtain a number (si = \"g\") print the required number. Print the answers to the queries in the order of the queries in the input.",
    "prob_desc_input_spec": "The first line contains three space-separated integers n, m and k (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ 500000) — the number of table columns and rows and the number of queries, correspondingly. Next n lines contain m space-separated numbers each — the initial state of the table. Each number p in the table is an integer and satisfies the inequality 0 ≤ p ≤ 106. Next k lines contain queries in the format \"si xi yi\", where si is one of the characters \"с\", \"r\" or \"g\", and xi, yi are two integers.   If si = \"c\", then the current query is the query to swap columns with indexes xi and yi (1 ≤ x, y ≤ m, x ≠ y);  If si = \"r\", then the current query is the query to swap rows with indexes xi and yi (1 ≤ x, y ≤ n, x ≠ y);  If si = \"g\", then the current query is the query to obtain the number that located in the xi-th row and in the yi-th column (1 ≤ x ≤ n, 1 ≤ y ≤ m).  The table rows are considered to be indexed from top to bottom from 1 to n, and the table columns — from left to right from 1 to m.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1300,
    "file_name": "train_037.jsonl",
    "code_uid": "7cc64796923c4e435d9587d9ebb67904",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 3 5\\n1 2 3\\n4 5 6\\n7 8 9\\ng 3 2\\nr 3 2\\nc 2 3\\ng 2 2\\ng 3 2\", \"2 3 3\\n1 2 4\\n3 1 5\\nc 2 1\\nr 1 2\\ng 1 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "\"Template made by : https://codeforces.com/profile/c1729 , github repo : https://github.com/cheran-senthil/PyRival\"\nfrom __future__ import division, print_function\nimport bisect\nimport math\nimport itertools\nimport sys\nfrom atexit import register\n\nif sys.version_info[0] < 3:\n    from io import BytesIO as stream\nelse:\n    from io import StringIO as stream\n\n\nif sys.version_info[0] < 3:\n    class dict(dict):\n        \"\"\"dict() -> new empty dictionary\"\"\"\n        def items(self):\n            \"\"\"D.items() -> a set-like object providing a view on D's items\"\"\"\n            return dict.iteritems(self)\n\n        def keys(self):\n            \"\"\"D.keys() -> a set-like object providing a view on D's keys\"\"\"\n            return dict.iterkeys(self)\n\n        def values(self):\n            \"\"\"D.values() -> an object providing a view on D's values\"\"\"\n            return dict.itervalues(self)\n\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\n\ndef sync_with_stdio(sync=True):\n    \"\"\"Set whether the standard Python streams are allowed to buffer their I/O.\n\n    Args:\n        sync (bool, optional): The new synchronization setting.\n\n    \"\"\"\n    global input, flush\n\n    if sync:\n        flush = sys.stdout.flush\n    else:\n        sys.stdin = stream(sys.stdin.read())\n        input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n        sys.stdout = stream()\n        register(lambda: sys.__stdout__.write(sys.stdout.getvalue()))\n\ndef main():\n    n,m,k=map(int,input().split())\n    d1={}\n    d2={}\n    for i in range(1,n+1):\n        d1[i]=i\n    for i in range(1,m+1):\n        d2[i]=i\n    l1=[]\n    l2=[]\n    for i in range(0,n):\n        l2=list(map(int,input().split()))\n        l1.append(l2)\n    for i in range(0,k):\n        a,b,c=input().split()\n        b=int(b)\n        c=int(c)\n        if a=='g':\n            x=d1[b]\n            y=d2[c]\n            print(l1[x-1][y-1])\n        if a=='c':\n            temp=d2[b]\n            d2[b]=d2[c]\n            d2[c]=temp\n        if a=='r':\n            temp=d1[b]\n            d1[b]=d1[c]\n            d1[c]=temp\n        \nif __name__ == '__main__':\n    sync_with_stdio(False)\n    main()",
    "prob_desc_created_at": "1347291900",
    "tags": [
        "data structures",
        "implementation"
    ],
    "hidden_unit_tests": ""
}