{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"YES\\nNO\\nYES\\nNO\\nNO\\nYES\"]",
    "src_uid": "645459e0a41ec63b13648ea8dbe0f053",
    "prob_desc_notes": "NoteThe first test case is explained in the text of the problem statement.In the second test case, it is not possible to get a permutation.",
    "prob_desc_description": "You are given an array $$$a$$$ consisting of $$$n$$$ positive integers. You can perform operations on it.In one operation you can replace any element of the array $$$a_i$$$ with $$$\\lfloor \\frac{a_i}{2} \\rfloor$$$, that is, by an integer part of dividing $$$a_i$$$ by $$$2$$$ (rounding down).See if you can apply the operation some number of times (possible $$$0$$$) to make the array $$$a$$$ become a permutation of numbers from $$$1$$$ to $$$n$$$ —that is, so that it contains all numbers from $$$1$$$ to $$$n$$$, each exactly once.For example, if $$$a = [1, 8, 25, 2]$$$, $$$n = 4$$$, then the answer is yes. You could do the following:  Replace $$$8$$$ with $$$\\lfloor \\frac{8}{2} \\rfloor = 4$$$, then $$$a = [1, 4, 25, 2]$$$.  Replace $$$25$$$ with $$$\\lfloor \\frac{25}{2} \\rfloor = 12$$$, then $$$a = [1, 4, 12, 2]$$$.  Replace $$$12$$$ with $$$\\lfloor \\frac{12}{2} \\rfloor = 6$$$, then $$$a = [1, 4, 6, 2]$$$.  Replace $$$6$$$ with $$$\\lfloor \\frac{6}{2} \\rfloor = 3$$$, then $$$a = [1, 4, 3, 2]$$$. ",
    "prob_desc_output_spec": "For each test case, output on a separate line:   YES if you can make the array $$$a$$$ become a permutation of numbers from $$$1$$$ to $$$n$$$,  NO otherwise.  You can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).",
    "prob_desc_input_spec": "The first line of input data contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) —the number of test cases. Each test case contains exactly two lines. The first one contains an integer $$$n$$$ ($$$1 \\le n \\le 50$$$), the second one contains integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_102.jsonl",
    "code_uid": "8971cfde9ec53a1a5d328739190bf3e2",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n\\n4\\n\\n1 8 25 2\\n\\n2\\n\\n1 1\\n\\n9\\n\\n9 8 3 4 2 7 1 5 6\\n\\n3\\n\\n8 2 1\\n\\n4\\n\\n24 7 16 7\\n\\n5\\n\\n22 6 22 4 22\"]",
    "exec_outcome": "PASSED",
    "source_code": "def solve(): \r\n    n=int(input());l=[]\r\n    arr=[int(i) for i in input().split()]\r\n    if max(arr)<n:\r\n        print(\"NO\")\r\n        return \r\n    for i in arr : \r\n        while i>0 :\r\n            if i<=n and i not in l :\r\n                l.append(i)\r\n                break\r\n            i//=2\r\n    if len(l)==n :\r\n        print(\"YES\")\r\n        return \r\n    print(\"NO\")\r\n    return \r\nif __name__==\"__main__\" :\r\n    for x in range(int(input())) : solve()",
    "prob_desc_created_at": "1641825300",
    "tags": [
        "constructive algorithms",
        "flows",
        "graph matchings",
        "greedy",
        "math"
    ],
    "hidden_unit_tests": ""
}