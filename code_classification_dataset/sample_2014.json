{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"9 6 10 8 4 7 3 1 5 2 \\n-1\\n3 1 4 2 \\n5 3 6 2 4 1 \\n5 1 3 6 2 4 7 \\n13 9 7 11 8 4 1 3 5 2 6 10 12\"]",
    "src_uid": "9b8a5d9a6cfd6b3b5d0839eeece6f777",
    "prob_desc_notes": null,
    "prob_desc_description": "A permutation of length $$$n$$$ is an array $$$p=[p_1,p_2,\\dots,p_n]$$$, which contains every integer from $$$1$$$ to $$$n$$$ (inclusive) and, moreover, each number appears exactly once. For example, $$$p=[3,1,4,2,5]$$$ is a permutation of length $$$5$$$.For a given number $$$n$$$ ($$$n \\ge 2$$$), find a permutation $$$p$$$ in which absolute difference (that is, the absolute value of difference) of any two neighboring (adjacent) elements is between $$$2$$$ and $$$4$$$, inclusive. Formally, find such permutation $$$p$$$ that $$$2 \\le |p_i - p_{i+1}| \\le 4$$$ for each $$$i$$$ ($$$1 \\le i &lt; n$$$).Print any such permutation for the given integer $$$n$$$ or determine that it does not exist.",
    "prob_desc_output_spec": "Print $$$t$$$ lines. Print a permutation that meets the given requirements. If there are several such permutations, then print any of them. If no such permutation exists, print -1.",
    "prob_desc_input_spec": "The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 100$$$) â€” the number of test cases in the input. Then $$$t$$$ test cases follow. Each test case is described by a single line containing an integer $$$n$$$ ($$$2 \\le n \\le 1000$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_016.jsonl",
    "code_uid": "ed42cfaa5405db39b08da167fb9deb07",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n10\\n2\\n4\\n6\\n7\\n13\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nimport os\nimport time\nimport collections\nfrom collections import Counter, deque\nimport itertools\nimport math\nimport timeit\nimport random\nimport string\n\n#########################\n# imgur.com/Pkt7iIf.png #\n#########################\n\ndef sieve(n):\n    if n < 2: return list()\n    prime = [True for _ in range(n + 1)]\n    p = 3\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 2\n    r = [2]\n    for p in range(3, n + 1, 2):\n        if prime[p]:\n            r.append(p)\n    return r\n\ndef divs(n, start=1):\n    divisors = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            if n / i == i:\n                divisors.append(i)\n            else:\n                divisors.extend([i, n // i])\n    return divisors\n\ndef divn(n, primes):\n    divs_number = 1\n    for i in primes:\n        if n == 1:\n            return divs_number\n        t = 1\n        while n % i == 0:\n            t += 1\n            n //= i\n        divs_number *= t\n\ndef flin(d, x, default=-1):\n    left = right = -1\n    for i in range(len(d)):\n        if d[i] == x:\n            if left == -1: left = i\n            right = i\n    if left == -1:\n        return default, default\n    else:\n        return left, right\n\ndef ceil(n, k): return n // k + (n % k != 0)\ndef ii(): return int(input())\ndef mi(): return map(int, input().split())\ndef li(): return list(map(int, input().split()))\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef prr(a, sep=' ', end='\\n'): print(sep.join(map(str, a)), end=end)\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\n\n########################################################################################################################\ninput = sys.stdin.readline\n\nfor _ in range(ii()):\n    n = ii()\n    if n < 4:\n        print(-1)\n        continue\n    if n == 4:\n        print('3 1 4 2')\n        continue\n    a = []\n    b = []\n    c = []\n    d = []\n    for i in range(1, n + 1, 4):\n        a.append(i)\n        if i + 1 <= n:\n            b.append(i + 1)\n        if i + 2 <= n:\n            c.append(i + 2)\n        if i + 3 <= n:\n            d.append(i + 3)\n    d.reverse()\n    c.reverse()\n    print(*b, *d, *a, *c)\n\n\n\n",
    "prob_desc_created_at": "1590154500",
    "tags": [
        "constructive algorithms"
    ],
    "hidden_unit_tests": ""
}