{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"7\", \"12\", \"0\"]",
    "src_uid": "1eb41e764a4248744edce6a9e7e3517a",
    "prob_desc_notes": "NoteIn the first example pairs $$$(1, 2)$$$, $$$(1, 3)$$$, $$$(2, 3)$$$, $$$(3, 1)$$$, $$$(3, 4)$$$, $$$(4, 2)$$$, $$$(4, 3)$$$ suffice. They produce numbers $$$451$$$, $$$4510$$$, $$$110$$$, $$$1045$$$, $$$1012$$$, $$$121$$$, $$$1210$$$, respectively, each of them is divisible by $$$11$$$.In the second example all $$$n(n - 1)$$$ pairs suffice.In the third example no pair is sufficient.",
    "prob_desc_description": "You are given an array $$$a$$$, consisting of $$$n$$$ positive integers.Let's call a concatenation of numbers $$$x$$$ and $$$y$$$ the number that is obtained by writing down numbers $$$x$$$ and $$$y$$$ one right after another without changing the order. For example, a concatenation of numbers $$$12$$$ and $$$3456$$$ is a number $$$123456$$$.Count the number of ordered pairs of positions $$$(i, j)$$$ ($$$i \\neq j$$$) in array $$$a$$$ such that the concatenation of $$$a_i$$$ and $$$a_j$$$ is divisible by $$$k$$$.",
    "prob_desc_output_spec": "Print a single integer â€” the number of ordered pairs of positions $$$(i, j)$$$ ($$$i \\neq j$$$) in array $$$a$$$ such that the concatenation of $$$a_i$$$ and $$$a_j$$$ is divisible by $$$k$$$.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$, $$$2 \\le k \\le 10^9$$$). The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_041.jsonl",
    "code_uid": "ece6a7eed64e489890b03bcf111c4557",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6 11\\n45 1 10 12 11 7\", \"4 2\\n2 78 4 10\", \"5 2\\n3 7 19 3 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin, stdout\nti = lambda : stdin.readline().strip()\nos = lambda i : stdout.write(str(i) + '\\n')\nma = lambda fxn, ti : map(fxn, ti.split())\nol = lambda arr : stdout.write(' '.join(element for element in arr) + '\\n')\nolws = lambda arr : stdout.write(''.join(element for element in arr) + '\\n')\n\n\n\nclass Digit:\n\tdef __init__(self):\n\t\tself.count = {}\n\n\tdef increment(self, k):\n\t\tif self.count.has_key(k):\n\t\t\tgot = self.count[k]\n\t\t\tself.count[k] += 1\n\t\telse:\n\t\t\tself.count[k] = 1\n\n\tdef found(self, k):\n\t\tif self.count.has_key(k):\n\t\t\treturn self.count[k]\n\t\telse:\n\t\t\treturn 0\n\nn, mod = ma(int, ti())\narray = ma(int, ti())\n\n\nans = 0\ndigits = [None]*11\nfor i in range(11):\n\tdigits[i] = Digit()\n\nfor i in range(n):\n\ttemp = array[i]%mod\n\n\tfor j in range(10):\n\t\ttemp *= 10\n\t\ttemp %= mod\n\n\t\tdigits[j+1].increment(temp)\n\nfor i in range(n):\n\ttemp = array[i]\n\tcount = 0\n\twhile temp>0:\n\t\ttemp /= 10\n\t\tcount += 1\n\n\tfind = mod-array[i]%mod\n\tfind %= mod\n\tans += digits[count].found(find)\n\nfor i in range(n):\n\ttemp1 = array[i]%mod\n\ttemp2 = array[i]\n\n\twhile temp2 > 0:\n\t\ttemp2 /= 10\n\t\ttemp1 *= 10\n\t\ttemp1 %= mod\n\n\tif ((temp1 + array[i])%mod == 0):\n\t\tans -= 1\n\nos(ans)",
    "prob_desc_created_at": "1535122200",
    "tags": [
        "implementation",
        "math"
    ],
    "hidden_unit_tests": ""
}