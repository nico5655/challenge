{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"24\", \"1574\", \"0\", \"667387032\"]",
    "src_uid": "51406f6578e8de38100c6af082bfb05e",
    "prob_desc_notes": "NoteIn the first example there are:   $$$6$$$ pairs of substrings \"a\" and \"b\", each with valid merging sequences \"01\" and \"10\";  $$$3$$$ pairs of substrings \"a\" and \"bb\", each with a valid merging sequence \"101\";  $$$4$$$ pairs of substrings \"aa\" and \"b\", each with a valid merging sequence \"010\";  $$$2$$$ pairs of substrings \"aa\" and \"bb\", each with valid merging sequences \"0101\" and \"1010\";  $$$2$$$ pairs of substrings \"aaa\" and \"b\", each with no valid merging sequences;  $$$1$$$ pair of substrings \"aaa\" and \"bb\" with a valid merging sequence \"01010\"; Thus, the answer is $$$6 \\cdot 2 + 3 \\cdot 1 + 4 \\cdot 1 + 2 \\cdot 2 + 2 \\cdot 0 + 1 \\cdot 1 = 24$$$.",
    "prob_desc_description": "You are given two strings $$$x$$$ and $$$y$$$, both consist only of lowercase Latin letters. Let $$$|s|$$$ be the length of string $$$s$$$.Let's call a sequence $$$a$$$ a merging sequence if it consists of exactly $$$|x|$$$ zeros and exactly $$$|y|$$$ ones in some order.A merge $$$z$$$ is produced from a sequence $$$a$$$ by the following rules:   if $$$a_i=0$$$, then remove a letter from the beginning of $$$x$$$ and append it to the end of $$$z$$$;  if $$$a_i=1$$$, then remove a letter from the beginning of $$$y$$$ and append it to the end of $$$z$$$. Two merging sequences $$$a$$$ and $$$b$$$ are different if there is some position $$$i$$$ such that $$$a_i \\neq b_i$$$.Let's call a string $$$z$$$ chaotic if for all $$$i$$$ from $$$2$$$ to $$$|z|$$$ $$$z_{i-1} \\neq z_i$$$.Let $$$s[l,r]$$$ for some $$$1 \\le l \\le r \\le |s|$$$ be a substring of consecutive letters of $$$s$$$, starting from position $$$l$$$ and ending at position $$$r$$$ inclusive.Let $$$f(l_1, r_1, l_2, r_2)$$$ be the number of different merging sequences of $$$x[l_1,r_1]$$$ and $$$y[l_2,r_2]$$$ that produce chaotic merges. Note that only non-empty substrings of $$$x$$$ and $$$y$$$ are considered.Calculate $$$\\sum \\limits_{1 \\le l_1 \\le r_1 \\le |x| \\\\ 1 \\le l_2 \\le r_2 \\le |y|} f(l_1, r_1, l_2, r_2)$$$. Output the answer modulo $$$998\\,244\\,353$$$.",
    "prob_desc_output_spec": "Print a single integer — the sum of $$$f(l_1, r_1, l_2, r_2)$$$ over $$$1 \\le l_1 \\le r_1 \\le |x|$$$ and $$$1 \\le l_2 \\le r_2 \\le |y|$$$ modulo $$$998\\,244\\,353$$$.",
    "prob_desc_input_spec": "The first line contains a string $$$x$$$ ($$$1 \\le |x| \\le 1000$$$). The second line contains a string $$$y$$$ ($$$1 \\le |y| \\le 1000$$$). Both strings consist only of lowercase Latin letters.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_104.jsonl",
    "code_uid": "ae7e9bae89e36a685ae40ec87ba72964",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"aaa\\nbb\", \"code\\nforces\", \"aaaaa\\naaa\", \"justamassivetesttocheck\\nhowwellyouhandlemodulooperations\"]",
    "exec_outcome": "PASSED",
    "source_code": "\n\ns=[0]+list(input())\nt=[0]+list(input())\nn=len(s)-1\nm=len(t)-1\nmod=998244353\nfor i in range(1,n+1):\n    s[i]=ord(s[i])-96\nfor i in range(1,m+1):\n    t[i]=ord(t[i])-96\ndef _(i,j,fs,ft,al):\n    if min(i,j)<0:return -1\n    return (((i*(m+1)+j)*2+fs)*2+ft)*2+al\ndp=[0]*(n+3)*(m+3)*2*2*2\n\nfor i in range(n+1):\n    for j in range(m+1):\n        for bit in range(4):\n            fs=(bit>>0)&1\n            ft=(bit>>1)&1\n            if fs==ft==0:continue\n            if fs==1 and ft==0:\n                if s[i]!=s[i-1]:\n                    dp[_(i,j,1,0,0)]+=dp[_(i-1,j,1,0,0)]\n                    dp[_(i,j,1,0,0)]%=mod\n                if i>=1:dp[_(i,j,1,0,0)]+=1\n            elif fs==0 and ft==1:\n                if t[j]!=t[j-1]:\n                    dp[_(i,j,0,1,1)]+=dp[_(i,j-1,0,1,1)]\n                    dp[_(i,j,0,1,1)]%=mod\n                if j>=1:dp[_(i,j,0,1,1)]+=1\n            else:\n                if s[i]!=s[i-1]:\n                    dp[_(i,j,1,1,0)]+=dp[_(i-1,j,1,1,0)]\n                if s[i]!=t[j]:\n                    dp[_(i,j,1,1,0)]+=dp[_(i-1,j,1,1,1)]+dp[_(i-1,j,0,1,1)]\n                dp[_(i,j,1,1,0)]%=mod\n                if t[j]!=t[j-1]:\n                    dp[_(i,j,1,1,1)]+=dp[_(i,j-1,1,1,1)]\n                if t[j]!=s[i]:\n                    dp[_(i,j,1,1,1)]+=dp[_(i,j-1,1,1,0)]+dp[_(i,j-1,1,0,0)]\n                dp[_(i,j,1,1,1)]%=mod\n\nans=0\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        ans+=dp[_(i,j,1,1,1)]+dp[_(i,j,1,1,0)]\n        ans%=mod\nprint(ans)\n\n\n\n",
    "prob_desc_created_at": "1616079000",
    "tags": [
        "combinatorics",
        "dp",
        "math",
        "strings"
    ],
    "hidden_unit_tests": ""
}