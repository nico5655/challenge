{
    "prob_desc_time_limit": "4 seconds",
    "prob_desc_sample_outputs": "[\"2\", \"40\", \"1871528\", \"177013\"]",
    "src_uid": "1850d71694b25c612740bb584eb8a4c0",
    "prob_desc_notes": "NoteIn the first sample, both the possible arrays $$$[0]$$$ and $$$[1]$$$ are good.In the second sample, some examples of good arrays are: $$$[2, 1, 2]$$$ because it is already PalindORme. $$$[1, 1, 0]$$$ because it can rearranged to $$$[1, 0, 1]$$$ which is PalindORmeNote that $$$[1, 1, 0]$$$, $$$[1, 0, 1]$$$ and $$$[0, 1, 1]$$$ are all good arrays and are considered to be different according to the definition in the statement.In the third sample, an example of a good array is $$$[1, 0, 1, 4, 2, 5, 4]$$$. It can be rearranged to an array $$$b = [1, 5, 0, 2, 4, 4, 1]$$$ which is a PalindORme because: $$$\\mathrm{OR}(1, 1)$$$ = $$$\\mathrm{OR}(7, 7)$$$ = $$$1$$$ $$$\\mathrm{OR}(1, 2)$$$ = $$$\\mathrm{OR}(6, 7)$$$ = $$$5$$$ $$$\\mathrm{OR}(1, 3)$$$ = $$$\\mathrm{OR}(5, 7)$$$ = $$$5$$$ $$$\\mathrm{OR}(1, 4)$$$ = $$$\\mathrm{OR}(4, 7)$$$ = $$$7$$$ $$$\\mathrm{OR}(1, 5)$$$ = $$$\\mathrm{OR}(3, 7)$$$ = $$$7$$$ $$$\\mathrm{OR}(1, 6)$$$ = $$$\\mathrm{OR}(2, 7)$$$ = $$$7$$$ $$$\\mathrm{OR}(1, 7)$$$ = $$$\\mathrm{OR}(1, 7)$$$ = $$$7$$$Here $$$\\mathrm{OR}(l, r)$$$ denotes $$$b_{l}$$$ $$$|$$$ $$$b_{l+1} $$$ $$$|$$$ $$$ \\ldots $$$ $$$|$$$ $$$ b_{r}$$$",
    "prob_desc_description": "An integer array $$$a$$$ of length $$$n$$$ is said to be a PalindORme if ($$$a_{1}$$$ $$$|$$$ $$$a_{2} $$$ $$$|$$$ $$$ \\ldots $$$ $$$|$$$ $$$ a_{i}) = (a_{{n - i + 1}} $$$ $$$|$$$ $$$ \\ldots $$$ $$$|$$$ $$$ a_{{n - 1}} $$$ $$$|$$$ $$$ a_{n}) $$$ for all $$$ 1 \\leq i \\leq n$$$, where $$$|$$$ denotes the bitwise OR operation.An integer array $$$a$$$ of length $$$n$$$ is considered to be good if its elements can be rearranged to form a PalindORme. Formally, array $$$a$$$ is good if there exists a permutation $$$p_1, p_2, \\ldots p_n$$$ (an array where each integer from $$$1$$$ to $$$n$$$ appears exactly once) for which $$$a_{p_1}, a_{p_2}, \\ldots a_{p_n}$$$ is a PalindORme.Find the number of good arrays of length $$$n$$$, consisting only of integers in the range $$$[0, 2^{k} - 1]$$$, and print it modulo some prime $$$m$$$.Two arrays $$$a_1, a_2, \\ldots, a_n$$$ and $$$b_1, b_2, \\ldots, b_n$$$ are considered to be different if there exists any $$$i$$$ $$$(1 \\leq i \\leq n)$$$ such that $$$a_i \\ne b_i$$$.",
    "prob_desc_output_spec": "Print a single integer  — the number of good arrays modulo $$$m$$$.",
    "prob_desc_input_spec": "The first and only line of the input contains three integers $$$n$$$, $$$k$$$ and $$$m$$$ ($$$1 \\leq n,k \\leq 80$$$, $$$10^8 \\lt m \\lt 10^9$$$). It is guaranteed that $$$m$$$ is prime.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2900,
    "file_name": "train_097.jsonl",
    "code_uid": "4096d24ed32012b4515050cc6dd1e7ff",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1 1 998244353\", \"3 2 999999733\", \"7 3 796735397\", \"2 46 606559127\"]",
    "exec_outcome": "PASSED",
    "source_code": "def solution():\r\n    def nPr(n, k):\r\n        return reduce(lambda x, y: (x*y)%m, (i for i in xrange(n-k+1, n+1)), 1)\r\n\r\n    n, k, m = map(int, raw_input().strip().split())\r\n    pow2 = [1]*(n*k+1)\r\n    for i in xrange(1, n*k+1):\r\n        pow2[i] = pow2[i-1]*2 % m\r\n    C = [[0]*(max(n, k)+1) for _ in xrange(max(n, k)+1)]\r\n    for i in xrange(max(n, k)+1):\r\n        C[i][0] = 1\r\n        for j in xrange(1, max(n, k)+1):\r\n            C[i][j] = (C[i-1][j]+C[i-1][j-1]) % m\r\n    total, distinct_positive = [[[0]*(k+1) for _ in xrange(n+1)] for _ in xrange(2)]\r\n    for i in xrange(n+1):\r\n        for j in xrange(k+1):\r\n            for l in xrange(j+1):\r\n                total[i][j] = (total[i][j] + (-1 if ((j-l)%2) else 1)*(C[j][l]*pow2[i*l] % m)) % m\r\n                distinct_positive[i][j] = (distinct_positive[i][j] + (-1 if ((j-l)%2) else 1)*(C[j][l]*nPr(pow2[l]-1, i) % m)) % m\r\n    bad = [[0]*(k+1) for _ in xrange(n+1)]\r\n    for i in xrange(1, n+1):\r\n        for j in xrange(k+1):\r\n            for a in xrange(i):\r\n                for b in xrange(j):\r\n                    if n%2 and a == n-1:\r\n                        continue\r\n                    bad[i][j] = (bad[i][j] + ((((C[i][a] * C[j][b] % m) * distinct_positive[i-a][j-b]) % m) * ((((total[a][b]-bad[a][b]) % m) * pow2[(i-a)*b]) % m)) % m) % m\r\n    return reduce(lambda x, y: (x+y)%m, (C[k][i] * (total[n][i]-bad[n][i]) % m for i in xrange(k+1)))\r\n\r\nprint '%s' % solution()\r\n",
    "prob_desc_created_at": "1636727700",
    "tags": [
        "combinatorics",
        "dp"
    ],
    "hidden_unit_tests": ""
}