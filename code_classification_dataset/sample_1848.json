{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"3\\n1 4 7\", \"3\\n1 2 4\", \"4\\n1 3 5 6\"]",
    "src_uid": "7f9c5a137e9304d4d7eee5ee1a891d1d",
    "prob_desc_notes": null,
    "prob_desc_description": "The only difference between easy and hard versions is constraints.You are given $$$n$$$ segments on the coordinate axis $$$OX$$$. Segments can intersect, lie inside each other and even coincide. The $$$i$$$-th segment is $$$[l_i; r_i]$$$ ($$$l_i \\le r_i$$$) and it covers all integer points $$$j$$$ such that $$$l_i \\le j \\le r_i$$$.The integer point is called bad if it is covered by strictly more than $$$k$$$ segments.Your task is to remove the minimum number of segments so that there are no bad points at all.",
    "prob_desc_output_spec": "In the first line print one integer $$$m$$$ ($$$0 \\le m \\le n$$$) — the minimum number of segments you need to remove so that there are no bad points. In the second line print $$$m$$$ distinct integers $$$p_1, p_2, \\dots, p_m$$$ ($$$1 \\le p_i \\le n$$$) — indices of segments you remove in any order. If there are multiple answers, you can print any of them.",
    "prob_desc_input_spec": "The first line of the input contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 200$$$) — the number of segments and the maximum number of segments by which each integer point can be covered. The next $$$n$$$ lines contain segments. The $$$i$$$-th line contains two integers $$$l_i$$$ and $$$r_i$$$ ($$$1 \\le l_i \\le r_i \\le 200$$$) — the endpoints of the $$$i$$$-th segment.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_013.jsonl",
    "code_uid": "b8150709a877bf33cedb42bb4c0c613f",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\", \"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\", \"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nfrom heapq import *\n#sys.stdin = open('in', 'r')\n#n = int(input())\nn,k = map(int, input().split())\nseg = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    seg.append((l, r, i+1))\nseg.sort()\nc = 0\nres = []\ni = 0\nhmin = []\nhmax = []\nrem = set()\nwhile i < n:\n    l,r,si = seg[i]\n    while i < n and seg[i][0] == l:\n        _,r,si = seg[i]\n        heappush(hmax, (-r, si))\n        heappush(hmin, (r, si))\n        i += 1\n        c += 1\n    while len(hmin) > 0 and hmin[0][0] < l:\n        mr,ind = heappop(hmin)\n        if ind not in rem:\n            c -= 1\n    while c > k:\n        mr,ind = heappop(hmax)\n        res.append(ind)\n        rem.add(ind)\n        c -= 1\nprint(len(res))\nif len(res) > 0:\n    print(' '.join(map(str, res)))\n        \n        \n\n\n\n\n\n#sys.stdout.write('YES\\n')\n#sys.stdout.write(f'{res}\\n')\n#sys.stdout.write(f'{y1} {x1} {y2} {x2}\\n')\n",
    "prob_desc_created_at": "1571754900",
    "tags": [
        "greedy"
    ],
    "hidden_unit_tests": ""
}