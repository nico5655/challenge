{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"8\\n3 1\\n4 2\\n4 5\\n2 5\\n5 1\\n3 2\\n2 1\\n5 3\", \"4\\n1 2\\n1 3\\n1 4\\n2 3\"]",
    "src_uid": "1fa93a236c36f75120af3534d6226fa9",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given a sequence of n positive integers d1, d2, ..., dn (d1 &lt; d2 &lt; ... &lt; dn). Your task is to construct an undirected graph such that:  there are exactly dn + 1 vertices;  there are no self-loops;  there are no multiple edges;  there are no more than 106 edges;  its degree set is equal to d. Vertices should be numbered 1 through (dn + 1).Degree sequence is an array a with length equal to the number of vertices in a graph such that ai is the number of vertices adjacent to i-th vertex.Degree set is a sorted in increasing order sequence of all distinct values from the degree sequence.It is guaranteed that there exists such a graph that all the conditions hold, and it contains no more than 106 edges.Print the resulting graph.",
    "prob_desc_output_spec": "In the first line print one integer m (1 ≤ m ≤ 106) — the number of edges in the resulting graph. It is guaranteed that there exists such a graph that all the conditions hold and it contains no more than 106 edges. Each of the next m lines should contain two integers vi and ui (1 ≤ vi, ui ≤ dn + 1) — the description of the i-th edge.",
    "prob_desc_input_spec": "The first line contains one integer n (1 ≤ n ≤ 300) — the size of the degree set. The second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 1000, d1 &lt; d2 &lt; ... &lt; dn) — the degree set.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2500,
    "file_name": "train_033.jsonl",
    "code_uid": "d35e8cbd88b76a7a42127b7b008bf92b",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n2 3 4\", \"3\\n1 2 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin\nfrom sys import stdout\n\nn = int(stdin.readline())\nd = [0] + list(map(int, stdin.readline().split()))\ne = []\nfor i in range(1, n+1):\n\tfor u in range(d[i-1]+1, d[i]+1):\n\t\tfor v in range(u+1, d[n-i+1]+2):\n\t\t\te.append([u,v])\nstdout.write(\"{}\\n\".format(len(e)))\nfor ei in e: stdout.write(\"{} {}\\n\".format(ei[0], ei[1]))",
    "prob_desc_created_at": "1525099200",
    "tags": [
        "constructive algorithms",
        "implementation",
        "graphs"
    ],
    "hidden_unit_tests": ""
}