{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"NO\", \"YES\", \"YES\", \"NO\", \"YES\"]",
    "src_uid": "a48ef749bf54d673772e09025ae806de",
    "prob_desc_notes": "NoteIn example 1 and 2, we have 3 people: tourist, Petr and me (cgy4ever). You can see that whatever handle is chosen, I must be the first, then tourist and Petr must be the last.In example 3, if Copernicus uses \"copernicus\" as his handle, everything will be alright.",
    "prob_desc_description": "A way to make a new task is to make it nondeterministic or probabilistic. For example, the hard task of Topcoder SRM 595, Constellation, is the probabilistic version of a convex hull.Let's try to make a new task. Firstly we will use the following task. There are n people, sort them by their name. It is just an ordinary sorting problem, but we can make it more interesting by adding nondeterministic element. There are n people, each person will use either his/her first name or last name as a handle. Can the lexicographical order of the handles be exactly equal to the given permutation p?More formally, if we denote the handle of the i-th person as hi, then the following condition must hold: .",
    "prob_desc_output_spec": "If it is possible, output \"YES\", otherwise output \"NO\".",
    "prob_desc_input_spec": "The first line contains an integer n (1 ≤ n ≤ 105) — the number of people. The next n lines each contains two strings. The i-th line contains strings fi and si (1 ≤ |fi|, |si| ≤ 50) — the first name and last name of the i-th person. Each string consists only of lowercase English letters. All of the given 2n strings will be distinct. The next line contains n distinct integers: p1, p2, ..., pn (1 ≤ pi ≤ n).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_004.jsonl",
    "code_uid": "c76b822aa64e797b6a344bf1a666cbc4",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n1 2 3\", \"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n3 1 2\", \"2\\ngalileo galilei\\nnicolaus copernicus\\n2 1\", \"10\\nrean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n1 2 3 4 5 6 7 8 9 10\", \"10\\nrean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n2 4 9 6 5 7 1 3 8 10\"]",
    "exec_outcome": "PASSED",
    "source_code": "# coding: utf-8\n\ndef find_k_smallest(A,k):\n    \n    temp=A\n    for j in range(k):\n        min_el = A[0]\n        min_ind = 0\n        for ind,el in enumerate(temp):\n            if el> min_el:\n                min_el= el\n                min_ind = ind\n                \n        temp[min_ind] = -float('inf')\n        \n    return min_ind,min_el\n        \n\ndef sol():\n    n = int(input())\n    \n    names = []\n    for i in range(n):\n        name = input()\n        names.append(name)\n        \n    vec =[int(x)for x in input().split(' ')]\n    \n    handles = []\n    \n    \n    for ind,v in enumerate(vec):\n        if handles:\n#             min_handle_ind,_ = find_k_smallest(vec,ind+1)\n            handle1 = min(names[v-1].split(\" \"))\n            handle2 = max(names[v-1].split(\" \"))\n\n            if handle1 > handles[-1]:\n                handles.append(handle1)\n            elif handle2 > handles[-1]:\n                handles.append(handle2)\n            else:\n                print('NO')\n                return 'NO'\n            \n        else:\n            handle = min(names[v-1].split(\" \"))\n            handles.append(handle)\n    \n    print(\"YES\")\n    return \"YES\"\nsol()\n\n\n\n             \n             \n",
    "prob_desc_created_at": "1411918500",
    "tags": [
        "greedy"
    ],
    "hidden_unit_tests": ""
}