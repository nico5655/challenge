{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"4\\n3\", \"8\\n9\\n7\\n6\\n9\"]",
    "src_uid": "740d2aba32f69b8cfe8f7cb624621a63",
    "prob_desc_notes": "NoteIn the first example:In the first query there are $$$4$$$ arrays that are $$$5$$$-similar to $$$[2,4]$$$: $$$[1,4],[3,4],[2,3],[2,5]$$$.In the second query there are $$$3$$$ arrays that are $$$5$$$-similar to $$$[4,5]$$$: $$$[1,5],[2,5],[3,5]$$$.",
    "prob_desc_description": "Given a positive integer $$$k$$$, two arrays are called $$$k$$$-similar if:  they are strictly increasing;  they have the same length;  all their elements are positive integers between $$$1$$$ and $$$k$$$ (inclusive);  they differ in exactly one position. You are given an integer $$$k$$$, a strictly increasing array $$$a$$$ and $$$q$$$ queries. For each query, you are given two integers $$$l_i \\leq r_i$$$. Your task is to find how many arrays $$$b$$$ exist, such that $$$b$$$ is $$$k$$$-similar to array $$$[a_{l_i},a_{l_i+1}\\ldots,a_{r_i}]$$$. ",
    "prob_desc_output_spec": "Print $$$q$$$ lines. The $$$i$$$-th of them should contain the answer to the $$$i$$$-th query.",
    "prob_desc_input_spec": "The first line contains three integers $$$n$$$, $$$q$$$ and $$$k$$$ ($$$1\\leq n, q \\leq 10^5$$$, $$$n\\leq k \\leq 10^9$$$) — the length of array $$$a$$$, the number of queries and number $$$k$$$. The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots,a_n$$$ ($$$1 \\leq a_i \\leq k$$$). This array is strictly increasing  — $$$a_1 &lt; a_2 &lt; \\ldots &lt; a_n$$$. Each of the following $$$q$$$ lines contains two integers $$$l_i$$$, $$$r_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1200,
    "file_name": "train_092.jsonl",
    "code_uid": "4f7ad7291bece73019a6d44146bd4ca4",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 2 5\\n1 2 4 5\\n2 3\\n3 4\", \"6 5 10\\n2 4 6 7 8 9\\n1 4\\n1 2\\n3 5\\n1 6\\n5 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\nimport math\r\n\r\n\r\ndef prime_generator(nr_elemente_prime):\r\n \r\n #print(\"pornire\")\r\n vector_prime=[-1]*nr_elemente_prime\r\n vector_rasp=[0]*nr_elemente_prime\r\n \r\n vector_prime[1]=1\r\n \r\n vector_rasp[1]=1\r\n#primes sieve \r\n contor=2\r\n \r\n for i in range(2,nr_elemente_prime):\r\n  if vector_prime[i]==-1:\r\n   vector_prime[i]=1\r\n   vector_rasp[contor]=i\r\n   contor=contor+1\r\n  for j in range(i+i,nr_elemente_prime,i):\r\n    if vector_prime[j]==-1:\r\n     vector_prime[j]=i\r\n   #print(i,j) \r\n \r\n my_set=set(vector_rasp)\r\n my_set.remove(0)\r\n my_set.remove(1)\r\n \r\n lista_prime=list(my_set)\r\n lista_prime.sort()\r\n return lista_prime\r\n \r\n \r\nvector_prime= prime_generator(1000000)\r\n#print(vector_prime) \r\n\r\nset_prime=set(vector_prime)\r\n\r\n\r\ndef functie_divizori(numar):\r\n radical=int(numar**(1/2))\r\n set_divizori=set()\r\n if numar==1:\r\n  set_divizori.add(1)\r\n elif numar in set_prime:\r\n  set_divizori.add(numar)\r\n else: \r\n  for x in vector_prime:\r\n   if x>radical:\r\n    break\r\n   else: \r\n    if numar%x==0:\r\n     set_divizori.add(x)\r\n     set_divizori.add(numar//x)\r\n    \r\n  set_divizori.add(numar)\r\n return set_divizori\r\n \r\n#print(functie_divizori(6)) \r\n \r\ndef printare_matrice(mat):\r\n for i in mat:\r\n  for j in i:\r\n   print(j,end=' ')\r\n  print() \r\n \r\n \r\ndef transformare_baza(numar,baza):\r\n \r\n transformare=\"\"\r\n while numar>=baza:\r\n  rest=numar%baza\r\n  numar=numar//baza\r\n  transformare+=str(rest)\r\n \r\n transformare+=str(numar)\r\n noua_baza=transformare[::-1]\r\n return noua_baza\r\n \r\ndef cautare_binara(pozitie,vector):\r\n \r\n  #print(\"aici\")\r\n  pornire=0\r\n  oprire=pozitie-1\r\n  noua_pozitie=(pornire+oprire)//2\r\n  \r\n  diferenta=vector[pozitie][0]-vector[pozitie][1]\r\n  #print(\"dif=\",diferenta)\r\n  #print(pozitie,pornire,oprire,noua_pozitie)\r\n  \r\n  while pornire+1<oprire:\r\n   \r\n  # print(noua_pozitie,vector[noua_pozitie][0])\r\n   while  pornire+1<oprire and diferenta<=vector[noua_pozitie][0]:\r\n   # print(\"aici?\",noua_pozitie,vector[noua_pozitie][0])\r\n    oprire=noua_pozitie\r\n    noua_pozitie=(pornire+oprire)//2\r\n    \r\n    \r\n   while  pornire+1<oprire and diferenta>vector[noua_pozitie][0]: \r\n    #print(noua_pozitie,vector[noua_pozitie][0])\r\n    pornire=noua_pozitie\r\n    noua_pozitie=(pornire+oprire)//2\r\n  \r\n  \r\n # print(\"p=\",pornire,\"d=\",diferenta) \r\n  while vector[pornire][0]<diferenta:\r\n   pornire+=1\r\n  while pornire-1>=0 and vector[pornire-1][0]>=diferenta:\r\n    pornire-=1\r\n    \r\n   \r\n  \r\n  \r\n\r\n  return (pozitie-pornire)\r\n \r\n#vector = sorted(vector, key=lambda x: x[0])\r\n \r\n #lista=list(map(int,input().split()))\r\n#alfabet = {'a': 1, 'b': 2,'c': 3,'d': 4,'e': 5,'f': 6,'g': 7,'h': 8,'i': 9,'j': 10,'k': 11,'l': 12,'m': 13,'n': 14,'o': 15,'p': 16,'q': 17,'r': 18,'s': 19,'t': 20,'u': 21,'v': 22,'w': 23,'x': 24,'y': 25,'z': 26}\r\n#alfabet_2={'1':\"a\", '2':\"b\", '3':\"c\", '4':\"d\", '5':\"e\", '6':\"f\", '7':\"g\", '8':\"h\", '9':\"i\", '10':\"j\", '11':\"k\", '12':\"l\", '13':\"m\", '14':\"n\", '15':\"o\", '16':\"p\", '17':\"q\", '18':\"r\", '19':\"s\", '20':\"t\", '21':\"u\", '22':\"v\", '23':\"w\", '24':\"x\", '25':\"y\", '26':\"z\"}\r\n \r\n \r\n#print(vector[0:10])\r\n#print(lista[0:10])\r\n \r\n#z=int(input())\r\nfor contorr in range(1):\r\n \r\n n,q,k= list(map(int, sys.stdin.readline().split()))\r\n vector=list(map(int, sys.stdin.readline().split()))\r\n# val=list(map(int, sys.stdin.readline().split()))\r\n# blocari.append(n) \r\n \r\n if n==1:\r\n  for jj in range(q):\r\n   print(k-1)\r\n else: \r\n  \r\n  left=[]\r\n  \r\n  left.append(vector[1]-2)\r\n # left=[0]*n\r\n # left[0]=vector[1]-2\r\n \r\n \r\n  right=[]\r\n  right.append(k-1)\r\n  \r\n \r\n  #print(right[n-1])\r\n \r\n \r\n  intre=[]\r\n  intre.append(0)\r\n  startare=[]\r\n  startare.append(0)\r\n  \r\n  for i in range(1,n-1):\r\n \r\n   left.append(vector[i+1]-2)\r\n   right.append(k-vector[i-1]-1)\r\n   intre.append(vector[i+1]-vector[i-1]-2)\r\n  \r\n   startare.append(startare[i-1]+intre[i])\r\n   \r\n  intre.append(0)\r\n  left.append(k-vector[n-1])\r\n  right.append(k-vector[n-2]-1)\r\n\r\n  startare.append(0)\r\n # print(intre,left,right,startare) \r\n  \r\n  \r\n  #print(intre,left,right) \r\n\r\n  for x in range(q):\r\n   l,r= map(int, sys.stdin.readline().split())\r\n   l-=1\r\n   r-=1\r\n   \r\n   #print(x)\r\n   if l==r:\r\n    print(k-1)\r\n   else: \r\n    print(int(left[l]+right[r]+startare[r-1]-startare[l]))\r\n  \r\n\r\n   \r\n  \r\n \r\n\r\n \r\n   \r\n  \r\n  ",
    "prob_desc_created_at": "1613141400",
    "tags": [
        "dp",
        "implementation",
        "math"
    ],
    "hidden_unit_tests": ""
}