{
    "prob_desc_time_limit": "4 seconds",
    "prob_desc_sample_outputs": "[\"3\\n2\\n0\\n2\\n3\\n2\"]",
    "src_uid": "18ac51a009c907fe8e4cd2bb8612da20",
    "prob_desc_notes": "NoteIn the first test case of the example, all $$$3$$$ words can be used to make an interesting story. The interesting story is \"bac aaada e\".In the second test case of the example, the $$$1$$$-st and the $$$3$$$-rd words can be used to make an interesting story. The interesting story is \"aba aba\". Stephen can't use all three words at the same time.In the third test case of the example, Stephen can't make a non-empty interesting story. So the answer is $$$0$$$.In the fourth test case of the example, Stephen can use the $$$3$$$-rd and the $$$4$$$-th words to make an interesting story. The interesting story is \"c bc\".",
    "prob_desc_description": "Stephen Queen wants to write a story. He is a very unusual writer, he uses only letters 'a', 'b', 'c', 'd' and 'e'!To compose a story, Stephen wrote out $$$n$$$ words consisting of the first $$$5$$$ lowercase letters of the Latin alphabet. He wants to select the maximum number of words to make an interesting story.Let a story be a sequence of words that are not necessarily different. A story is called interesting if there exists a letter which occurs among all words of the story more times than all other letters together.For example, the story consisting of three words \"bac\", \"aaada\", \"e\" is interesting (the letter 'a' occurs $$$5$$$ times, all other letters occur $$$4$$$ times in total). But the story consisting of two words \"aba\", \"abcde\" is not (no such letter that it occurs more than all other letters in total).You are given a sequence of $$$n$$$ words consisting of letters 'a', 'b', 'c', 'd' and 'e'. Your task is to choose the maximum number of them to make an interesting story. If there's no way to make a non-empty story, output $$$0$$$.",
    "prob_desc_output_spec": "For each test case, output the maximum number of words that compose an interesting story. Print 0 if there's no way to make a non-empty interesting story.",
    "prob_desc_input_spec": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 5000$$$) — the number of test cases. Then $$$t$$$ test cases follow. The first line of each test case contains one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the number of the words in the sequence. Then $$$n$$$ lines follow, each of them contains a word — a non-empty string consisting of lowercase letters of the Latin alphabet. The words in the sequence may be non-distinct (i. e. duplicates are allowed). Only the letters 'a', 'b', 'c', 'd' and 'e' may occur in the words. It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$; the sum of the lengths of all words over all test cases doesn't exceed $$$4 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_099.jsonl",
    "code_uid": "8fd50b67079b4c7396bf6c3942dcbd95",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n3\\nbac\\naaada\\ne\\n3\\naba\\nabcde\\naba\\n2\\nbaba\\nbaba\\n4\\nab\\nab\\nc\\nbc\\n5\\ncbdca\\nd\\na\\nd\\ne\\n3\\nb\\nc\\nca\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin, stdout\n\n\nt = int(stdin.readline())\nfor tt in range(t):\n    n = int(stdin.readline())\n    a = [stdin.readline().strip() for i in range(n)]\n\n    chars = 'abcde'\n    # c_count = [{c: 0 for c in chars} for i in range(n)]\n    # not_c_count = [{c: 0 for c in chars} for i in range(n)]\n    \n    # for i in range(n):\n    #     for c in stdin.readline().strip(): # a[i]:\n    #         c_count[i][c] += 1\n\n    #         for not_c in chars:\n    #             if not_c != c:\n    #                 not_c_count[i][not_c] += 1\n\n    # if n >= 100000:\n    #     del a\n    # sm = {c: sum([c_count[i][c] for i in range(n)]) for c in chars}\n    # print(sm)\n\n    res = {c: 0 for c in chars}\n    for c in chars:\n        # c_minus_not_c = [c_count[i][c] - not_c_count[i][c] for i in range(n)]\n        c_minus_not_c = [0 for i in range(n)]\n        c_sum = 0\n        not_c_sum = 0\n        for i in range(n):\n            for char in a[i]:\n                if char == c:\n                    c_minus_not_c[i] += 1\n                    c_sum += 1\n                else:\n                    c_minus_not_c[i] += -1\n                    not_c_sum += 1\n\n        c_minus_not_c.sort()\n\n        # c_sum = sm[c]\n        # not_c_sum = sum([sm[not_c] for not_c in chars if not_c != c])\n\n        rem_num = 0\n        l = 0\n        while c_sum <= not_c_sum and l < n:\n            if c_minus_not_c[l] >= 0:\n                rem_num = n \n                break\n\n            c_sum -= c_minus_not_c[l]\n            l += 1\n            rem_num += 1\n\n        res[c] = n - rem_num\n        # if n >= 100000:\n        #     del c_minus_not_c\n\n    stdout.write(str(max([res[c] for c in chars])) + '\\n')\n\n\n",
    "prob_desc_created_at": "1627050900",
    "tags": [
        "greedy",
        "sortings",
        "strings"
    ],
    "hidden_unit_tests": ""
}