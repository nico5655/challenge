{
    "prob_desc_time_limit": "4 seconds",
    "prob_desc_sample_outputs": "[\"18\\n8\\n13\"]",
    "src_uid": "376b293013562d5e004411f42082ce5c",
    "prob_desc_notes": "NoteTransformation of the array in the example: $$$[-3, 5, -3, 2, 8, -20, 6, -1] \\rightarrow [-3, 2, -3, 5, 6, -1, 8, -20] \\rightarrow [2, -3, 5, -3, -1, 6, -20, 8] \\rightarrow [5, -3, 2, -3, -20, 8, -1, 6]$$$.",
    "prob_desc_description": "You are given an array of length $$$2^n$$$. The elements of the array are numbered from $$$1$$$ to $$$2^n$$$.You have to process $$$q$$$ queries to this array. In the $$$i$$$-th query, you will be given an integer $$$k$$$ ($$$0 \\le k \\le n-1$$$). To process the query, you should do the following:  for every $$$i \\in [1, 2^n-2^k]$$$ in ascending order, do the following: if the $$$i$$$-th element was already swapped with some other element during this query, skip it; otherwise, swap $$$a_i$$$ and $$$a_{i+2^k}$$$;  after that, print the maximum sum over all contiguous subsegments of the array (including the empty subsegment). For example, if the array $$$a$$$ is $$$[-3, 5, -3, 2, 8, -20, 6, -1]$$$, and $$$k = 1$$$, the query is processed as follows:  the $$$1$$$-st element wasn't swapped yet, so we swap it with the $$$3$$$-rd element;  the $$$2$$$-nd element wasn't swapped yet, so we swap it with the $$$4$$$-th element;  the $$$3$$$-rd element was swapped already;  the $$$4$$$-th element was swapped already;  the $$$5$$$-th element wasn't swapped yet, so we swap it with the $$$7$$$-th element;  the $$$6$$$-th element wasn't swapped yet, so we swap it with the $$$8$$$-th element. So, the array becomes $$$[-3, 2, -3, 5, 6, -1, 8, -20]$$$. The subsegment with the maximum sum is $$$[5, 6, -1, 8]$$$, and the answer to the query is $$$18$$$.Note that the queries actually change the array, i. e. after a query is performed, the array does not return to its original state, and the next query will be applied to the modified array.",
    "prob_desc_output_spec": "For each query, print one integer — the maximum sum over all contiguous subsegments of the array (including the empty subsegment) after processing the query.",
    "prob_desc_input_spec": "The first line contains one integer $$$n$$$ ($$$1 \\le n \\le 18$$$). The second line contains $$$2^n$$$ integers $$$a_1, a_2, \\dots, a_{2^n}$$$ ($$$-10^9 \\le a_i \\le 10^9$$$). The third line contains one integer $$$q$$$ ($$$1 \\le q \\le 2 \\cdot 10^5$$$). Then $$$q$$$ lines follow, the $$$i$$$-th of them contains one integer $$$k$$$ ($$$0 \\le k \\le n-1$$$) describing the $$$i$$$-th query.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2500,
    "file_name": "train_109.jsonl",
    "code_uid": "276485dfce44cdddcac9aec6bcea883e",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n-3 5 -3 2 8 -20 6 -1\\n3\\n1\\n0\\n1\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin\ninput=lambda :stdin.readline()[:-1]\n\nn=int(input())\nm=1<<n\na=list(map(int,input().split()))\ntable=[]\n\n# (sum,pref,suff,ans)\n\nlast=[]\nfor i in range(m):\n  last.append((a[i],max(0,a[i]),max(0,a[i]),max(0,a[i])))\n\ndef merge(L,R):\n  sumL,prefL,suffL,ansL=L\n  sumR,prefR,suffR,ansR=R\n  sumX=sumL+sumR\n  prefX=max(prefL,sumL+prefR)\n  suffX=max(suffR,suffL+sumR)\n  ansX=max(ansL,ansR,prefR+suffL)\n  return (sumX,prefX,suffX,ansX)\n\nfor i in range(n):\n  now=[0]*m\n  for j in range(m):\n    L=last[j]\n    R=last[j^(1<<i)]\n    now[j]=merge(L,R)\n  last=now\n\nans=[last[i][3] for i in range(m)]\n\nXOR=0\nq=int(input())\nfor _ in range(q):\n  k=int(input())\n  XOR^=1<<k\n  print(ans[XOR])",
    "prob_desc_created_at": "1659623700",
    "tags": [
        "bitmasks",
        "data structures",
        "dfs and similar",
        "divide and conquer",
        "dp"
    ],
    "hidden_unit_tests": ""
}