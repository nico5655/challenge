{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\\n2\\n4\\n0\\n2\"]",
    "src_uid": "8827e14bcba5689118f393442280d2ba",
    "prob_desc_notes": "NoteTo defeat the first dragon, you can increase the strength of the third hero by $$$1$$$, then the strength of the heroes will be equal to $$$[3, 6, 3, 3]$$$. To kill the dragon, you can choose the first hero.To defeat the second dragon, you can increase the forces of the second and third heroes by $$$1$$$, then the strength of the heroes will be equal to $$$[3, 7, 3, 3]$$$. To kill the dragon, you can choose a second hero.To defeat the third dragon, you can increase the strength of all the heroes by $$$1$$$, then the strength of the heroes will be equal to $$$[4, 7, 3, 4]$$$. To kill the dragon, you can choose a fourth hero.To defeat the fourth dragon, you don't need to improve the heroes and choose a third hero to kill the dragon.To defeat the fifth dragon, you can increase the strength of the second hero by $$$2$$$, then the strength of the heroes will be equal to $$$[3, 8, 2, 3]$$$. To kill the dragon, you can choose a second hero.",
    "prob_desc_description": "Recently, Petya learned about a new game \"Slay the Dragon\". As the name suggests, the player will have to fight with dragons. To defeat a dragon, you have to kill it and defend your castle. To do this, the player has a squad of $$$n$$$ heroes, the strength of the $$$i$$$-th hero is equal to $$$a_i$$$.According to the rules of the game, exactly one hero should go kill the dragon, all the others will defend the castle. If the dragon's defense is equal to $$$x$$$, then you have to send a hero with a strength of at least $$$x$$$ to kill it. If the dragon's attack power is $$$y$$$, then the total strength of the heroes defending the castle should be at least $$$y$$$.The player can increase the strength of any hero by $$$1$$$ for one gold coin. This operation can be done any number of times.There are $$$m$$$ dragons in the game, the $$$i$$$-th of them has defense equal to $$$x_i$$$ and attack power equal to $$$y_i$$$. Petya was wondering what is the minimum number of coins he needs to spend to defeat the $$$i$$$-th dragon.Note that the task is solved independently for each dragon (improvements are not saved).",
    "prob_desc_output_spec": "Print $$$m$$$ lines, $$$i$$$-th of which contains a single integer — the minimum number of coins that should be spent to defeat the $$$i$$$-th dragon.",
    "prob_desc_input_spec": "The first line contains a single integer $$$n$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$) — number of heroes. The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^{12}$$$), where $$$a_i$$$ is the strength of the $$$i$$$-th hero. The third line contains a single integer $$$m$$$ ($$$1 \\le m \\le 2 \\cdot 10^5$$$) — the number of dragons. The next $$$m$$$ lines contain two integers each, $$$x_i$$$ and $$$y_i$$$ ($$$1 \\le x_i \\le 10^{12}; 1 \\le y_i \\le 10^{18}$$$) — defense and attack power of the $$$i$$$-th dragon.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1300,
    "file_name": "train_088.jsonl",
    "code_uid": "613f77d1ae38a79f68801500250f2b06",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n3 6 2 3\\n5\\n3 12\\n7 9\\n4 14\\n1 10\\n8 7\"]",
    "exec_outcome": "PASSED",
    "source_code": "# from sys import stdin\r\n# input=stdin.readline\r\n# input = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\nfrom collections import Counter, deque, defaultdict\r\nfrom itertools import accumulate, product, groupby\r\nimport operator\r\nimport math\r\nfrom functools import reduce\r\nimport sys\r\n# input = sys.stdin.readline\r\nimport decimal\r\nimport bisect\r\nimport heapq\r\nfrom sys import stdin\r\ndef input(): return stdin.readline().rstrip('\\r\\n')\r\n# list(map(str, input().split()))\r\n\r\nclass dset(object):\r\n    def __init__(self, N):\r\n        self.arr = [i for i in range(N+1)]\r\n        self.rank = [0]*(N+1)\r\n        \r\n    def find(self, x):\r\n        if x != self.arr[x]:\r\n            self.arr[x] = self.find(self.arr[x])\r\n        return self.arr[x]\r\n    \r\n    def union(self,x,y):\r\n        rootX, rootY = self.find(x), self.find(y)\r\n        \r\n        # if already connected\r\n        if rootX == rootY:\r\n            return False\r\n        \r\n        elif self.rank[rootX] < self.rank[rootY]:\r\n            self.arr[rootX] = rootY\r\n        \r\n        elif self.rank[rootX] > self.rank[rootY]:\r\n            self.arr[rootY] = rootX\r\n            \r\n        else:\r\n            # parent of x will be y\r\n            self.arr[rootX] = rootY\r\n            self.rank[rootY] += 1\r\n            \r\n        return True\r\n\r\ndef readIntLine():\r\n    return [int(char) for char in input().split()]\r\n\r\ndef readCharLine():\r\n    return [char for char in input().split()]\r\n\r\ndef getGroups(arr):\r\n    return [(a, list(count)) for a, count in groupby(arr)]\r\n\r\ndef find_gcd(intlist):\r\n    x = reduce(math.gcd, intlist)\r\n    return x\r\n    \r\ndef ncr(n, r):\r\n    r = min(r, n-r)\r\n    numer = reduce(operator.mul, range(n, n-r, -1), 1)\r\n    denom = reduce(operator.mul, range(1, r+1), 1)\r\n    return numer // denom \r\n\r\n\r\n\r\ndef solve():\r\n    n = int(input())\r\n    heros = readIntLine()\r\n    m = int(input())\r\n    \r\n    heros.sort()\r\n    heros_total = sum(heros)\r\n    \r\n    # print('heros', heros)\r\n    \r\n    for _ in range(m):\r\n        dragon_def, dragon_attack = readIntLine()\r\n        # the hero at this index is always bigger than or equal to val i want to find\r\n        h_idx = bisect.bisect_left(heros, dragon_def)\r\n        \r\n        # even the most powerful hero cannot kill the dragon\r\n        if h_idx == n:\r\n            ans = dragon_def - heros[-1]\r\n            # combined defense left\r\n            heros_left = heros_total-heros[-1]\r\n            ans += max(0, dragon_attack - heros_left)\r\n            print(ans)\r\n            continue\r\n\r\n        \r\n        if heros[h_idx] == dragon_def:\r\n            heros_left = heros_total - heros[h_idx]\r\n            if heros_left >= dragon_attack:\r\n                ans = 0\r\n            else:\r\n                ans = max(0, dragon_attack - heros_left)\r\n            print(ans)\r\n            continue\r\n        \r\n        ans = float('inf')\r\n        if h_idx < n:\r\n            # ans = min(ans, max(0, dragon_attack-(heros_total-heros[h_idx])))\r\n            # how much more points heros need to defend from the dragon\r\n            heros_left = heros_total-heros[h_idx]\r\n            rs = max(0, dragon_attack - heros_left)\r\n            ans = min(ans, rs)\r\n        \r\n        if h_idx >= 1:\r\n            # ans = min(ans, max(0, dragon_attack-(heros_total-heros[h_idx-1]))+(dragon_def-heros[h_idx-1]))\r\n\r\n            h_idx -= 1\r\n            \r\n            hero = heros[h_idx]\r\n        \r\n            # how much more points does this hero need to kill dragon with def\r\n            tmp2 = dragon_def-hero\r\n            # how much more points heros need to defend from the dragon\r\n            heros_left = heros_total-hero\r\n            tmp1 = max(0, dragon_attack - heros_left)\r\n            \r\n            ans = min(ans, tmp1+tmp2)\r\n            \r\n        print(ans)\r\n        \r\nsolve()\r\n# for i in range(int(input())):\r\n    # print(\"YES\") if solve() else print(\"NO\")\r\n#     # print(1) if solve() else print(-1)\r\n    # print(solve())\r\n    # solve()\r\n#     # print(\"\")",
    "prob_desc_created_at": "1632148500",
    "tags": [
        "binary search",
        "greedy",
        "sortings",
        "ternary search"
    ],
    "hidden_unit_tests": ""
}