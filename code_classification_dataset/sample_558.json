{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\", \"10\", \"1\"]",
    "src_uid": "8b075d96b3c0172d756109b4801d68de",
    "prob_desc_notes": "NoteIn the first example you can create a team with skills $$$[12, 17, 15]$$$.In the second example you can take all students in a team because their programming skills are equal.In the third example you can create a team consisting of a single student (and you cannot create a team consisting of at least two students).",
    "prob_desc_description": "You are a coach at your local university. There are $$$n$$$ students under your supervision, the programming skill of the $$$i$$$-th student is $$$a_i$$$.You have to create a team for a new programming competition. As you know, the more students some team has the more probable its victory is! So you have to create a team with the maximum number of students. But you also know that a team should be balanced. It means that the programming skill of each pair of students in a created team should differ by no more than $$$5$$$.Your task is to report the maximum possible number of students in a balanced team.",
    "prob_desc_output_spec": "Print one integer — the maximum possible number of students in a balanced team.",
    "prob_desc_input_spec": "The first line of the input contains one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the number of students. The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$), where $$$a_i$$$ is a programming skill of the $$$i$$$-th student.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1200,
    "file_name": "train_002.jsonl",
    "code_uid": "88c4d4a17abc4ff2acc48cd4bd7da0b0",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n1 10 17 12 15 2\", \"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\", \"6\\n1 1000 10000 10 100 1000000000\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input())\njogadores = [*map(int, input().split())]\njogadores.sort()\n\nmaxv = 0\ncont = 0\np1 = p2 = 0\nwhile p2 < n:\n    if jogadores[p2] - jogadores[p1] <= 5:\n        cont += 1\n        p2 += 1\n    else:\n        cont -= 1\n        p1 += 1\n    maxv = max(maxv, cont)\n    \nprint(maxv)\n",
    "prob_desc_created_at": "1551971100",
    "tags": [
        "two pointers",
        "sortings"
    ],
    "hidden_unit_tests": ""
}