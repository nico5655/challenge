{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\", \"NO\"]",
    "src_uid": "a37c3f2828490c70301b5b5deeee0f88",
    "prob_desc_notes": "NoteIn first example plane 2 likes plane 4, plane 4 likes plane 1, plane 1 likes plane 2 and that is a love triangle.In second example there are no love triangles.",
    "prob_desc_description": "As you could know there are no male planes nor female planes. However, each plane on Earth likes some other plane. There are n planes on Earth, numbered from 1 to n, and the plane with number i likes the plane with number fi, where 1 ≤ fi ≤ n and fi ≠ i.We call a love triangle a situation in which plane A likes plane B, plane B likes plane C and plane C likes plane A. Find out if there is any love triangle on Earth.",
    "prob_desc_output_spec": "Output «YES» if there is a love triangle consisting of planes on Earth. Otherwise, output «NO». You can output any letter in lower case or in upper case.",
    "prob_desc_input_spec": "The first line contains a single integer n (2 ≤ n ≤ 5000) — the number of planes. The second line contains n integers f1, f2, ..., fn (1 ≤ fi ≤ n, fi ≠ i), meaning that the i-th plane likes the fi-th.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_002.jsonl",
    "code_uid": "43b71c4367751f48edcac07b986827ce",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n2 4 5 1 3\", \"5\\n5 5 5 5 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin, stdout\nti = lambda : stdin.readline().strip()\nma = lambda fxn, ti : map(fxn, ti.split())\nol = lambda arr : stdout.write(' '.join(str(i) for i in arr) + '\\n')\nos = lambda i : stdout.write(str(i) + '\\n')\nolws = lambda arr : stdout.write(''.join(str(i) for i in arr) + '\\n')\n\n\nn = int(ti())\nf = ma(int, ti())\n\nd = {}\nfor i in range(n):\n\td[i+1] = f[i]\n\nfor a in d.iterkeys():\n\tb = d[a]\n\tc = d[b]\n\tif c == a:\n\t\tcontinue\n\telse:\n\t\tadash = d[c]\n\t\tif adash == a:\n\t\t\tos(\"YES\")\n\t\t\texit()\nos(\"NO\")",
    "prob_desc_created_at": "1518861900",
    "tags": [
        "graphs"
    ],
    "hidden_unit_tests": ""
}