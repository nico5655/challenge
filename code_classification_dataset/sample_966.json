{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1 5\", \"3 7\", \"1 1\"]",
    "src_uid": "e0ea798c8ce0d8a4340e0fa3399bcc3b",
    "prob_desc_notes": null,
    "prob_desc_description": "The array a with n integers is given. Let's call the sequence of one or more consecutive elements in a segment. Also let's call the segment k-good if it contains no more than k different values.Find any longest k-good segment.As the input/output can reach huge size it is recommended to use fast input/output methods: for example, prefer to use scanf/printf instead of cin/cout in C++, prefer to use BufferedReader/PrintWriter instead of Scanner/System.out in Java.",
    "prob_desc_output_spec": "Print two integers l, r (1 ≤ l ≤ r ≤ n) — the index of the left and the index of the right ends of some k-good longest segment. If there are several longest segments you can print any of them. The elements in a are numbered from 1 to n from left to right.",
    "prob_desc_input_spec": "The first line contains two integers n, k (1 ≤ k ≤ n ≤ 5·105) — the number of elements in a and the parameter k. The second line contains n integers ai (0 ≤ ai ≤ 106) — the elements of the array a.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_005.jsonl",
    "code_uid": "6fb73a7648c699aee03e2a65f9232c1a",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 5\\n1 2 3 4 5\", \"9 3\\n6 5 1 2 3 2 1 4 5\", \"3 1\\n1 2 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = input()\np = input()\nn = n.split(' ')\nk = int(n[1])\nn = int(n[0])\np = p.split(' ')\np = [int(q) for q in p]\ncnt = [0 for i in range(0,int(1e6 + 1))]\ncurcnt = 0\nl = 0\nr = -1\nmaxlen = -1\nmaxl = 0\nmaxr = 0\nwhile r<n-1 and l<=n:\n    while(r<n-1 and (curcnt + (cnt[p[r+1]] == 0)) <=k):\n        curcnt = curcnt + (cnt[p[r+1]] == 0)\n        cnt[p[r+1]] +=1 \n        r+=1\n    if maxlen <(r-l):\n        maxlen = r-l\n        maxr = r\n        maxl = l\n    cnt[p[l]]-=1\n    curcnt-=(cnt[p[l]]==0)\n    l+=1\nprint(str(maxl+1)+' '+str(maxr+1))\n\n#16 3\n#4 2 6 9 6 8 3 3 4 8 2 3 4 6 9 6\n#13 3\n#1 2 3 4 3 5 6 6 1 3 4 3 7\n#16 3\n#1 2 6 9 6 8 3 3 1 8 2 3 6 9 6\n",
    "prob_desc_created_at": "1452524400",
    "tags": [
        "data structures",
        "two pointers",
        "binary search"
    ],
    "hidden_unit_tests": ""
}