{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\\nNO\\nYES\\nYES\\nNO\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\\nNO\\nYES\"]",
    "src_uid": "11fd178e17d27fc97f36f0de1b1fdf6f",
    "prob_desc_notes": "NoteIn the first test case, it's possible to get the array $$$a$$$ by performing $$$0$$$ operations on a cake with weight $$$327$$$.In the second test case, it's not possible to get the array $$$a$$$.In the third test case, it's possible to get the array $$$a$$$ by performing $$$1$$$ operation on a cake with weight $$$1\\,970\\,429\\,473$$$:   Cut it in half, so that the weights are $$$[985\\,214\\,736, 985\\,214\\,737]$$$.  Note that the starting weight can be greater than $$$10^9$$$.In the fourth test case, it's possible to get the array $$$a$$$ by performing $$$2$$$ operations on a cake with weight $$$6$$$:  Cut it in half, so that the weights are $$$[3,3]$$$.  Cut one of the two pieces with weight $$$3$$$, so that the new weights are $$$[1, 2, 3]$$$ which is equivalent to $$$[2, 3, 1]$$$ up to reordering.",
    "prob_desc_description": "Alice has a cake, and she is going to cut it. She will perform the following operation $$$n-1$$$ times: choose a piece of the cake (initially, the cake is all one piece) with weight $$$w\\ge 2$$$ and cut it into two smaller pieces of weight $$$\\lfloor\\frac{w}{2}\\rfloor$$$ and $$$\\lceil\\frac{w}{2}\\rceil$$$ ($$$\\lfloor x \\rfloor$$$ and $$$\\lceil x \\rceil$$$ denote floor and ceiling functions, respectively).After cutting the cake in $$$n$$$ pieces, she will line up these $$$n$$$ pieces on a table in an arbitrary order. Let $$$a_i$$$ be the weight of the $$$i$$$-th piece in the line.You are given the array $$$a$$$. Determine whether there exists an initial weight and sequence of operations which results in $$$a$$$.",
    "prob_desc_output_spec": "For each test case, print a single line: print YES if the array $$$a$$$ could have resulted from Alice's operations, otherwise print NO. You may print each letter in any case (for example, YES, Yes, yes, yEs will all be recognized as positive answer).",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) â€” the number of test cases. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$). The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$). It is guaranteed that the sum of $$$n$$$ for all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_102.jsonl",
    "code_uid": "b199534f3aad11d34730a072ebf1dfd7",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"14\\n1\\n327\\n2\\n869 541\\n2\\n985214736 985214737\\n3\\n2 3 1\\n3\\n2 3 3\\n6\\n1 1 1 1 1 1\\n6\\n100 100 100 100 100 100\\n8\\n100 100 100 100 100 100 100 100\\n8\\n2 16 1 8 64 1 4 32\\n10\\n1 2 4 7 1 1 1 1 7 2\\n10\\n7 1 1 1 3 1 3 3 2 3\\n10\\n1 4 4 1 1 1 3 3 3 1\\n10\\n2 3 2 2 1 2 2 2 2 2\\n4\\n999999999 999999999 999999999 999999999\"]",
    "exec_outcome": "PASSED",
    "source_code": "import heapq\r\nimport sys\r\ninput = sys.stdin.readline\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    l = list(map(int, input().split()))\r\n    s = -sum(l)\r\n    a=[s]\r\n    heapq.heapify(a)\r\n    l.sort(reverse=True)\r\n    i = 0\r\n    while a:\r\n        m = -heapq.heappop(a)\r\n        if l[i] == m:\r\n            i+=1\r\n        else:\r\n            if m<l[i]:\r\n                break\r\n            heapq.heappush(a, -(m//2))\r\n            heapq.heappush(a, -((m-1)//2+1))\r\n    print(\"NO\" if a else \"YES\")\r\n        \r\n",
    "prob_desc_created_at": "1647764100",
    "tags": [
        "data structures",
        "greedy"
    ],
    "hidden_unit_tests": ""
}