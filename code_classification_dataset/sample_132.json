{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"10.0000000000\", \"-1\", \"85.4800000000\"]",
    "src_uid": "d9bd63e03bf51ed87ba73cd15e8ce58d",
    "prob_desc_notes": "NoteLet's consider the first example.Initially, the mass of a rocket with fuel is $$$22$$$ tons. At take-off from Earth one ton of fuel can lift off $$$11$$$ tons of cargo, so to lift off $$$22$$$ tons you need to burn $$$2$$$ tons of fuel. Remaining weight of the rocket with fuel is $$$20$$$ tons. During landing on Mars, one ton of fuel can land $$$5$$$ tons of cargo, so for landing $$$20$$$ tons you will need to burn $$$4$$$ tons of fuel. There will be $$$16$$$ tons of the rocket with fuel remaining. While taking off from Mars, one ton of fuel can raise $$$8$$$ tons of cargo, so to lift off $$$16$$$ tons you will need to burn $$$2$$$ tons of fuel. There will be $$$14$$$ tons of rocket with fuel after that. During landing on Earth, one ton of fuel can land $$$7$$$ tons of cargo, so for landing $$$14$$$ tons you will need to burn $$$2$$$ tons of fuel. Remaining weight is $$$12$$$ tons, that is, a rocket without any fuel.In the second case, the rocket will not be able even to take off from Earth.",
    "prob_desc_description": "Natasha is going to fly on a rocket to Mars and return to Earth. Also, on the way to Mars, she will land on $$$n - 2$$$ intermediate planets. Formally: we number all the planets from $$$1$$$ to $$$n$$$. $$$1$$$ is Earth, $$$n$$$ is Mars. Natasha will make exactly $$$n$$$ flights: $$$1 \\to 2 \\to \\ldots n \\to 1$$$.Flight from $$$x$$$ to $$$y$$$ consists of two phases: take-off from planet $$$x$$$ and landing to planet $$$y$$$. This way, the overall itinerary of the trip will be: the $$$1$$$-st planet $$$\\to$$$ take-off from the $$$1$$$-st planet $$$\\to$$$ landing to the $$$2$$$-nd planet $$$\\to$$$ $$$2$$$-nd planet $$$\\to$$$ take-off from the $$$2$$$-nd planet $$$\\to$$$ $$$\\ldots$$$ $$$\\to$$$ landing to the $$$n$$$-th planet $$$\\to$$$ the $$$n$$$-th planet $$$\\to$$$ take-off from the $$$n$$$-th planet $$$\\to$$$ landing to the $$$1$$$-st planet $$$\\to$$$ the $$$1$$$-st planet.The mass of the rocket together with all the useful cargo (but without fuel) is $$$m$$$ tons. However, Natasha does not know how much fuel to load into the rocket. Unfortunately, fuel can only be loaded on Earth, so if the rocket runs out of fuel on some other planet, Natasha will not be able to return home. Fuel is needed to take-off from each planet and to land to each planet. It is known that $$$1$$$ ton of fuel can lift off $$$a_i$$$ tons of rocket from the $$$i$$$-th planet or to land $$$b_i$$$ tons of rocket onto the $$$i$$$-th planet. For example, if the weight of rocket is $$$9$$$ tons, weight of fuel is $$$3$$$ tons and take-off coefficient is $$$8$$$ ($$$a_i = 8$$$), then $$$1.5$$$ tons of fuel will be burnt (since $$$1.5 \\cdot 8 = 9 + 3$$$). The new weight of fuel after take-off will be $$$1.5$$$ tons. Please note, that it is allowed to burn non-integral amount of fuel during take-off or landing, and the amount of initial fuel can be non-integral as well.Help Natasha to calculate the minimum mass of fuel to load into the rocket. Note, that the rocket must spend fuel to carry both useful cargo and the fuel itself. However, it doesn't need to carry the fuel which has already been burnt. Assume, that the rocket takes off and lands instantly.",
    "prob_desc_output_spec": "If Natasha can fly to Mars through $$$(n - 2)$$$ planets and return to Earth, print the minimum mass of fuel (in tons) that Natasha should take. Otherwise, print a single number $$$-1$$$. It is guaranteed, that if Natasha can make a flight, then it takes no more than $$$10^9$$$ tons of fuel. The answer will be considered correct if its absolute or relative error doesn't exceed $$$10^{-6}$$$. Formally, let your answer be $$$p$$$, and the jury's answer be $$$q$$$. Your answer is considered correct if $$$\\frac{|p - q|}{\\max{(1, |q|)}} \\le 10^{-6}$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$n$$$ ($$$2 \\le n \\le 1000$$$) — number of planets. The second line contains the only integer $$$m$$$ ($$$1 \\le m \\le 1000$$$) — weight of the payload. The third line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 1000$$$), where $$$a_i$$$ is the number of tons, which can be lifted off by one ton of fuel. The fourth line contains $$$n$$$ integers $$$b_1, b_2, \\ldots, b_n$$$ ($$$1 \\le b_i \\le 1000$$$), where $$$b_i$$$ is the number of tons, which can be landed by one ton of fuel.  It is guaranteed, that if Natasha can make a flight, then it takes no more than $$$10^9$$$ tons of fuel.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_000.jsonl",
    "code_uid": "81dc74b11eab12928dcc4fe4ab4fde0f",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n12\\n11 8\\n7 5\", \"3\\n1\\n1 4 1\\n2 5 3\", \"6\\n2\\n4 6 3 3 5 6\\n2 6 3 6 5 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "\"\"\"for p in range(int(input())):\n\n\tn,k=map(int,input().split(\" \"))\n\tnumber=input().split(\" \")\n\tchances=[k for i in range(n)]\n\n\tprev=-1\n\tprev_updated=-1\n\tlast_used=False\n\ttoSub=0\n\tstart=0\n\n\tprevSub=0\n\n\tif(number[0]=='1'):\n\t\tprev=0\n\t\tprev_updated=0\n\t\tstart=1\n\n\tfor i in range(start,n):\n\t\t\n\t\tif(number[i]=='1'):\n\t\t#\tprint(\"\\ni\",i,\"\\ntoSub\",toSub,\"\\nprevUpadted\",prev_updated,\"\\nprev\",prev,\"\\nlast_used\",last_used)\n\t\t\tf1=False\n#\t\t\ttoSub+=1\n\t\t\ttoSub=0\n\n\t\t\tzeros=i - prev_updated - 1\n\n\t\t\tif(last_used):\n\t\t\t\tzeros-=1\n\n\t\t\t#chances[i]-=toSub\n\n\t\t\t#print(prevSub,(i - prev - 1 ) +1)\n\t\t\tif(i - prev - 1 <= prevSub):\n\t\t\t\tchances[i]-= prevSub - (i - prev - 1 ) +1\n\t\t\t\tif(chances[i]<zeros):\n\t\t\t\t\tchances[i]=zeros\n\t\t\t\ttoSub+= prevSub - (i - prev - 1 ) +1\n\t\t\t\tf1=True\n\n\t\t\tif(zeros==0 or chances[i]==0):\n\t\t\t\tprev_updated=i\n\t\t\t\tprev=i\n\t\t\t\tlast_used=False\n\t\t\t\tprevSub=toSub\n\t\t\t\tcontinue\n\t\t#\tprint(\"\\nchances:  \",chances[i],\"\\t\\tzeroes :   \",zeros,\"\\t\\tprevSub :\",prevSub)\n\n\t\t\tif(chances[i]>zeros):\n\t\t#\t\tprint(\"\\t\\t\\t\\t1\")\n\t\t\t\tnumber[i-zeros]='1'\n\t\t\t\tnumber[i]='0'\n\t\t\t\tprev_updated=i-zeros\n\t\t\t\tlast_used=False\n\t\t\telif(chances[i]==zeros):\n\t\t#\t\tprint(\"\\t\\t\\t\\t2\")\n\t\t\t\tnumber[i]='0'\n\t\t\t\tnumber[i-chances[i]]='1'\n\t\t\t\tprev_updated=i-chances[i]\n\t\t\t\tlast_used=True\n\t\t\telse:\n\t\t#\t\tprint(\"\\t\\t\\t\\t3\")\n\t\t\t\tnumber[i]='0'\n\t\t\t\tnumber[i-chances[i]]='1'\n\t\t\t\tprev_updated=i-chances[i]\n\t\t\t\tlast_used=True\n\t\t\tprev=i\n\n\t\t\tprevSub=toSub\n\n\t\t\tif(prev_updated>2 and f1):\n\t\t\t\tif(number[prev_updated]=='1' and number[prev_updated-1]=='0' and number[prev_updated-2]=='1'):\n\t\t\t\t\tlast_used=False\n\t\t\t\t#if()\n\n\t\t#\tprint(\"\\ni\",i,\"\\ntoSub\",toSub,\"\\nprevUpadted\",prev_updated,\"\\nprev\",prev,\"\\nlast_used\",last_used)\n\t\t#\tprint(number)\n\t\telse:\n\t\t\ttoSub=0\n\n\tprint(*number)\n#\tprint(chances)\"\"\"\n\n\"\"\"class offer:\n\tdef __init__(self, n, fre):\n\t\tself.num = n\n\t\tself.free = fre\n\t\tself.delta= n-fre\n\t\t\n\nn,m,k=map(int,input().split(\" \"))\n\nshovel=list(map(int,input().split(\" \")))\n\n#dicti={}\n\noffers=[]\ntemp_arr=[False for i in range(n)]\n\nfor i in range(m):\n\tp,q=map(int,input().split(\" \"))\n\tif(p>k):\n\t\tcontinue\n\toffers.append(offer(p,q))\n#\tdicti[p]=q\n\n#for i in dicti:\n#\tdicti[i].sort()\t\n\nshovel.sort()\nshovel=shovel[:k+1]\n\noffers.sort(key=lambda x: x.delta/x.num,reverse=True)\n\nbestoffer=[]\n\nfor i in offers:\n\tif(not temp_arr[i.num]):\n\t\ttemp_arr[i.num]=True\n\t\tbestoffer.append(i)\n\ncost=0\n\nfor i in bestoffer:\n\t\n\t\nfor p in range(int(input())):\n\tarr=list(input())\n\n\tn=len(arr)\n\tfor i in range(n):\n\t\tarr[i]=ord(arr[i])-96\n\n\tarr.sort()\n\n\tarr1=arr[:n//2]\n\tarr2=arr[n//2:]\n\tarr=[]\n\t#print(arr,arr1,arr2)\n\ti1=n//2-1\n\ti2=n-i1-2\n\n\twhile (i1!=-1 and i2!=-1):\n\t\tarr.append(arr1[i1])\n\t\tarr.append(arr2[i2])\n\t\ti1-=1\n\t\ti2-=1\n\tif(i1!=-1):\n\t\tarr.append(arr1[i1])\n\telif(i2!=-1):\n\t\tarr.append(arr2[i2])\n\n\t#print(arr)\n\n\ts=\"\"\n\tfor i in range(n-1):\n\t\tif(abs(arr[i]-arr[i+1])==1):\n\t\t\ts=-1\n\t\t\tprint(\"No answer\")\n\t\t\tbreak\n\t\telse:\n\t\t\ts+=chr(arr[i]+96)\n\n\tif(s!=-1):\n\t\ts+=chr(arr[-1]+96)\n\t\tprint(s)\"\"\"\n\n\"\"\"\nn,m=map(int,input().split(\" \"))\n\nseti=[]\nans=[1 for i in range(n)]\n\n\nfor i in range(m):\n\tarr=list(map(int,input().split(\" \")))\n\t\n\tif(arr[0]>1):\n\t\tseti.append(set(arr[1:]))\n\telse:\n\t\tm-=1\n\nparent=[-1 for i in range(m)]\n#print(seti)\nfor i in range(m-1):\n\tfor j in range(i+1,m):\n\t\tif(parent[j]==-1):\n\t\t\tif(len(seti[i].intersection(seti[j]))>0):\n\t\t\t\tseti[i]=seti[i].union(seti[j])\n\t\t\t\tparent[j]=i\n\n#print(parent)\n\nfor i in range(m):\n\tif(parent[i]==-1):\n\t\ttemp=list(seti[i])\n\t\tstore=len(temp)\n\t\tfor j in temp:\n\t\t\tans[j-1]=store\n\nprint(*ans)\n\n\nfor p in range(int(input())):\n\tarr=list(input())\n\n\tn=len(arr)\n\tfor i in range(n):\n\t\tarr[i]=ord(arr[i])-96\n\n\tarr.sort()\n\n\tarr1=arr[:n//2]\n\tarr2=arr[n//2:]\n\tarr=[]\n\t#print(arr,arr1,arr2)\n\ti1=n//2-1\n\ti2=n-i1-2\n\n\twhile (i1!=-1 and i2!=-1):\n\t\tarr.append(arr1[i1])\n\t\tarr.append(arr2[i2])\n\t\ti1-=1\n\t\ti2-=1\n\tif(i1!=-1):\n\t\tarr.append(arr1[i1])\n\telif(i2!=-1):\n\t\tarr.append(arr2[i2])\n\n\ts=\"\"\n\tfor i in range(n-1):\n\t\tif(abs(arr[i]-arr[i+1])==1):\n\t\t\ts=-1\n\t\t\tprint(\"No answer\")\n\t\t\tbreak\n\t\telse:\n\t\t\ts+=chr(arr[i]+96)\n\n\tif(s!=-1):\n\t\ts+=chr(arr[-1]+96)\n\t\tprint(s)\n#n=0\"\"\"\n\nn=int(input())\np=int(input())\n\narr1=list(map(int,input().split(\" \")))\narr2=list(map(int,input().split(\" \")))\n\na=1\nflag=False\nfor i in range(n):\n\ta*=((arr1[i]-1)*(arr2[i]-1))/(arr1[i]*arr2[i])\n\tif(a==0):\n\t\tflag=True\n\t\tbreak\n\nif(flag):\n\tprint(-1)\t\nelse:\n\tprint(p*((1-a)/a))",
    "prob_desc_created_at": "1532617500",
    "tags": [
        "binary search",
        "math"
    ],
    "hidden_unit_tests": ""
}