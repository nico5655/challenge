{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\", \"144\"]",
    "src_uid": "e00c5fde478d36c90b17f5df18fb3ed1",
    "prob_desc_notes": "NoteFor first example:[1, 2, 4] — right permutation, because 2 and 8 are not perfect squares.[1, 4, 2] — wrong permutation, because 4 is square of 2.[2, 1, 4] — wrong permutation, because 4 is square of 2.[2, 4, 1] — wrong permutation, because 4 is square of 2.[4, 1, 2] — wrong permutation, because 4 is square of 2.[4, 2, 1] — right permutation, because 8 and 2 are not perfect squares.",
    "prob_desc_description": "A year ago on the bench in public park Leha found an array of n numbers. Leha believes that permutation p is right if for all 1 ≤ i &lt; n condition, that api·api + 1 is not perfect square, holds. Leha wants to find number of right permutations modulo 109 + 7.",
    "prob_desc_output_spec": "Output single integer — number of right permutations modulo 109 + 7.",
    "prob_desc_input_spec": "First line of input data contains single integer n (1 ≤ n ≤ 300) — length of the array. Next line contains n integers a1, a2, ... , an (1 ≤ ai ≤ 109) — found array.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 2500,
    "file_name": "train_030.jsonl",
    "code_uid": "29f042ef2d0d552a1df21775bd59db47",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n1 2 4\", \"7\\n5 2 4 2 4 1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import defaultdict\nn = int(raw_input())\na = [0] * 34000\nps = []\nfor i in xrange(2, 34000):\n    if a[i]:\n        continue\n    ps.append(i * i)\n    j = i * i\n    while j < 34000:\n        a[j] = 1\n        j += i\na = map(int, raw_input().split())\nb = defaultdict(int)\nfor x in a:\n    for p in ps:\n        while x % p == 0:\n            x /= p\n    b[x] += 1\nb = b.values()\nmod = 1000000007\nf = [1] * (n + 1)\nfor i in xrange(2, n + 1):\n    f[i] = f[i-1] * i % mod\ninv = [1] * (n + 1)\ninvf = [1] * (n + 1)\nfor i in xrange(2, n + 1):\n    inv[i] = mod - mod / i * inv[mod%i] % mod\n    invf[i] = invf[i-1] * inv[i] % mod\ndef mul(pl, pr):\n    res = [0] * (len(pl) + len(pr) - 1)\n    for i, x in enumerate(pl):\n        for j, y in enumerate(pr):\n            res[i+j] += x * y\n            res[i+j] %= mod\n    return res\nqs = [1]\nfor x in b:\n    q = []\n    for i in xrange(x):\n        t = f[x-1] * invf[x-1-i] * invf[i] * invf[x-i] % mod\n        q.append(t)\n    qs = mul(q, qs)\nans = 0\nfor i in xrange(len(qs)):\n    t = f[n-i] * qs[i] % mod\n    if i & 1:\n        t = mod - t\n    ans += t\nfor x in b:\n    ans = ans * f[x] % mod\nprint ans\n",
    "prob_desc_created_at": "1503068700",
    "tags": [
        "dp",
        "combinatorics"
    ],
    "hidden_unit_tests": ""
}