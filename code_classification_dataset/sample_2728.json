{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1.0000000000\", \"0.9628442962\", \"0.7500000000\"]",
    "src_uid": "81492d3b77bc0674102af17f22bf0664",
    "prob_desc_notes": "NoteIn the first sample the best way of candies' distribution is giving them to first three of the senators. It ensures most of votes.It the second sample player should give all three candies to the fifth senator.",
    "prob_desc_description": "Dark Assembly is a governing body in the Netherworld. Here sit the senators who take the most important decisions for the player. For example, to expand the range of the shop or to improve certain characteristics of the character the Dark Assembly's approval is needed.The Dark Assembly consists of n senators. Each of them is characterized by his level and loyalty to the player. The level is a positive integer which reflects a senator's strength. Loyalty is the probability of a positive decision in the voting, which is measured as a percentage with precision of up to 10%. Senators make decisions by voting. Each of them makes a positive or negative decision in accordance with their loyalty. If strictly more than half of the senators take a positive decision, the player's proposal is approved. If the player's proposal is not approved after the voting, then the player may appeal against the decision of the Dark Assembly. To do that, player needs to kill all the senators that voted against (there's nothing wrong in killing senators, they will resurrect later and will treat the player even worse). The probability that a player will be able to kill a certain group of senators is equal to A / (A + B), where A is the sum of levels of all player's characters and B is the sum of levels of all senators in this group. If the player kills all undesired senators, then his proposal is approved.Senators are very fond of sweets. They can be bribed by giving them candies. For each received candy a senator increases his loyalty to the player by 10%. It's worth to mention that loyalty cannot exceed 100%. The player can take no more than k sweets to the courtroom. Candies should be given to the senators before the start of voting.Determine the probability that the Dark Assembly approves the player's proposal if the candies are distributed among the senators in the optimal way.",
    "prob_desc_output_spec": "Print one real number with precision 10 - 6 — the maximal possible probability that the Dark Assembly approves the player's proposal for the best possible distribution of candies among the senators.",
    "prob_desc_input_spec": "The first line contains three integers n, k and A (1 ≤ n, k ≤ 8, 1 ≤ A ≤ 9999). Then n lines follow. The i-th of them contains two numbers — bi and li — the i-th senator's level and his loyalty. The levels of all senators are integers in range from 1 to 9999 (inclusive). The loyalties of all senators are integers in range from 0 to 100 (inclusive) and all of them are divisible by 10.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_029.jsonl",
    "code_uid": "f460dd784f0f5bde2a295d542681cd19",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 6 100\\n11 80\\n14 90\\n23 70\\n80 30\\n153 70\", \"5 3 100\\n11 80\\n14 90\\n23 70\\n80 30\\n153 70\", \"1 3 20\\n20 20\"]",
    "exec_outcome": "PASSED",
    "source_code": "#!/usr/bin/env python3\n\nn, k, A = map(int, input().rstrip().split())\nsenators = []\nmx_bribe = 0\n\nfor i in range(n):\n    lvl, loy = map(int, input().rstrip().split())\n    senators.append((lvl, loy))\n    mx_bribe += (100 - loy) // 10\n\nbribe = [0] * n\n\n\ndef calc(votes):\n    bsum, cnt, p = 0, 0, 1.0\n    for i, s in enumerate(senators):\n        if votes & (1 << i):\n            p *= (s[1] + bribe[i]) / 100\n            cnt += 1\n        else:\n            p *= (100 - s[1] - bribe[i]) / 100\n            bsum += s[0]\n\n    if cnt > (n / 2):\n        return p\n    else:\n        return p * A / (A + bsum)\n\n\ndef dfs(cur, rk):\n    if cur >= n:\n        if rk > 0:\n            return 0.0\n        sm = 0.0\n        for i in range(1 << n):\n            sm += calc(i)\n\n        return sm\n\n    mx = 0.0\n    for i in range(rk + 1):\n        if i * 10 + senators[cur][1] > 100:\n            break\n        bribe[cur] = i * 10\n        tmp = dfs(cur+1, rk-i)\n        mx = max(tmp, mx)\n    return mx\n\n\nprint(dfs(0, min(k, mx_bribe)))\n",
    "prob_desc_created_at": "1313247600",
    "tags": [
        "probabilities",
        "brute force"
    ],
    "hidden_unit_tests": ""
}