{
    "prob_desc_time_limit": "4 seconds",
    "prob_desc_sample_outputs": "[\"2\\n0 2\\n3 5\", \"1\\n0 5\"]",
    "src_uid": "eafd37afb15f9f9d31c2a16a32f17763",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given n segments on the coordinate axis Ox and the number k. The point is satisfied if it belongs to at least k segments. Find the smallest (by the number of segments) set of segments on the coordinate axis Ox which contains all satisfied points and no others.",
    "prob_desc_output_spec": "First line contains integer m — the smallest number of segments. Next m lines contain two integers aj, bj (aj ≤ bj) — the ends of j-th segment in the answer. The segments should be listed in the order from left to right.",
    "prob_desc_input_spec": "The first line contains two integers n and k (1 ≤ k ≤ n ≤ 106) — the number of segments and the value of k. The next n lines contain two integers li, ri ( - 109 ≤ li ≤ ri ≤ 109) each — the endpoints of the i-th segment. The segments can degenerate and intersect each other. The segments are given in arbitrary order.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_081.jsonl",
    "code_uid": "87574f78e8a9310a571dd3f4562f8e76",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 2\\n0 5\\n-3 2\\n3 8\", \"3 2\\n0 5\\n-3 3\\n3 8\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\n\nn, k = map(int, input().split())\nimos = dict()\n\nfor li, ri in (map(int, line.split()) for line in sys.stdin):\n    imos[li*2] = imos[li*2]+1 if li*2 in imos else 1\n    imos[ri*2+1] = imos[ri*2+1]-1 if ri*2+1 in imos else -1\n\nacc = 0\nans = []\nappend = ans.append\nminf = -(10**9 * 2 + 1)\nleft = minf\n\n\nfor x in sorted(imos.keys()):\n    acc += imos[x]\n\n    if left != minf and acc < k:\n        append(str(left >> 1) + ' ' + str(x >> 1))\n        left = minf\n    elif left == minf and acc >= k:\n        left = x\n\n\nsys.stdout.buffer.write(\n    (str(len(ans)) + '\\n' + '\\n'.join(ans)).encode('utf-8'))\n",
    "prob_desc_created_at": "1451055600",
    "tags": [
        "sortings",
        "greedy"
    ],
    "hidden_unit_tests": ""
}