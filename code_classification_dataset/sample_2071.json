{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"bbbcbbb\", \"rumenanemur\"]",
    "src_uid": "f6280717d5644db30a1f9b525100b8b5",
    "prob_desc_notes": "NoteA subsequence of a string is a string that can be derived from it by deleting some characters without changing the order of the remaining characters. A palindrome is a string that reads the same forward or backward.",
    "prob_desc_description": "Given a string s, determine if it contains any palindrome of length exactly 100 as a subsequence. If it has any, print any one of them. If it doesn't have any, print a palindrome that is a subsequence of s and is as long as possible.",
    "prob_desc_output_spec": "If s contains a palindrome of length exactly 100 as a subsequence, print any palindrome of length 100 which is a subsequence of s. If s doesn't contain any palindromes of length exactly 100, print a palindrome that is a subsequence of s and is as long as possible. If there exists multiple answers, you are allowed to print any of them.",
    "prob_desc_input_spec": "The only line of the input contains one string s of length n (1 ≤ n ≤ 5·104) containing only lowercase English letters.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_016.jsonl",
    "code_uid": "f5694b0f0fe51d002eff533fdab9996b",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"bbbabcbbb\", \"rquwmzexectvnbanemsmdufrg\"]",
    "exec_outcome": "PASSED",
    "source_code": "def p2(a):\n  n = len(a)\n  last = [[0] * 26 for _ in range(n)]\n  last[0][ord(a[0])-97] = 0\n  for i in range(1, n):\n    for j in range(26):\n      last[i][j] = last[i-1][j]\n    last[i][ord(a[i])-97] = i\n  dp = [''] * n\n  for i in range(n-1, -1, -1):\n    for j in range(n-1, i, -1):\n      k = last[j][ord(a[i])-97]\n      if k>i:\n        if (k-i) == 1 and len(dp[j]) < 2:\n          dp[j] = a[i]+a[i]\n        elif len(dp[j]) < (len(dp[k-1]) + 2):\n          dp[j] = a[i]+dp[k-1]+a[i]\n          if len(dp[j]) >= 100:\n            if len(dp[j]) == 101:\n              return dp[j][:50]+dp[j][51:]\n            else:\n              return dp[j]\n    dp[i] = a[i]\n  return dp[n-1]\n\nprint(p2(raw_input()))",
    "prob_desc_created_at": "1375549200",
    "tags": [
        "dp",
        "constructive algorithms"
    ],
    "hidden_unit_tests": ""
}