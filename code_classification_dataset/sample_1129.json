{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"10\", \"20\"]",
    "src_uid": "740a1ee41a5a4c55b505abb277c06b8a",
    "prob_desc_notes": "NoteIn the first sample, Vasya can reach the cinema in time using the first or the third cars, but it would be cheaper to choose the first one. Its price is equal to 10, and the capacity of its fuel tank is 8. Then Vasya can drive to the first gas station in the accelerated mode in 3 minutes, spending 6 liters of fuel. After that he can full the tank and cover 2 kilometers in the normal mode in 4 minutes, spending 2 liters of fuel. Finally, he drives in the accelerated mode covering the remaining 3 kilometers in 3 minutes and spending 6 liters of fuel. ",
    "prob_desc_description": "Vasya is currently at a car rental service, and he wants to reach cinema. The film he has bought a ticket for starts in t minutes. There is a straight road of length s from the service to the cinema. Let's introduce a coordinate system so that the car rental service is at the point 0, and the cinema is at the point s.There are k gas stations along the road, and at each of them you can fill a car with any amount of fuel for free! Consider that this operation doesn't take any time, i.e. is carried out instantly.There are n cars in the rental service, i-th of them is characterized with two integers ci and vi — the price of this car rent and the capacity of its fuel tank in liters. It's not allowed to fuel a car with more fuel than its tank capacity vi. All cars are completely fueled at the car rental service.Each of the cars can be driven in one of two speed modes: normal or accelerated. In the normal mode a car covers 1 kilometer in 2 minutes, and consumes 1 liter of fuel. In the accelerated mode a car covers 1 kilometer in 1 minutes, but consumes 2 liters of fuel. The driving mode can be changed at any moment and any number of times.Your task is to choose a car with minimum price such that Vasya can reach the cinema before the show starts, i.e. not later than in t minutes. Assume that all cars are completely fueled initially.",
    "prob_desc_output_spec": "Print the minimum rent price of an appropriate car, i.e. such car that Vasya will be able to reach the cinema before the film starts (not later than in t minutes). If there is no appropriate car, print -1.",
    "prob_desc_input_spec": "The first line contains four positive integers n, k, s and t (1 ≤ n ≤ 2·105, 1 ≤ k ≤ 2·105, 2 ≤ s ≤ 109, 1 ≤ t ≤ 2·109) — the number of cars at the car rental service, the number of gas stations along the road, the length of the road and the time in which the film starts.  Each of the next n lines contains two positive integers ci and vi (1 ≤ ci, vi ≤ 109) — the price of the i-th car and its fuel tank capacity. The next line contains k distinct integers g1, g2, ..., gk (1 ≤ gi ≤ s - 1) — the positions of the gas stations on the road in arbitrary order.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_006.jsonl",
    "code_uid": "3c43f739953ed2096f3be77455fb4add",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 1 8 10\\n10 8\\n5 7\\n11 9\\n3\", \"2 2 10 18\\n10 4\\n20 6\\n5 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "R = lambda: map(int, raw_input().split())\n\n(n, k, s, t) = R()\ncvs = [R() for _ in range(n)]\nps = R() + [0, s]\nps.sort()\n\nif t < s:\n    print(-1)\nelse:\n    (l, r) = (1, s << 1)\n    while l <= r:\n        m = l+r >> 1\n        t1 = 0\n        for i in range(1, len(ps)):\n            d = ps[i] - ps[i - 1]\n            if d<<1 <= m:\n                t1 += d\n            elif d > m:\n                l = m + 1\n                break\n            else:\n                t1 += 3*d - m\n        else:\n            if t1 <= t:\n                r = m - 1\n            else:\n                l = m + 1\n\n    ans = 10**9 + 1\n    for (c, v) in cvs:\n        if v >= l:\n            ans = min(ans, c)\n    print(ans if ans <= 10**9 else -1)\n",
    "prob_desc_created_at": "1479632700",
    "tags": [
        "binary search"
    ],
    "hidden_unit_tests": ""
}