{
    "prob_desc_time_limit": "5 seconds",
    "prob_desc_sample_outputs": "[\"bcccc\", \"xxxx\", \"y\", \"-1\"]",
    "src_uid": "1d73b315694f2ebbf796654193372730",
    "prob_desc_notes": null,
    "prob_desc_description": "You already know that Valery's favorite sport is biathlon. Due to your help, he learned to shoot without missing, and his skills are unmatched at the shooting range. But now a smaller task is to be performed, he should learn to complete the path fastest.The track's map is represented by a rectangle n × m in size divided into squares. Each square is marked with a lowercase Latin letter (which means the type of the plot), with the exception of the starting square (it is marked with a capital Latin letters S) and the terminating square (it is marked with a capital Latin letter T). The time of movement from one square to another is equal to 1 minute. The time of movement within the cell can be neglected. We can move from the cell only to side-adjacent ones, but it is forbidden to go beyond the map edges. Also the following restriction is imposed on the path: it is not allowed to visit more than k different types of squares (squares of one type can be visited an infinite number of times). Squares marked with S and T have no type, so they are not counted. But S must be visited exactly once — at the very beginning, and T must be visited exactly once — at the very end.Your task is to find the path from the square S to the square T that takes minimum time. Among all shortest paths you should choose the lexicographically minimal one. When comparing paths you should lexicographically represent them as a sequence of characters, that is, of plot types.",
    "prob_desc_output_spec": "If there is a path that satisfies the condition, print it as a sequence of letters — the plot types. Otherwise, print \"-1\" (without quotes). You shouldn't print the character S in the beginning and T in the end. Note that this sequence may be empty. This case is present in pretests. You can just print nothing or print one \"End of line\"-character. Both will be accepted.",
    "prob_desc_input_spec": "The first input line contains three integers n, m and k (1 ≤ n, m ≤ 50, n·m ≥ 2, 1 ≤ k ≤ 4). Then n lines contain the map. Each line has the length of exactly m characters and consists of lowercase Latin letters and characters S and T. It is guaranteed that the map contains exactly one character S and exactly one character T. Pretest 12 is one of the maximal tests for this problem.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_077.jsonl",
    "code_uid": "ec0e67a240a3d6b716231aa7d5ee28bd",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 3 2\\nSba\\nccc\\naac\\nccc\\nabT\", \"3 4 1\\nSxyy\\nyxxx\\nyyyT\", \"1 3 3\\nTyS\", \"1 4 1\\nSxyT\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nfrom array import array  # noqa: F401\nfrom itertools import combinations\nfrom collections import deque\n\n\ndef input():\n    return sys.stdin.buffer.readline().decode('utf-8')\n\n\nn, m, k = map(int, input().split())\nchars = (\n    ['}' * (m + 2)]\n    + ['}' + ''.join('{' if c == 'S' else '|' if c == 'T' else c for c in input().rstrip()) + '}' for _ in range(n)]\n    + ['}' * (m + 2)]\n)\ncbit = [[1 << (ord(c) - 97) for c in chars[i]] for i in range(n + 2)]\n\nsi, sj, ti, tj = 0, 0, 0, 0\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if chars[i][j] == '{':\n            si, sj = i, j\n            cbit[i][j] = 0\n        if chars[i][j] == '|':\n            ti, tj = i, j\n\n\nans = inf = '*' * (n * m)\n\nfor comb in combinations([1 << i for i in range(26)], r=k):\n    enabled = sum(comb)\n\n    dp = [[inf] * (m + 2) for _ in range(n + 2)]\n    dp[ti][tj] = ''\n    dq = deque([(ti, tj, '')])\n    while dq:\n        i, j, s = dq.popleft()\n        if dp[i][j] < s:\n            continue\n        for di, dj in ((i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)):\n            if (cbit[di][dj] & enabled) != cbit[di][dj]:\n                continue\n            pre = chars[di][dj] if cbit[di][dj] else ''\n            l = 1 if cbit[di][dj] else 0\n            if (len(dp[di][dj]) > len(s) + l or len(dp[di][dj]) == len(s) + l and dp[di][dj] > pre + s):\n                dp[di][dj] = pre + s\n                if l:\n                    dq.append((di, dj, pre + s))\n\n    if len(ans) > len(dp[si][sj]) or len(ans) == len(dp[si][sj]) and ans > dp[si][sj]:\n        ans = dp[si][sj]\n\nprint(ans if ans != inf else -1)\n",
    "prob_desc_created_at": "1305299400",
    "tags": [
        "brute force",
        "shortest paths"
    ],
    "hidden_unit_tests": ""
}