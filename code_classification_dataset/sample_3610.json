{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\\ntopforces\\ncodecoder\", \"YES\\na\\nd\", \"NO\"]",
    "src_uid": "712b82c305a6bcf2903e9bc0505f090a",
    "prob_desc_notes": null,
    "prob_desc_description": "Alice has written a program and now tries to improve its readability. One of the ways to improve readability is to give sensible names to the variables, so now Alice wants to rename some variables in her program. In her IDE there is a command called \"massive refactoring\", which can replace names of many variable in just one run. To use it, Alice needs to select two strings $$$s$$$ and $$$t$$$ and after that for each variable the following algorithm is performed: if the variable's name contains $$$s$$$ as a substring, then the first (and only first) occurrence of $$$s$$$ is replaced with $$$t$$$. If the name doesn't contain $$$s$$$, then this variable's name stays the same.The list of variables is known and for each variable both the initial name and the name Alice wants this variable change to are known. Moreover, for each variable the lengths of the initial name and the target name are equal (otherwise the alignment of the code could become broken). You need to perform renaming of all variables in exactly one run of the massive refactoring command or determine that it is impossible.",
    "prob_desc_output_spec": "If it is impossible to rename all variables with one call of \"massive refactoring\", print \"NO\" (quotes for clarity). Otherwise, on the first line print \"YES\" (quotes for clarity) and on the following lines print $$$s$$$ and $$$t$$$ ($$$1 \\le |s|, |t| \\le 5000$$$), which should be used for replacement. Strings $$$s$$$ and $$$t$$$ should consist only of lowercase letters of English alphabet. If there are multiple ways to perform a \"massive refactoring\", you can use any of them.",
    "prob_desc_input_spec": "The first line contains the only integer $$$n$$$ ($$$1 \\le n \\le 3000$$$) — the number of variables in Alice's program. The following $$$n$$$ lines contain the initial names of variables $$$w_1, w_2, \\ldots, w_n$$$, one per line. After that, $$$n$$$ more lines go, the $$$i$$$-th of them contains the target name $$$w'_i$$$ for the $$$i$$$-th variable. It is guaranteed that $$$1 \\le |w_i| = |w'_i| \\le 3000$$$. It is guaranteed that there is at least one variable having its target name different from the initial name. Both initial and target names consist of lowercase English letters only. For each variable the length of its initial name is equal to the length of its target name.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_073.jsonl",
    "code_uid": "c49e3825bfe86a99f94647dc2a2e7fd0",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1\\ntopforces\\ncodecoder\", \"3\\nbab\\ncac\\ncdc\\nbdb\\ncdc\\ncdc\", \"2\\nyou\\nshal\\nnot\\npass\"]",
    "exec_outcome": "PASSED",
    "source_code": "from __future__ import division\nfrom fileinput import input\nfrom itertools import izip\n\nclass KMP:\n    def __init__(self, pattern):\n        pass\n\n    def KnuthMorrisPratt(self, text, pattern):\n        '''Yields all starting positions of copies of the pattern in the text.\n    Calling conventions are similar to string.find, but its arguments can be\n    lists or iterators, not just strings, it returns all matches, not just\n    the first one, and it does not need the whole text in memory at once.\n    Whenever it yields, it will have read the text exactly up to and including\n    the match that caused the yield.'''\n\n        # allow indexing into pattern and protect against change during yield\n        pattern = list(pattern)\n\n        # build table of shift amounts\n        shifts = [1] * (len(pattern) + 1)\n        shift = 1\n        for pos in range(len(pattern)):\n            while shift <= pos and pattern[pos] != pattern[pos-shift]:\n                shift += shifts[pos-shift]\n            shifts[pos+1] = shift\n\n        # do the actual search\n        startPos = 0\n        matchLen = 0\n        for c in text:\n            while matchLen == len(pattern) or \\\n                  matchLen >= 0 and pattern[matchLen] != c:\n                startPos += shifts[matchLen]\n                matchLen -= shifts[matchLen]\n            matchLen += 1\n            if matchLen == len(pattern):\n                return startPos\n        return -1\n\n\ndef alleq(li):\n    for c in li[1:]:\n        if c != li[0]:\n            return False\n    return True\n\ndef mkst(r):\n    out = \"\"\n    for c in r:\n        out += c\n    return out\n\ndef solve():\n    inp = input()\n    n = int(inp.readline())\n    fro = []\n    for _ in xrange(n):\n        line = inp.readline().rstrip(\"\\n\")\n        fro.append(line)\n    to = []\n    for _ in xrange(n):\n        line = inp.readline().rstrip(\"\\n\")\n        to.append(line)\n\n    changefrom = \"\"\n    changeto = \"\"\n    nochange = []\n    changearr = []\n    fronts = []\n    backs = []\n    for f, t in zip(fro, to):\n        errors = -1\n        errore = -1\n        for i in xrange(len(f)):\n            if f[i] != t[i]:\n                if errors == -1:\n                    errors = i\n                errore = i\n        if errors == -1:\n            nochange.append(f)\n            continue\n        cf = f[errors:errore + 1]\n        ct = t[errors:errore + 1]\n\n        if changefrom == \"\":\n            changefrom = cf\n            changeto = ct\n        else:\n            if cf != changefrom or ct != changeto:\n                return \"NO\"\n        changearr.append((f, errors,errore, t))\n        fronts.append(f[0:errors])\n        backs.append(f[errore + 1:])\n    front = \"\"\n    i = 1\n    cont = True\n    while cont:\n        if i > len(fronts[0]):\n            break\n        else:\n            th = fronts[0][-i]\n        for st in fronts:\n            if i > len(st):\n                cont = False\n                break\n            if st[-i] != th:\n                cont = False\n                break\n        else:\n            front += th\n        i += 1\n\n    front = mkst(reversed(front))\n\n    back = \"\"\n    for cs in izip(*backs):\n        if alleq(cs):\n            back += cs[0]\n        else:\n            break\n    changefrom = front + changefrom + back\n\n    ford, errors, errore, toord = changearr[0]\n    changeto = toord[errors - len(front): errors] + changeto + toord[errore + 1: errore + 1 + len(back)]\n    kmp = KMP(changefrom)\n    for f, errors, errore, t in changearr:\n        if kmp.KnuthMorrisPratt(f, changefrom) + len(front) != errors:\n             return \"NO\"\n\n    for st in nochange:\n        if kmp.KnuthMorrisPratt(st, changefrom) != -1:\n            return \"NO\"\n    return \"YES\\n\" + changefrom + \"\\n\" + changeto\n\n\nprint solve()\n",
    "prob_desc_created_at": "1541860500",
    "tags": [
        "implementation",
        "greedy",
        "strings"
    ],
    "hidden_unit_tests": ""
}