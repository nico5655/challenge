{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"4\", \"2\"]",
    "src_uid": "2fc19c3c9604e746a17a63758060c5d7",
    "prob_desc_notes": "NoteIn the first sample the pairs of vertexes at distance 2 from each other are (1, 3), (1, 5), (3, 5) and (2, 4).",
    "prob_desc_description": "A tree is a connected graph that doesn't contain any cycles.The distance between two vertices of a tree is the length (in edges) of the shortest path between these vertices.You are given a tree with n vertices and a positive number k. Find the number of distinct pairs of the vertices which have a distance of exactly k between them. Note that pairs (v, u) and (u, v) are considered to be the same pair.",
    "prob_desc_output_spec": "Print a single integer — the number of distinct pairs of the tree's vertices which have a distance of exactly k between them. Please do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier.",
    "prob_desc_input_spec": "The first line contains two integers n and k (1 ≤ n ≤ 50000, 1 ≤ k ≤ 500) — the number of vertices and the required distance between the vertices. Next n - 1 lines describe the edges as \"ai bi\" (without the quotes) (1 ≤ ai, bi ≤ n, ai ≠ bi), where ai and bi are the vertices connected by the i-th edge. All given edges are different.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_024.jsonl",
    "code_uid": "d743fe195ea0d3d96e5a6a9db0797781",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"5 2\\n1 2\\n2 3\\n3 4\\n2 5\", \"5 3\\n1 2\\n2 3\\n3 4\\n4 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "n, k = map(int, input().split())\nt, q = [[] for i in range(n + 1)], [1]\n \nfor j in range(n - 1):\n    a, b = map(int, input().split())\n    t[a].append(b)\n    t[b].append(a)\nfor x in q:\n    for y in t[x]: t[y].remove(x)\n    q.extend(t[x])\nq.reverse()\n \na, s = {}, 0\nfor x in q:\n    a[x] = [1]\n    u = len(a[x])\n    for y in t[x]:\n        v = len(a[y])\n        for d in range(max(0, k - u), v): s += a[y][d] * a[x][k - d - 1]\n        if v >= u:\n            for d in range(u - 1): a[x][d + 1] += a[y][d]\n            a[x] += a[y][u - 1: ]\n            u = v + 1\n        else:\n            for d in range(0, v): a[x][d + 1] += a[y][d]\n    if u > k: a[x].pop()\nprint(s)",
    "prob_desc_created_at": "1331478300",
    "tags": [
        "dp",
        "dfs and similar",
        "trees"
    ],
    "hidden_unit_tests": ""
}