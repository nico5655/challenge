{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1\", \"-1\", \"0\"]",
    "src_uid": "bc937cacda9ebff9ec0b7f00f0f97508",
    "prob_desc_notes": null,
    "prob_desc_description": "Sereja has an n × m rectangular table a, each cell of the table contains a zero or a number one. Sereja wants his table to meet the following requirement: each connected component of the same values forms a rectangle with sides parallel to the sides of the table. Rectangles should be filled with cells, that is, if a component form a rectangle of size h × w, then the component must contain exactly hw cells.A connected component of the same values is a set of cells of the table that meet the following conditions:  every two cells of the set have the same value;  the cells of the set form a connected region on the table (two cells are connected if they are adjacent in some row or some column of the table);  it is impossible to add any cell to the set unless we violate the two previous conditions. Can Sereja change the values of at most k cells of the table so that the table met the described requirement? What minimum number of table cells should he change in this case?",
    "prob_desc_output_spec": "Print -1, if it is impossible to meet the requirement. Otherwise, print the minimum number of cells which should be changed.",
    "prob_desc_input_spec": "The first line contains integers n, m and k (1 ≤ n, m ≤ 100; 1 ≤ k ≤ 10). Next n lines describe the table a: the i-th of them contains m integers ai1, ai2, ..., aim (0 ≤ ai, j ≤ 1) — the values in the cells of the i-th row.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_019.jsonl",
    "code_uid": "15d8cac073ef6ba3551b2ad27644a3db",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 5 2\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 0 1 1\\n1 1 1 1 1\\n1 1 1 1 1\", \"3 4 1\\n1 0 0 0\\n0 1 1 1\\n1 1 1 0\", \"3 4 1\\n1 0 0 1\\n0 1 1 0\\n1 0 0 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "#!/usr/bin/python\n\nimport sys\nfrom math import *\nfrom itertools import product\n\ndef Ni(): return map(int, sys.stdin.readline().split())\ndef Ns(): return sys.stdin.readline().split()\n\nn, m, k = Ni()\na = [Ni() for i in range(n)]\n\nbest = n * m\nif n > k:\n    for row1 in range(n):\n        change = 0\n        for row2 in range(n):\n            equals = sum(a[row1][i] ^ a[row2][i] for i in range(m))\n            change += min(equals, m - equals)\n\n        best = min(best, change)\nelse:\n    for mask in range(1<<n):\n        x = map(int, (\"0\" * n + bin(mask)[2:])[-n:])\n        #print \"x = \", x\n        change = 0\n        for col in range(m):\n            equals = sum(a[i][col] ^ x[i] for i in range(n))\n            change += min(equals, n - equals)\n                \n        best = min(best, change)\n\n#print best\nprint best if best <= k else -1\n",
    "prob_desc_created_at": "1398612600",
    "tags": [],
    "hidden_unit_tests": ""
}