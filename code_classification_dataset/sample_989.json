{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"13\", \"14\"]",
    "src_uid": "93f6404a23bd2ff867d63db9ddf868ff",
    "prob_desc_notes": "NoteConsider the second sample. You need to arrange the numbers in the matrix as follows:1 23 4Then the beauty of the matrix will equal: 4 + 1 + 2 + 3 + 4 = 14.",
    "prob_desc_description": "Ilya is a very good-natured lion. He likes maths. Of all mathematical objects, his favourite one is matrices. Now he's faced a complicated matrix problem he needs to solve.He's got a square 2n × 2n-sized matrix and 4n integers. You need to arrange all these numbers in the matrix (put each number in a single individual cell) so that the beauty of the resulting matrix with numbers is maximum.The beauty of a 2n × 2n-sized matrix is an integer, obtained by the following algorithm:  Find the maximum element in the matrix. Let's denote it as m.  If n = 0, then the beauty of the matrix equals m. Otherwise, a matrix can be split into 4 non-intersecting 2n - 1 × 2n - 1-sized submatrices, then the beauty of the matrix equals the sum of number m and other four beauties of the described submatrices. As you can see, the algorithm is recursive.Help Ilya, solve the problem and print the resulting maximum beauty of the matrix.",
    "prob_desc_output_spec": "On a single line print the maximum value of the beauty of the described matrix. Please, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier.",
    "prob_desc_input_spec": "The first line contains integer 4n (1 ≤ 4n ≤ 2·106). The next line contains 4n integers ai (1 ≤ ai ≤ 109) — the numbers you need to arrange in the 2n × 2n-sized matrix.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_005.jsonl",
    "code_uid": "aebf1e68b0a1dfc81559db5d457312c8",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1\\n13\", \"4\\n1 2 3 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = input()\nans = 0\nl = sorted(map(int, raw_input().split()))[::-1]\npref = [0]*(n+1)\nfor i in range(n):\n    pref[i+1] = pref[i] + l[i]\nind = 1\nwhile ind <= n:\n    ans += pref[ind]\n    ind <<= 2\nprint ans",
    "prob_desc_created_at": "1369927800",
    "tags": [
        "constructive algorithms",
        "implementation",
        "sortings",
        "greedy"
    ],
    "hidden_unit_tests": ""
}