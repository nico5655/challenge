{
    "prob_desc_time_limit": "4 seconds",
    "prob_desc_sample_outputs": "[\"2 3 5 8 11\", \"2 3 4 6 9 12 16 21 26 31\"]",
    "src_uid": "fc82362dbda74396ad6db0d95a0f7acc",
    "prob_desc_notes": "NoteThe greatest common divisor (gcd) of two integers a and b is the largest positive integer that divides both a and b without a remainder.For the first sample testcase, you should output \"2 3 5 8 11\". Pictures below correspond to situations after drawing lines.       ",
    "prob_desc_description": "PolandBall has such a convex polygon with n veritces that no three of its diagonals intersect at the same point. PolandBall decided to improve it and draw some red segments. He chose a number k such that gcd(n, k) = 1. Vertices of the polygon are numbered from 1 to n in a clockwise way. PolandBall repeats the following process n times, starting from the vertex 1: Assume you've ended last operation in vertex x (consider x = 1 if it is the first operation). Draw a new segment from vertex x to k-th next vertex in clockwise direction. This is a vertex x + k or x + k - n depending on which of these is a valid index of polygon's vertex.Your task is to calculate number of polygon's sections after each drawing. A section is a clear area inside the polygon bounded with drawn diagonals or the polygon's sides.",
    "prob_desc_output_spec": "You should print n values separated by spaces. The i-th value should represent number of polygon's sections after drawing first i lines.",
    "prob_desc_input_spec": "There are only two numbers in the input: n and k (5 ≤ n ≤ 106, 2 ≤ k ≤ n - 2, gcd(n, k) = 1).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_002.jsonl",
    "code_uid": "62a86ff05efcdee119dc23fc051b3179",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 2\", \"10 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\n\ninf = (1 << 31) - 1\n\ndef solve():\n    n, k = map(int, input().split())\n\n    if k > n - k:\n        k = n - k\n\n    s = 0\n    res = 1\n    a = 1\n    ans = [0]*n\n\n    for i in range(n):\n        t = (s + k) % n\n\n        if t < s and t > 0:\n            res += a + 1\n            a += 2\n        else:\n            res += a\n\n        ans[i] = res\n\n        s = t\n\n    print(*ans)\n\nif __name__ == '__main__':\n    solve()",
    "prob_desc_created_at": "1484499900",
    "tags": [
        "data structures"
    ],
    "hidden_unit_tests": ""
}