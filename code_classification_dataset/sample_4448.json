{
    "prob_desc_time_limit": "4 seconds",
    "prob_desc_sample_outputs": "[\"1\", \"3\", \"54\", \"0\"]",
    "src_uid": "6fa3f1fd7675affcf326eeb7fb3c60a5",
    "prob_desc_notes": "NoteLet's draw the cards indicating the first four features. The first feature will indicate the number of objects on a card: $$$1$$$, $$$2$$$, $$$3$$$. The second one is the color: red, green, purple. The third is the shape: oval, diamond, squiggle. The fourth is filling: open, striped, solid.You can see the first three tests below. For the first two tests, the meta-sets are highlighted.In the first test, the only meta-set is the five cards $$$(0000,\\ 0001,\\ 0002,\\ 0010,\\ 0020)$$$. The sets in it are the triples $$$(0000,\\ 0001,\\ 0002)$$$ and $$$(0000,\\ 0010,\\ 0020)$$$. Also, a set is the triple $$$(0100,\\ 1000,\\ 2200)$$$ which does not belong to any meta-set.   In the second test, the following groups of five cards are meta-sets: $$$(0000,\\ 0001,\\ 0002,\\ 0010,\\ 0020)$$$, $$$(0000,\\ 0001,\\ 0002,\\ 0100,\\ 0200)$$$, $$$(0000,\\ 0010,\\ 0020,\\ 0100,\\ 0200)$$$.   In there third test, there are $$$54$$$ meta-sets.   ",
    "prob_desc_description": "You like the card board game \"Set\". Each card contains $$$k$$$ features, each of which is equal to a value from the set $$$\\{0, 1, 2\\}$$$. The deck contains all possible variants of cards, that is, there are $$$3^k$$$ different cards in total.A feature for three cards is called good if it is the same for these cards or pairwise distinct. Three cards are called a set if all $$$k$$$ features are good for them.For example, the cards $$$(0, 0, 0)$$$, $$$(0, 2, 1)$$$, and $$$(0, 1, 2)$$$ form a set, but the cards $$$(0, 2, 2)$$$, $$$(2, 1, 2)$$$, and $$$(1, 2, 0)$$$ do not, as, for example, the last feature is not good.A group of five cards is called a meta-set, if there is strictly more than one set among them. How many meta-sets there are among given $$$n$$$ distinct cards?",
    "prob_desc_output_spec": "Output one integer — the number of meta-sets.",
    "prob_desc_input_spec": "The first line of the input contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 10^3$$$, $$$1 \\le k \\le 20$$$) — the number of cards on a table and the number of card features. The description of the cards follows in the next $$$n$$$ lines. Each line describing a card contains $$$k$$$ integers $$$c_{i, 1}, c_{i, 2}, \\ldots, c_{i, k}$$$ ($$$0 \\le c_{i, j} \\le 2$$$) — card features. It is guaranteed that all cards are distinct.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_098.jsonl",
    "code_uid": "4875c7120202f13cf6924aa4f62a9a28",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"8 4\\n0 0 0 0\\n0 0 0 1\\n0 0 0 2\\n0 0 1 0\\n0 0 2 0\\n0 1 0 0\\n1 0 0 0\\n2 2 0 0\", \"7 4\\n0 0 0 0\\n0 0 0 1\\n0 0 0 2\\n0 0 1 0\\n0 0 2 0\\n0 1 0 0\\n0 2 0 0\", \"9 2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 1\\n1 2\\n2 0\\n2 1\\n2 2\", \"20 4\\n0 2 0 0\\n0 2 2 2\\n0 2 2 1\\n0 2 0 1\\n1 2 2 0\\n1 2 1 0\\n1 2 2 1\\n1 2 0 1\\n1 1 2 2\\n1 1 0 2\\n1 1 2 1\\n1 1 1 1\\n2 1 2 0\\n2 1 1 2\\n2 1 2 1\\n2 1 1 1\\n0 1 1 2\\n0 0 1 0\\n2 2 0 0\\n2 0 0 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "import collections\r\nimport math\r\nimport bisect\r\nimport sys\r\n#import heapq\r\n#import itertools\r\n#import functools\r\n#from sortedcontainers import SortedList\r\nM = 3 ** 19\r\ndef bitmask(ls):\r\n    ans = 0\r\n    curr = 1\r\n    for i, num in enumerate(ls):\r\n        ans += curr * num\r\n        curr *= 3\r\n    return ans\r\n\r\ndef check(i, j):\r\n    curr = M\r\n    ans = 0\r\n    while curr:\r\n        num1 = i // curr\r\n        num2 = j // curr\r\n        if num1 == num2:\r\n            ans += num1 * curr\r\n        else:\r\n            ans += (3 - num1 - num2) * curr\r\n        i -= num1 * curr\r\n        j -= num2 * curr\r\n        curr //= 3\r\n    return ans\r\n\r\ndef solve():\r\n    n, k = list(map(int, input().split()))\r\n    dic = {}\r\n    mat = []\r\n    for _ in range(n):\r\n        curr = bitmask([int(i) for i in sys.stdin.readline().split()])\r\n        mat.append(curr)\r\n        dic[curr] = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            curr = check(mat[i], mat[j])\r\n            if curr in dic:\r\n                dic[curr] += 1\r\n    ans = 0\r\n    for key in dic:\r\n        temp = dic[key]\r\n        if temp >= 2:\r\n            ans += math.comb(temp, 2)\r\n    print(ans)\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    \r\n        \r\n    \r\n\r\n    \r\n            \r\n    \r\n\r\n\r\nsolve()\r\n",
    "prob_desc_created_at": "1664721300",
    "tags": [
        "brute force",
        "combinatorics",
        "data structures",
        "hashing",
        "math"
    ],
    "hidden_unit_tests": ""
}