{
    "prob_desc_time_limit": "4 seconds",
    "prob_desc_sample_outputs": "[\"6\", \"7\", \"1000000001\", \"-1\", \"7\", \"9\"]",
    "src_uid": "21932a14b356c267eae7e589f8ae8202",
    "prob_desc_notes": null,
    "prob_desc_description": "You are walking with your dog, and now you are at the promenade. The promenade can be represented as an infinite line. Initially, you are in the point $$$0$$$ with your dog. You decided to give some freedom to your dog, so you untied her and let her run for a while. Also, you watched what your dog is doing, so you have some writings about how she ran. During the $$$i$$$-th minute, the dog position changed from her previous position by the value $$$a_i$$$ (it means, that the dog ran for $$$a_i$$$ meters during the $$$i$$$-th minute). If $$$a_i$$$ is positive, the dog ran $$$a_i$$$ meters to the right, otherwise (if $$$a_i$$$ is negative) she ran $$$a_i$$$ meters to the left.During some minutes, you were chatting with your friend, so you don't have writings about your dog movement during these minutes. These values $$$a_i$$$ equal zero.You want your dog to return to you after the end of the walk, so the destination point of the dog after $$$n$$$ minutes should be $$$0$$$.Now you are wondering: what is the maximum possible number of different integer points of the line your dog could visit on her way, if you replace every $$$0$$$ with some integer from $$$-k$$$ to $$$k$$$ (and your dog should return to $$$0$$$ after the walk)? The dog visits an integer point if she runs through that point or reaches in it at the end of any minute. Point $$$0$$$ is always visited by the dog, since she is initially there.If the dog cannot return to the point $$$0$$$ after $$$n$$$ minutes regardless of the integers you place, print -1.",
    "prob_desc_output_spec": "If the dog cannot return to the point $$$0$$$ after $$$n$$$ minutes regardless of the set of integers you place, print -1. Otherwise, print one integer — the maximum number of different integer points your dog could visit if you fill all the unknown values optimally and the dog will return to the point $$$0$$$ at the end of the walk.",
    "prob_desc_input_spec": "The first line of the input contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 3000; 1 \\le k \\le 10^9$$$) — the number of minutes and the maximum possible speed of your dog during the minutes without records. The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$-10^9 \\le a_i \\le 10^9$$$), where $$$a_i$$$ is the number of meters your dog ran during the $$$i$$$-th minutes (to the left if $$$a_i$$$ is negative, to the right otherwise). If $$$a_i = 0$$$ then this value is unknown and can be replaced with any integer from the range $$$[-k; k]$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_083.jsonl",
    "code_uid": "db4b8cfeb42dcf7fdc6be720616dab9d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 2\\n5 0 -4\", \"6 4\\n1 -2 0 3 -4 5\", \"3 1000000000\\n0 0 0\", \"5 9\\n-7 -3 8 12 0\", \"5 3\\n-1 0 3 3 0\", \"5 4\\n0 2 0 3 0\"]",
    "exec_outcome": "PASSED",
    "source_code": "N, K = map(int, input().split())\nA = list(map(int, input().split()))\n\ninters = []\ninf = sup = 0\nfor diff in A:\n    inters.append((inf, sup))\n    if diff != 0:\n        inf += diff\n        sup += diff\n    else:\n        inf -= K\n        sup += K\nif not inf <= 0 <= sup:\n    print(-1)\nelse:\n    inters.append((inf, sup))\n    firstPass = inters.copy()\n    inters.pop()\n    inters.append((0, 0))\n    inf = sup = 0\n    for i in range(N-1, 0, -1):\n        diff = A[i]\n        if diff != 0:\n            inf -= diff\n            sup -= diff\n        else:\n            inf -= K\n            sup += K\n        actinf, actsup = inters[i]\n        inf = max(inf, actinf)\n        sup = min(sup, actsup)\n        inters[i] = (inf, sup)\n    \n    ans = -1\n    for i in range(N+1):\n        for j in range(i, N+1):\n             up = firstPass[j][1] - firstPass[i][1]\n             start = inters[i][0]\n             end = min(start + up, inters[j][1])\n             ans = max(ans, end - start + 1)\n             \n             down = firstPass[i][0] - firstPass[j][0]\n             start = inters[i][1]\n             end = max(start - down, inters[j][0])\n             ans = max(ans, start - end + 1)\n\n    print(ans)\n",
    "prob_desc_created_at": "1652452500",
    "tags": [
        "brute force",
        "greedy",
        "math"
    ],
    "hidden_unit_tests": ""
}