{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"24\", \"29\\n22\\n1\"]",
    "src_uid": "cec39b98d9b16a3382efa06995c3f2ea",
    "prob_desc_notes": "NoteIn the first sample, initially, the array $$$a$$$ is equal to $$$\\{7,4,9,9\\}$$$.After processing the first query. the array $$$a$$$ becomes $$$\\{7,8,9,9\\}$$$.After processing the second query, the array $$$a_i$$$ becomes $$$\\{9,9,7,8\\}$$$Therefore, the answer to the third query is $$$9+7+8=24$$$.In the second sample, initially, the array $$$a$$$ is equal to $$$\\{7,0,8,8,7,1,5,2\\}$$$. What happens next is:   $$$Sum(3, 7)$$$ $$$\\to$$$ $$$8 + 8 + 7 + 1 + 5 = 29$$$;  $$$Reverse(1)$$$ $$$\\to$$$ $$$\\{0,7,8,8,1,7,2,5\\}$$$;  $$$Swap(2)$$$ $$$\\to$$$ $$$\\{1,7,2,5,0,7,8,8\\}$$$;  $$$Sum(1, 6)$$$ $$$\\to$$$ $$$1 + 7 + 2 + 5 + 0 + 7 = 22$$$;  $$$Reverse(3)$$$ $$$\\to$$$ $$$\\{8,8,7,0,5,2,7,1\\}$$$;  $$$Replace(5, 16)$$$ $$$\\to$$$ $$$\\{8,8,7,0,16,2,7,1\\}$$$;  $$$Sum(8, 8)$$$ $$$\\to$$$ $$$1$$$;  $$$Swap(0)$$$ $$$\\to$$$ $$$\\{8,8,0,7,2,16,1,7\\}$$$. ",
    "prob_desc_description": "You are given an array $$$a$$$ of length $$$2^n$$$. You should process $$$q$$$ queries on it. Each query has one of the following $$$4$$$ types:   $$$Replace(x, k)$$$ — change $$$a_x$$$ to $$$k$$$;  $$$Reverse(k)$$$ — reverse each subarray $$$[(i-1) \\cdot 2^k+1, i \\cdot 2^k]$$$ for all $$$i$$$ ($$$i \\ge 1$$$);  $$$Swap(k)$$$ — swap subarrays $$$[(2i-2) \\cdot 2^k+1, (2i-1) \\cdot 2^k]$$$ and $$$[(2i-1) \\cdot 2^k+1, 2i \\cdot 2^k]$$$ for all $$$i$$$ ($$$i \\ge 1$$$);  $$$Sum(l, r)$$$ — print the sum of the elements of subarray $$$[l, r]$$$. Write a program that can quickly process given queries.",
    "prob_desc_output_spec": "Print the answer for each $$$Sum$$$ query.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$, $$$q$$$ ($$$0 \\le n \\le 18$$$; $$$1 \\le q \\le 10^5$$$) — the length of array $$$a$$$ and the number of queries. The second line contains $$$2^n$$$ integers $$$a_1, a_2, \\ldots, a_{2^n}$$$ ($$$0 \\le a_i \\le 10^9$$$). Next $$$q$$$ lines contains queries — one per line. Each query has one of $$$4$$$ types:    \"$$$1$$$ $$$x$$$ $$$k$$$\" ($$$1 \\le x \\le 2^n$$$; $$$0 \\le k \\le 10^9$$$) — $$$Replace(x, k)$$$;  \"$$$2$$$ $$$k$$$\" ($$$0 \\le k \\le n$$$) — $$$Reverse(k)$$$;  \"$$$3$$$ $$$k$$$\" ($$$0 \\le k &lt; n$$$) — $$$Swap(k)$$$;  \"$$$4$$$ $$$l$$$ $$$r$$$\" ($$$1 \\le l \\le r \\le 2^n$$$) — $$$Sum(l, r)$$$.  It is guaranteed that there is at least one $$$Sum$$$ query.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_007.jsonl",
    "code_uid": "6037dbc2448824052289316ac3e01a92",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2 3\\n7 4 9 9\\n1 2 8\\n3 1\\n4 2 4\", \"3 8\\n7 0 8 8 7 1 5 2\\n4 3 7\\n2 1\\n3 2\\n4 1 6\\n2 3\\n1 5 16\\n4 8 8\\n3 0\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nrange = xrange\ninput = raw_input\n\n# Bugs, bugs everywhere\n\ninp = [int(x) for x in sys.stdin.read().split()]; ii = 0\n\nn = inp[ii]; ii += 1\nm = 1 << n \nq = inp[ii]; ii += 1\n\nA = inp[ii: ii + m]; ii += m\nswapped = [0] * n\n\nB = [0] * (2 * m)\nB[m:] = A\nfor i in reversed(range(1, m)):\n    B[i] = B[2 * i] + B[2 * i + 1]\n\ndef getter(r):\n    if r == m:\n        return 2 * m, B[1]\n\n    ind = 1\n    s = 0\n    for level in range(n):\n        jump = 1 << n - 1 - level\n        if jump <= r:\n            r -= jump\n            ind = (2 * ind) ^ swapped[level] ^ 1\n            s += B[ind ^ 1]\n        else:\n            ind = (2 * ind) ^ swapped[level]\n    return ind, s\n\ndef setter(ind, val):\n    ind, _ = getter(ind)\n    B[ind] = val\n    ind >>= 1\n    while ind:\n        B[ind] = B[2 * ind] + B[2 * ind + 1]\n        ind >>= 1\n\ndef getsum(l, r):\n    _,lsum = getter(l)\n    _,rsum = getter(r)\n    return rsum - lsum\n\nout = []\nfor _ in range(q):\n    cas = inp[ii]; ii += 1\n    if cas == 1:\n        # Replace\n        x = inp[ii] - 1; ii += 1\n        k = inp[ii]; ii += 1\n        \n        setter(x, k)\n    elif cas == 2:\n        # reverse\n        k = inp[ii]; ii += 1\n        for i in range(k):\n            swapped[~i] ^= 1\n    elif cas == 3:\n        # swap\n        k = inp[ii]; ii += 1\n        swapped[~k] ^= 1\n    elif cas == 4:\n        # print sum\n        l = inp[ii] - 1; ii += 1\n        r = inp[ii]; ii += 1\n        out.append(getsum(l,r))\n    else:\n        assert False\n\nprint '\\n'.join(str(x) for x in out)\n",
    "prob_desc_created_at": "1598020500",
    "tags": [
        "data structures",
        "binary search",
        "bitmasks"
    ],
    "hidden_unit_tests": ""
}