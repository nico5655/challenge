{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"3.3\\n.5.\\n3.3\", \"46..3\\n..732\\n.6.4.\\n5.4.3\"]",
    "src_uid": "c91dd34bfa784f55ad3b661e06f84cfb",
    "prob_desc_notes": "NoteIn first example, if we imagine that the central cell is empty then it will be included to component of size 5 (cross). If any of the corner cell will be empty then it will be included to component of size 3 (corner).",
    "prob_desc_description": "You are given a rectangular field of n × m cells. Each cell is either empty or impassable (contains an obstacle). Empty cells are marked with '.', impassable cells are marked with '*'. Let's call two empty cells adjacent if they share a side.Let's call a connected component any non-extendible set of cells such that any two of them are connected by the path of adjacent cells. It is a typical well-known definition of a connected component.For each impassable cell (x, y) imagine that it is an empty cell (all other cells remain unchanged) and find the size (the number of cells) of the connected component which contains (x, y). You should do it for each impassable cell independently.The answer should be printed as a matrix with n rows and m columns. The j-th symbol of the i-th row should be \".\" if the cell is empty at the start. Otherwise the j-th symbol of the i-th row should contain the only digit —- the answer modulo 10. The matrix should be printed without any spaces.To make your output faster it is recommended to build the output as an array of n strings having length m and print it as a sequence of lines. It will be much faster than writing character-by-character.As input/output can reach huge size it is recommended to use fast input/output methods: for example, prefer to use scanf/printf instead of cin/cout in C++, prefer to use BufferedReader/PrintWriter instead of Scanner/System.out in Java.",
    "prob_desc_output_spec": "Print the answer as a matrix as described above. See the examples to precise the format of the output.",
    "prob_desc_input_spec": "The first line contains two integers n, m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the field. Each of the next n lines contains m symbols: \".\" for empty cells, \"*\" for impassable cells.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_043.jsonl",
    "code_uid": "b6f29bbeddcbefe2638e3188ffcf6829",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 3\\n*.*\\n.*.\\n*.*\", \"4 5\\n**..*\\n..***\\n.*.*.\\n*.*.*\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sets import Set\n\nn, m = map(int, raw_input().split())\nsrc = [raw_input() for i in range(n)]\ntrans = { '.': -2, '*': -1 }\nlab = [map(lambda x : trans[x], src[i]) for i in range(n)]\n\ndef fill(i, j, idx):\n\tq = []\n\tdef put(i, j):\n\t\tif i >= 0 and i < n and j >= 0 and j < m and lab[i][j] == -2:\n\t\t\tlab[i][j] = idx\n\t\t\tq.append((i, j))\n\t\t\treturn 1\n\t\treturn 0\n\tcnt = put(i, j)\n\twhile q:\n\t\ti, j = q.pop()\n\t\tcnt = cnt + put(i - 1, j) + put(i + 1, j) + put(i, j - 1) + put(i, j + 1)\n\treturn cnt\n\ncnts = [0]\nfor i in range(n):\n\tfor j in range(m):\n\t\tif lab[i][j] == -2:\n\t\t\tcnts.append(fill(i, j, len(cnts)))\n\ndef get(i, j):\n\tif i < 0 or i >= n or j < 0 or j >= m or lab[i][j] < 0:\n\t\treturn 0\n\treturn lab[i][j]\n\nfor i in range(n):\n\tline = []\n\tfor j in range(m):\n\t\tif src[i][j] != '.':\n\t\t\tused = Set([get(i - 1, j), get(i + 1, j), get(i, j - 1), get(i, j + 1)])\n\t\t\ts = 1\n\t\t\tfor v in used:\n\t\t\t\ts = (s + cnts[v]) % 10\n\t\t\tline.append(chr(48 + s))\n\t\telse:\n\t\t\tline.append('.')\n\tprint ''.join(line)\n",
    "prob_desc_created_at": "1452524400",
    "tags": [
        "dfs and similar"
    ],
    "hidden_unit_tests": ""
}