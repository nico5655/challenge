{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"MOREPROBLEMS\\n93\"]",
    "src_uid": "98beefa4cb73ccbf9575a6cfe73f4fff",
    "prob_desc_notes": "NoteIn the first test case, Gianni has received only $$$3$$$ problems, with difficulties $$$3, 4, 7$$$ which are not sufficient to create a problem set (for example because there is not a problem with difficulty $$$1$$$).In the second test case, Gianni will create a problem set by taking the problems $$$2$$$, $$$3$$$, $$$4$$$, $$$5$$$, $$$7$$$, $$$8$$$, $$$9$$$, $$$10$$$, $$$11$$$ (which have beauty equal to $$$10$$$ and all difficulties from $$$1$$$ to $$$9$$$) and one of the problems $$$1$$$ and $$$6$$$ (which have both beauty $$$3$$$ and difficulty $$$10$$$). The total beauty of the resulting problem set is $$$10\\cdot 9 + 3 = 93$$$.",
    "prob_desc_description": "Gianni, SWERC's chief judge, received a huge amount of high quality problems from the judges and now he has to choose a problem set for SWERC.He received $$$n$$$ problems and he assigned a beauty score and a difficulty to each of them. The $$$i$$$-th problem has beauty score equal to $$$b_i$$$ and difficulty equal to $$$d_i$$$. The beauty and the difficulty are integers between $$$1$$$ and $$$10$$$. If there are no problems with a certain difficulty (the possible difficulties are $$$1,2,\\dots,10$$$) then Gianni will ask for more problems to the judges.Otherwise, for each difficulty between $$$1$$$ and $$$10$$$, he will put in the problem set one of the most beautiful problems with such difficulty (so the problem set will contain exactly $$$10$$$ problems with distinct difficulties). You shall compute the total beauty of the problem set, that is the sum of the beauty scores of the problems chosen by Gianni.",
    "prob_desc_output_spec": "For each test case, print the total beauty of the problem set chosen by Gianni. If Gianni cannot create a problem set (because there are no problems with a certain difficulty) print the string MOREPROBLEMS (all letters are uppercase, there are no spaces).",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains an integer $$$t$$$ ($$$1\\le t\\le 100$$$) — the number of test cases. The descriptions of the $$$t$$$ test cases follow. The first line of each test case contains the integer $$$n$$$ ($$$1\\le n\\le 100$$$) — how many problems Gianni received from the judges. The next $$$n$$$ lines contain two integers each. The $$$i$$$-th of such lines contains $$$b_i$$$ and $$$d_i$$$ ($$$1\\le b_i, d_i\\le 10$$$) — the beauty score and the difficulty of the $$$i$$$-th problem.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": -1,
    "file_name": "train_085.jsonl",
    "code_uid": "456ae6d4ac8186f750a99d9025f5d3c1",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n\\n3\\n\\n8 4\\n\\n9 3\\n\\n6 7\\n\\n12\\n\\n3 10\\n\\n10 1\\n\\n10 2\\n\\n10 3\\n\\n10 4\\n\\n3 10\\n\\n10 5\\n\\n10 6\\n\\n10 7\\n\\n10 8\\n\\n10 9\\n\\n1 10\"]",
    "exec_outcome": "PASSED",
    "source_code": "nopr = \"MOREPROBLEMS\"\r\n\r\ndef orgSwerc(problemsList):\r\n    chosen = {}\r\n\r\n    for c in problemsList:\r\n        if c[0] in chosen:\r\n            if c[1] > chosen[c[0]]:\r\n                chosen[c[0]] = c[1]\r\n        else:\r\n            chosen[c[0]] = c[1]\r\n    \r\n    for i in range(1, 11):\r\n        if i not in chosen:\r\n            return nopr\r\n    \r\n    return str(sum(chosen.values()))\r\n\r\n\r\nn_test = int(input())\r\n\r\nfor _ in range(n_test):\r\n    n_ch = int(input())\r\n    challenges = []\r\n    for _ in range(n_ch):\r\n        a, b = input().split(\" \")\r\n        challenges.append((int(b),int(a)))\r\n\r\n    print(orgSwerc(challenges))\r\n\r\n",
    "prob_desc_created_at": "1650798300",
    "tags": [
        "brute force",
        "implementation"
    ],
    "hidden_unit_tests": ""
}