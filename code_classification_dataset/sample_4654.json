{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\\n2 2\\n1 1\\n2 4\\n-1\\n4\\n1 1\\n2 6\\n3 3\\n3 7\\n4\\n3 1\\n1 2\\n2 3\\n1 4\\n2\\n4 5\\n2 1\\n4\\n3 1\\n4 5\\n2 9\\n1 13\"]",
    "src_uid": "c08933fdaceb220f4ef3ba8c5f09fe12",
    "prob_desc_notes": "NoteThe first test case is explained in the problem statement.In the second test case, it is impossible to color all the letters of the text in red.",
    "prob_desc_description": "You are given some text $$$t$$$ and a set of $$$n$$$ strings $$$s_1, s_2, \\dots, s_n$$$. In one step, you can choose any occurrence of any string $$$s_i$$$ in the text $$$t$$$ and color the corresponding characters of the text in red. For example, if $$$t=\\texttt{bababa}$$$ and $$$s_1=\\texttt{ba}$$$, $$$s_2=\\texttt{aba}$$$, you can get $$$t=\\color{red}{\\texttt{ba}}\\texttt{baba}$$$, $$$t=\\texttt{b}\\color{red}{\\texttt{aba}}\\texttt{ba}$$$ or $$$t=\\texttt{bab}\\color{red}{\\texttt{aba}}$$$ in one step.You want to color all the letters of the text $$$t$$$ in red. When you color a letter in red again, it stays red.In the example above, three steps are enough:  Let's color $$$t[2 \\dots 4]=s_2=\\texttt{aba}$$$ in red, we get $$$t=\\texttt{b}\\color{red}{\\texttt{aba}}\\texttt{ba}$$$;  Let's color $$$t[1 \\dots 2]=s_1=\\texttt{ba}$$$ in red, we get $$$t=\\color{red}{\\texttt{baba}}\\texttt{ba}$$$;  Let's color $$$t[4 \\dots 6]=s_2=\\texttt{aba}$$$ in red, we get $$$t=\\color{red}{\\texttt{bababa}}$$$. Each string $$$s_i$$$ can be applied any number of times (or not at all). Occurrences for coloring can intersect arbitrarily.Determine the minimum number of steps needed to color all letters $$$t$$$ in red and how to do it. If it is impossible to color all letters of the text $$$t$$$ in red, output -1.",
    "prob_desc_output_spec": "For each test case, print the answer on a separate line. If it is impossible to color all the letters of the text in red, print a single line containing the number -1. Otherwise, on the first line, print the number $$$m$$$ — the minimum number of steps it will take to turn all the letters $$$t$$$ red. Then in the next $$$m$$$ lines print pairs of indices: $$$w_j$$$ and $$$p_j$$$ ($$$1 \\le j \\le m$$$), which denote that the string with index $$$w_j$$$ was used as a substring to cover the occurrences starting in the text $$$t$$$ from position $$$p_j$$$. The pairs can be output in any order. If there are several answers, output any of them.",
    "prob_desc_input_spec": "The first line of the input contains an integer $$$q$$$ ($$$1 \\le q \\le 100$$$) —the number of test cases in the test. The descriptions of the test cases follow. The first line of each test case contains the text $$$t$$$ ($$$1 \\le |t| \\le 100$$$), consisting only of lowercase Latin letters, where $$$|t|$$$ is the length of the text $$$t$$$. The second line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 10$$$) — the number of strings in the set. This is followed by $$$n$$$ lines, each containing a string $$$s_i$$$ ($$$1 \\le |s_i| \\le 10$$$) consisting only of lowercase Latin letters, where $$$|s_i|$$$ — the length of string $$$s_i$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_102.jsonl",
    "code_uid": "6458d49857e833dafc7b4e2f8e83baee",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n\\nbababa\\n\\n2\\n\\nba\\n\\naba\\n\\ncaba\\n\\n2\\n\\nbac\\n\\nacab\\n\\nabacabaca\\n\\n3\\n\\naba\\n\\nbac\\n\\naca\\n\\nbaca\\n\\n3\\n\\na\\n\\nc\\n\\nb\\n\\ncodeforces\\n\\n4\\n\\ndef\\n\\ncode\\n\\nefo\\n\\nforces\\n\\naaaabbbbcccceeee\\n\\n4\\n\\neeee\\n\\ncccc\\n\\naaaa\\n\\nbbbb\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\ninput=lambda: sys.stdin.readline().strip()\r\nfor _ in range(int(input())):\r\n\tt = input()\r\n\tn = int(input())\r\n\tl = list()\r\n\tfor i in range(n):\r\n\t  inp = input()\r\n\t  l.append((inp,len(inp),i+1))\r\n\tl.sort(key=lambda p: p[1],reverse=True)\r\n\tans = list() # (id, pos)\r\n\tmai = 0\r\n\ti = 0\r\n\twhile i <= mai < len(t):\r\n\t\tfor (s, le, ind) in l:\r\n\t\t\tif mai < le+i <= len(t):\r\n\t\t\t\tif all(t[i+j]==s[j] for j in range(le)):\r\n\t\t\t\t\tif len(ans) > 1 and ans[-2][-1] >= i:\r\n\t\t\t\t\t\tans.pop()\r\n\t\t\t\t\tmai = le+i\r\n\t\t\t\t\tans.append((ind,i+1,le+i))\r\n\t\ti+=1\r\n\t\tif mai < i:\r\n\t\t\tprint(-1)\r\n\t\t\tbreak\r\n\telse:\r\n\t\tprint(len(ans))\r\n\t\tfor (a,b,i) in ans:\r\n\t\t\tprint(a, b)\r\n",
    "prob_desc_created_at": "1659364500",
    "tags": [
        "brute force",
        "data structures",
        "dp",
        "greedy",
        "strings"
    ],
    "hidden_unit_tests": ""
}