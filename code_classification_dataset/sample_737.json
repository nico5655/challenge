{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"200\", \"150\", \"3\"]",
    "src_uid": "08803b63ae803e4a76afe7258a4004aa",
    "prob_desc_notes": "NoteIn the first sample Maxim needs to buy two items that cost 100 and get a discount for two free items that cost 50. In that case, Maxim is going to pay 200.In the second sample the best strategy for Maxim is to buy 3 items and get 2 items for free using the discount. In that case, Maxim is going to pay 150.",
    "prob_desc_description": "Maxim always goes to the supermarket on Sundays. Today the supermarket has a special offer of discount systems.There are m types of discounts. We assume that the discounts are indexed from 1 to m. To use the discount number i, the customer takes a special basket, where he puts exactly qi items he buys. Under the terms of the discount system, in addition to the items in the cart the customer can receive at most two items from the supermarket for free. The number of the \"free items\" (0, 1 or 2) to give is selected by the customer. The only condition imposed on the selected \"free items\" is as follows: each of them mustn't be more expensive than the cheapest item out of the qi items in the cart.Maxim now needs to buy n items in the shop. Count the minimum sum of money that Maxim needs to buy them, if he use the discount system optimally well.Please assume that the supermarket has enough carts for any actions. Maxim can use the same discount multiple times. Of course, Maxim can buy items without any discounts.",
    "prob_desc_output_spec": "In a single line print a single integer — the answer to the problem.",
    "prob_desc_input_spec": "The first line contains integer m (1 ≤ m ≤ 105) — the number of discount types. The second line contains m integers: q1, q2, ..., qm (1 ≤ qi ≤ 105).  The third line contains integer n (1 ≤ n ≤ 105) — the number of items Maxim needs. The fourth line contains n integers: a1, a2, ..., an (1 ≤ ai ≤ 104) — the items' prices. The numbers in the lines are separated by single spaces.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_003.jsonl",
    "code_uid": "4c53c4758810f9e4e94aabf00a3102c1",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1\\n2\\n4\\n50 50 100 100\", \"2\\n2 3\\n5\\n50 50 50 50 50\", \"1\\n1\\n7\\n1 1 1 1 1 1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "ri = lambda:raw_input()\nrl = lambda:map(int, ri().split())\nm, q, n, a = int(ri()), min(rl()), int(ri()), sorted(rl(), reverse=True)\nprint sum((sum(a[i:i + q]) for i in range(0, n, q + 2)) if n > q else a)",
    "prob_desc_created_at": "1358091000",
    "tags": [
        "sortings",
        "greedy"
    ],
    "hidden_unit_tests": ""
}