{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\\n3 1\", \"3\\n2 5\\n2 6\\n3 7\"]",
    "src_uid": "c8f63597670a7b751822f8cef01b8ba3",
    "prob_desc_notes": null,
    "prob_desc_description": "To learn as soon as possible the latest news about their favourite fundamentally new operating system, BolgenOS community from Nizhni Tagil decided to develop a scheme. According to this scheme a community member, who is the first to learn the news, calls some other member, the latter, in his turn, calls some third member, and so on; i.e. a person with index i got a person with index fi, to whom he has to call, if he learns the news. With time BolgenOS community members understood that their scheme doesn't work sometimes — there were cases when some members didn't learn the news at all. Now they want to supplement the scheme: they add into the scheme some instructions of type (xi, yi), which mean that person xi has to call person yi as well. What is the minimum amount of instructions that they need to add so, that at the end everyone learns the news, no matter who is the first to learn it?",
    "prob_desc_output_spec": "In the first line output one number — the minimum amount of instructions to add. Then output one of the possible variants to add these instructions into the scheme, one instruction in each line. If the solution is not unique, output any.",
    "prob_desc_input_spec": "The first input line contains number n (2 ≤ n ≤ 105) — amount of BolgenOS community members. The second line contains n space-separated integer numbers fi (1 ≤ fi ≤ n, i ≠ fi) — index of a person, to whom calls a person with index i.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_005.jsonl",
    "code_uid": "53881e819c8eff72cb225b42a8cae123",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n3 3 2\", \"7\\n2 3 1 3 4 4 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "#!/usr/bin/env python3\n\n# Read data\nn = int(input())\nf = map(int, input().split())\nf = [d-1 for d in f] # Make indices 0-based\n\n# Determine in-degree of all the nodes\nindegree = [0 for i in range(n)]\nfor i in range(n):\n  indegree[f[i]] += 1\n\n# Nodes with indegree = 0 will need to be an end-point of a new edge\nendpoints = [i for i in range(n) if (indegree[i] == 0)]\nnr_indegree_zero = len(endpoints)\n\n# Determine which (hereto unvisited) nodes will be reached by these endpoints\nunvisited = set(range(n))\nreach = [None for i in range(n)]\n\ndef determine_reach(v):\n  path = [v]\n  while (v in unvisited):\n    unvisited.remove(v)\n    v = f[v]\n    path.append(v)\n  for i in path:\n    reach[i] = v\n\nfor v in endpoints:\n  determine_reach(v)\n\n# The reached nodes form good start-points for the new edges\nstartpoints = [reach[v] for v in endpoints]\n\n# Check for isolated cycles that are not connected to the rest of the graph\nnr_cycles = 0\nwhile len(unvisited) > 0:\n  # Select a node from the unvisited set (without removing it)\n  v = unvisited.pop()\n  unvisited.add(v)\n\n  nr_cycles += 1\n  determine_reach(v)\n  endpoints.append(v)\n  startpoints.append(reach[v])\n\n# Special case: no indegree 0 nodes and only 1 cycle\nif (nr_indegree_zero == 0) and (nr_cycles == 1):\n  # No edges need to be added\n  print(0)\n  exit()\n\n# Rotate the lists to each start point connects to the end-point of the next item\nendpoints = endpoints[1:] + endpoints[:1]\nprint(len(startpoints))\nprint(\"\\n\".join([\"%d %s\" % (start+1,end+1) for (start,end) in zip(startpoints,endpoints)]))\n",
    "prob_desc_created_at": "1277823600",
    "tags": [
        "dfs and similar",
        "trees",
        "graphs"
    ],
    "hidden_unit_tests": ""
}