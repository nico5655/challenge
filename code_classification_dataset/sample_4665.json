{
    "prob_desc_time_limit": "3.0 s",
    "prob_desc_sample_outputs": "[\"abacaba bac\\n-1\\npolycarp lcoayrp\\nis si\\neverywhere ewyrhv\\n-1\\n-1\"]",
    "src_uid": "8705adec1bea1f898db1ca533e15d5c3",
    "prob_desc_notes": "NoteThe first test case is considered in the statement.",
    "prob_desc_description": "Polycarp has a string $$$s$$$. Polycarp performs the following actions until the string $$$s$$$ is empty ($$$t$$$ is initially an empty string):  he adds to the right to the string $$$t$$$ the string $$$s$$$, i.e. he does $$$t = t + s$$$, where $$$t + s$$$ is a concatenation of the strings $$$t$$$ and $$$s$$$;  he selects an arbitrary letter of $$$s$$$ and removes from $$$s$$$ all its occurrences (the selected letter must occur in the string $$$s$$$ at the moment of performing this action). Polycarp performs this sequence of actions strictly in this order.Note that after Polycarp finishes the actions, the string $$$s$$$ will be empty and the string $$$t$$$ will be equal to some value (that is undefined and depends on the order of removing).E.g. consider $$$s$$$=\"abacaba\" so the actions may be performed as follows:  $$$t$$$=\"abacaba\", the letter 'b' is selected, then $$$s$$$=\"aacaa\";  $$$t$$$=\"abacabaaacaa\", the letter 'a' is selected, then $$$s$$$=\"c\";  $$$t$$$=\"abacabaaacaac\", the letter 'c' is selected, then $$$s$$$=\"\" (the empty string). You need to restore the initial value of the string $$$s$$$ using only the final value of $$$t$$$ and find the order of removing letters from $$$s$$$.",
    "prob_desc_output_spec": "For each test case output in a separate line:   $$$-1$$$, if the answer doesn't exist;  two strings separated by spaces. The first one must contain a possible initial value of $$$s$$$. The second one must contain a sequence of letters — it's in what order one needs to remove letters from $$$s$$$ to make the string $$$t$$$. E.g. if the string \"bac\" is outputted, then, first, all occurrences of the letter 'b' were deleted, then all occurrences of 'a', and then, finally, all occurrences of 'c'. If there are multiple solutions, print any one. ",
    "prob_desc_input_spec": "The first line contains one integer $$$T$$$ ($$$1 \\le T \\le 10^4$$$) — the number of test cases. Then $$$T$$$ test cases follow. Each test case contains one string $$$t$$$ consisting of lowercase letters of the Latin alphabet. The length of $$$t$$$ doesn't exceed $$$5 \\cdot 10^5$$$. The sum of lengths of all strings $$$t$$$ in the test cases doesn't exceed $$$5 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_103.jsonl",
    "code_uid": "b9509db4293b16ac54ea0feee5b3560b",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7\\nabacabaaacaac\\nnowyouknowthat\\npolycarppoycarppoyarppyarppyrpprppp\\nisi\\neverywherevrywhrvryhrvrhrvhv\\nhaaha\\nqweqeewew\"]",
    "exec_outcome": "PASSED",
    "source_code": "T = int(input())\r\nfor t in range(T):\r\n    t = input()\r\n    n = len(t)\r\n    # find first character with no occurences to the right\r\n    s = set()\r\n    r = []\r\n    for i in t[::-1]:\r\n        if i not in s:\r\n            r.append(i)\r\n            s.add(i)\r\n\r\n    done = r[::-1]\r\n    #print(done)\r\n\r\n\r\n    v = 0\r\n    for i in range(n):\r\n        v += done.index(t[i]) + 1\r\n        if v == n:\r\n            r = \"\"\r\n            tt = t[:i+1]\r\n            for c in done:\r\n                r += tt\r\n                tt=tt.replace(c,\"\")\r\n            #print(r)\r\n            if r != t:\r\n                print(-1)\r\n            else:\r\n                print(t[:i+1],\"\".join(done))\r\n            break\r\n        elif v > n:\r\n            print(-1)\r\n            break\r\n        \r\n        \r\n    \r\n    \r\n",
    "prob_desc_created_at": "1629297300",
    "tags": [
        "binary search",
        "implementation",
        "sortings",
        "strings"
    ],
    "hidden_unit_tests": ""
}