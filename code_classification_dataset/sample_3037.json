{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"2\\n1 3 4\", \"-1\", \"4\\n1 3 2 3 4\"]",
    "src_uid": "c23efec5ead55d9adee703c3ff535b94",
    "prob_desc_notes": null,
    "prob_desc_description": "In Ancient Berland there were n cities and m two-way roads of equal length. The cities are numbered with integers from 1 to n inclusively. According to an ancient superstition, if a traveller visits three cities ai, bi, ci in row, without visiting other cities between them, a great disaster awaits him. Overall there are k such city triplets. Each triplet is ordered, which means that, for example, you are allowed to visit the cities in the following order: ai, ci, bi. Vasya wants to get from the city 1 to the city n and not fulfil the superstition. Find out which minimal number of roads he should take. Also you are required to find one of his possible path routes.",
    "prob_desc_output_spec": "If there are no path from 1 to n print -1. Otherwise on the first line print the number of roads d along the shortest path from the city 1 to the city n. On the second line print d + 1 numbers — any of the possible shortest paths for Vasya. The path should start in the city 1 and end in the city n.",
    "prob_desc_input_spec": "The first line contains three integers n, m, k (2 ≤ n ≤ 3000, 1 ≤ m ≤ 20000, 0 ≤ k ≤ 105) which are the number of cities, the number of roads and the number of the forbidden triplets correspondingly.  Then follow m lines each containing two integers xi, yi (1 ≤ xi, yi ≤ n) which are the road descriptions. The road is described by the numbers of the cities it joins. No road joins a city with itself, there cannot be more than one road between a pair of cities.  Then follow k lines each containing three integers ai, bi, ci (1 ≤ ai, bi, ci ≤ n) which are the forbidden triplets. Each ordered triplet is listed mo more than one time. All three cities in each triplet are distinct. City n can be unreachable from city 1 by roads.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_039.jsonl",
    "code_uid": "b497e10aee4e64e951c3c9b6d0571ea7",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 4 1\\n1 2\\n2 3\\n3 4\\n1 3\\n1 4 3\", \"3 1 0\\n1 2\", \"4 4 2\\n1 2\\n2 3\\n3 4\\n1 3\\n1 2 3\\n1 3 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "if __name__ =='__main__':\n\tn, m, k = map(int, input().split())\n\tgraph = [[] for i in range(n + 2)]\t\n\tfor i in range(m):\n\t\tu, v = map(int, input().split())\n\t\tgraph[u].append(v)\n\t\tgraph[v].append(u)\n\tgraph[n].append(n+1)\n\t\n\tprocessed =[[-1 for i in range(n+2)] for j in range(n+2)]\n\tforbid = set(a + (b+c*n)*n for (a,b,c) in (map(int, input().split()) for i in range(k)))\n\tbfsqueue =[(0,1)]\n\tprocessed[0][1] = 0\n\t\n\twhile bfsqueue and processed[n][n+1] == -1:\n\t\tu,v = bfsqueue.pop(0)\n\t\tfor key in graph[v]:\n\t\t\tif processed[v][key] != -1 or (u+ (v+key*n)*n in forbid):\n\t\t\t\tcontinue\n\t\t\tprocessed[v][key] = u\n\t\t\tif key == n+1:\n\t\t\t\tbreak\n\t\t\tbfsqueue.append((v,key))\n\t\n\t\n\t\n\tif processed[n][n+1] != -1:\n\t\ti, j = n,n+1\n\t\tans = []\n\t\twhile i:\n\t\t\tans.append(i)\n\t\t\ti,j = processed[i][j],i\n\t\tprint(len(ans) - 1)\n\t\tprint(' '.join(map(str,reversed(ans))))\n\telse:\n\t\tprint(-1)\n",
    "prob_desc_created_at": "1297440000",
    "tags": [
        "shortest paths",
        "graphs"
    ],
    "hidden_unit_tests": ""
}