{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\", \"YES\", \"NO\", \"NO\"]",
    "src_uid": "0988b8439c6699107c77345037162fba",
    "prob_desc_notes": "NoteThe field in the third example doesn't have three parralel stripes.Rows of the field in the fourth example are parralel to each other and to borders. But they have different heights — 2, 1 and 1.",
    "prob_desc_description": "The flag of Berland is such rectangular field n × m that satisfies following conditions:  Flag consists of three colors which correspond to letters 'R', 'G' and 'B'.  Flag consists of three equal in width and height stripes, parralel to each other and to sides of the flag. Each stripe has exactly one color.  Each color should be used in exactly one stripe. You are given a field n × m, consisting of characters 'R', 'G' and 'B'. Output \"YES\" (without quotes) if this field corresponds to correct flag of Berland. Otherwise, print \"NO\" (without quotes).",
    "prob_desc_output_spec": "Print \"YES\" (without quotes) if the given field corresponds to correct flag of Berland . Otherwise, print \"NO\" (without quotes).",
    "prob_desc_input_spec": "The first line contains two integer numbers n and m (1 ≤ n, m ≤ 100) — the sizes of the field. Each of the following n lines consisting of m characters 'R', 'G' and 'B' — the description of the field.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_016.jsonl",
    "code_uid": "49156e235392554b5890bc7e003a2901",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6 5\\nRRRRR\\nRRRRR\\nBBBBB\\nBBBBB\\nGGGGG\\nGGGGG\", \"4 3\\nBRG\\nBRG\\nBRG\\nBRG\", \"6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB\", \"4 4\\nRRRR\\nRRRR\\nBBBB\\nGGGG\"]",
    "exec_outcome": "PASSED",
    "source_code": "\ndef check(b):\n\n    i=len(b[0])//3\n    c=[b[0][0],b[0][i],b[0][2*i]]\n    if (len(set(c))!=3):\n        return 0\n\n    j=0\n\n    for p in range(len(b)):\n        j=0\n        for k in range(3):\n            if len(set(b[p][j:j+i]))==1 and (set(b[p][j:j+i]))=={c[k]}:\n                j+=i\n                continue\n            else:\n                return 0\n    return 1\nn,m=map(int,input().split())\na=[input() for i in range(n)]\nif(n%3!=0 and m%3!=0):\n    print(\"NO\")\nelif (n%3==0 and m%3==0):\n    if check(a) or check(list(map(list, zip(*a)))):\n        print(\"YES\")\n    else:\n        print(\"NO\")\nelif n%3==0:\n    if check(list(map(list, zip(*a)))):\n        print(\"YES\")\n    else:\n        print(\"NO\")\nelif m%3==0:\n    if check(a):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
    "prob_desc_created_at": "1501773300",
    "tags": [
        "implementation",
        "brute force"
    ],
    "hidden_unit_tests": ""
}