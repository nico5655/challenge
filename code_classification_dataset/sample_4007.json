{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"3\\n7\\n-1\\n1\"]",
    "src_uid": "d3aa0632053634e0602b995cfb476d83",
    "prob_desc_notes": null,
    "prob_desc_description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given $$$n$$$ days from Petya's live and you have to determine what happened with his flower in the end.The flower grows as follows:   If the flower isn't watered for two days in a row, it dies.  If the flower is watered in the $$$i$$$-th day, it grows by $$$1$$$ centimeter.  If the flower is watered in the $$$i$$$-th and in the $$$(i-1)$$$-th day ($$$i &gt; 1$$$), then it grows by $$$5$$$ centimeters instead of $$$1$$$.  If the flower is not watered in the $$$i$$$-th day, it does not grow. At the beginning of the $$$1$$$-st day the flower is $$$1$$$ centimeter tall. What is its height after $$$n$$$ days?",
    "prob_desc_output_spec": "For each test case print a single integer $$$k$$$ â€” the flower's height after $$$n$$$ days, or $$$-1$$$, if the flower dies.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 100$$$). Description of the test cases follows. The first line of each test case contains the only integer $$$n$$$ ($$$1 \\leq n \\leq 100$$$). The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$a_i = 0$$$ or $$$a_i = 1$$$). If $$$a_i = 1$$$, the flower is watered in the $$$i$$$-th day, otherwise it is not watered.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_088.jsonl",
    "code_uid": "e3537c2f2f8f00751583b17d26a6abc3",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n3\\n1 0 1\\n3\\n0 1 1\\n4\\n1 0 0 1\\n1\\n0\"]",
    "exec_outcome": "PASSED",
    "source_code": "n=int(input())\r\n \r\nfor i in range(n):\r\n    m=int(input())\r\n    \r\n    Flag=False\r\n\r\n\r\n    a=list(map(int,input().split()))\r\n\r\n    if a[0]==1:\r\n        hight=2\r\n    else:\r\n        hight=1\r\n\r\n    for j in range(1,len(a)):\r\n        if a[j-1]==1 and a[j]==0:\r\n            \r\n            hight+=0\r\n        elif a[j-1]==0 and a[j]==1:\r\n\r\n            hight+=1\r\n        elif a[j-1]==1 and a[j]==1:\r\n\r\n            hight+=5\r\n        elif a[j-1]==0 and a[j]==0:\r\n            \r\n            Flag=True\r\n            break\r\n    if Flag==True:\r\n        hight=-1\r\n    print(hight)            \r\n",
    "prob_desc_created_at": "1639322100",
    "tags": [
        "implementation"
    ],
    "hidden_unit_tests": ""
}