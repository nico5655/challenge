{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\", \"4\", \"10\"]",
    "src_uid": "41b3e726b8146dc733244ee8415383c0",
    "prob_desc_notes": "NoteConsider the third test example. At first step we need to choose any element equal to 2. After that step our sequence looks like this [2, 2, 2, 2]. Then we do 4 steps, on each step we choose any element equals to 2. In total we earn 10 points.",
    "prob_desc_description": "Alex doesn't like boredom. That's why whenever he gets bored, he comes up with games. One long winter evening he came up with a game and decided to play it.Given a sequence a consisting of n integers. The player can make several steps. In a single step he can choose an element of the sequence (let's denote it ak) and delete it, at that all elements equal to ak + 1 and ak - 1 also must be deleted from the sequence. That step brings ak points to the player. Alex is a perfectionist, so he decided to get as many points as possible. Help him.",
    "prob_desc_output_spec": "Print a single integer — the maximum number of points that Alex can earn.",
    "prob_desc_input_spec": "The first line contains integer n (1 ≤ n ≤ 105) that shows how many numbers are in Alex's sequence.  The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 105).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_003.jsonl",
    "code_uid": "4a48340d8ad5efad99df670343fb4bc8",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n1 2\", \"3\\n1 2 3\", \"9\\n1 2 1 3 2 2 2 2 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "def main():\n    L = [0 for i in range(100001)]\n    c = [0 for i in range(100001)]\n    n = int(input())\n    Max = 0\n    inp = [int(x) for x in input().split()]\n    for i in range(n):\n        c[inp[i]]+=1\n        Max = max(inp[i],Max)\n    L[1] = inp.count(1) \n    for i in range(2,Max+1):\n        L[i] = max(L[i-1],L[i-2]+c[i]*i)\n    print(L[Max])\nif __name__ == \"__main__\" : main()",
    "prob_desc_created_at": "1407511800",
    "tags": [
        "dp"
    ],
    "hidden_unit_tests": ""
}