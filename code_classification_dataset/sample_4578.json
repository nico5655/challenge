{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1\\n23\\n19\\n6\\n26\"]",
    "src_uid": "4841cbc3d3ef29929690b78e30fbf22e",
    "prob_desc_notes": "NoteFor the first test case, Atilla needs to know only the character $$$\\texttt{a}$$$, so the alphabet of size $$$1$$$ which only contains $$$\\texttt{a}$$$ is enough.For the second test case, Atilla needs to know the characters $$$\\texttt{d}$$$, $$$\\texttt{o}$$$, $$$\\texttt{w}$$$, $$$\\texttt{n}$$$. The smallest alphabet size that contains all of them is $$$23$$$ (such alphabet can be represented as the string $$$\\texttt{abcdefghijklmnopqrstuvw}$$$).",
    "prob_desc_description": "In order to write a string, Atilla needs to first learn all letters that are contained in the string.Atilla needs to write a message which can be represented as a string $$$s$$$. He asks you what is the minimum alphabet size required so that one can write this message.The alphabet of size $$$x$$$ ($$$1 \\leq x \\leq 26$$$) contains only the first $$$x$$$ Latin letters. For example an alphabet of size $$$4$$$ contains only the characters $$$\\texttt{a}$$$, $$$\\texttt{b}$$$, $$$\\texttt{c}$$$ and $$$\\texttt{d}$$$.",
    "prob_desc_output_spec": "For each test case, output a single integer — the minimum alphabet size required to so that Atilla can write his message $$$s$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 100$$$) — the length of the string. The second line of each test case contains a string $$$s$$$ of length $$$n$$$, consisting of lowercase Latin letters.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_101.jsonl",
    "code_uid": "3eb0e5971c25df234b921d942fc87dfa",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n\\n1\\n\\na\\n\\n4\\n\\ndown\\n\\n10\\n\\ncodeforces\\n\\n3\\n\\nbcf\\n\\n5\\n\\nzzzzz\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\nraw_input = iter(sys.stdin.read().splitlines()).next\r\n\r\ndef solution():\r\n    n = int(raw_input())\r\n    s = raw_input()\r\n    return ord(max(s))-ord('a')+1\r\n\r\nfor case in xrange(int(raw_input())):\r\n    print '%s' % solution()",
    "prob_desc_created_at": "1669041300",
    "tags": [
        "greedy",
        "implementation",
        "strings"
    ],
    "hidden_unit_tests": ""
}