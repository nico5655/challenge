{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\\n-1\\n6\\n4\\n3\"]",
    "src_uid": "e1fa7250c7004c093e1af788f23b2863",
    "prob_desc_notes": "NoteIn the first test case, it is optimal to remove applications with numbers $$$2$$$ and $$$5$$$, freeing $$$7$$$ units of memory. $$$b_2+b_5=2$$$.In the second test case, by removing the only application, Polycarp will be able to clear only $$$2$$$ of memory units out of the $$$3$$$ needed.In the third test case, it is optimal to remove applications with numbers $$$1$$$, $$$2$$$, $$$3$$$ and $$$4$$$, freeing $$$10$$$ units of memory. $$$b_1+b_2+b_3+b_4=6$$$.In the fourth test case, it is optimal to remove applications with numbers $$$1$$$, $$$3$$$ and $$$4$$$, freeing $$$12$$$ units of memory. $$$b_1+b_3+b_4=4$$$.In the fifth test case, it is optimal to remove applications with numbers $$$1$$$ and $$$2$$$, freeing $$$5$$$ units of memory. $$$b_1+b_2=3$$$.",
    "prob_desc_description": "Polycarp often uses his smartphone. He has already installed $$$n$$$ applications on it. Application with number $$$i$$$ takes up $$$a_i$$$ units of memory.Polycarp wants to free at least $$$m$$$ units of memory (by removing some applications).Of course, some applications are more important to Polycarp than others. He came up with the following scoring system — he assigned an integer $$$b_i$$$ to each application:   $$$b_i = 1$$$ — regular application;  $$$b_i = 2$$$ — important application. According to this rating system, his phone has $$$b_1 + b_2 + \\ldots + b_n$$$ convenience points.Polycarp believes that if he removes applications with numbers $$$i_1, i_2, \\ldots, i_k$$$, then he will free $$$a_{i_1} + a_{i_2} + \\ldots + a_{i_k}$$$ units of memory and lose $$$b_{i_1} + b_{i_2} + \\ldots + b_{i_k}$$$ convenience points.For example, if $$$n=5$$$, $$$m=7$$$, $$$a=[5, 3, 2, 1, 4]$$$, $$$b=[2, 1, 1, 2, 1]$$$, then Polycarp can uninstall the following application sets (not all options are listed below):   applications with numbers $$$1, 4$$$ and $$$5$$$. In this case, it will free $$$a_1+a_4+a_5=10$$$ units of memory and lose $$$b_1+b_4+b_5=5$$$ convenience points;  applications with numbers $$$1$$$ and $$$3$$$. In this case, it will free $$$a_1+a_3=7$$$ units of memory and lose $$$b_1+b_3=3$$$ convenience points.  applications with numbers $$$2$$$ and $$$5$$$. In this case, it will free $$$a_2+a_5=7$$$ memory units and lose $$$b_2+b_5=2$$$ convenience points. Help Polycarp, choose a set of applications, such that if removing them will free at least $$$m$$$ units of memory and lose the minimum number of convenience points, or indicate that such a set does not exist.",
    "prob_desc_output_spec": "For each test case, output on a separate line:    -1, if there is no set of applications, removing which will free at least $$$m$$$ units of memory;  the minimum number of convenience points that Polycarp will lose if such a set exists. ",
    "prob_desc_input_spec": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. Then $$$t$$$ test cases follow. The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$, $$$1 \\le m \\le 10^9$$$) — the number of applications on Polycarp's phone and the number of memory units to be freed. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$) — the number of memory units used by applications. The third line of each test case contains $$$n$$$ integers $$$b_1, b_2, \\ldots, b_n$$$ ($$$1 \\le b_i \\le 2$$$) — the convenience points of each application. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_086.jsonl",
    "code_uid": "d5239624007078e12ae70a9807e58b01",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n5 7\\n5 3 2 1 4\\n2 1 1 2 1\\n1 3\\n2\\n1\\n5 10\\n2 3 2 3 2\\n1 2 1 2 1\\n4 10\\n5 1 3 4\\n1 2 1 2\\n4 5\\n3 2 1 2\\n2 1 2 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "\r\n\r\ndef find_convenience_lost(n):\r\n    memory = list(map(int, input().split()))[1]\r\n    memory_per_app, weight = list(map(int, input().split())), list(map(int, input().split()))\r\n    ones = list(reversed(sorted([a for i, a in enumerate(memory_per_app) if weight[i] == 1])))\r\n    twos = list(reversed(sorted([a for i, a in enumerate(memory_per_app) if weight[i] == 2])))\r\n\r\n    i, j, = 0, 0\r\n    memory_removed = 0\r\n    convenience_points_lost = 0\r\n    while(i < (len(ones) - 1) and j < len(twos)):\r\n\r\n        if memory_removed + twos[j] >= memory or memory_removed + ones[i] >= memory:\r\n            return convenience_points_lost + 1 if memory_removed + ones[i] >= memory else convenience_points_lost + 2\r\n\r\n        if ones[i] + ones[i + 1] <= twos[j]:\r\n            memory_removed += twos[j]\r\n            convenience_points_lost += 2\r\n            j += 1\r\n        else:\r\n            memory_removed += ones[i]\r\n            convenience_points_lost += 1\r\n            i += 1\r\n\r\n    while j < len(twos):\r\n        if memory_removed >= memory:\r\n            return convenience_points_lost\r\n        if i == len(ones) - 1:\r\n            if ones[i] >= twos[j] or ones[i] + memory_removed >= memory:\r\n                memory_removed += ones[i]\r\n                convenience_points_lost += 1\r\n                i += 1\r\n                continue\r\n        memory_removed += twos[j]\r\n        convenience_points_lost += 2\r\n        j += 1\r\n\r\n    while i < len(ones):\r\n        if memory_removed >= memory:\r\n            return convenience_points_lost\r\n        memory_removed += ones[i]\r\n        convenience_points_lost += 1\r\n        i += 1\r\n    if memory_removed >= memory:\r\n        return convenience_points_lost\r\n    return -1\r\n\r\nn = int(input())\r\n\r\nfor i in range(n):\r\n    print(find_convenience_lost(i))",
    "prob_desc_created_at": "1611586800",
    "tags": [
        "binary search",
        "dp",
        "sortings",
        "two pointers"
    ],
    "hidden_unit_tests": ""
}