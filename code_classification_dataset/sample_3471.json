{
    "prob_desc_time_limit": "1 секунда",
    "prob_desc_sample_outputs": "[\"1\", \"6\"]",
    "src_uid": "fa897b774525f038dc2d1b65c4ceda28",
    "prob_desc_notes": "ПримечаниеВ первом примере всего один вариант для выбора состава, который удовлетворяет описанным условиям, поэтому ответ 1.Во втором примере подходят следующие игровые сочетания (в порядке вратарь-защитник-защитник-нападающий-нападающий-нападающий):  16 20 12 13 21 11  16 20 12 13 11 10  16 20 19 13 21 11  16 20 19 13 11 10  16 12 19 13 21 11  16 12 19 13 11 10 Таким образом, ответ на этот пример — 6.",
    "prob_desc_description": "Завтра у хоккейной команды, которой руководит Евгений, важный матч. Евгению нужно выбрать шесть игроков, которые выйдут на лед в стартовом составе: один вратарь, два защитника и три нападающих.Так как это стартовый состав, Евгения больше волнует, насколько красива будет команда на льду, чем способности игроков. А именно, Евгений хочет выбрать такой стартовый состав, чтобы номера любых двух игроков из стартового состава отличались не более, чем в два раза. Например, игроки с номерами 13, 14, 10, 18, 15 и 20 устроят Евгения, а если, например, на лед выйдут игроки с номерами 8 и 17, то это не устроит Евгения.Про каждого из игроков вам известно, на какой позиции он играет (вратарь, защитник или нападающий), а также его номер. В хоккее номера игроков не обязательно идут подряд. Посчитайте число различных стартовых составов из одного вратаря, двух защитников и трех нападающих, которые может выбрать Евгений, чтобы выполнялось его условие красоты.",
    "prob_desc_output_spec": "Выведите одно целое число — количество возможных стартовых составов.",
    "prob_desc_input_spec": "Первая строка содержит три целых числа g, d и f (1 ≤ g ≤ 1 000, 1 ≤ d ≤ 1 000, 1 ≤ f ≤ 1 000) — число вратарей, защитников и нападающих в команде Евгения.  Вторая строка содержит g целых чисел, каждое в пределах от 1 до 100 000 — номера вратарей. Третья строка содержит d целых чисел, каждое в пределах от 1 до 100 000 — номера защитников. Четвертая строка содержит f целых чисел, каждое в пределах от 1 до 100 000 — номера нападающих. Гарантируется, что общее количество игроков не превосходит 1 000, т. е. g + d + f ≤ 1 000. Все g + d + f номеров игроков различны.",
    "prob_desc_output_to": "стандартный вывод",
    "prob_desc_input_from": "стандартный ввод",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_062.jsonl",
    "code_uid": "2dbc5c24d5a709ce39e645505f0c4d83",
    "prob_desc_memory_limit": "256 мегабайт",
    "prob_desc_sample_inputs": "[\"1 2 3\\n15\\n10 19\\n20 11 13\", \"2 3 4\\n16 40\\n20 12 19\\n13 21 11 10\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nimport math\nimport random\nimport time\n\ndef func_cnk(keepers, defenders, attackers, flag):\n    if flag == 'kpr':\n        kpr = 1\n        defs = math.factorial(defenders) // math.factorial(2) // math.factorial(defenders - 2)\n        atts = math.factorial(attackers) // math.factorial(3) // math.factorial(attackers - 3)\n    elif flag == 'def':\n        kpr = keepers\n        defs = defenders - 1\n        atts = math.factorial(attackers) // math.factorial(3) // math.factorial(attackers - 3)\n    elif flag == 'att':\n        kpr = keepers\n        defs = math.factorial(defenders) // math.factorial(2) // math.factorial(defenders - 2)\n        atts = math.factorial(attackers - 1) // math.factorial(2) // math.factorial(attackers - 3)\n    return kpr * int(defs) * int(atts)\n\ng, d, f = list(map(int, input().split()))\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nz = list(map(int, input().split()))\n#N = 100000\n#x = random.sample(range(1, N), g)\n#y = random.sample(range(1, N), d)\n#z = random.sample(range(1, N), f)\n#print(x, y, z)\n\nif (d < 2) or (f < 3):\n    print('0')\n    sys.exit()\n\nt = time.time()\n\nres_ans = 0\ndict_nums = {}\n\nfor num in x:\n    dict_nums[num] = 'kpr'\nfor num in y:\n    dict_nums[num] = 'def'\nfor num in z:\n    dict_nums[num] = 'att'\n\nall_nums = x + y + z\nall_nums.sort()\n\nfor i in range(len(all_nums)):\n    upper = all_nums[i] * 2\n    j = i\n    keepers = 0\n    defenders = 0\n    attackers = 0\n    while (j < len(all_nums) and (all_nums[j] <= upper)):\n        if dict_nums[all_nums[j]] == 'kpr':\n            keepers = keepers + 1\n        if dict_nums[all_nums[j]] == 'def':\n            defenders = defenders + 1\n        if dict_nums[all_nums[j]] == 'att':\n            attackers = attackers + 1\n        j = j + 1\n    if (keepers > 0) and (defenders > 1) and (attackers > 2):\n        #print(all_nums[i], func_cnk(keepers, defenders, attackers, dict_nums[all_nums[i]]))\n        res_ans = res_ans + func_cnk(keepers, defenders, attackers, dict_nums[all_nums[i]])\n\nprint(res_ans)",
    "prob_desc_created_at": "1520004900",
    "tags": [
        "combinatorics",
        "*special",
        "math"
    ],
    "hidden_unit_tests": ""
}