{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\", \"2\", \"4\"]",
    "src_uid": "0dab2f4e70064f90fc079d8dd7a8b049",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given an array $$$a$$$ consisting of $$$n$$$ integers. Let's denote monotonic renumeration of array $$$a$$$ as an array $$$b$$$ consisting of $$$n$$$ integers such that all of the following conditions are met:  $$$b_1 = 0$$$;  for every pair of indices $$$i$$$ and $$$j$$$ such that $$$1 \\le i, j \\le n$$$, if $$$a_i = a_j$$$, then $$$b_i = b_j$$$ (note that if $$$a_i \\ne a_j$$$, it is still possible that $$$b_i = b_j$$$);  for every index $$$i \\in [1, n - 1]$$$ either $$$b_i = b_{i + 1}$$$ or $$$b_i + 1 = b_{i + 1}$$$. For example, if $$$a = [1, 2, 1, 2, 3]$$$, then two possible monotonic renumerations of $$$a$$$ are $$$b = [0, 0, 0, 0, 0]$$$ and $$$b = [0, 0, 0, 0, 1]$$$.Your task is to calculate the number of different monotonic renumerations of $$$a$$$. The answer may be large, so print it modulo $$$998244353$$$.",
    "prob_desc_output_spec": "Print one integer — the number of different monotonic renumerations of $$$a$$$, taken modulo $$$998244353$$$.",
    "prob_desc_input_spec": "The first line contains one integer $$$n$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$) — the number of elements in $$$a$$$. The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_016.jsonl",
    "code_uid": "a45b7a8909930eb58d7fe41b6c77ba0b",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n1 2 1 2 3\", \"2\\n100 1\", \"4\\n1 3 3 7\"]",
    "exec_outcome": "PASSED",
    "source_code": "def merge(intervals):\n        \"\"\"\n        :type intervals: List[Interval]\n        :rtype: List[Interval]\n        \"\"\"\n        intervals = sorted(intervals, key=lambda x: x[0])\n        n=len(intervals)\n        if n==0:\n            return []\n        re=[]\n        re.append(intervals[0])\n        for i in range(1,n):\n            a=re[-1]\n            b=intervals[i]\n            if b[0]>a[1]:\n                re.append(b)\n            else:\n                re[-1][1]=max(a[1],b[1])\n        return re\n\nn=int(raw_input())\n\nA=map(int, raw_input().split())\nmod=998244353\n\n\n\ndic={}\n\nfor i in range(n):\n    x=A[i]\n    if x not in dic:\n        dic[x]=[i]\n    elif x in dic:\n        if len(dic[x])==1:\n            dic[x].append(i)\n        else:\n            dic[x][-1]=i\n\ninterval=[]\nfor key in dic:\n    if len(dic[key])==2:\n        interval.append(dic[key])\n\nintv2=merge(interval)\nm=len(intv2)\nct=0\n\nfor x1,x2 in intv2:\n    ct+=(x2-x1)\n\nprint pow(2,n-ct-1,mod)",
    "prob_desc_created_at": "1547044500",
    "tags": [
        "combinatorics",
        "sortings"
    ],
    "hidden_unit_tests": ""
}