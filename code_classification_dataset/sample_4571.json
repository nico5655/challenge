{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1\\n3\\n2\"]",
    "src_uid": "68b7567880b9980d793dae2bce690356",
    "prob_desc_notes": "NoteIn the first test case, $$$a$$$ = $$$[6, 6, 6]$$$ and $$$a'$$$ = $$$[6, 6, 6]$$$. $$$\\text{LIS}(a) = \\text{LIS}(a')$$$ = $$$1$$$. Hence the beauty is $$$min(1, 1) = 1$$$.In the second test case, $$$a$$$ can be rearranged to $$$[2, 5, 4, 5, 4, 2]$$$. Then $$$a'$$$ = $$$[2, 4, 5, 4, 5, 2]$$$. $$$\\text{LIS}(a) = \\text{LIS}(a') = 3$$$. Hence the beauty is $$$3$$$ and it can be shown that this is the maximum possible beauty.In the third test case, $$$a$$$ can be rearranged to $$$[1, 2, 3, 2]$$$. Then $$$a'$$$ = $$$[2, 3, 2, 1]$$$. $$$\\text{LIS}(a) = 3$$$, $$$\\text{LIS}(a') = 2$$$. Hence the beauty is $$$min(3, 2) = 2$$$ and it can be shown that $$$2$$$ is the maximum possible beauty.",
    "prob_desc_description": "You are given an array $$$a$$$ of $$$n$$$ positive integers. Let $$$\\text{LIS}(a)$$$ denote the length of longest strictly increasing subsequence of $$$a$$$. For example,  $$$\\text{LIS}([2, \\underline{1}, 1, \\underline{3}])$$$ = $$$2$$$.  $$$\\text{LIS}([\\underline{3}, \\underline{5}, \\underline{10}, \\underline{20}])$$$ = $$$4$$$.  $$$\\text{LIS}([3, \\underline{1}, \\underline{2}, \\underline{4}])$$$ = $$$3$$$.  We define array $$$a'$$$ as the array obtained after reversing the array $$$a$$$ i.e. $$$a' = [a_n, a_{n-1}, \\ldots , a_1]$$$.The beauty of array $$$a$$$ is defined as $$$min(\\text{LIS}(a),\\text{LIS}(a'))$$$.Your task is to determine the maximum possible beauty of the array $$$a$$$ if you can rearrange the array $$$a$$$ arbitrarily.",
    "prob_desc_output_spec": "For each test case, output a single integer  — the maximum possible beauty of $$$a$$$ after rearranging its elements arbitrarily.",
    "prob_desc_input_spec": "The input consists of multiple test cases. The first line contains a single integer $$$t$$$ $$$(1 \\leq t \\leq 10^4)$$$  — the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer $$$n$$$ $$$(1 \\leq n \\leq 2\\cdot 10^5)$$$  — the length of array $$$a$$$. The second line of each test case contains $$$n$$$ integers $$$a_1,a_2, \\ldots ,a_n$$$ $$$(1 \\leq a_i \\leq 10^9)$$$  — the elements of the array $$$a$$$. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_101.jsonl",
    "code_uid": "e28b9b4974cd149635d4eee98cee90e8",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n\\n3\\n\\n6 6 6\\n\\n6\\n\\n2 5 4 5 2 4\\n\\n4\\n\\n1 3 2 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\nfrom collections import  Counter\r\nfrom math import ceil\r\n\r\nsys.setrecursionlimit(10**5)\r\n\r\n\r\n\r\ndef pro(arr):\r\n    n=len(arr)\r\n    dic = {}\r\n    for i in range(n):\r\n        dic[arr[i]]=dic.get(arr[i],0) + 1\r\n\r\n    a,b=0,0\r\n    for i,j in dic.items():\r\n        if(j>=2):\r\n            b+=1\r\n        else:\r\n            a+=1\r\n\r\n    print(b+ceil(a/2) )\r\n\r\n\r\n\r\n\r\n# check i/o format\r\n# read q\r\n# ordering matters in q ??\r\nt=int(input())\r\n#arr=list(map(int,input().split()))\r\nfor i in range(t):\r\n    n=int(input())\r\n    arr=list(map(int,input().split()))\r\n    #arr=list(input())\r\n    pro(arr)",
    "prob_desc_created_at": "1653230100",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation",
        "math"
    ],
    "hidden_unit_tests": ""
}