{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\", \"-1\", \"2\", \"-1\", \"0\"]",
    "src_uid": "7898b8258297a6cde8fecb1079172e10",
    "prob_desc_notes": "NoteIn the first test, here is an example placement of magnets:  In the second test, we can show that no required placement of magnets exists. Here are three example placements that fail to meet the requirements. The first example violates rule $$$3$$$ since we can move the north magnet down onto a white square. The second example violates rule $$$2$$$ since we cannot move the north magnet to the bottom-left black square by any sequence of operations. The third example violates rule $$$1$$$ since there is no south magnet in the first column.  In the third test, here is an example placement of magnets. We can show that there is no required placement of magnets with fewer north magnets.  In the fourth test, we can show that no required placement of magnets exists. Here are two example placements that fail to meet the requirements. The first example violates rule $$$1$$$ since there is no south magnet in the first row. The second example violates rules $$$1$$$ and $$$3$$$ since there is no south magnet in the second row and we can move the north magnet up one unit onto a white square.  In the fifth test, we can put the south magnet in each cell and no north magnets. Because there are no black cells, it will be a correct placement.",
    "prob_desc_description": "A monopole magnet is a magnet that only has one pole, either north or south. They don't actually exist since real magnets have two poles, but this is a programming contest problem, so we don't care.There is an $$$n\\times m$$$ grid. Initially, you may place some north magnets and some south magnets into the cells. You are allowed to place as many magnets as you like, even multiple in the same cell.An operation is performed as follows. Choose a north magnet and a south magnet to activate. If they are in the same row or the same column and they occupy different cells, then the north magnet moves one unit closer to the south magnet. Otherwise, if they occupy the same cell or do not share a row or column, then nothing changes. Note that the south magnets are immovable.Each cell of the grid is colored black or white. Let's consider ways to place magnets in the cells so that the following conditions are met.  There is at least one south magnet in every row and every column.  If a cell is colored black, then it is possible for a north magnet to occupy this cell after some sequence of operations from the initial placement.  If a cell is colored white, then it is impossible for a north magnet to occupy this cell after some sequence of operations from the initial placement. Determine if it is possible to place magnets such that these conditions are met. If it is possible, find the minimum number of north magnets required (there are no requirements on the number of south magnets).",
    "prob_desc_output_spec": "Output a single integer, the minimum possible number of north magnets required. If there is no placement of magnets that satisfies all conditions, print a single integer $$$-1$$$.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1\\le n,m\\le 1000$$$)  — the number of rows and the number of columns, respectively. The next $$$n$$$ lines describe the coloring. The $$$i$$$-th of these lines contains a string of length $$$m$$$, where the $$$j$$$-th character denotes the color of the cell in row $$$i$$$ and column $$$j$$$. The characters \"#\" and \".\" represent black and white, respectively. It is guaranteed, that the string will not contain any other characters.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_007.jsonl",
    "code_uid": "09b419a2ea7207df6e9f6f972fa83d11",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 3\\n.#.\\n###\\n##.\", \"4 2\\n##\\n.#\\n.#\\n##\", \"4 5\\n....#\\n####.\\n.###.\\n.#...\", \"2 1\\n.\\n#\", \"3 5\\n.....\\n.....\\n.....\"]",
    "exec_outcome": "PASSED",
    "source_code": "\n\nfrom math import factorial as fac\nfrom collections import defaultdict\nfrom copy import deepcopy\nimport sys, math\nf = None\ntry:\n\tf = open('q1.input', 'r')\nexcept IOError:\n\tf = sys.stdin\nif 'xrange' in dir(__builtins__):\n\trange = xrange\n# print(f.readline())\n# sys.setrecursionlimit(10**5)\n\n\t\ndef print_case_iterable(case_num, iterable):\n\tprint(\"Case #{}: {}\".format(case_num,\" \".join(map(str,iterable))))\n\ndef print_case_number(case_num, iterable):\n\tprint(\"Case #{}: {}\".format(case_num,iterable))\n\ndef print_iterable(A):\n\tprint (' '.join(A))\n\ndef read_int():\n\treturn int(f.readline().strip())\ndef read_int_array():\n\treturn [int(x) for x in f.readline().strip().split(\" \")]\ndef rns():\n\ta =  [x for x in f.readline().split(\" \")]\n\treturn int(a[0]), a[1].strip()\ndef read_string():\n\treturn list(f.readline().strip())\n\nNUMBER = 10**9 + 7\n# NUMBER = 998244353\ndef factorial(n) : \n\tM = NUMBER\n\tf = 1\n  \n\tfor i in range(1, n + 1):  \n\t\tf = (f * i) % M # Now f never can  \n\t\t\t\t\t\t# exceed 10^9+7  \n\treturn f\ndef mult(a,b):\n\treturn (a * b) % NUMBER\n\ndef minus(a , b):\n\treturn (a - b) % NUMBER\n\ndef plus(a , b):\n\treturn (a + b) % NUMBER\n\ndef egcd(a, b):\n\tif a == 0:\n\t\treturn (b, 0, 1)\n\telse:\n\t\tg, y, x = egcd(b % a, a)\n\t\treturn (g, x - (b // a) * y, y)\n\ndef modinv(a):\n\tm = NUMBER\n\tg, x, y = egcd(a, m)\n\tif g != 1:\n\t\traise Exception('modular inverse does not exist')\n\telse:\n\t\treturn x % m\nfrom collections import deque, defaultdict \nimport heapq\n\ndef bfs(V, E):\n\ts = set()\n\t# print('\\n'.join(map(str,E.items())))\n\tnum_connected_components = 0 \n\tfor v in V:\n\t\tif v in s:\n\t\t\tcontinue\n\t\tq = deque([])\n\t\ts.add(v)\n\t\tq.append(v)\n\t\twhile len(q) > 0:\n\t\t\tx = q.popleft()\n\t\t\tfor e in E[x]:\n\t\t\t\tif e not in s:\n\t\t\t\t\ts.add(e)\n\t\t\t\t\tq.append(e)\n\t\t\t# print(q)\n\t\tnum_connected_components += 1\n\treturn num_connected_components\n\ndef bfs_get_neig(V, get_neig):\n\ts = set()\n\t# print('\\n'.join(map(str,E.items())))\n\tnum_connected_components = 0 \n\tfor v in V:\n\t\tif v in s:\n\t\t\tcontinue\n\t\tq = deque([])\n\t\ts.add(v)\n\t\tq.append(v)\n\t\twhile len(q) > 0:\n\t\t\tx = q.popleft()\n\t\t\tfor e in get_neig(*x):\n\t\t\t\tif e not in s:\n\t\t\t\t\ts.add(e)\n\t\t\t\t\tq.append(e)\n\t\t\t# print(q)\n\t\tnum_connected_components += 1\n\treturn num_connected_components\n\n# def dfs(V,E):\n# \ts = set()\n# \tcnt = 0\n# \tfor v in V:\n# \t\tif v in s\n# from typing import List, Tuple\n\ndef binary_count_smaller(L, x):\n\tl = 0\n\tif x < L[0]:\n\t\treturn 0\n\tr = len(L)\n\twhile r - l > 1:\n\t\tmid = (l+r)//2\n\t\tif L[mid] < x:\n\t\t\tl = mid\n\t\telse:\n\t\t\tr = mid\n\treturn l + 1\ndef binary_count_larger(L, x):\n\tl = 0\n\tif x > L[-1]:\n\t\treturn 0\n\tr = len(L)\n\twhile r - l > 1:\n\t\tmid = (l+r)//2\n\t\tif L[mid] <= x:\n\t\t\tl = mid\n\t\telse:\n\t\t\tr = mid\n\treturn len(L) - (r-1)\n\ndef regular_bs(L,x,l=None,r=None):\n\tl = 0 if l == None else l\n\tr = len(L) if r == None else r\n\twhile (r-l) > 1:\n\t\tm = (r+l)//2\n\t\tl = m if L[m] <= x else l\n\t\tr = m if L[m] > x else r\n\tcnt = 0\n\treturn l\n\nfrom itertools import product\n\ndef preprocess():\n\tnums = dict(zip(sequences,range(10)))\n\tchanges = defaultdict(dict)\n\tfor comb in map(lambda x: ''.join(x), product(*([['0','1']]*7))):\n\t\tfor seq in sequences:\n\t\t\ta = int(comb,2)\n\t\t\tb = int(seq,2)\n\t\t\tnum_changes = bin(a^b).count('1')\n\t\t\tif num_changes == seq.count('1') - comb.count('1'):\n\t\t\t\tchanges[comb][num_changes] = nums[seq]\n\treturn changes\n\n\n# import StringIO use for PYPY when lots of prints\n#example usage:\n#\t for l in res:\n#\t \tprint >>output, str(len(l)) + ' ' +  ' '.join(l)\nfrom collections import deque\nfrom itertools import product\ndef bi(x):\n\treturn bin(x)[2:]\n\ndef check_no_ghg_row(matrix,n,m):\n\tfor i in range(n):\n\t\tblack = False\n\t\twhite = False\n\t\tfor x in matrix[i]:\n\t\t\tif x == '.' and (not black or white):\n\t\t\t\tcontinue\n\t\t\tif x == '#' and black and white:\n\t\t\t\treturn False\n\t\t\tif x == '#' and black:\n\t\t\t\tcontinue\n\t\t\tif x == '.' and black:\n\t\t\t\twhite = True\n\t\t\tif x == '#':\n\t\t\t\tblack = True\n\treturn True\n\ndef check_no_ghg_col(matrix,n,m):\n\tfor j in range(m):\n\t\tblack = False\n\t\twhite = False\n\t\tfor i in range(n):\n\t\t\tx = matrix[i][j]\n\t\t\tif x == '.' and (not black or white):\n\t\t\t\tcontinue\n\t\t\tif x == '#' and black and white:\n\t\t\t\treturn False\n\t\t\tif x == '#' and black:\n\t\t\t\tcontinue\n\t\t\tif x == '.' and black:\n\t\t\t\twhite = True\n\t\t\tif x == '#':\n\t\t\t\tblack = True\n\treturn True\n\ndef empty_col(matrix,n,m):\n\tfor j in range(m):\n\t\tempty = True\n\t\tfor i in range(n):\n\t\t\tif matrix[i][j] == '#':\n\t\t\t\tempty=False\n\t\t\t\tbreak\n\t\tif empty:\n\t\t\treturn True\n\treturn False\n\ndef empty_row(matrix,n,m):\n\tfor i in range(n):\n\t\tempty=True\n\t\tfor j in range(m):\n\t\t\tif matrix[i][j] == '#':\n\t\t\t\tempty=False\n\t\t\t\tbreak\n\t\tif empty:\n\t\t\treturn True\n\treturn False\noptions = list(product([0,1],repeat=4))\n\ndef solution(matrix,n,m, check):\n\tif not check_no_ghg_row(matrix,n,m) or not check_no_ghg_col(matrix,n,m):\n\t\treturn -1\n\tif (empty_row(matrix,n,m) and not empty_col(matrix,n,m)) or (not empty_row(matrix,n,m) and empty_col(matrix,n,m)):\n\t\treturn -1\n\tV = []\n\tdef get_neighbors(i,j):\n\t\tres = []\n\t\tif i > 0 and matrix[i-1][j] == '#':\n\t\t\tres.append((i-1,j))\n\t\tif i < (n-1) and matrix[i+1][j] == '#':\n\t\t\tres.append((i+1,j))\n\t\tif j > 0 and matrix[i][j-1] == '#':\n\t\t\tres.append((i,j-1))\n\t\tif j < (m-1) and matrix[i][j+1] == '#':\n\t\t\tres.append((i,j+1))\t\n\t\treturn res\n\n\t# E = defaultdict(list)\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\t# x = (i,j)\n\t\t\tif matrix[i][j] == '.':\n\t\t\t\tcontinue\n\t\t\tV.append((i,j))\n\t# \t\toption = [0,0,0,0]\n\t# \t\tif i > 0 and matrix[i-1][j] == '#':\n\t# \t\t\toption[0]=1\n\t# \t\t\t# E[x].append((i-1,j))\n\t# \t\tif i < (n-1) and matrix[i+1][j] == '#':\n\t# \t\t\toption[1]=1\n\t# \t\t\t# E[x].append((i+1,j))\n\t# \t\tif j > 0 and matrix[i][j-1] == '#':\n\t# \t\t\toption[2]=1\n\t# \t\t\t# E[x].append((i,j-1))\n\t# \t\tif j < (m-1) and matrix[i][j+1] == '#':\n\t# \t\t\toption[3]=1\n\t# \t\t\t# E[x].append((i,j+1))\n\t# \t\tE[x] = tuple(option)\n\tmin_north = bfs_get_neig(V,get_neighbors)\n\n\treturn min_north\n\t\ndef main():\n\tT = 1\n\tfor i in range(T):\n\t\tn,m = read_int_array()\n\t\tmatrix = []\n\t\tfor i in range(n):\n\t\t\tmatrix.append(read_string())\n\t\tprint(solution(matrix,n,m, (n==m==1000 and matrix[0][0] == '#')))\n\n\nif __name__ == '__main__':\n\tmain()\n\n",
    "prob_desc_created_at": "1588775700",
    "tags": [
        "dsu",
        "constructive algorithms",
        "dfs and similar"
    ],
    "hidden_unit_tests": ""
}