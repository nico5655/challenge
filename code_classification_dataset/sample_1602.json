{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"]",
    "src_uid": "8dcf63e0e4584df7a471c84ce3ca8fe1",
    "prob_desc_notes": "NoteThe picture corresponding to the example:Consider the queries.The first query is $$$[3, 8, 9, 10]$$$. The answer is \"YES\" as you can choose the path from the root $$$1$$$ to the vertex $$$u=10$$$. Then vertices $$$[3, 9, 10]$$$ belong to the path from $$$1$$$ to $$$10$$$ and the vertex $$$8$$$ has distance $$$1$$$ to the vertex $$$7$$$ which also belongs to this path.The second query is $$$[2, 4, 6]$$$. The answer is \"YES\" as you can choose the path to the vertex $$$u=2$$$. Then the vertex $$$4$$$ has distance $$$1$$$ to the vertex $$$1$$$ which belongs to this path and the vertex $$$6$$$ has distance $$$1$$$ to the vertex $$$2$$$ which belongs to this path.The third query is $$$[2, 1, 5]$$$. The answer is \"YES\" as you can choose the path to the vertex $$$u=5$$$ and all vertices of the query belong to this path.The fourth query is $$$[4, 8, 2]$$$. The answer is \"YES\" as you can choose the path to the vertex $$$u=9$$$ so vertices $$$2$$$ and $$$4$$$ both have distance $$$1$$$ to the vertex $$$1$$$ which belongs to this path and the vertex $$$8$$$ has distance $$$1$$$ to the vertex $$$7$$$ which belongs to this path.The fifth and the sixth queries both have answer \"NO\" because you cannot choose suitable vertex $$$u$$$.",
    "prob_desc_description": "You are given a rooted tree consisting of $$$n$$$ vertices numbered from $$$1$$$ to $$$n$$$. The root of the tree is a vertex number $$$1$$$.A tree is a connected undirected graph with $$$n-1$$$ edges.You are given $$$m$$$ queries. The $$$i$$$-th query consists of the set of $$$k_i$$$ distinct vertices $$$v_i[1], v_i[2], \\dots, v_i[k_i]$$$. Your task is to say if there is a path from the root to some vertex $$$u$$$ such that each of the given $$$k$$$ vertices is either belongs to this path or has the distance $$$1$$$ to some vertex of this path.",
    "prob_desc_output_spec": "For each query, print the answer — \"YES\", if there is a path from the root to some vertex $$$u$$$ such that each of the given $$$k$$$ vertices is either belongs to this path or has the distance $$$1$$$ to some vertex of this path and \"NO\" otherwise.",
    "prob_desc_input_spec": "The first line of the input contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$, $$$1 \\le m \\le 2 \\cdot 10^5$$$) — the number of vertices in the tree and the number of queries. Each of the next $$$n-1$$$ lines describes an edge of the tree. Edge $$$i$$$ is denoted by two integers $$$u_i$$$ and $$$v_i$$$, the labels of vertices it connects $$$(1 \\le u_i, v_i \\le n, u_i \\ne v_i$$$). It is guaranteed that the given edges form a tree. The next $$$m$$$ lines describe queries. The $$$i$$$-th line describes the $$$i$$$-th query and starts with the integer $$$k_i$$$ ($$$1 \\le k_i \\le n$$$) — the number of vertices in the current query. Then $$$k_i$$$ integers follow: $$$v_i[1], v_i[2], \\dots, v_i[k_i]$$$ ($$$1 \\le v_i[j] \\le n$$$), where $$$v_i[j]$$$ is the $$$j$$$-th vertex of the $$$i$$$-th query. It is guaranteed that all vertices in a single query are distinct. It is guaranteed that the sum of $$$k_i$$$ does not exceed $$$2 \\cdot 10^5$$$ ($$$\\sum\\limits_{i=1}^{m} k_i \\le 2 \\cdot 10^5$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_010.jsonl",
    "code_uid": "7c04391a26ce8a094f9c50b92a0f972f",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\"]",
    "exec_outcome": "PASSED",
    "source_code": "from __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    from types import GeneratorType\n    def bootstrap(f, stack=[]):\n        def wrappedfunc(*args, **kwargs):\n            if stack:\n                return f(*args, **kwargs)\n            else:\n                to = f(*args, **kwargs)\n                while True:\n                    if type(to) is GeneratorType:\n                        stack.append(to)\n                        to = next(to)\n                    else:\n                        stack.pop()\n                        if not stack:\n                            break\n                        to = stack[-1].send(to)\n                return to\n        return wrappedfunc\n    class Graph(object):\n\n        def __init__(self):\n            self.neighbours = {}\n        \n        def add_node(self, node):\n            self.neighbours[node] = []\n        \n        def add_edge(self, edge):\n            u, v = edge\n            self.neighbours[u].append(v)\n            self.neighbours[v].append(u)\n        \n        @bootstrap\n        def dfs(self, v, parent, depth=0):\n            parents[v] = parent\n            depths[v] = depth\n            visited[v] = 1\n            intime[v] = timer[0]\n            timer[0] += 1\n            for child in self.neighbours[v]:\n                if visited[child] == 0:\n                    yield self.dfs(child, v, depth + 1)\n            outtime[v] = timer[0]\n            timer[0] += 1\n            yield\n\n    def inPath(x, y):\n        return intime[x] <= intime[y] and outtime[x] >= outtime[y]\n\n    g = Graph()\n    n, q = map(int, input().split())\n    for i in range(n):\n        g.add_node(i + 1)\n    for i in range(n - 1):\n        x, y = map(int, input().split())\n        g.add_edge((x, y))\n    visited, intime, outtime = [0] * (n + 1), [0] * (n + 1), [0] * (n + 1)\n    timer = [0]\n    parents, depths = {}, {}\n    g.dfs(1, -1)\n    for i in range(q):\n        lis = list(map(int, input().split()))[1:]\n        deep = lis[0]\n        for j in lis:\n            if depths[deep] < depths[j]:\n                deep = j\n        for j in range(len(lis)):\n            if lis[j] == deep:\n                continue\n            if parents[lis[j]]!=-1:\n                lis[j] = parents[lis[j]]\n        ok = True\n        for j in lis:\n            ok = ok & inPath(j, deep)\n        print(\"YES\") if ok else print(\"NO\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# region fastio\n# Credits\n# # template credits to cheran-senthil's github Repo\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()",
    "prob_desc_created_at": "1585233300",
    "tags": [
        "dfs and similar",
        "trees",
        "graphs"
    ],
    "hidden_unit_tests": ""
}