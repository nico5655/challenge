{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"Possible\\n3 2 1\", \"Ambiguity\", \"Impossible\"]",
    "src_uid": "468e8a14dbdca471f143f59b945508d0",
    "prob_desc_notes": "NoteIn the first sample 3 is replaced by 1 and vice versa, while 2 never changes. The answer exists and is unique.In the second sample all numbers are replaced by 1, so it is impossible to unambiguously restore the original sequence.In the third sample fi ≠ 3 for all i, so no sequence ai transforms into such bi and we can say for sure that Spongebob has made a mistake.",
    "prob_desc_description": "While Patrick was gone shopping, Spongebob decided to play a little trick on his friend. The naughty Sponge browsed through Patrick's personal stuff and found a sequence a1, a2, ..., am of length m, consisting of integers from 1 to n, not necessarily distinct. Then he picked some sequence f1, f2, ..., fn of length n and for each number ai got number bi = fai. To finish the prank he erased the initial sequence ai.It's hard to express how sad Patrick was when he returned home from shopping! We will just say that Spongebob immediately got really sorry about what he has done and he is now trying to restore the original sequence. Help him do this or determine that this is impossible.",
    "prob_desc_output_spec": "Print \"Possible\" if there is exactly one sequence ai, such that bi = fai for all i from 1 to m. Then print m integers a1, a2, ..., am. If there are multiple suitable sequences ai, print \"Ambiguity\". If Spongebob has made a mistake in his calculations and no suitable sequence ai exists, print \"Impossible\".",
    "prob_desc_input_spec": "The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100 000) — the lengths of sequences fi and bi respectively. The second line contains n integers, determining sequence f1, f2, ..., fn (1 ≤ fi ≤ n). The last line contains m integers, determining sequence b1, b2, ..., bm (1 ≤ bi ≤ n).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_008.jsonl",
    "code_uid": "ccdbd9189137d0fd86322e6af3458201",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 3\\n3 2 1\\n1 2 3\", \"3 3\\n1 1 1\\n1 1 1\", \"3 3\\n1 2 1\\n3 3 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "\n\nans=[]\ndef func(f,b):\n    global ans\n    dic={}\n    k=0\n    for i in range(len(f)):\n        dic[f[i]]=-1\n    for i in range(len(f)):\n        if dic[f[i]]!=-1:\n            dic[f[i]]=-10\n        else:\n            dic[f[i]]=i+1\n    for i in b:\n        if i in dic:\n            if dic[i]==-10:\n                k=1\n            ans.append(dic[i])\n        else:\n            return 3\n    if k:\n        return 2\n    return 1\n\n\nq=list(map(int,input().split()))\nn,m=q[0],q[1]\nf=list(map(int,input().split()))\nb=list(map(int,input().split()))\np=func(f,b)\nif p==1:\n    print(\"Possible\")\n    for i in ans:\n        print(i,end=' ')\nelif p==2:\n    print(\"Ambiguity\")\nelse:\n    print(\"Impossible\")",
    "prob_desc_created_at": "1448037300",
    "tags": [
        "implementation"
    ],
    "hidden_unit_tests": ""
}