{
    "prob_desc_time_limit": "6 seconds",
    "prob_desc_sample_outputs": "[\"8\\n4\\n4\\n12\\n10\"]",
    "src_uid": "6cf46b112d7a9cc4c19b1bb7b8452970",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given an array $$$a$$$ of $$$n$$$ points in $$$k$$$-dimensional space. Let the distance between two points $$$a_x$$$ and $$$a_y$$$ be $$$\\sum \\limits_{i = 1}^{k} |a_{x, i} - a_{y, i}|$$$ (it is also known as Manhattan distance).You have to process $$$q$$$ queries of the following two types: $$$1$$$ $$$i$$$ $$$b_1$$$ $$$b_2$$$ ... $$$b_k$$$ — set $$$i$$$-th element of $$$a$$$ to the point $$$(b_1, b_2, \\dots, b_k)$$$; $$$2$$$ $$$l$$$ $$$r$$$ — find the maximum distance between two points $$$a_i$$$ and $$$a_j$$$, where $$$l \\le i, j \\le r$$$.",
    "prob_desc_output_spec": "Print the answer for each query of the second type.",
    "prob_desc_input_spec": "The first line contains two numbers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$, $$$1 \\le k \\le 5$$$) — the number of elements in $$$a$$$ and the number of dimensions of the space, respectively. Then $$$n$$$ lines follow, each containing $$$k$$$ integers $$$a_{i, 1}$$$, $$$a_{i, 2}$$$, ..., $$$a_{i, k}$$$ ($$$-10^6 \\le a_{i, j} \\le 10^6$$$) — the coordinates of $$$i$$$-th point. The next line contains one integer $$$q$$$ ($$$1 \\le q \\le 2 \\cdot 10^5$$$) — the number of queries. Then $$$q$$$ lines follow, each denoting a query. There are two types of queries:  $$$1$$$ $$$i$$$ $$$b_1$$$ $$$b_2$$$ ... $$$b_k$$$ ($$$1 \\le i \\le n$$$, $$$-10^6 \\le b_j \\le 10^6$$$) — set $$$i$$$-th element of $$$a$$$ to the point $$$(b_1, b_2, \\dots, b_k)$$$; $$$2$$$ $$$l$$$ $$$r$$$ ($$$1 \\le l \\le r \\le n$$$) — find the maximum distance between two points $$$a_i$$$ and $$$a_j$$$, where $$$l \\le i, j \\le r$$$. There is at least one query of the second type.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_012.jsonl",
    "code_uid": "870e3ef4b14b749e09d61e5196a2abad",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"5 2\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n7\\n2 1 5\\n2 1 3\\n2 3 5\\n1 5 -1 -2\\n2 1 5\\n1 4 -1 -2\\n2 1 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nrange = xrange\ninput = raw_input\n\nbig = 10**8\n\nclass seg:\n    def __init__(self,n,d):\n        m = 1\n        while m<n:m*=2\n        self.n = n\n        self.m = m\n        self.mindata = [[big]*(2*m) for _ in range(d)]\n        self.maxdata = [[-(big)]*(2*m) for _ in range(d)]\n        self.d = d\n\n    def diff(self,l,r):\n        l += self.m\n        r += self.m\n        maxi = [-big]*self.d\n        mini = [big]*self.d\n        while l<r:\n            if l%2==1:\n                for i in range(self.d):\n                    maxi[i] = max(maxi[i],self.maxdata[i][l])\n                    mini[i] = min(mini[i],self.mindata[i][l])\n                l += 1\n            if r%2==1:\n                r -= 1\n                for i in range(self.d):\n                    maxi[i] = max(maxi[i],self.maxdata[i][r])\n                    mini[i] = min(mini[i],self.mindata[i][r])\n            l //= 2\n            r //= 2\n        return max(maxi[i]-mini[i] for i in range(self.d))\n    def set(self,ind,val):\n        ind += self.m\n        for i in range(self.d):\n            self.mindata[i][ind] = val[i]\n            self.maxdata[i][ind] = val[i]\n        ind //= 2\n        old_ind = ind\n        for i in range(self.d):\n            ind = old_ind\n            while ind>0:\n                dum = min(self.mindata[i][2*ind],self.mindata[i][2*ind+1])\n                if self.mindata[i][ind] != dum:\n                    self.mindata[i][ind] = dum\n                else:\n                    break\n                ind //= 2\n            ind = old_ind\n            while ind>0:\n                dum = max(self.maxdata[i][2*ind],self.maxdata[i][2*ind+1])\n                if self.maxdata[i][ind] != dum:\n                    self.maxdata[i][ind] = dum\n                else:\n                    break\n                ind //= 2\n\n\ns = sys.stdin.read()\ninp = []\nnumb = 0\nsign = 1\n \nfor i in range(len(s)):\n    if s[i]>='0':\n        numb = 10*numb + ord(s[i])-48\n    else:\n        if s[i]=='-':\n            sign = -1\n        else:\n            inp.append(sign*numb)\n            numb = 0\n            sign = 1\nif s[-1]>='0':\n    inp.append(sign*numb)\nii = 0\n\nn,k = inp[ii],inp[ii+1]\nii += 2\n\nways = []\nfor numb in range(2**(k-1)):\n    tmp = []\n    ind = 0\n    while numb>0:\n        if numb%2==1:\n            tmp.append(ind)\n        numb //= 2\n        ind += 1\n    ways.append(tmp)\n\nduper = seg(n,2**(k-1))\n\nfor node in range(n):\n    total = sum(inp[ii:ii+k])\n    vals = [total - 2*sum(inp[ii+s] for s in signs) for signs in ways]\n    ii += k\n    duper.set(node,vals)\n\nq = inp[ii]\nii+= 1\nout = []\nfor _ in range(q):\n    query = inp[ii]\n    ii += 1\n    if query==1:\n        node = inp[ii]-1\n        ii += 1\n\n        total = sum(inp[ii:ii+k])\n        vals = [total - 2*sum(inp[ii+s] for s in signs) for signs in ways]\n\n        ii += k\n        duper.set(node,vals)\n    else:\n        l,r  = inp[ii]-1,inp[ii+1]\n        ii += 2\n        out.append(duper.diff(l,r)) \nprint '\\n'.join(str(x) for x in out)\n",
    "prob_desc_created_at": "1544884500",
    "tags": [
        "data structures",
        "bitmasks"
    ],
    "hidden_unit_tests": ""
}