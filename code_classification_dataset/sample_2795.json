{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"-1\", \"0\", \"1\\n1\", \"1\\n2\"]",
    "src_uid": "c046e64e008e997620efc21aec199bdb",
    "prob_desc_notes": "NoteIn the first sample we have single vertex without edges. It's degree is 0 and we can not get 1.",
    "prob_desc_description": "Leha plays a computer game, where is on each level is given a connected graph with n vertices and m edges. Graph can contain multiple edges, but can not contain self loops. Each vertex has an integer di, which can be equal to 0, 1 or  - 1. To pass the level, he needs to find a «good» subset of edges of the graph or say, that it doesn't exist. Subset is called «good», if by by leaving only edges from this subset in the original graph, we obtain the following: for every vertex i, di =  - 1 or it's degree modulo 2 is equal to di. Leha wants to pass the game as soon as possible and ask you to help him. In case of multiple correct answers, print any of them.",
    "prob_desc_output_spec": "Print  - 1 in a single line, if solution doesn't exist. Otherwise in the first line k — number of edges in a subset. In the next k lines indexes of edges. Edges are numerated in order as they are given in the input, starting from 1.",
    "prob_desc_input_spec": "The first line contains two integers n, m (1 ≤ n ≤ 3·105, n - 1 ≤ m ≤ 3·105) — number of vertices and edges. The second line contains n integers d1, d2, ..., dn ( - 1 ≤ di ≤ 1) — numbers on the vertices. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — edges. It's guaranteed, that graph in the input is connected.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_031.jsonl",
    "code_uid": "ab3d69f6d5910e91765b7b127a4ae42c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1 0\\n1\", \"4 5\\n0 0 0 -1\\n1 2\\n2 3\\n3 4\\n1 4\\n2 4\", \"2 1\\n1 1\\n1 2\", \"3 3\\n0 -1 1\\n1 2\\n2 3\\n1 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import deque\n\ndef subtree_specs(graph, d, node, visited, edges_dict, res_edges):\n    num_ones = 0\n    for nb in graph[node]:\n        if not visited[nb]:\n            visited[nb] = True\n            res = subtree_specs(graph, d, nb, visited, edges_dict, res_edges)\n            if res % 2 == 1:\n                # Need to attach this node\n                res_edges.append(edges_dict[node][nb])\n            num_ones += res\n    if d[node] == 1:\n        num_ones += 1\n    return num_ones\n\ndef subtree_specs_stack(graph, d, edges_dict):\n    n = len(graph)\n    visited = n * [False]\n    visited[0] = True\n    children = [[] for _ in range(n)]\n    num_ones = n * [-1]\n    res_edges = []\n    q = deque([(0, 'InProcess')])\n    while len(q) > 0:\n        node, state = q.pop()\n        if state == 'InProcess':\n            q.append((node, 'Done'))\n            for nb in graph[node]:\n                if not visited[nb]:\n                    visited[nb] = True\n                    q.append((nb, 'InProcess'))\n                    children[node].append(nb)\n        elif state == 'Done':\n            res = sum([num_ones[i] for i in children[node]])\n            if d[node] == 1:\n                res += 1\n            num_ones[node] = res\n            for child in children[node]:\n                if num_ones[child] % 2 == 1:\n                    res_edges.append(edges_dict[node][child])\n    return res_edges\n\ndef main():\n    n, m = map(int, raw_input().split(' '))\n    d = map(int, raw_input().split(' '))\n    graph = [[] for _ in range(n)]\n    edges_dict = {}\n\n    for i in range(m):\n        node1, node2 = map(int, raw_input().split(' '))\n        node1 -= 1\n        node2 -= 1\n        graph[node1].append(node2)\n        graph[node2].append(node1)\n        if node1 not in edges_dict:\n            edges_dict[node1] = {}\n        if node2 not in edges_dict:\n            edges_dict[node2] = {}\n        if node2 not in edges_dict[node1]:\n            edges_dict[node1][node2] = i + 1\n        if node1 not in edges_dict[node2]:\n            edges_dict[node2][node1] = i + 1\n\n    if len([el for el in d if el == 1]) == 0:\n        print 0\n        return\n    else:\n        if len([el for el in d if el == 1]) % 2 == 1:\n            if len([el for el in d if el == -1]) == 0:\n                print -1\n                return\n            else:\n                i = [i for i in range(len(d)) if d[i] == -1][0]\n                d[i] = 1\n        res = subtree_specs_stack(graph, d, edges_dict)\n        print len(res)\n        for el in res:\n            print el\n\nif __name__ == \"__main__\":\n    main()\n",
    "prob_desc_created_at": "1503068700",
    "tags": [
        "dp",
        "graphs",
        "constructive algorithms",
        "data structures",
        "dfs and similar"
    ],
    "hidden_unit_tests": ""
}