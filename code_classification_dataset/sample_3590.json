{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\", \"0\", \"-1\"]",
    "src_uid": "040171969b25ad9be015d95586890cf0",
    "prob_desc_notes": "NoteWord a1, a2, ..., am of length m is lexicographically not greater than word b1, b2, ..., bk of length k, if one of two conditions hold:   at first position i, such that ai ≠ bi, the character ai goes earlier in the alphabet than character bi, i.e. a has smaller character in the first position where they differ;  if there is no such position i and m ≤ k, i.e. the first word is a prefix of the second or two words are equal. The sequence of words is said to be sorted in lexicographical order if each word (except the last one) is lexicographically not greater than the next word.In the first sample, after the round switch is rotated 1 position clockwise the words look as follows:1 323 1 23 1 2 3In the second sample, words are already sorted in lexicographical order.In the last sample, one can check that no shift of the alphabet will work.",
    "prob_desc_description": "Archeologists have found a secret pass in the dungeon of one of the pyramids of Cycleland. To enter the treasury they have to open an unusual lock on the door. The lock consists of n words, each consisting of some hieroglyphs. The wall near the lock has a round switch. Each rotation of this switch changes the hieroglyphs according to some rules. The instruction nearby says that the door will open only if words written on the lock would be sorted in lexicographical order (the definition of lexicographical comparison in given in notes section).The rule that changes hieroglyphs is the following. One clockwise rotation of the round switch replaces each hieroglyph with the next hieroglyph in alphabet, i.e. hieroglyph x (1 ≤ x ≤ c - 1) is replaced with hieroglyph (x + 1), and hieroglyph c is replaced with hieroglyph 1.Help archeologist determine, how many clockwise rotations they should perform in order to open the door, or determine that this is impossible, i.e. no cyclic shift of the alphabet will make the sequence of words sorted lexicographically.",
    "prob_desc_output_spec": "If it is possible to open the door by rotating the round switch, print integer x (0 ≤ x ≤ c - 1) that defines the required number of clockwise rotations. If there are several valid x, print any of them. If it is impossible to open the door by this method, print  - 1.",
    "prob_desc_input_spec": "The first line of the input contains two integers n and c (2 ≤ n ≤ 500 000, 1 ≤ c ≤ 106) — the number of words, written on the lock, and the number of different hieroglyphs. Each of the following n lines contains the description of one word. The i-th of these lines starts with integer li (1 ≤ li ≤ 500 000), that denotes the length of the i-th word, followed by li integers wi, 1, wi, 2, ..., wi, li (1 ≤ wi, j ≤ c) — the indices of hieroglyphs that make up the i-th word. Hieroglyph with index 1 is the smallest in the alphabet and with index c — the biggest. It's guaranteed, that the total length of all words doesn't exceed 106.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_071.jsonl",
    "code_uid": "0a2164294c8e69ec2951a60fe499204f",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 3\\n2 3 2\\n1 1\\n3 2 3 1\\n4 2 3 1 2\", \"2 5\\n2 4 2\\n2 4 2\", \"4 4\\n1 2\\n1 3\\n1 4\\n1 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "#!/usr/bin/env python\n# coding: utf-8\n\nif __name__ == '__main__':\n    import sys\n    f = sys.stdin\n\n    if False:\n        import StringIO\n        f = StringIO.StringIO(\"\"\"4 3\n2 3 2\n1 1\n3 2 3 1\n4 2 3 1 2\"\"\")\n\n        f = StringIO.StringIO(\"\"\"2 5\n2 4 2\n2 4 2\"\"\")\n\n        f = StringIO.StringIO(\"\"\"4 4\n1 2\n1 3\n1 4\n1 2\"\"\")\n\n        f = StringIO.StringIO(\"\"\"2 10\n14 9 6 7 1 6 9 3 1 9 4 6 8 8 1\n3 3 7 6\"\"\")\n\n        f = StringIO.StringIO(\"\"\"4 4\n1 3\n1 4\n1 1\n1 2\"\"\")\n\n    if False:\n        with open(\"/home/ilya/opt/programming/tasks/731D_gen.txt\", \"w\") as f:\n            n, alp_cnt = 500000, 10**6\n            f.write(\"%(n)s %(alp_cnt)s\\n\" % locals())\n\n            import random\n\n            ln = 10**6 / n\n            for i in xrange(n):\n                lst = [ln]\n                for j in xrange(ln):\n                    lst.append(random.randint(1, alp_cnt))\n\n                f.write(\"%s\\n\" % \" \".join(str(k) for k in lst))\n\n            sys.exit(0)\n\n    def getline():\n        return next(f).rstrip('\\n\\r')\n\n    def read_int_line():\n        return map(int, next(f).split())\n\n    n, alp_cnt = read_int_line()\n\n    assert n > 1\n    def read_word():\n        return read_int_line()[1:]\n\n    set_lst = [0] * (alp_cnt + 1)\n    def add_range(x, y):\n        set_lst[x] += 1\n        set_lst[y] -= 1\n\n    prev_word = read_word()\n    bad_prefix = False\n    for i in xrange(1, n):\n        word = read_word()\n\n        is_prefix = True\n\n        ln  = len(prev_word)\n        ln2 = len(word)\n        for i in xrange(min(ln, ln2)):\n            c, c2 = prev_word[i]-1, word[i]-1\n\n            diff = c - c2\n            if diff == 0:\n                pass\n            else:\n                # дополнения\n                if diff < 0:\n                    # [alp_cnt - c2, alp_cnt - c)\n                    add_range(alp_cnt - c2, alp_cnt - c)\n                else:\n                    # дополнения: [alp_cnt - c2, alp_cnt), [0, alp_cnt - c)\n                    add_range(alp_cnt - c2, alp_cnt)\n                    add_range(0, alp_cnt - c)\n\n                is_prefix = False\n                break\n\n        if is_prefix and ln > ln2:\n            bad_prefix = True\n            break\n\n        prev_word = word\n\n    res = -1\n    if not bad_prefix:\n        state = 0\n        #for i in xrange(alp_cnt):\n        for i, v in enumerate(set_lst):\n            state += set_lst[i]\n            if state == 0:\n                break\n        if i < alp_cnt:\n            res = i\n    print res\n",
    "prob_desc_created_at": "1476611100",
    "tags": [
        "data structures",
        "sortings",
        "greedy",
        "brute force"
    ],
    "hidden_unit_tests": ""
}