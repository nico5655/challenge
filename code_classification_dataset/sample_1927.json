{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"NO\", \"YES\\n1 1 1\\n1 1 1\", \"YES\\n0 0 0\\n0 1 0\"]",
    "src_uid": "bacd613dc8a91cee8bef87b787e878ca",
    "prob_desc_notes": null,
    "prob_desc_description": "Let's define logical OR as an operation on two logical values (i. e. values that belong to the set {0, 1}) that is equal to 1 if either or both of the logical values is set to 1, otherwise it is 0. We can define logical OR of three or more logical values in the same manner: where  is equal to 1 if some ai = 1, otherwise it is equal to 0.Nam has a matrix A consisting of m rows and n columns. The rows are numbered from 1 to m, columns are numbered from 1 to n. Element at row i (1 ≤ i ≤ m) and column j (1 ≤ j ≤ n) is denoted as Aij. All elements of A are either 0 or 1. From matrix A, Nam creates another matrix B of the same size using formula:.(Bij is OR of all elements in row i and column j of matrix A)Nam gives you matrix B and challenges you to guess matrix A. Although Nam is smart, he could probably make a mistake while calculating matrix B, since size of A can be large.",
    "prob_desc_output_spec": "In the first line, print \"NO\" if Nam has made a mistake when calculating B, otherwise print \"YES\". If the first line is \"YES\", then also print m rows consisting of n integers representing matrix A that can produce given matrix B. If there are several solutions print any one.",
    "prob_desc_input_spec": "The first line contains two integer m and n (1 ≤ m, n ≤ 100), number of rows and number of columns of matrices respectively. The next m lines each contain n integers separated by spaces describing rows of matrix B (each element of B is either 0 or 1).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1300,
    "file_name": "train_014.jsonl",
    "code_uid": "0e45d8b0e15570853c3682b02ee3205a",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2 2\\n1 0\\n0 0\", \"2 3\\n1 1 1\\n1 1 1\", \"2 3\\n0 1 0\\n1 1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "m,n = map(int,raw_input().split())\nB = [map(int,raw_input().split()) for _ in range(m)]\nA = [[1]*n for _ in range(m)]\n\nfor r in range(m):\n    for c in range(n):\n        if B[r][c] == 0:\n            for cc in range(n): A[r][cc] = 0\n            for rr in range(m): A[rr][c] = 0\n\nfail = False\nfor r in range(m):\n    for c in range(n):\n        if B[r][c] == 1:\n            if 1 not in A[r] and 1 not in [A[rr][c] for rr in range(m)]:\n                fail = True\n                break\n    if fail: break\n\nif fail: print \"NO\"\nelse:\n    print \"YES\"\n    for line in A:\n        print \" \".join(map(str,line))",
    "prob_desc_created_at": "1415718000",
    "tags": [
        "implementation",
        "hashing",
        "greedy"
    ],
    "hidden_unit_tests": ""
}