{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1\\n12\\n830455698\\n890287984\"]",
    "src_uid": "19a2550af6a46308fd92c7a352f12a5f",
    "prob_desc_notes": "Note$$$n=1$$$, there is only one permutation that satisfies the condition: $$$[1,2].$$$In permutation $$$[1,2]$$$, $$$p_1&lt;p_2$$$, and there is one $$$i=1$$$ satisfy the condition. Since $$$1 \\geq n$$$, this permutation should be counted. In permutation $$$[2,1]$$$, $$$p_1&gt;p_2$$$. Because $$$0&lt;n$$$, this permutation should not be counted.$$$n=2$$$, there are $$$12$$$ permutations: $$$[1,2,3,4],[1,2,4,3],[1,3,2,4],[1,3,4,2],[1,4,2,3],[2,1,3,4],[2,3,1,4],[2,3,4,1],[2,4,1,3],[3,1,2,4],[3,4,1,2],[4,1,2,3].$$$",
    "prob_desc_description": "CQXYM is counting permutations length of $$$2n$$$.A permutation is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array) and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array).A permutation $$$p$$$(length of $$$2n$$$) will be counted only if the number of $$$i$$$ satisfying $$$p_i&lt;p_{i+1}$$$ is no less than $$$n$$$. For example:  Permutation $$$[1, 2, 3, 4]$$$ will count, because the number of such $$$i$$$ that $$$p_i&lt;p_{i+1}$$$ equals $$$3$$$ ($$$i = 1$$$, $$$i = 2$$$, $$$i = 3$$$). Permutation $$$[3, 2, 1, 4]$$$ won't count, because the number of such $$$i$$$ that $$$p_i&lt;p_{i+1}$$$ equals $$$1$$$ ($$$i = 3$$$). CQXYM wants you to help him to count the number of such permutations modulo $$$1000000007$$$ ($$$10^9+7$$$).In addition, modulo operation is to get the remainder. For example:  $$$7 \\mod 3=1$$$, because $$$7 = 3 \\cdot 2 + 1$$$,  $$$15 \\mod 4=3$$$, because $$$15 = 4 \\cdot 3 + 3$$$. ",
    "prob_desc_output_spec": "For each test case, print the answer in a single line.",
    "prob_desc_input_spec": "The input consists of multiple test cases.  The first line contains an integer $$$t (t \\geq 1)$$$ â€” the number of test cases. The description of the test cases follows. Only one line of each test case contains an integer $$$n(1 \\leq n \\leq 10^5)$$$. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_089.jsonl",
    "code_uid": "a66427931928da61b17f883432f76b8e",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n1\\n2\\n9\\n91234\"]",
    "exec_outcome": "PASSED",
    "source_code": "mod = (10**9)+7\r\n \r\ndef fact( n ):\r\n    f = 1\r\n    for i in range( 3 , n+1):\r\n        f = (f* i) % mod\r\n    return f\r\n \r\nfor _ in range(int(input())):\r\n    a = int(input()) * 2\r\n    print(  fact(a)  )",
    "prob_desc_created_at": "1632996900",
    "tags": [
        "combinatorics",
        "math",
        "number theory"
    ],
    "hidden_unit_tests": ""
}