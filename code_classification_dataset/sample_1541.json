{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\\n1\\n0\", \"1\\n1\\n1\\n1\\n2\"]",
    "src_uid": "e3ec343143419592e73d4be13bcf1cb5",
    "prob_desc_notes": "NoteLet's consider the first sample.     The figure above shows the first sample.    Vertex 1 and vertex 2 are connected by color 1 and 2.  Vertex 3 and vertex 4 are connected by color 3.  Vertex 1 and vertex 4 are not connected by any single color. ",
    "prob_desc_description": "Mr. Kitayuta has just bought an undirected graph consisting of n vertices and m edges. The vertices of the graph are numbered from 1 to n. Each edge, namely edge i, has a color ci, connecting vertex ai and bi.Mr. Kitayuta wants you to process the following q queries.In the i-th query, he gives you two integers — ui and vi.Find the number of the colors that satisfy the following condition: the edges of that color connect vertex ui and vertex vi directly or indirectly.",
    "prob_desc_output_spec": "For each query, print the answer in a separate line.",
    "prob_desc_input_spec": "The first line of the input contains space-separated two integers — n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 100), denoting the number of the vertices and the number of the edges, respectively. The next m lines contain space-separated three integers — ai, bi (1 ≤ ai &lt; bi ≤ n) and ci (1 ≤ ci ≤ m). Note that there can be multiple edges between two vertices. However, there are no multiple edges of the same color between two vertices, that is, if i ≠ j, (ai, bi, ci) ≠ (aj, bj, cj). The next line contains a integer — q (1 ≤ q ≤ 100), denoting the number of the queries. Then follows q lines, containing space-separated two integers — ui and vi (1 ≤ ui, vi ≤ n). It is guaranteed that ui ≠ vi.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_010.jsonl",
    "code_uid": "d57150c686abc0bf12ea6e99f17ce1a9",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 5\\n1 2 1\\n1 2 2\\n2 3 1\\n2 3 3\\n2 4 3\\n3\\n1 2\\n3 4\\n1 4\", \"5 7\\n1 5 1\\n2 5 1\\n3 5 1\\n4 5 1\\n1 2 2\\n2 3 2\\n3 4 2\\n5\\n1 5\\n5 1\\n2 5\\n1 5\\n1 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "n, m = map(int, raw_input().split(' '))\nmp = [[set() for j in range(0, n)] for i in range(0, n)]\nfor i in range(0, m):\n    a, b, c = map(int, raw_input().split(' '))\n    a -= 1\n    b -= 1\n    if c not in mp[a][b]:\n        mp[a][b].add(c)\n        mp[b][a].add(c)\n# print mp\nfor k in range(0, n):\n    for i in range(0, n):\n        for j in range(0, n):\n            mp[i][j] |= (mp[i][k]&mp[k][j])\n# print mp\nq = int(raw_input())\nfor i in range(0, q):\n    u, v = map(int, raw_input().split(' '))\n    u -= 1\n    v -= 1\n    print len(mp[u][v]) if mp[u][v] else 0",
    "prob_desc_created_at": "1421586000",
    "tags": [
        "dp",
        "dsu",
        "dfs and similar",
        "graphs"
    ],
    "hidden_unit_tests": ""
}