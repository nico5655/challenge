{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"4\\n10\\n0\\n-1\"]",
    "src_uid": "589f3f7366d1e0f9185ed0926f5a10bb",
    "prob_desc_notes": "NoteIn the first example, you have to make 4 successful submissions. Your success rate will be equal to 7 / 14, or 1 / 2.In the second example, you have to make 2 successful and 8 unsuccessful submissions. Your success rate will be equal to 9 / 24, or 3 / 8.In the third example, there is no need to make any new submissions. Your success rate is already equal to 20 / 70, or 2 / 7.In the fourth example, the only unsuccessful submission breaks your hopes of having the success rate equal to 1.",
    "prob_desc_description": "You are an experienced Codeforces user. Today you found out that during your activity on Codeforces you have made y submissions, out of which x have been successful. Thus, your current success rate on Codeforces is equal to x / y.Your favorite rational number in the [0;1] range is p / q. Now you wonder: what is the smallest number of submissions you have to make if you want your success rate to be p / q?",
    "prob_desc_output_spec": "For each test case, output a single integer equal to the smallest number of submissions you have to make if you want your success rate to be equal to your favorite rational number, or -1 if this is impossible to achieve.",
    "prob_desc_input_spec": "The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains four integers x, y, p and q (0 ≤ x ≤ y ≤ 109; 0 ≤ p ≤ q ≤ 109; y &gt; 0; q &gt; 0). It is guaranteed that p / q is an irreducible fraction. Hacks. For hacks, an additional constraint of t ≤ 5 must be met.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_022.jsonl",
    "code_uid": "3250c5ec22718575ee713bdced1eae72",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n3 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "def check(k):\n    n1 = k*p - x\n    n2 = k*q - y\n    assert(n1 >= 0)\n    return n1 <= n2\n\nt = int(input())\nfor _ in range(t):\n  [x, y, p, q] = list(map(int, input().split(\" \")))\n  if p == 0 and x > 0:\n      print(-1)\n      continue\n  if p == 0 and x == 0:\n      print(0)\n      continue\n  st = max((x+p-1)//p, (y+q-1)//q)\n  a = st-1\n  b = 10**18\n  while(b - a > 1):\n    m = (a+b)//2\n    if check(m):\n        b = m\n    else:\n        a = m\n  res = -1\n  if b != 1e18:\n    res = b*q - y\n  print(res)\n",
    "prob_desc_created_at": "1494171900",
    "tags": [
        "binary search",
        "math"
    ],
    "hidden_unit_tests": ""
}