{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"4\\nrow 1\\nrow 1\\ncol 4\\nrow 3\", \"-1\", \"3\\nrow 1\\nrow 2\\nrow 3\"]",
    "src_uid": "b19ab2db46484f0c9b49cf261502bf64",
    "prob_desc_notes": "NoteIn the first test case, Karen has a grid with 3 rows and 5 columns. She can perform the following 4 moves to beat the level:  In the second test case, Karen has a grid with 3 rows and 3 columns. It is clear that it is impossible to beat the level; performing any move will create three 1s on the grid, but it is required to only have one 1 in the center.In the third test case, Karen has a grid with 3 rows and 3 columns. She can perform the following 3 moves to beat the level:  Note that this is not the only solution; another solution, among others, is col 1, col 2, col 3.",
    "prob_desc_description": "On the way to school, Karen became fixated on the puzzle game on her phone!  The game is played as follows. In each level, you have a grid with n rows and m columns. Each cell originally contains the number 0.One move consists of choosing one row or column, and adding 1 to all of the cells in that row or column.To win the level, after all the moves, the number in the cell at the i-th row and j-th column should be equal to gi, j.Karen is stuck on one level, and wants to know a way to beat this level using the minimum number of moves. Please, help her with this task!",
    "prob_desc_output_spec": "If there is an error and it is actually not possible to beat the level, output a single integer -1. Otherwise, on the first line, output a single integer k, the minimum number of moves necessary to beat the level. The next k lines should each contain one of the following, describing the moves in the order they must be done:   row x, (1 ≤ x ≤ n) describing a move of the form \"choose the x-th row\".  col x, (1 ≤ x ≤ m) describing a move of the form \"choose the x-th column\".  If there are multiple optimal solutions, output any one of them.",
    "prob_desc_input_spec": "The first line of input contains two integers, n and m (1 ≤ n, m ≤ 100), the number of rows and the number of columns in the grid, respectively. The next n lines each contain m integers. In particular, the j-th integer in the i-th of these rows contains gi, j (0 ≤ gi, j ≤ 500).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_004.jsonl",
    "code_uid": "a153eeff65891fce8250a6d5dc6e7813",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\", \"3 3\\n0 0 0\\n0 1 0\\n0 0 0\", \"3 3\\n1 1 1\\n1 1 1\\n1 1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "n,m=input().split()\nn=int(n)\nm=int(m)\n\na=[]\nfor i in range(n):\n    x=input().split()\n    x=[int(p) for p in x]\n    a.append(x)\n\n\nif n<=m:\n    ans=''\n    step=0\n    for i in range(n):\n        t=500\n        for j in range(m):\n            t=min(t,a[i][j])\n        ans+=('row'+' '+str(i+1)+'\\n')*t\n        step+=t\n        for j in range(m):\n            a[i][j]-=t\n\n    can=True\n    for j in range(m):\n        t=a[0][j]\n        for i in range(n):\n            if a[i][j]!=t:\n                can=False\n        step+=t\n        ans+=('col'+' '+str(j+1)+'\\n')*t\n\n    if can:\n        print(step)\n        print(ans)\n    else:\n        print(-1)\nelse:\n    ans=''\n    step=0\n    for j in range(m):\n        t=500\n        for i in range(n):\n            t=min(t,a[i][j])\n        ans+=('col'+' '+str(j+1)+'\\n')*t\n        step+=t\n        for i in range(n):\n            a[i][j]-=t\n\n    can=True\n    for i in range(n):\n        t=a[i][0]\n        for j in range(m):\n            if a[i][j]!=t:\n                can=False\n        step+=t\n        ans+=('row'+' '+str(i+1)+'\\n')*t\n\n    if can:\n        print(step)\n        print(ans)\n    else:\n        print(-1)\n",
    "prob_desc_created_at": "1497710100",
    "tags": [
        "implementation",
        "greedy",
        "brute force"
    ],
    "hidden_unit_tests": ""
}