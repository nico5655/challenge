{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"6\", \"6669\", \"-1\"]",
    "src_uid": "f600da9b1ec2dbe4f91cd7dbc133f1d1",
    "prob_desc_notes": null,
    "prob_desc_description": "A positive integer $$$a$$$ is given. Baron Munchausen claims that he knows such a positive integer $$$n$$$ that if one multiplies $$$n$$$ by $$$a$$$, the sum of its digits decreases $$$a$$$ times. In other words, $$$S(an) = S(n)/a$$$, where $$$S(x)$$$ denotes the sum of digits of the number $$$x$$$. Find out if what Baron told can be true.",
    "prob_desc_output_spec": "If there is no such number $$$n$$$, print $$$-1$$$. Otherwise print any appropriate positive integer $$$n$$$. Your number must not consist of more than $$$5\\cdot10^5$$$ digits. We can show that under given constraints either there is no answer, or there is an answer no longer than $$$5\\cdot10^5$$$ digits.",
    "prob_desc_input_spec": "The only line contains a single integer $$$a$$$ ($$$2 \\le a \\le 10^3$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2600,
    "file_name": "train_045.jsonl",
    "code_uid": "52d908d26cbfeb5a7adee74eb2941622",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\", \"3\", \"10\"]",
    "exec_outcome": "PASSED",
    "source_code": "#!/bin/pypy3\nfrom itertools import*\nfrom timeit import*\nfrom typing import Optional\n\nS=lambda x:sum(map(int,str(x)))\n\ndef ceil_s_divisible_a(x:int,a:int) -> Optional[int]:\n\tz=S(x)%a\n\tif z:\n\t\tz=a-z\n\t\ttail=[]\n\t\tx=list(str(x))\n\t\twhile x:\n\t\t\tdigit=x.pop()\n\t\t\tdiff=min(z,9-int(digit))\n\t\t\tz-=diff\n\t\t\ttail.append(str(int(digit)+diff))\n\t\t\tif z==0:break\n\t\telse:\n\t\t\treturn ceil_s_divisible_a(10**len(tail),a)\n\t\tx=''.join(x) + ''.join(reversed(tail))\n\n\tassert S(x)%a==0\n\tx=int(x)\n\treturn x\n\ndef smooth25(a):\n\ta=int(bin(a).rstrip('0'),2)\n\twhile a%5==0: a//=5\n\treturn a==1\n\ndef solve(a):\n\tfor first in range(1,60): # 120\n\t\tq=str((first*10**3000+a-1) // a) # 5000\n\t\tfor s1 in range(1,200):\n\t\t\ti=1\n\t\t\ts2=int(q[0])\n\t\t\twhile i<len(q) and s2<s1*a-10: s2+=int(q[i]); i+=1\n\t\t\tfor len1 in range(i,min(i+10,len(q))):\n\t\t\t\tsmall=int(q[:len1])\n\t\t\t\tfor z in range(4): # 10\n\t\t\t\t\tsmall=ceil_s_divisible_a(small,a)\n\t\t\t\t\tif S(small*a)*a==S(small):\n\t\t\t\t\t\treturn small\n\t\t\t\t\tsmall+=1\n\n\treturn None\n\ndef powform(x:int)->str:\n\ts=str(x)\n\ttry:\n\t\ti=s.find('00000')\n\t\treturn f'{s[:i]} * 10 ** {len(s)-i} + {int(s[i:])}'\n\texcept IndexError:\n\t\treturn str(x)\n\nif 0:\n\t#for a in (a for a in range(2,1000)):\n\tfor a in [999,909,813,777,957,921,855,933,831,942,891,846,807,783,888][1::3]:\n\t#for a in [32]:\n\n\t\tdef work():\n\t\t\tglobal x\n\t\t\tx=solve(a)\n\n\t\tt=timeit(work,number=1)\n\t\tif t>0.5 or x==None:\n\t\t\tif x!=None:\n\t\t\t\tprint(a,t,'>>',powform(a*x))\n\t\t\telse:\n\t\t\t\tprint(a,t,'>> ?????')\n\n\t#print(solve(int(input())))\n\n\nspecial='''\n660 0.5026652759997887 >> 3 * 10 ** 2640 + 35340\n803 0.5102322779994211 >> 3 * 10 ** 2678 + 1614\n912 0.5136937369998122 >> 3 * 10 ** 1825 + 240\n918 0.5238579140004731 >> 3 * 10 ** 1813 + 1104\n582 0.5302371079997101 >> 2 * 10 ** 2328 + 17116\n612 0.5363936909998301 >> 2 * 10 ** 2413 + 10348\n495 0.5372351949999938 >> 3 * 10 ** 2969 + 16305\n927 0.5433051690006323 >> 3 * 10 ** 2195 + 21003\n636 0.5471086210000067 >> 3 * 10 ** 1379 + 20004\n531 0.5475810970001476 >> 2 * 10 ** 2140 + 439\n64 0.5633312410000144 >> ?????\n200 0.5639609099998779 >> ?????\n100 0.565854023000611 >> ?????\n125 0.5663040710005589 >> ?????\n160 0.5668467480008985 >> ?????\n800 0.5676178080002501 >> ?????\n128 0.5676772269998764 >> ?????\n80 0.5682811480000964 >> ?????\n256 0.5685735130000467 >> ?????\n250 0.5691464900000938 >> ?????\n512 0.569266141999833 >> ?????\n32 0.5692826909998985 >> ?????\n50 0.5692834940000466 >> ?????\n25 0.5696684799995637 >> ?????\n400 0.5703751219998594 >> ?????\n20 0.5706145570002263 >> ?????\n500 0.5742691679997733 >> ?????\n640 0.5749700739997934 >> ?????\n40 0.5768258159996549 >> ?????\n625 0.5775357299999087 >> ?????\n16 0.5789494729997386 >> ?????\n833 0.5855263899993588 >> 3 * 10 ** 2286 + 1404\n792 0.5996652009998797 >> 3 * 10 ** 1903 + 16008\n320 0.6031684260005932 >> ?????\n10 0.6464516910000384 >> ?????\n546 0.6579458010000963 >> 3 * 10 ** 2184 + 2454\n5 0.6617960960002165 >> ?????\n907 0.664109037000344 >> 3 * 10 ** 2538 + 2223\n923 0.6807242180002504 >> 2 * 10 ** 2476 + 4141\n723 0.6976773409996895 >> 3 * 10 ** 2892 + 1185\n825 0.701172955000402 >> 4 * 10 ** 2476 + 123350\n906 0.7062042559991824 >> 4 * 10 ** 1998 + 104\n905 0.7086789289996887 >> 2 * 10 ** 2412 + 1540\n911 0.711649564000254 >> 2 * 10 ** 2612 + 2044\n934 0.7246100349993867 >> 2 * 10 ** 2570 + 51112\n765 0.7552886830007992 >> 3 * 10 ** 2939 + 1725\n981 0.7653923980005857 >> 4 * 10 ** 1965 + 1022\n333 0.7884190810000291 >> 3 * 10 ** 2994 + 62934\n663 0.8130600629992841 >> 3 * 10 ** 2546 + 11634\n444 0.8443964660000347 >> 3 * 10 ** 1999 + 13956\n720 0.8445076829993923 >> 2 * 10 ** 2779 + 159280\n867 0.9858260920000248 >> 5 * 10 ** 1739 + 121\n914 1.0558696210000562 >> 3 * 10 ** 1831 + 222\n606 1.1190159360003236 >> 5 * 10 ** 2910 + 1318\n948 1.1529914639995695 >> 6 * 10 ** 2466 + 1020\n1000 1.2245053040005587 >> ?????\n741 1.2366985769995154 >> 5 * 10 ** 2669 + 175\n819 1.292531102999419 >> 8 * 10 ** 2949 + 31312\n867 1.293641017000482 >> 5 * 10 ** 1739 + 121\n961 1.431375496000328 >> 4 * 10 ** 1935 + 1112\n913 2.0632996949998414 >> 5 * 10 ** 2323 + 16\n861 2.1641551399998207 >> 11 * 10 ** 1847 + 1114\n992 2.2718322470000203 >> 11 * 10 ** 2207 + 1504\n936 2.3109037909998733 >> 11 * 10 ** 2108 + 3112\n996 2.3603119750005135 >> 11 * 10 ** 1979 + 4300\n951 2.380345242999283 >> 11 * 10 ** 1820 + 412\n969 2.471255187000679 >> 11 * 10 ** 1942 + 241\n828 2.504634874999283 >> 11 * 10 ** 1595 + 11212\n693 2.5246166990000347 >> 13 * 10 ** 2494 + 423014\n840 2.5490226490001078 >> 11 * 10 ** 1681 + 13120\n983 2.618962229999852 >> 11 * 10 ** 1968 + 5011\n963 2.641272683999887 >> 11 * 10 ** 2026 + 133\n972 2.741184581000198 >> 12 * 10 ** 2130 + 312\n555 2.787974407000547 >> 11 * 10 ** 2497 + 444445\n873 2.8377116049996403 >> 11 * 10 ** 1774 + 133\n903 2.898315477000324 >> 13 * 10 ** 1726 + 32\n804 2.9635119349995875 >> 12 * 10 ** 1659 + 1500\n864 3.032601443999738 >> 13 * 10 ** 2747 + 34016\n759 3.0681308859993806 >> 13 * 10 ** 2504 + 311441\n871 3.4960390779997397 >> 13 * 10 ** 2995 + 2405\n902 4.413119433999782 >> 12 * 10 ** 1506 + 1110\n997 4.446912733999852 >> 11 * 10 ** 1999 + 7\n993 5.025415283999791 >> 23 * 10 ** 2130 + 31\n837 5.286188959000356 >> 25 * 10 ** 2722 + 11063\n786 5.390603378999913 >> 21 * 10 ** 1572 + 4002\n801 5.4837765329994 >> 22 * 10 ** 1645 + 212\n882 6.045185064999714 >> 22 * 10 ** 1822 + 1130\n990 6.413724044000446 >> 39 * 10 ** 2970 + 302010\n666 6.967028857000514 >> 33 * 10 ** 2997 + 32934\n941 6.982767053000316 >> 21 * 10 ** 1885 + 312\n924 7.134165846000542 >> 34 * 10 ** 2772 + 1110152\n858 8.089877333000004 >> 41 * 10 ** 2573 + 12201142\n939 8.241953895999359 >> 33 * 10 ** 1879 + 20001\n813 3.1825667919993066 >> 3 * 10 ** 4065 + 7314\n921 1.9310127280004963 >> 1 * 10 ** 3762 + 18008\n831 1.683305384999585 >> 1 * 10 ** 3702 + 1646\n846 1.4100486610004737 >> 1 * 10 ** 3419 + 44234\n888 6.891388972000641 >> 3 * 10 ** 3998 + 27672\n909 11.340291348999926 >> 7 * 10 ** 4673 + 17201\n957 1.3982879649993265 >> 1 * 10 ** 4347 + 28403\n933 0.9980270719997861 >> 1 * 10 ** 3746 + 233234\n891 0.8806926099996417 >> 1 * 10 ** 3957 + 1079\n783 0.6478317080000124 >> 1 * 10 ** 3162 + 22814\n999 102.2252583720001 >> 89 * 10 ** 4760 + 20071\n777 37.847382832999756 >> 24 * 10 ** 4661 + 474123\n855 0.934857464999368 >> 1 * 10 ** 3420 + 21545\n942 1.0410122209996189 >> 1 * 10 ** 4198 + 310058\n807 0.7532789589995446 >> 1 * 10 ** 3234 + 1307123\n'''\n\na=int(input())\nfor line in special.splitlines():\n\tif line:\n\t\texpr,out=line.split('>>')\n\t\texpr=expr.split()[0]\n\t\tif int(expr)==a:\n\t\t\tprint(-1 if out.strip()=='?????' else eval(out)//a)\n\t\t\tbreak\nelse:\n\tprint(solve(a))\n",
    "prob_desc_created_at": "1551627300",
    "tags": [
        "brute force"
    ],
    "hidden_unit_tests": ""
}