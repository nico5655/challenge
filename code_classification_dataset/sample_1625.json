{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"7\", \"15\"]",
    "src_uid": "c9b9c56d50eaf605e7bc088385a42a1d",
    "prob_desc_notes": "NoteFor the first sample you can choose s[4..5] = {4, 3} and its lucky number is (4 xor 3) = 7. You can also choose s[1..2].For the second sample you must choose s[2..5] = {8, 3, 5, 7}.",
    "prob_desc_description": "Bike loves looking for the second maximum element in the sequence. The second maximum element in the sequence of distinct numbers x1, x2, ..., xk (k &gt; 1) is such maximum element xj, that the following inequality holds: .The lucky number of the sequence of distinct positive integers x1, x2, ..., xk (k &gt; 1) is the number that is equal to the bitwise excluding OR of the maximum element of the sequence and the second maximum element of the sequence.You've got a sequence of distinct positive integers s1, s2, ..., sn (n &gt; 1). Let's denote sequence sl, sl + 1, ..., sr as s[l..r] (1 ≤ l &lt; r ≤ n). Your task is to find the maximum number among all lucky numbers of sequences s[l..r].Note that as all numbers in sequence s are distinct, all the given definitions make sence.",
    "prob_desc_output_spec": "Print a single integer — the maximum lucky number among all lucky numbers of sequences s[l..r].",
    "prob_desc_input_spec": "The first line contains integer n (1 &lt; n ≤ 105). The second line contains n distinct integers s1, s2, ..., sn (1 ≤ si ≤ 109).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_011.jsonl",
    "code_uid": "0b9a97d5413d2ee0733f910467872933",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n5 2 1 4 3\", \"5\\n9 8 3 5 7\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin\nip = stdin.readline\nip()\na = list(map(int, ip().split()))\nstk = []\nans = 0\nfor i in a:\n    while stk:\n        ans = max(ans, stk[-1]^i)\n        if stk[-1]>i: break\n        stk.pop()\n    stk.append(i)\nprint(ans)",
    "prob_desc_created_at": "1362929400",
    "tags": [
        "two pointers"
    ],
    "hidden_unit_tests": ""
}