{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"5\", \"2596\"]",
    "src_uid": "8a752a1d78876fc20ee674d4fb93d769",
    "prob_desc_notes": "NoteConsider the first example. In the given grid, cells $$$(0,0),(0,1),(1,0),(1,1)$$$ are white, and all other cells are black. Let us use triples to describe the grid: triple $$$(x,y,z)$$$ means that there are $$$z$$$ dolls placed on cell $$$(x,y)$$$. Initially the state of the grid is $$$(0,0,1)$$$.One of the optimal sequence of operations is as follows:  Do the operation with $$$(0,0)$$$. Now the state of the grid is $$$(1,0,1),(0,1,1)$$$.  Do the operation with $$$(0,1)$$$. Now the state of the grid is $$$(1,0,1),(1,1,1),(0,2,1)$$$.  Do the operation with $$$(1,0)$$$. Now the state of the grid is $$$(1,1,2),(0,2,1),(2,0,1)$$$.  Do the operation with $$$(1,1)$$$. Now the state of the grid is $$$(1,1,1),(0,2,1),(2,0,1),(1,2,1),(2,1,1)$$$.  Do the operation with $$$(1,1)$$$. Now the state of the grid is $$$(0,2,1),(2,0,1),(1,2,2),(2,1,2)$$$. Now all white cells contain $$$0$$$ dolls, so we have achieved the goal with $$$5$$$ operations.",
    "prob_desc_description": "We say an infinite sequence $$$a_{0}, a_{1}, a_2, \\ldots$$$ is non-increasing if and only if for all $$$i\\ge 0$$$, $$$a_i \\ge a_{i+1}$$$.There is an infinite right and down grid. The upper-left cell has coordinates $$$(0,0)$$$. Rows are numbered $$$0$$$ to infinity from top to bottom, columns are numbered from $$$0$$$ to infinity from left to right.There is also a non-increasing infinite sequence $$$a_{0}, a_{1}, a_2, \\ldots$$$. You are given $$$a_0$$$, $$$a_1$$$, $$$\\ldots$$$, $$$a_n$$$; for all $$$i&gt;n$$$, $$$a_i=0$$$. For every pair of $$$x$$$, $$$y$$$, the cell with coordinates $$$(x,y)$$$ (which is located at the intersection of $$$x$$$-th row and $$$y$$$-th column) is white if $$$y&lt;a_x$$$ and black otherwise.Initially there is one doll named Jina on $$$(0,0)$$$. You can do the following operation.  Select one doll on $$$(x,y)$$$. Remove it and place a doll on $$$(x,y+1)$$$ and place a doll on $$$(x+1,y)$$$. Note that multiple dolls can be present at a cell at the same time; in one operation, you remove only one. Your goal is to make all white cells contain $$$0$$$ dolls.What's the minimum number of operations needed to achieve the goal? Print the answer modulo $$$10^9+7$$$.",
    "prob_desc_output_spec": "Print one integer â€” the answer to the problem, modulo $$$10^9+7$$$.",
    "prob_desc_input_spec": "The first line of input contains one integer $$$n$$$ ($$$1\\le n\\le 2\\cdot 10^5$$$). The second line of input contains $$$n+1$$$ integers $$$a_0,a_1,\\ldots,a_n$$$ ($$$0\\le a_i\\le 2\\cdot 10^5$$$). It is guaranteed that the sequence $$$a$$$ is non-increasing.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_105.jsonl",
    "code_uid": "b1baac63e692e5af0a7eea77ab106889",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n2 2 0\", \"10\\n12 11 8 8 6 6 6 5 3 2 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "\r\n\r\nN = int(input())\r\nx = list(map(int, input().split()))\r\n\r\nans = 0\r\nMOD = 1000000007\r\n\r\nfor i in range(0, len(x)) :\r\n    x[i] += i\r\n\r\nif x[0] == 0 :\r\n    ans = 0\r\nelse :\r\n    tmp = x[0]\r\n    ll = x[0]\r\n    lr = x[0]\r\n    r = 1\r\n\r\n    for i in range(0, len(x)) :\r\n        while lr < x[i] :\r\n            lr += 1\r\n            tmp *= lr\r\n            tmp %= MOD\r\n        while lr > x[i] :\r\n            if lr > 0 :\r\n                tmp *= pow(lr, -1, MOD)\r\n                tmp %= MOD\r\n            lr -= 1\r\n        while ll > lr - i :\r\n            ll -= 1\r\n            tmp *= ll\r\n        while ll < lr - i :\r\n            if ll > 0 :\r\n                tmp *= pow(ll, -1, MOD)\r\n                tmp %= MOD\r\n            ll += 1\r\n        while r <= i :\r\n            r += 1\r\n            tmp *= pow(r, -1, MOD)\r\n            tmp %= MOD\r\n        \r\n        tmp = int(tmp)\r\n        ans += tmp\r\n        \r\n        \r\n        ans = int(ans)\r\n        ans %= MOD\r\n\r\nprint(int(ans))",
    "prob_desc_created_at": "1656167700",
    "tags": [
        "combinatorics",
        "math"
    ],
    "hidden_unit_tests": ""
}