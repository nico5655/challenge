{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\\n1\\n2\\n0\"]",
    "src_uid": "130fd7f40d879e25b0bff886046bf699",
    "prob_desc_notes": "NoteExamples for the queries $$$1-3$$$ are shown at the image in the legend section.The Russian meme to express the quality of the ladders:  ",
    "prob_desc_description": "Let's denote a $$$k$$$-step ladder as the following structure: exactly $$$k + 2$$$ wooden planks, of which  two planks of length at least $$$k+1$$$ — the base of the ladder;  $$$k$$$ planks of length at least $$$1$$$ — the steps of the ladder; Note that neither the base planks, nor the steps planks are required to be equal.For example, ladders $$$1$$$ and $$$3$$$ are correct $$$2$$$-step ladders and ladder $$$2$$$ is a correct $$$1$$$-step ladder. On the first picture the lengths of planks are $$$[3, 3]$$$ for the base and $$$[1]$$$ for the step. On the second picture lengths are $$$[3, 3]$$$ for the base and $$$[2]$$$ for the step. On the third picture lengths are $$$[3, 4]$$$ for the base and $$$[2, 3]$$$ for the steps.   You have $$$n$$$ planks. The length of the $$$i$$$-th planks is $$$a_i$$$. You don't have a saw, so you can't cut the planks you have. Though you have a hammer and nails, so you can assemble the improvised \"ladder\" from the planks.The question is: what is the maximum number $$$k$$$ such that you can choose some subset of the given planks and assemble a $$$k$$$-step ladder using them?",
    "prob_desc_output_spec": "Print $$$T$$$ integers — one per query. The $$$i$$$-th integer is the maximum number $$$k$$$, such that you can choose some subset of the planks given in the $$$i$$$-th query and assemble a $$$k$$$-step ladder using them. Print $$$0$$$ if you can't make even $$$1$$$-step ladder from the given set of planks.",
    "prob_desc_input_spec": "The first line contains a single integer $$$T$$$ ($$$1 \\le T \\le 100$$$) — the number of queries. The queries are independent. Each query consists of two lines. The first line contains a single integer $$$n$$$ ($$$2 \\le n \\le 10^5$$$) — the number of planks you have. The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^5$$$) — the lengths of the corresponding planks. It's guaranteed that the total number of planks from all queries doesn't exceed $$$10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 900,
    "file_name": "train_002.jsonl",
    "code_uid": "a17acec868989cd3e7169b864141978b",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n4\\n1 3 1 3\\n3\\n3 3 2\\n5\\n2 3 3 4 2\\n3\\n1 1 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "t=int((input()))\nl2=[]\nfor i in range(t):\n\tn=int(input())\n\n\tl1=[int(a) for a in input().split()]\n\tmax1=0\n\tmax2=0\n\tfor k in range(n):\n\t\tif(l1[k]>=max1):\n\t\t\tmax2=max1\n\t\t\tmax1=l1[k]\n\n\t\telif(l1[k]>max2):\n\t\t\tmax2=l1[k]\n\t\telse:\n\t\t\tcontinue\n\tc=0\n\tfor k in range(n):\n\t\tif(l1[k]<=max1):\n\t\t\tc+=1\n\tif(c-2<max2):\n\n\t\tl2.append(c-2)\n\telse:\n\t\tl2.append(max2-1)\nfor i in range(t):\n\tprint(l2[i])\n\n",
    "prob_desc_created_at": "1563806100",
    "tags": [
        "sortings",
        "greedy",
        "math"
    ],
    "hidden_unit_tests": ""
}