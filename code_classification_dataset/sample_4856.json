{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\", \"1\", \"3\"]",
    "src_uid": "2d3af7ca9bf074d03408d5ade3ddd14c",
    "prob_desc_notes": "NoteIn the first example, you can remove edges $$$(1, 2)$$$ and $$$(2, 3)$$$. $$$\\mathit{in} = [0, 1, 2]$$$, $$$\\mathit{out} = [2, 1, 0]$$$. $$$\\mathit{in'} = [0, 0, 1]$$$, $$$\\mathit{out'} = [1, 0, 0]$$$. You can see that for all $$$v$$$ the conditions hold. The maximum cute set $$$S$$$ is formed by vertices $$$1$$$ and $$$3$$$. They are still connected directly by an edge, so there is a path between them.In the second example, there are no edges. Since all $$$\\mathit{in}_v$$$ and $$$\\mathit{out}_v$$$ are equal to $$$0$$$, leaving a graph with zero edges is allowed. There are $$$5$$$ cute sets, each contains a single vertex. Thus, the maximum size is $$$1$$$.In the third example, you can remove edges $$$(7, 1)$$$, $$$(2, 4)$$$, $$$(1, 3)$$$ and $$$(6, 2)$$$. The maximum cute set will be $$$S = \\{7, 3, 2\\}$$$. You can remove edge $$$(7, 3)$$$ as well, and the answer won't change.Here is the picture of the graph from the third example:   ",
    "prob_desc_description": "You are given a directed acyclic graph, consisting of $$$n$$$ vertices and $$$m$$$ edges. The vertices are numbered from $$$1$$$ to $$$n$$$. There are no multiple edges and self-loops.Let $$$\\mathit{in}_v$$$ be the number of incoming edges (indegree) and $$$\\mathit{out}_v$$$ be the number of outgoing edges (outdegree) of vertex $$$v$$$.You are asked to remove some edges from the graph. Let the new degrees be $$$\\mathit{in'}_v$$$ and $$$\\mathit{out'}_v$$$.You are only allowed to remove the edges if the following conditions hold for every vertex $$$v$$$:   $$$\\mathit{in'}_v &lt; \\mathit{in}_v$$$ or $$$\\mathit{in'}_v = \\mathit{in}_v = 0$$$;  $$$\\mathit{out'}_v &lt; \\mathit{out}_v$$$ or $$$\\mathit{out'}_v = \\mathit{out}_v = 0$$$. Let's call a set of vertices $$$S$$$ cute if for each pair of vertices $$$v$$$ and $$$u$$$ ($$$v \\neq u$$$) such that $$$v \\in S$$$ and $$$u \\in S$$$, there exists a path either from $$$v$$$ to $$$u$$$ or from $$$u$$$ to $$$v$$$ over the non-removed edges.What is the maximum possible size of a cute set $$$S$$$ after you remove some edges from the graph and both indegrees and outdegrees of all vertices either decrease or remain equal to $$$0$$$?",
    "prob_desc_output_spec": "Print a single integer — the maximum possible size of a cute set $$$S$$$ after you remove some edges from the graph and both indegrees and outdegrees of all vertices either decrease or remain equal to $$$0$$$.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$; $$$0 \\le m \\le 2 \\cdot 10^5$$$) — the number of vertices and the number of edges of the graph. Each of the next $$$m$$$ lines contains two integers $$$v$$$ and $$$u$$$ ($$$1 \\le v, u \\le n$$$; $$$v \\neq u$$$) — the description of an edge. The given edges form a valid directed acyclic graph. There are no multiple edges.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_107.jsonl",
    "code_uid": "305b68a8a50ca10807d07a0e434f1b3d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 3\\n1 2\\n2 3\\n1 3\", \"5 0\", \"7 8\\n7 1\\n1 3\\n6 2\\n2 3\\n7 2\\n2 4\\n7 3\\n6 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\nfrom collections import defaultdict\r\nn, m = tuple(map(int,input().split()))\r\nadj = defaultdict(list)\r\nindg = [0] * n\r\noutdg = [0] * n\r\ndp = [1] * n\r\nvis = set()\r\nfinish = []\r\n\r\ndef dfs(u):\r\n    vis.add(u)\r\n    for v in adj[u]:\r\n        if v not in vis:\r\n            dfs(v)\r\n    finish.append(u)\r\n\r\nfor _ in range(m):     \r\n    u, v = tuple(map(int,input().split()))\r\n    u -= 1\r\n    v -= 1\r\n    adj[u].append(v)\r\n    indg[v] += 1\r\n    outdg[u] += 1\r\n    \r\nfor i in range(n):\r\n    if i not in vis:\r\n        stk = [i] \r\n        while stk:\r\n            u = stk.pop()\r\n            if u in vis:\r\n                finish.append(u)\r\n                continue\r\n            vis.add(u)\r\n            stk.append(u)\r\n            for v in adj[u]:\r\n                if v not in vis:\r\n                    stk.append(v)         \r\nres = 1\r\nfor i in finish:\r\n    if outdg[i] > 1:\r\n        for v in adj[i]:\r\n            if indg[v] > 1:\r\n                dp[i] = max(dp[i], dp[v] + 1)\r\n        res = max(res, dp[i])\r\n                \r\nprint(res)",
    "prob_desc_created_at": "1651502100",
    "tags": [
        "dfs and similar",
        "dp",
        "graphs"
    ],
    "hidden_unit_tests": ""
}