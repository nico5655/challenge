{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"3 2\", \"1 0\"]",
    "src_uid": "3c9fb72577838f54b1670e84b4b60c61",
    "prob_desc_notes": "NoteIn the first test sample the first marker should be closed by the fourth cap, the second marker should be closed by the first cap and the third marker should be closed by the second cap. Thus, three markers will be closed, and two of them will be beautifully closed — the first and the third markers.",
    "prob_desc_description": "Polycarpus has n markers and m marker caps. Each marker is described by two numbers: xi is the color and yi is the diameter. Correspondingly, each cap is described by two numbers: aj is the color and bj is the diameter. Cap (aj, bj) can close marker (xi, yi) only if their diameters match, that is, bj = yi. Besides, a marker is considered to be beautifully closed, if the cap color and the marker color match, that is, aj = xi.Find the way to close the maximum number of markers. If there are several such ways, then choose the one that has the maximum number of beautifully closed markers.",
    "prob_desc_output_spec": "Print two space-separated integers u, v, where u is the number of closed markers and v is the number of beautifully closed markers in the sought optimal way. Remember that you have to find the way to close the maximum number of markers, and if there are several such ways, you should choose the one where the number of beautifully closed markers is maximum.",
    "prob_desc_input_spec": "The first input line contains two space-separated integers n and m (1 ≤ n, m ≤ 105) — the number of markers and the number of caps, correspondingly.  Next n lines describe the markers. The i-th line contains two space-separated integers xi, yi (1 ≤ xi, yi ≤ 1000) — the i-th marker's color and diameter, correspondingly. Next m lines describe the caps. The j-th line contains two space-separated integers aj, bj (1 ≤ aj, bj ≤ 1000) — the color and diameter of the j-th cap, correspondingly.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_029.jsonl",
    "code_uid": "acb3d8e442284f04aca974af5b32a479",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 4\\n1 2\\n3 4\\n2 4\\n5 4\\n2 4\\n1 1\\n1 2\", \"2 2\\n1 2\\n2 1\\n3 4\\n5 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "n, m = map(int, raw_input().split())\nd = {}\nbu = [0] * 1024\nbv = bu[:]\nfor _ in xrange(n):\n    a, b = map(int, raw_input().split())\n    d[(a, b)] = d.get((a, b), 0) + 1\n    bu[b] += 1\ny = 0\nfor _ in xrange(m):\n    a, b = map(int, raw_input().split())\n    if d.get((a, b), 0) > 0:\n        d[(a, b)] -= 1\n        y += 1\n        bu[b] -= 1\n    else:\n        bv[b] += 1\nx = sum(min(a, b) for a, b in zip(bu, bv))\nprint x + y, y\n",
    "prob_desc_created_at": "1331280000",
    "tags": [
        "sortings",
        "*special",
        "greedy"
    ],
    "hidden_unit_tests": ""
}