{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\\n0\\n249561107\"]",
    "src_uid": "2b391638a9fea31986fe8e41c97b640a",
    "prob_desc_notes": "NoteConsider the first test case. If the pair of indices $$$(2, 3)$$$ will be chosen, these elements will be swapped and array will become sorted. Otherwise, if one of pairs $$$(1, 2)$$$ or $$$(1, 3)$$$ will be selected, nothing will happen. So, the probability that the array will become sorted after one operation is $$$\\frac{1}{3}$$$, the probability that the array will become sorted after two operations is $$$\\frac{2}{3} \\cdot \\frac{1}{3}$$$, the probability that the array will become sorted after three operations is $$$\\frac{2}{3} \\cdot \\frac{2}{3} \\cdot \\frac{1}{3}$$$ and so on. The expected number of operations is $$$\\sum \\limits_{i=1}^{\\infty} \\left(\\frac{2}{3} \\right)^{i - 1} \\cdot \\frac{1}{3} \\cdot i = 3$$$.In the second test case the array is already sorted so the expected number of operations is zero.In the third test case the expected number of operations equals to $$$\\frac{75}{4}$$$ so the answer is $$$75 \\cdot 4^{-1} \\equiv 249\\,561\\,107 \\pmod {998\\,244\\,353}$$$.",
    "prob_desc_description": "You are given a binary array $$$a$$$ (all elements of the array are $$$0$$$ or $$$1$$$) of length $$$n$$$. You wish to sort this array, but unfortunately, your algorithms teacher forgot to teach you sorting algorithms. You perform the following operations until $$$a$$$ is sorted:  Choose two random indices $$$i$$$ and $$$j$$$ such that $$$i &lt; j$$$. Indices are chosen equally probable among all pairs of indices $$$(i, j)$$$ such that $$$1 \\le i &lt; j \\le n$$$.  If $$$a_i &gt; a_j$$$, then swap elements $$$a_i$$$ and $$$a_j$$$. What is the expected number of such operations you will perform before the array becomes sorted?It can be shown that the answer can be expressed as an irreducible fraction $$$\\frac{p}{q}$$$, where $$$p$$$ and $$$q$$$ are integers and $$$q \\not \\equiv 0 \\pmod{998\\,244\\,353}$$$. Output the integer equal to $$$p \\cdot q^{-1} \\bmod 998\\,244\\,353$$$. In other words, output such an integer $$$x$$$ that $$$0 \\le x &lt; 998\\,244\\,353$$$ and $$$x \\cdot q \\equiv p \\pmod{998\\,244\\,353}$$$.",
    "prob_desc_output_spec": "For each test case print one integer — the value $$$p \\cdot q^{-1} \\bmod 998\\,244\\,353$$$.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^5$$$). Description of the test cases follows. The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 200\\,000$$$) — the number of elements in the binary array. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$a_i \\in \\{0, 1\\}$$$) — elements of the array. It's guaranteed that sum of $$$n$$$ over all test cases does not exceed $$$200\\,000$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_100.jsonl",
    "code_uid": "7f9dbb50633c187348ece78d06295258",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n\\n3\\n\\n0 1 0\\n\\n5\\n\\n0 0 1 1 1\\n\\n6\\n\\n1 1 1 0 0 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "for _ in range(int(input())):\r\n    n = int(input())\r\n    a = [int(x) for x in input().split()]\r\n    zeros = n - sum(a)\r\n    ones = sum(a[:zeros])\r\n    rv = n * (n - 1) // 2 * sum(pow(i, -2, 998244353) for i in range(1, ones + 1)) % 998244353\r\n    print(rv)",
    "prob_desc_created_at": "1666511400",
    "tags": [
        "dp",
        "math",
        "probabilities"
    ],
    "hidden_unit_tests": ""
}