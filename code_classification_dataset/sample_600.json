{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"? 000\\n? 001\\n? 010\\n? 011\\n? 100\\n? 101\\n! 2 1\"]",
    "src_uid": "4dd91b32ea1a41d4ecb99bc5672ef1bc",
    "prob_desc_notes": "NoteHamming distance definition: https://en.wikipedia.org/wiki/Hamming_distanceIn the first test case the hidden binary string is 101, The first query is 000, so the Hamming distance is 2. In the second query the hidden string is still 101 and query is 001, so the Hamming distance is 1.After some queries you find that symbol at position 2 is '0' and symbol at position 1 is '1', so you print \"! 2 1\".",
    "prob_desc_description": "Mahmoud and Ehab are in the fourth stage now.Dr. Evil has a hidden binary string of length n. He guarantees that there is at least one '0' symbol and at least one '1' symbol in it. Now he wants Mahmoud and Ehab to find a position of any '0' symbol and any '1' symbol. In order to do this, Mahmoud and Ehab can ask Dr. Evil up to 15 questions. They tell Dr. Evil some binary string of length n, and Dr. Evil tells the Hamming distance between these two strings. Hamming distance between 2 binary strings of the same length is the number of positions in which they have different symbols. You can find the definition of Hamming distance in the notes section below.Help Mahmoud and Ehab find these two positions.You will get Wrong Answer verdict if   Your queries doesn't satisfy interaction protocol described below.  You ask strictly more than 15 questions and your program terminated after exceeding queries limit. Please note, that you can do up to 15 ask queries and one answer query.  Your final answer is not correct.  You will get Idleness Limit Exceeded if you don't print anything or if you forget to flush the output, including for the final answer (more info about flushing output below).If you exceed the maximum number of queries, You should terminate with 0, In this case you'll get Wrong Answer, If you don't terminate you may receive any verdict because you'll be reading from a closed stream .",
    "prob_desc_output_spec": "To print the final answer, print \"! pos0 pos1\" (without quotes), where pos0 and pos1 are positions of some '0' and some '1' in the string (the string is 1-indexed). Don't forget to flush the output after printing the answer!",
    "prob_desc_input_spec": "The first line of input will contain a single integer n (2 ≤ n ≤ 1000) — the length of the hidden binary string.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_003.jsonl",
    "code_uid": "201f94b68996ba0347e3133cba5a8c20",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n2\\n1\\n3\\n2\\n1\\n0\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import *\nn = int(input())\nprint(\"?\",\"0\"*n)\nstdout.flush() \ncnt = int(input())\nlow = 1\nhigh = n\none = zero = -1\nwhile low <= high:\n  mid = (low+high)//2\n  s = \"? \"\n  for i in range(1,n+1):\n    if(low <= i <= mid): s += \"1\"\n    else: s += \"0\"\n  print(s)\n  stdout.flush() \n  x = int(input())\n  tot = mid-low+1\n  if cnt-x == tot: #all ones\n    # print(\"all ones\",low,mid,high)\n    one = low\n    low = mid+1\n  elif x-cnt == tot: #all zeros\n    # print(\"all zeros\",low,mid,high)\n    zero = low\n    low = mid+1\n  else:\n    high = mid\nprint(\"!\",zero,one)    \nstdout.flush() \n    \n    ",
    "prob_desc_created_at": "1505833500",
    "tags": [
        "binary search",
        "divide and conquer",
        "interactive"
    ],
    "hidden_unit_tests": ""
}