{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"165\\n108\\n145\\n234\\n11\\n3\"]",
    "src_uid": "83d0395cd3618b0fd02c1846dbcd92a2",
    "prob_desc_notes": "NoteThe examples of possible divisions into arrays for all test cases of the first test:Test case $$$1$$$: $$$[0, 24], [34, 58], [62, 64], [69, 78]$$$. The medians are $$$0, 34, 62, 69$$$. Their sum is $$$165$$$.Test case $$$2$$$: $$$[27, 61], [81, 91]$$$. The medians are $$$27, 81$$$. Their sum is $$$108$$$.Test case $$$3$$$: $$$[2, 91, 92, 95], [4, 36, 53, 82], [16, 18, 21, 27]$$$. The medians are $$$91, 36, 18$$$. Their sum is $$$145$$$.Test case $$$4$$$: $$$[3, 33, 35], [11, 94, 99], [12, 38, 67], [22, 69, 71]$$$. The medians are $$$33, 94, 38, 69$$$. Their sum is $$$234$$$.Test case $$$5$$$: $$$[11, 41]$$$. The median is $$$11$$$. The sum of the only median is $$$11$$$.Test case $$$6$$$: $$$[1, 1, 1], [1, 1, 1], [1, 1, 1]$$$. The medians are $$$1, 1, 1$$$. Their sum is $$$3$$$.",
    "prob_desc_description": "A median of an array of integers of length $$$n$$$ is the number standing on the $$$\\lceil {\\frac{n}{2}} \\rceil$$$ (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting with $$$1$$$. For example, a median of the array $$$[2, 6, 4, 1, 3, 5]$$$ is equal to $$$3$$$. There exist some other definitions of the median, but in this problem, we will use the described one.Given two integers $$$n$$$ and $$$k$$$ and non-decreasing array of $$$nk$$$ integers. Divide all numbers into $$$k$$$ arrays of size $$$n$$$, such that each number belongs to exactly one array.You want the sum of medians of all $$$k$$$ arrays to be the maximum possible. Find this maximum possible sum.",
    "prob_desc_output_spec": "For each test case print a single integer — the maximum possible sum of medians of all $$$k$$$ arrays.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases. The next $$$2t$$$ lines contain descriptions of test cases. The first line of the description of each test case contains two integers $$$n$$$, $$$k$$$ ($$$1 \\leq n, k \\leq 1000$$$). The second line of the description of each test case contains $$$nk$$$ integers $$$a_1, a_2, \\ldots, a_{nk}$$$ ($$$0 \\leq a_i \\leq 10^9$$$) — given array. It is guaranteed that the array is non-decreasing: $$$a_1 \\leq a_2 \\leq \\ldots \\leq a_{nk}$$$. It is guaranteed that the sum of $$$nk$$$ for all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 900,
    "file_name": "train_011.jsonl",
    "code_uid": "a3a8aac746adc118c9b0f2c854ddd7ac",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n2 4\\n0 24 34 58 62 64 69 78\\n2 2\\n27 61 81 91\\n4 3\\n2 4 16 18 21 27 36 53 82 91 92 95\\n3 4\\n3 11 12 22 33 35 38 67 69 71 94 99\\n2 1\\n11 41\\n3 3\\n1 1 1 1 1 1 1 1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "t = int(input())\nfor i10 in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    c = n // 2 + 1\n    s = 0\n    j = 1\n    k1 = 0\n    for i in range(n * k - 1, -1, -1):\n        if k1 == k:\n            break\n        if j == c:\n            k1 += 1\n            j = 1\n            s += a[i]\n        else:\n            j += 1\n    print(s)\n            ",
    "prob_desc_created_at": "1605623700",
    "tags": [
        "greedy",
        "math"
    ],
    "hidden_unit_tests": ""
}