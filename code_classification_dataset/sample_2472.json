{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\", \"1\", \"-1\"]",
    "src_uid": "03772bac6ed5bfe75bc0ad4d2eab56fd",
    "prob_desc_notes": "NoteAnya can start lighting a candle in the same second with ghost visit. But this candle isn't counted as burning at this visit.It takes exactly one second to light up a candle and only after that second this candle is considered burning; it means that if Anya starts lighting candle at moment x, candle is buring from second x + 1 to second x + t inclusively.In the first sample test three candles are enough. For example, Anya can start lighting them at the 3-rd, 5-th and 7-th seconds after the midnight.In the second sample test one candle is enough. For example, Anya can start lighting it one second before the midnight.In the third sample test the answer is  - 1, since during each second at most one candle can burn but Anya needs three candles to light up the room at the moment when the ghost comes.",
    "prob_desc_description": "Anya loves to watch horror movies. In the best traditions of horror, she will be visited by m ghosts tonight. Anya has lots of candles prepared for the visits, each candle can produce light for exactly t seconds. It takes the girl one second to light one candle. More formally, Anya can spend one second to light one candle, then this candle burns for exactly t seconds and then goes out and can no longer be used.For each of the m ghosts Anya knows the time at which it comes: the i-th visit will happen wi seconds after midnight, all wi's are distinct. Each visit lasts exactly one second.What is the minimum number of candles Anya should use so that during each visit, at least r candles are burning? Anya can start to light a candle at any time that is integer number of seconds from midnight, possibly, at the time before midnight. That means, she can start to light a candle integer number of seconds before midnight or integer number of seconds after a midnight, or in other words in any integer moment of time.",
    "prob_desc_output_spec": "If it is possible to make at least r candles burn during each visit, then print the minimum number of candles that Anya needs to light for that. If that is impossible, print  - 1.",
    "prob_desc_input_spec": "The first line contains three integers m, t, r (1 ≤ m, t, r ≤ 300), representing the number of ghosts to visit Anya, the duration of a candle's burning and the minimum number of candles that should burn during each visit.  The next line contains m space-separated numbers wi (1 ≤ i ≤ m, 1 ≤ wi ≤ 300), the i-th of them repesents at what second after the midnight the i-th ghost will come. All wi's are distinct, they follow in the strictly increasing order.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_023.jsonl",
    "code_uid": "4354a59584d1411a4b2fe061b561ac31",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1 8 3\\n10\", \"2 10 1\\n5 8\", \"1 1 3\\n10\"]",
    "exec_outcome": "PASSED",
    "source_code": "def numCandleBurning(t):\n    count = 0\n    for i in range(len(candleTimeArray)-1, -1, -1):\n        if(candleTimeArray[i] + timeBurning > t):\n            count += 1\n        else:\n            return count\n    return count\n\nnumGhosts, timeBurning, minNumCandle = map(int, raw_input().split())\nghostTimeArray = map(int, raw_input().split())\nif(timeBurning < minNumCandle): print -1\nelse:\n    candleTimeArray = []\n    for ghostTime in ghostTimeArray:\n        numCandlesNeeded = max(minNumCandle - numCandleBurning(ghostTime), 0)\n        for i in range(numCandlesNeeded):\n            candleTimeArray.append(ghostTime - numCandlesNeeded + 1 + i)\n    print len(candleTimeArray)\n",
    "prob_desc_created_at": "1422376200",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "hidden_unit_tests": ""
}