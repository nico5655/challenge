{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\\n3\\n6\"]",
    "src_uid": "d70ce3b16614129c5d697a9597bcd2e3",
    "prob_desc_notes": "NoteIn the first example it is possible to construct these graphs:  1 - 2, 1 - 3;  1 - 2, 1 - 3, 2 - 4;  1 - 2, 1 - 3, 2 - 3, 1 - 4, 2 - 5, 3 - 6. ",
    "prob_desc_description": "Ivan is developing his own computer game. Now he tries to create some levels for his game. But firstly for each level he needs to draw a graph representing the structure of the level.Ivan decided that there should be exactly ni vertices in the graph representing level i, and the edges have to be bidirectional. When constructing the graph, Ivan is interested in special edges called bridges. An edge between two vertices u and v is called a bridge if this edge belongs to every path between u and v (and these vertices will belong to different connected components if we delete this edge). For each level Ivan wants to construct a graph where at least half of the edges are bridges. He also wants to maximize the number of edges in each constructed graph.So the task Ivan gave you is: given q numbers n1, n2, ..., nq, for each i tell the maximum number of edges in a graph with ni vertices, if at least half of the edges are bridges. Note that the graphs cannot contain multiple edges or self-loops.",
    "prob_desc_output_spec": "Output q numbers, i-th of them must be equal to the maximum number of edges in i-th graph.",
    "prob_desc_input_spec": "The first line of input file contains a positive integer q (1 ≤ q ≤ 100 000) — the number of graphs Ivan needs to construct. Then q lines follow, i-th line contains one positive integer ni (1 ≤ ni ≤ 2·109) — the number of vertices in i-th graph. Note that in hacks you have to use q = 1.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_018.jsonl",
    "code_uid": "d84386d74e18609a864cb73abe208a05",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n3\\n4\\n6\"]",
    "exec_outcome": "PASSED",
    "source_code": "#! /usr/bin/env python\n\n# http://codeforces.com/problemset/problem/818/F\n# Problem name ::: F. Level Generation\n# submission number\n\n#212055293\n#508427854\n\n\ndef newest_approach(n):\n    from math import floor, ceil, sqrt\n\n    quad_solv = sqrt(2*n+1/4)-1/2\n    x = floor(quad_solv)\n    y = ceil(quad_solv)\n\n    xed = int(x*(x-1)/2 + n - x)\n    xbr = n - x\n\n    ybr = n - y\n    yed = 2*ybr\n\n    if xed > yed:\n        print(xed)\n        # print(\"nodes = %s :: edges = %s :: bridges = %s\" % (n, xed, xbr))\n    else:\n        print(yed)\n        # print(\"nodes = %s :: edges = %s :: bridges = %s\" % (n, yed, ybr))\n\n    return\n\n\n\ndef main():\n\n    import sys\n\n    data = [line.rstrip() for line in sys.stdin.readlines()]\n    num_graphs = data[0]\n    graph_sizes = [int(x) for x in data[1:]]\n\n    for val in graph_sizes:\n        # binary_search(val)\n        # new_approach(val)\n        newest_approach(val)\n\n\n\n\n\nif __name__ == '__main__':\n    main()\n",
    "prob_desc_created_at": "1498748700",
    "tags": [
        "binary search",
        "ternary search",
        "math"
    ],
    "hidden_unit_tests": ""
}