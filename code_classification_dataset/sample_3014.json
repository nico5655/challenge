{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2 1 3\", \"1 2 3 4\", \"-1\"]",
    "src_uid": "55ffdab213ed5b00d2ff69f0f91c0c74",
    "prob_desc_notes": null,
    "prob_desc_description": "Merge sort is a well-known sorting algorithm. The main function that sorts the elements of array a with indices from [l, r) can be implemented as follows:  If the segment [l, r) is already sorted in non-descending order (that is, for any i such that l ≤ i &lt; r - 1 a[i] ≤ a[i + 1]), then end the function call;  Let ;  Call mergesort(a, l, mid);  Call mergesort(a, mid, r);  Merge segments [l, mid) and [mid, r), making the segment [l, r) sorted in non-descending order. The merge algorithm doesn't call any other functions. The array in this problem is 0-indexed, so to sort the whole array, you need to call mergesort(a, 0, n).The number of calls of function mergesort is very important, so Ivan has decided to calculate it while sorting the array. For example, if a = {1, 2, 3, 4}, then there will be 1 call of mergesort — mergesort(0, 4), which will check that the array is sorted and then end. If a = {2, 1, 3}, then the number of calls is 3: first of all, you call mergesort(0, 3), which then sets mid = 1 and calls mergesort(0, 1) and mergesort(1, 3), which do not perform any recursive calls because segments (0, 1) and (1, 3) are sorted.Ivan has implemented the program that counts the number of mergesort calls, but now he needs to test it. To do this, he needs to find an array a such that a is a permutation of size n (that is, the number of elements in a is n, and every integer number from [1, n] can be found in this array), and the number of mergesort calls when sorting the array is exactly k.Help Ivan to find an array he wants!",
    "prob_desc_output_spec": "If a permutation of size n such that there will be exactly k calls of mergesort while sorting it doesn't exist, output  - 1. Otherwise output n integer numbers a[0], a[1], ..., a[n - 1] — the elements of a permutation that would meet the required conditions. If there are multiple answers, print any of them.",
    "prob_desc_input_spec": "The first line contains two numbers n and k (1 ≤ n ≤ 100000, 1 ≤ k ≤ 200000) — the size of a desired permutation and the number of mergesort calls required to sort it.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_038.jsonl",
    "code_uid": "7c85cdff64df5e0d1b8af108a9ee3580",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 3\", \"4 1\", \"5 6\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import exit\nn, k = [int(i) for i in input().split()]\nif k % 2 == 0 or k >= 2 * n:\n    print(-1)\n    exit(0)\nlast = n\na = [0] * n\ndef ans(c, l, r):\n    global last\n    if c == 1:\n        i = r - 1\n        while i >= l:\n            a[i] = last\n            last -= 1\n            i -= 1\n        return\n    m = (l + r) // 2\n    ans(c // 2 - int((c // 2) % 2 == 0), l, m)\n    ans(c // 2 + int((c // 2) % 2 == 0), m, r)\nans(k, 0, n)\nprint(*a)\n",
    "prob_desc_created_at": "1507817100",
    "tags": [
        "constructive algorithms",
        "divide and conquer"
    ],
    "hidden_unit_tests": ""
}