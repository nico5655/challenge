{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"0\", \"0\", \"1000000\"]",
    "src_uid": "b80fed46a9e2356dad03dd3ec01523d4",
    "prob_desc_notes": null,
    "prob_desc_description": "Polycarp has an array $$$a$$$ consisting of $$$n$$$ integers.He wants to play a game with this array. The game consists of several moves. On the first move he chooses any element and deletes it (after the first move the array contains $$$n-1$$$ elements). For each of the next moves he chooses any element with the only restriction: its parity should differ from the parity of the element deleted on the previous move. In other words, he alternates parities (even-odd-even-odd-... or odd-even-odd-even-...) of the removed elements. Polycarp stops if he can't make a move.Formally:   If it is the first move, he chooses any element and deletes it;  If it is the second or any next move:   if the last deleted element was odd, Polycarp chooses any even element and deletes it;  if the last deleted element was even, Polycarp chooses any odd element and deletes it.   If after some move Polycarp cannot make a move, the game ends. Polycarp's goal is to minimize the sum of non-deleted elements of the array after end of the game. If Polycarp can delete the whole array, then the sum of non-deleted elements is zero.Help Polycarp find this value.",
    "prob_desc_output_spec": "Print one integer — the minimum possible sum of non-deleted elements of the array after end of the game.",
    "prob_desc_input_spec": "The first line of the input contains one integer $$$n$$$ ($$$1 \\le n \\le 2000$$$) — the number of elements of $$$a$$$. The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$0 \\le a_i \\le 10^6$$$), where $$$a_i$$$ is the $$$i$$$-th element of $$$a$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 900,
    "file_name": "train_008.jsonl",
    "code_uid": "0a900728294d879d46432e3757133aca",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n1 5 7 8 2\", \"6\\n5 1 2 4 6 3\", \"2\\n1000000 1000000\"]",
    "exec_outcome": "PASSED",
    "source_code": "n=int(input())\narr=sorted(list(map(int, input().split())))\neven,odd=[],[]\nfor i in arr:\n    if i%2==0:\n        even.append(i)\n    else:\n        odd.append(i)\nif(abs(len(even)-len(odd))<2):\n    print(0)\nelif(len(even)>len(odd)):\n    print(sum(even[:len(even)-len(odd)-1]))\nelse:\n    print(sum(odd[:len(odd)-len(even)-1]))",
    "prob_desc_created_at": "1554041100",
    "tags": [
        "implementation",
        "sortings",
        "greedy"
    ],
    "hidden_unit_tests": ""
}