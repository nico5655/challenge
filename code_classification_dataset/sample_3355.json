{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\\n0 1 3 2\", \"2\\n0 2 1 3\", \"3\\n0 1 3 2 6 7 5 4\", \"0\\n0\", \"0\\n0\", \"1\\n0 1\"]",
    "src_uid": "6b6231465a34d1585c356280802b2a88",
    "prob_desc_notes": "NoteIn the first example, $$$0, 1, 3, 2$$$ is a magical permutation since: $$$0 \\oplus 1 = 1 \\in S$$$  $$$1 \\oplus 3 = 2 \\in S$$$  $$$3 \\oplus 2 = 1 \\in S$$$Where $$$\\oplus$$$ denotes bitwise xor operation.",
    "prob_desc_description": "Kuro has just learned about permutations and he is really excited to create a new permutation type. He has chosen $$$n$$$ distinct positive integers and put all of them in a set $$$S$$$. Now he defines a magical permutation to be: A permutation of integers from $$$0$$$ to $$$2^x - 1$$$, where $$$x$$$ is a non-negative integer.  The bitwise xor of any two consecutive elements in the permutation is an element in $$$S$$$.Since Kuro is really excited about magical permutations, he wants to create the longest magical permutation possible. In other words, he wants to find the largest non-negative integer $$$x$$$ such that there is a magical permutation of integers from $$$0$$$ to $$$2^x - 1$$$. Since he is a newbie in the subject, he wants you to help him find this value of $$$x$$$ and also the magical permutation for that $$$x$$$.",
    "prob_desc_output_spec": "In the first line print the largest non-negative integer $$$x$$$, such that there is a magical permutation of integers from $$$0$$$ to $$$2^x - 1$$$. Then print $$$2^x$$$ integers describing a magical permutation of integers from $$$0$$$ to $$$2^x - 1$$$. If there are multiple such magical permutations, print any of them.",
    "prob_desc_input_spec": "The first line contains the integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) — the number of elements in the set $$$S$$$. The next line contains $$$n$$$ distinct integers $$$S_1, S_2, \\ldots, S_n$$$ ($$$1 \\leq S_i \\leq 2 \\cdot 10^5$$$) — the elements in the set $$$S$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_054.jsonl",
    "code_uid": "d103e29f88d6a98db61776c7d033c65c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n1 2 3\", \"2\\n2 3\", \"4\\n1 2 3 4\", \"2\\n2 4\", \"1\\n20\", \"1\\n1\"]",
    "exec_outcome": "PASSED",
    "source_code": "def size(k):\n    return int(math.log2(k))\ndef v2(k):\n    if k%2==1:\n        return 0\n    else:\n        return 1+v2(k//2)\nn=int(input())\ns=list(map(int,input().split()))\nimport math\ns.sort()\nused=[]\nuse=0\nfound={0:1}\ngood=0\nfor guy in s:\n    big=size(guy)\n    if guy not in found:\n        used.append(guy)\n        use+=1\n        new=[]\n        for boi in found:\n            new.append(boi^guy)\n        for guy in new:\n            found[guy]=1\n        if use==big+1:\n            good=use\nif good==0:\n    print(0)\n    print(0)\nelse:\n    useful=used[:good]\n    perm=[\"0\"]\n    curr=0\n    for i in range(2**good-1):\n        curr^=useful[v2(i+1)]\n        perm.append(str(curr))\n    print(good)\n    print(\" \".join(perm))",
    "prob_desc_created_at": "1557414300",
    "tags": [
        "graphs",
        "constructive algorithms",
        "bitmasks",
        "math",
        "data structures",
        "brute force"
    ],
    "hidden_unit_tests": ""
}