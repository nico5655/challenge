{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"0\\n987\\n914\"]",
    "src_uid": "b57066317ae2f2280d7351ff12e0c959",
    "prob_desc_notes": "NoteIn the second test case, in one of the optimal answers after all operations $$$a = [2, 6, 4, 6]$$$, $$$b = [3, 7, 6, 1]$$$.The cost of the array $$$a$$$ equals to $$$(2 + 6)^2 + (2 + 4)^2 + (2 + 6)^2 + (6 + 4)^2 + (6 + 6)^2 + (4 + 6)^2 = 508$$$.The cost of the array $$$b$$$ equals to $$$(3 + 7)^2 + (3 + 6)^2 + (3 + 1)^2 + (7 + 6)^2 + (7 + 1)^2 + (6 + 1)^2 = 479$$$.The total cost of two arrays equals to $$$508 + 479 = 987$$$.",
    "prob_desc_description": "You are given two arrays $$$a$$$ and $$$b$$$, both of length $$$n$$$.You can perform the following operation any number of times (possibly zero): select an index $$$i$$$ ($$$1 \\leq i \\leq n$$$) and swap $$$a_i$$$ and $$$b_i$$$.Let's define the cost of the array $$$a$$$ as $$$\\sum_{i=1}^{n} \\sum_{j=i + 1}^{n} (a_i + a_j)^2$$$. Similarly, the cost of the array $$$b$$$ is $$$\\sum_{i=1}^{n} \\sum_{j=i + 1}^{n} (b_i + b_j)^2$$$.Your task is to minimize the total cost of two arrays.",
    "prob_desc_output_spec": "For each test case, print the minimum possible total cost.",
    "prob_desc_input_spec": "Each test case consists of several test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 40$$$) — the number of test cases. The following is a description of the input data sets. The first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 100$$$) — the length of both arrays. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 100$$$) — elements of the first array. The third line of each test case contains $$$n$$$ integers $$$b_1, b_2, \\ldots, b_n$$$ ($$$1 \\leq b_i \\leq 100$$$) — elements of the second array. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$100$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_090.jsonl",
    "code_uid": "f7c12418e4550cdf0868782ba9427a74",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n1\\n3\\n6\\n4\\n3 6 6 6\\n2 7 4 1\\n4\\n6 7 2 4\\n2 5 3 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "# import sys, os\r\n# if not os.environ.get(\"ONLINE_JUDGE\"):\r\n#     sys.stdin = open('in.txt', 'r')\r\n#     sys.stdout = open('out.txt', 'w')\r\n    \r\nimport sys\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    b = list(map(int, input().split()))\r\n    if n == 1:\r\n        print(0)\r\n    else:\r\n        cost = 0\r\n        s = 0\r\n        for i in range(n):\r\n            cost += a[i]**2 + b[i]**2\r\n            s += a[i] + b[i]\r\n        wt = [abs(a[i]-b[i]) for i in range(n)]\r\n        capacity = sum(wt)\r\n        dp = [[False for i in range(capacity + 1)] for i in range(n+1)]\r\n        dp[0][0] = True\r\n\r\n        for i in range(n+1):\r\n            for j in range(capacity + 1):\r\n                if j == 0:\r\n                    dp[i][j] = True\r\n                else:\r\n                    if dp[i-1][j] or dp[i-1][j-wt[i-1]]:\r\n                        dp[i][j] = True\r\n        \r\n        pos = []\r\n        min_j = 0\r\n        for i in range(n):\r\n            min_j += min(a[i], b[i])\r\n        for j in range(capacity + 1):\r\n            if dp[n][j]:\r\n                s1 = j + min_j\r\n                pos.append(s1**2 + (s - s1)**2)\r\n        \r\n        print(min(pos) + (n-2)*cost)\r\n\r\n       ",
    "prob_desc_created_at": "1644676500",
    "tags": [
        "dp",
        "greedy",
        "math"
    ],
    "hidden_unit_tests": ""
}