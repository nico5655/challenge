{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"6\\n1\\n0\\n3\"]",
    "src_uid": "35dccda260cfdaea651d1950df452e7a",
    "prob_desc_notes": "NoteThe first test case is shown in the second picture in the statement.In the second test case, the only wiring possible has the two wires cross, so the answer is $$$1$$$.In the third test case, the only wiring possible has one wire, so the answer is $$$0$$$.",
    "prob_desc_description": "The only difference between the two versions is that in this version $$$n \\leq 2 \\cdot 10^5$$$ and the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.A terminal is a row of $$$n$$$ equal segments numbered $$$1$$$ to $$$n$$$ in order. There are two terminals, one above the other. You are given an array $$$a$$$ of length $$$n$$$. For all $$$i = 1, 2, \\dots, n$$$, there should be a straight wire from some point on segment $$$i$$$ of the top terminal to some point on segment $$$a_i$$$ of the bottom terminal. You can't select the endpoints of a segment. For example, the following pictures show two possible wirings if $$$n=7$$$ and $$$a=[4,1,4,6,7,7,5]$$$.  A crossing occurs when two wires share a point in common. In the picture above, crossings are circled in red.What is the maximum number of crossings there can be if you place the wires optimally?",
    "prob_desc_output_spec": "For each test case, output a single integer — the maximum number of crossings there can be if you place the wires optimally.",
    "prob_desc_input_spec": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases. The first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) — the length of the array. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq n$$$) — the elements of the array. The sum of $$$n$$$ across all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_106.jsonl",
    "code_uid": "288c9e871150bc8cd1fd0b9c5069ab35",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n\\n7\\n\\n4 1 4 6 7 7 5\\n\\n2\\n\\n2 1\\n\\n1\\n\\n1\\n\\n3\\n\\n2 2 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "from array import array\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    a = array('i', map(int, input().split()))\r\n    ans = 0\r\n    \r\n    # Codeforces 1676H2 Maximum Crossings\r\n    # https://codeforces.com/contest/1676/problem/H2\r\n\r\n\r\n\r\n    def mergeSort(arr):\r\n        global ans\r\n        if len(arr) < 2:\r\n            return arr\r\n        mid = len(arr)//2\r\n        L = arr[:mid]\r\n        R = arr[mid:]\r\n        mergeSort(L)\r\n        mergeSort(R)\r\n        pL = pR = 0\r\n        for i in range(len(arr)):\r\n            if pR == len(R) or pL<len(L) and L[pL]<R[pR]:\r\n                arr[i], ans, pL = L[pL], ans + pR, pL + 1\r\n            else:\r\n                arr[i], pR = R[pR], pR+1\r\n\r\n        return arr\r\n\r\n    mergeSort(a)\r\n\r\n    print(ans)",
    "prob_desc_created_at": "1652193900",
    "tags": [
        "data structures",
        "divide and conquer",
        "sortings"
    ],
    "hidden_unit_tests": ""
}