{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\\n1 3\", \"2\\n1 2\"]",
    "src_uid": "84cce147e8aadb140afaaa95917fdf0d",
    "prob_desc_notes": null,
    "prob_desc_description": "Sereja has two sequences a and b and number p. Sequence a consists of n integers a1, a2, ..., an. Similarly, sequence b consists of m integers b1, b2, ..., bm. As usual, Sereja studies the sequences he has. Today he wants to find the number of positions q (q + (m - 1)·p ≤ n; q ≥ 1), such that sequence b can be obtained from sequence aq, aq + p, aq + 2p, ..., aq + (m - 1)p by rearranging elements.Sereja needs to rush to the gym, so he asked to find all the described positions of q.",
    "prob_desc_output_spec": "In the first line print the number of valid qs. In the second line, print the valid values in the increasing order.",
    "prob_desc_input_spec": "The first line contains three integers n, m and p (1 ≤ n, m ≤ 2·105, 1 ≤ p ≤ 2·105). The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109). The next line contains m integers b1, b2, ..., bm (1 ≤ bi ≤ 109).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_008.jsonl",
    "code_uid": "59b57106ae122edeb0b24fa2f6789909",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 3 1\\n1 2 3 2 1\\n1 2 3\", \"6 3 2\\n1 3 2 2 3 1\\n1 2 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import Counter\n\nn, m, p = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n\ndef try_from(start, a, b):\n    result = []\n    seq = a[start::p]\n    i = 0\n    if len(seq) < len(b):\n        return []\n\n    counts_a = Counter(seq[:len(b)])\n    counts_b = Counter(b)\n    if counts_a == counts_b:\n        result.append(start)\n\n    for i in range(1, len(seq) - len(b) + 1):\n        counts_a[seq[i-1]] -= 1\n        counts_a[seq[i+len(b) - 1]] += 1\n        if not counts_a[seq[i-1]]:\n            del counts_a[seq[i-1]]\n\n        ok = counts_a == counts_b\n        #ok = sorted(seq[i:i+len(b)]) == sorted(b)\n\n        if ok:\n            result.append(start + p * i)\n\n    return [x + 1 for x in result]\n\n\nresult = []\nfor start in range(p):\n    result += try_from(start, a, b)\n\nprint(len(result))\nprint(' '.join(map(str, sorted(result))))\n\n",
    "prob_desc_created_at": "1385479800",
    "tags": [
        "data structures",
        "two pointers"
    ],
    "hidden_unit_tests": ""
}