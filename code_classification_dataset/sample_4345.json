{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"NO\\nYES\\nYES\\nYES\\nNO\\nNO\\nNO\\nNO\"]",
    "src_uid": "99335597ae5a2fa5946019790d888f08",
    "prob_desc_notes": "NoteThe first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size $$$0$$$ don't exist.The second sample test case is already described in the statement (check the picture in the statement). This field can be obtained by drawing ticks of sizes $$$2$$$ and $$$3$$$, as shown in the figure.The field in the third sample test case corresponds to three ticks of size $$$1$$$. Their center cells are marked with $$$\\color{blue}{\\text{blue}}$$$, $$$\\color{red}{\\text{red}}$$$ and $$$\\color{green}{\\text{green}}$$$ colors: *.*.*$$$\\color{blue}{\\textbf{*}}$$$**.$$$\\color{green}{\\textbf{*}}\\color{red}{\\textbf{*}}$$$.....The field in the fourth sample test case could have been obtained by drawing two ticks of sizes $$$1$$$ and $$$2$$$. Their vertices are marked below with $$$\\color{blue}{\\text{blue}}$$$ and $$$\\color{red}{\\text{red}}$$$ colors respectively: .....*...*.*.*...$$$\\color{red}{\\textbf{*}}$$$.*...$$$\\color{blue}{\\textbf{*}}$$$.The field in the fifth sample test case can not be obtained because $$$k = 2$$$, and the last asterisk in the fourth row from the top with coordinates $$$(4, 5)$$$ can only be a part of a tick of size $$$1$$$.The field in the sixth sample test case can not be obtained because the top left asterisk $$$(1, 1)$$$ can't be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap (a point, '.') in $$$(2, 2)$$$.In the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates $$$(1, 2)$$$ (second cell in the first row), $$$(3, 1)$$$ and $$$(3, 3)$$$ (leftmost and rightmost cells in the bottom) can not be parts of any ticks.",
    "prob_desc_description": "Casimir has a rectangular piece of paper with a checkered field of size $$$n \\times m$$$. Initially, all cells of the field are white.Let us denote the cell with coordinates $$$i$$$ vertically and $$$j$$$ horizontally by $$$(i, j)$$$. The upper left cell will be referred to as $$$(1, 1)$$$ and the lower right cell as $$$(n, m)$$$.Casimir draws ticks of different sizes on the field. A tick of size $$$d$$$ ($$$d &gt; 0$$$) with its center in cell $$$(i, j)$$$ is drawn as follows:   First, the center cell $$$(i, j)$$$ is painted black.  Then exactly $$$d$$$ cells on the top-left diagonally to the center and exactly $$$d$$$ cells on the top-right diagonally to the center are also painted black.  That is all the cells with coordinates $$$(i - h, j \\pm h)$$$ for all $$$h$$$ between $$$0$$$ and $$$d$$$ are painted. In particular, a tick consists of $$$2d + 1$$$ black cells. An already painted cell will remain black if painted again. Below you can find an example of the $$$4 \\times 9$$$ box, with two ticks of sizes $$$2$$$ and $$$3$$$.  You are given a description of a checkered field of size $$$n \\times m$$$. Casimir claims that this field came about after he drew some (possibly $$$0$$$) ticks on it. The ticks could be of different sizes, but the size of each tick is at least $$$k$$$ (that is, $$$d \\ge k$$$ for all the ticks).Determine whether this field can indeed be obtained by drawing some (possibly none) ticks of sizes $$$d \\ge k$$$ or not.",
    "prob_desc_output_spec": "Print $$$t$$$ lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise. You may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).",
    "prob_desc_input_spec": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number test cases. The following lines contain the descriptions of the test cases.  The first line of the test case description contains the integers $$$n$$$, $$$m$$$, and $$$k$$$ ($$$1 \\le k \\le n \\le 10$$$; $$$1 \\le m \\le 19$$$) — the field size and the minimum size of the ticks that Casimir drew. The following $$$n$$$ lines describe the field: each line consists of $$$m$$$ characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_095.jsonl",
    "code_uid": "ff95b016a89886f150ddf8501a55436f",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"8\\n2 3 1\\n*.*\\n...\\n4 9 2\\n*.*.*...*\\n.*.*...*.\\n..*.*.*..\\n.....*...\\n4 4 1\\n*.*.\\n****\\n.**.\\n....\\n5 5 1\\n.....\\n*...*\\n.*.*.\\n..*.*\\n...*.\\n5 5 2\\n.....\\n*...*\\n.*.*.\\n..*.*\\n...*.\\n4 7 1\\n*.....*\\n.....*.\\n..*.*..\\n...*...\\n3 3 1\\n***\\n***\\n***\\n3 5 1\\n*...*\\n.***.\\n.**..\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\ninpu = sys.stdin.readline\r\nprin = sys.stdout.write\r\ndef solve() :\r\n    n, m, k = map(int, inpu().split())\r\n    a = ['']*n\r\n    for i in range(n) :\r\n        a[i] = inpu().rstrip('\\n')\r\n    for i in range(n) :\r\n        for j in range(m) :\r\n            if a[i][j] == '*' :\r\n                countleftup = 0\r\n                x = i\r\n                y = j\r\n                while x - 1 >= 0 and y - 1 >= 0 :\r\n                    if a[x - 1][y - 1] == '*' :\r\n                        countleftup += 1\r\n                    else:\r\n                        break\r\n                    x -= 1\r\n                    y -= 1\r\n                countrightup = 0\r\n                x = i\r\n                y = j\r\n                while x - 1 >= 0 and y + 1 < m :\r\n                    if a[x - 1][y + 1] == '*' :\r\n                        countrightup += 1\r\n                    else:\r\n                        break\r\n                    x -= 1\r\n                    y += 1\r\n                if min(countleftup, countrightup) >= k :\r\n                    continue\r\n                countrightdown = 1\r\n                x = i\r\n                y = j\r\n                check = 0\r\n                while x + 1 < n and y + 1 < m :\r\n                    if a[x + 1][y + 1] == '*' :\r\n                        countrightdown += 1\r\n                        s = x + 1\r\n                        t = y + 1\r\n                        h = 1\r\n                        while s - 1 >= 0 and t + 1 < m :\r\n                            if a[s - 1][t + 1] == '*' :\r\n                                h += 1\r\n                            else :\r\n                                break\r\n                            s -= 1\r\n                            t += 1\r\n                        o = countrightdown + countleftup\r\n                        if h >= countrightdown and min(o, h) - 1 >= k :\r\n                            check = 1\r\n                            break\r\n                    else:\r\n                        break\r\n                    x += 1\r\n                    y += 1\r\n                if check :\r\n                    continue\r\n                countleftdown = 1\r\n                x = i\r\n                y = j\r\n                check = 0\r\n                while x + 1 < n and y - 1 >= 0 :\r\n                    if a[x + 1][y - 1] == '*' :\r\n                        countleftdown += 1\r\n                        s = x + 1\r\n                        t = y - 1\r\n                        h = 1\r\n                        while s - 1 >= 0 and t - 1 >= 0 :\r\n                            if a[s - 1][t - 1] == '*' :\r\n                                h += 1\r\n                            else :\r\n                                break\r\n                            s -= 1\r\n                            t -= 1\r\n                        o = countleftdown + countrightup\r\n                        if h >= countleftdown and min(o, h) - 1 >= k :\r\n                            check = 1\r\n                            break\r\n                    else:\r\n                        break\r\n                    x += 1\r\n                    y -= 1\r\n                if check :\r\n                    continue\r\n                prin(\"NO\\n\")\r\n                return\r\n    prin(\"YES\\n\")\r\nfor _ in range(int(inpu())) :\r\n    solve()",
    "prob_desc_created_at": "1632839700",
    "tags": [
        "greedy",
        "implementation"
    ],
    "hidden_unit_tests": ""
}