{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\\n2\\n2\\n0\\n1\", \"14\\n0\\n2\\n2\\n2\\n0\\n2\\n2\\n1\\n1\"]",
    "src_uid": "ae7c90b00cc8393fc4db14a6aad32957",
    "prob_desc_notes": null,
    "prob_desc_description": "Given a sequence of integers a1, ..., an and q queries x1, ..., xq on it. For each query xi you have to count the number of pairs (l, r) such that 1 ≤ l ≤ r ≤ n and gcd(al, al + 1, ..., ar) = xi. is a greatest common divisor of v1, v2, ..., vn, that is equal to a largest positive integer that divides all vi.",
    "prob_desc_output_spec": "For each query print the result in a separate line.",
    "prob_desc_input_spec": "The first line of the input contains integer n, (1 ≤ n ≤ 105), denoting the length of the sequence. The next line contains n space separated integers a1, ..., an, (1 ≤ ai ≤ 109). The third line of the input contains integer q, (1 ≤ q ≤ 3 × 105), denoting the number of queries. Then follows q lines, each contain an integer xi, (1 ≤ xi ≤ 109).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_007.jsonl",
    "code_uid": "a22ec356d26f087dee478095b974970c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n2 6 3\\n5\\n1\\n2\\n3\\n4\\n6\", \"7\\n10 20 3 15 1000 60 16\\n10\\n1\\n2\\n3\\n4\\n5\\n6\\n10\\n20\\n60\\n1000\"]",
    "exec_outcome": "PASSED",
    "source_code": "from math import gcd\nfrom collections import defaultdict\nfrom sys import stdin, stdout\n\n##This method is better cause for all the same results we only calculate once\ndef main():\n    GCD_count = defaultdict(int)\n    GCD_map = defaultdict(int)\n    arr_len = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    for start in range(arr_len):\n        temp = defaultdict(int)\n        GCD_count[arr[start]] += 1\n        temp[arr[start]] += 1\n        for gcd_now, occurence in GCD_map.items():\n            res = gcd(gcd_now, arr[start])\n            temp[res] += occurence\n            GCD_count[res] += occurence\n        GCD_map = temp\n    num_queries = int(stdin.readline())\n    for _ in range(num_queries):\n        print(GCD_count[int(stdin.readline())])\n\n\nmain()\n",
    "prob_desc_created_at": "1412514000",
    "tags": [
        "data structures",
        "brute force",
        "math"
    ],
    "hidden_unit_tests": ""
}