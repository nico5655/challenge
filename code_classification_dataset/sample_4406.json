{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"3\\n6\\n3\\n3\\n10\\n3\\n2000000000000000000\", \"200\\n300\\n150\"]",
    "src_uid": "7b394dbced93130f83d61f7e325a980a",
    "prob_desc_notes": "NoteIn the first example:After the first and second queries, the set will contain elements $$$\\{0, 1, 2\\}$$$. The smallest non-negative number that is divisible by $$$1$$$ and is not contained in the set is $$$3$$$.After the fourth query, the set will contain the elements $$$\\{0, 1, 2, 4\\}$$$. The smallest non-negative number that is divisible by $$$2$$$ and is not contained in the set is $$$6$$$.In the second example:   Initially, the set contains only the element $$$\\{0\\}$$$.  After adding an integer $$$100$$$ the set contains elements $$$\\{0, 100\\}$$$.  $$$100\\text{-mex}$$$ of the set is $$$200$$$.  After adding an integer $$$200$$$ the set contains elements $$$\\{0, 100, 200\\}$$$.  $$$100\\text{-mex}$$$ of the set is $$$300$$$.  After adding an integer $$$50$$$ the set contains elements $$$\\{0, 50, 100, 200\\}$$$.  $$$50\\text{-mex}$$$ of the set is $$$150$$$. ",
    "prob_desc_description": "This is the easy version of the problem. The only difference is that in this version there are no \"remove\" queries.Initially you have a set containing one element — $$$0$$$. You need to handle $$$q$$$ queries of the following types:+ $$$x$$$ — add the integer $$$x$$$ to the set. It is guaranteed that this integer is not contained in the set; ? $$$k$$$ — find the $$$k\\text{-mex}$$$ of the set. In our problem, we define the $$$k\\text{-mex}$$$ of a set of integers as the smallest non-negative integer $$$x$$$ that is divisible by $$$k$$$ and which is not contained in the set.",
    "prob_desc_output_spec": "For each query of type ? output a single integer — the $$$k\\text{-mex}$$$ of the set.",
    "prob_desc_input_spec": "The first line contains an integer $$$q$$$ ($$$1 \\leq q \\leq 2 \\cdot 10^5$$$) — the number of queries. The following $$$q$$$ lines describe the queries. An addition query of integer $$$x$$$ is given in the format + $$$x$$$ ($$$1 \\leq x \\leq 10^{18}$$$). It is guaranteed that $$$x$$$ was not contained in the set. A search query of $$$k\\text{-mex}$$$ is given in the format ? $$$k$$$ ($$$1 \\leq k \\leq 10^{18}$$$). It is guaranteed that there will be at least one query of type ?.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_097.jsonl",
    "code_uid": "f206406a5d19cdb245dd241fdcba056c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"15\\n\\n+ 1\\n\\n+ 2\\n\\n? 1\\n\\n+ 4\\n\\n? 2\\n\\n+ 6\\n\\n? 3\\n\\n+ 7\\n\\n+ 8\\n\\n? 1\\n\\n? 2\\n\\n+ 5\\n\\n? 1\\n\\n+ 1000000000000000000\\n\\n? 1000000000000000000\", \"6\\n\\n+ 100\\n\\n? 100\\n\\n+ 200\\n\\n? 100\\n\\n+ 50\\n\\n? 50\"]",
    "exec_outcome": "PASSED",
    "source_code": "# Code by B3D\r\n# Love\r\n\r\nfrom math import *\r\nfrom collections import *\r\nimport io, os\r\nimport sys\r\nfrom bisect import *\r\nfrom heapq import *\r\nfrom itertools import permutations\r\nfrom functools import *\r\nimport re\r\nimport sys\r\nimport threading\r\n\r\n\r\n# from temps import *\r\n \r\nMOD = 998244353\r\n# sys.setrecursionlimit(10**6)\r\n\r\ndef subinp():\r\n    sys.stdin = open(\"input.txt\", \"r\")\r\n    sys.stdout = open(\"op1.txt\", \"w\")\r\n\r\ndef subinp_1():\r\n    sys.stdin = open(\"input.txt\", \"r\")\r\n    sys.stdout = open(\"op2.txt\", \"w\")\r\n\r\n\"\"\"\r\npow2 = [1]\r\n# print(log2(10 ** 9))\r\nfor i in range(29):\r\n    pow2.append(pow2[-1] * 2)\r\n\"\"\"\r\ninput = sys.stdin.readline\r\n \r\n\r\nclass Point:\r\n    def __init__(self, x, l1):\r\n        self.x = x\r\n        self.l1 = l1\r\n\r\n    def __lt__(self, b):\r\n        return self.l1[self.x] < self.l1[b.x]\r\n\r\n    def getval(self):\r\n        return self.x\r\n\r\n\r\ninp    = lambda: int(input())\r\nstrin  = lambda: input().strip()\r\nstrl   = lambda: list(input().rstrip(\"\\r\\n\"))\r\nstrlst = lambda: list(map(str, input().split()))\r\nmult   = lambda: map(int,input().strip().split())\r\nmulf   = lambda: map(float,input().strip().split())\r\nlstin  = lambda: list(map(int,input().strip().split()))\r\n \r\nflush  = lambda: stdout.flush()\r\nstdpr  = lambda x: stdout.write(str(x))\r\n\r\n# @lru_cache(maxsize = 128)\r\n\r\n# print(pref)\r\n# ac = [chr(i) for i in range(ord('a'), ord('z') + 1)]\r\n     \r\n# Power comes in response to a need, not a desire.\r\n\r\n# n = int(input())\r\n# n, k = map(int, input().split())\r\n# s = input()\r\n# l = list(map(int, input().split()))\r\n# dp = [[-1 for i in range(n + 1)] for j in range(2)]\r\n\r\nclass Queen:\r\n    def __init__(self):\r\n        self.chk = defaultdict(bool)\r\n        self.mp = defaultdict(lambda:1)\r\n\r\n    def addnum(self, n):\r\n        self.chk[n] = True\r\n        while self.chk[self.mp[n] * n]:\r\n            self.mp[n] += 1\r\n\r\n    def query(self, n):\r\n        m = n\r\n        ans = 0\r\n        i = self.mp[n]\r\n        # print(d)\r\n        while self.chk[m]:\r\n            self.mp[n] = i\r\n            m = n * i\r\n            i += 1\r\n        print(m)\r\n\r\ndef panda(q):\r\n    obj = Queen()\r\n    lock = threading.Semaphore(10)\r\n    for _ in range(q):\r\n        inp = strl()\r\n        qx = inp[0]\r\n        n = int(''.join(inp[2:]))\r\n\r\n        if qx == '+':\r\n            lock.acquire()\r\n            obj.addnum(n)\r\n            lock.release()\r\n        else:\r\n            lock.acquire()\r\n            obj.query(n)\r\n            lock.release()\r\n\r\n# input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\r\n\r\nt = 1\r\n# t = int(input())\r\n\r\nfor _ in range(t):\r\n    n = inp()\r\n    ans = panda(n)\r\n    # print(ans)\r\n\r\n    # a1 = redpanda(n, l)\r\n    # print(a)\r\n    # print(a1)\r\n    # sys.stdout.write(str(ans))\r\n    # print(\"Case #\" + str(_ + 1) + \": \" + str(ans))",
    "prob_desc_created_at": "1666519500",
    "tags": [
        "brute force",
        "data structures",
        "implementation",
        "number theory"
    ],
    "hidden_unit_tests": ""
}