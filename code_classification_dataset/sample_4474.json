{
    "prob_desc_time_limit": "6 seconds",
    "prob_desc_sample_outputs": "[\"33\", \"165\"]",
    "src_uid": "22a7d097ff4d77d74b2e058f34b4d4e1",
    "prob_desc_notes": null,
    "prob_desc_description": "There are $$$n$$$ fishermen who have just returned from a fishing trip. The $$$i$$$-th fisherman has caught a fish of size $$$a_i$$$.The fishermen will choose some order in which they are going to tell the size of the fish they caught (the order is just a permutation of size $$$n$$$). However, they are not entirely honest, and they may \"increase\" the size of the fish they have caught.Formally, suppose the chosen order of the fishermen is $$$[p_1, p_2, p_3, \\dots, p_n]$$$. Let $$$b_i$$$ be the value which the $$$i$$$-th fisherman in the order will tell to the other fishermen. The values $$$b_i$$$ are chosen as follows:  the first fisherman in the order just honestly tells the actual size of the fish he has caught, so $$$b_1 = a_{p_1}$$$;  every other fisherman wants to tell a value that is strictly greater than the value told by the previous fisherman, and is divisible by the size of the fish that the fisherman has caught. So, for $$$i &gt; 1$$$, $$$b_i$$$ is the smallest integer that is both strictly greater than $$$b_{i-1}$$$ and divisible by $$$a_{p_i}$$$. For example, let $$$n = 7$$$, $$$a = [1, 8, 2, 3, 2, 2, 3]$$$. If the chosen order is $$$p = [1, 6, 7, 5, 3, 2, 4]$$$, then:  $$$b_1 = a_{p_1} = 1$$$;  $$$b_2$$$ is the smallest integer divisible by $$$2$$$ and greater than $$$1$$$, which is $$$2$$$;  $$$b_3$$$ is the smallest integer divisible by $$$3$$$ and greater than $$$2$$$, which is $$$3$$$;  $$$b_4$$$ is the smallest integer divisible by $$$2$$$ and greater than $$$3$$$, which is $$$4$$$;  $$$b_5$$$ is the smallest integer divisible by $$$2$$$ and greater than $$$4$$$, which is $$$6$$$;  $$$b_6$$$ is the smallest integer divisible by $$$8$$$ and greater than $$$6$$$, which is $$$8$$$;  $$$b_7$$$ is the smallest integer divisible by $$$3$$$ and greater than $$$8$$$, which is $$$9$$$. You have to choose the order of fishermen in a way that yields the minimum possible $$$\\sum\\limits_{i=1}^{n} b_i$$$.",
    "prob_desc_output_spec": "Print one integer — the minimum possible value of $$$\\sum\\limits_{i=1}^{n} b_i$$$ you can obtain by choosing the order of fishermen optimally.",
    "prob_desc_input_spec": "The first line contains one integer $$$n$$$ ($$$1 \\le n \\le 1000$$$) — the number of fishermen. The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^6$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 3100,
    "file_name": "train_098.jsonl",
    "code_uid": "e5a23b9fb15ce1972c33c6e67c4cbcf1",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"7\\n1 8 2 3 2 2 3\", \"10\\n5 6 5 6 5 6 5 6 5 6\"]",
    "exec_outcome": "PASSED",
    "source_code": "\r\nimport sys\r\ninput = sys.stdin.readline\r\n\r\nn=int(input())\r\na=list(map(int,input().split(\" \")))\r\n\r\nval=[]\r\n\r\nfor i in range(n):\r\n\tfor j in range(1,n+1):\r\n\t\tval.append([a[i]*j,i])\r\n\r\nval.sort(key=lambda x:x[0])\r\n\r\nvalUnique=[val[0][0]]\r\nedge=[[val[0][1]]]\r\n\r\nfor i in range(1,n*n):\r\n\tif valUnique[-1]==val[i][0]:\r\n\t\tedge[-1].append(val[i][1])\r\n\telse:\r\n\t\tvalUnique.append(val[i][0])\r\n\t\tedge.append([val[i][1]])\r\n\r\nvis=[False for _ in range(n)]\r\nmatch=[-1 for _ in range(n)]\r\n\r\ndef dfs(u):\r\n\tfor v in edge[u]:\r\n\t\tif not vis[v]:\r\n\t\t\tvis[v]=True\r\n\t\t\tif match[v]==-1 or dfs(match[v]):\r\n\t\t\t\tmatch[v]=u\r\n\t\t\t\treturn True\r\n\treturn False\r\n\r\nmatchNum=0\r\nans=0\r\ni=0\r\n\r\nwhile matchNum<n:\r\n\tif dfs(i):\r\n\t\tmatchNum+=1\r\n\t\tans+=valUnique[i]\r\n\t\tfor j in range(n):\r\n\t\t\tvis[j]=False\r\n\ti+=1\r\n\r\nprint(ans)\r\n\t\r\n\r\n\t",
    "prob_desc_created_at": "1662647700",
    "tags": [
        "flows",
        "graph matchings",
        "greedy"
    ],
    "hidden_unit_tests": ""
}