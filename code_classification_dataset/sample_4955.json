{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"? 1 2\\n\\n? 1 3\\n\\n? 1 4\\n\\n! 3\"]",
    "src_uid": "8590f40e7509614694486165ee824587",
    "prob_desc_notes": "NoteIn the first example, the graph could look like this  The lengths of the simple paths between all pairs of vertices in this case are $$$1$$$ or $$$2$$$.   The first query finds out that one of the simple paths from vertex $$$1$$$ to vertex $$$2$$$ has a length of $$$1$$$.  With the second query, we find out that one of the simple paths from vertex $$$1$$$ to vertex $$$3$$$ has length $$$2$$$.  In the third query, we find out that vertex $$$4$$$ is not in the graph. Consequently, the size of the graph is $$$3$$$. ",
    "prob_desc_description": "This is an interactive problem.I want to play a game with you...We hid from you a cyclic graph of $$$n$$$ vertices ($$$3 \\le n \\le 10^{18}$$$). A cyclic graph is an undirected graph of $$$n$$$ vertices that form one cycle. Each vertex belongs to the cycle, i.e. the length of the cycle (the number of edges in it) is exactly $$$n$$$. The order of the vertices in the cycle is arbitrary.You can make queries in the following way: \"? a b\" where $$$1 \\le a, b \\le 10^{18}$$$ and $$$a \\neq b$$$. In response to the query, the interactor outputs on a separate line the length of random of two paths from vertex $$$a$$$ to vertex $$$b$$$, or -1 if $$$\\max(a, b) &gt; n$$$. The interactor chooses one of the two paths with equal probability. The length of the path —is the number of edges in it.You win if you guess the number of vertices in the hidden graph (number $$$n$$$) by making no more than $$$50$$$ queries.Note that the interactor is implemented in such a way that for any ordered pair $$$(a, b)$$$, it always returns the same value for query \"? a b\", no matter how many such queries. Note that the \"? b a\" query may be answered differently by the interactor.The vertices in the graph are randomly placed, and their positions are fixed in advance.Hacks are forbidden in this problem. The number of tests the jury has is $$$50$$$.",
    "prob_desc_output_spec": null,
    "prob_desc_input_spec": null,
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_110.jsonl",
    "code_uid": "c5d8cd50f4f067925b59f3cf404756a3",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1\\n\\n2\\n\\n-1\"]",
    "exec_outcome": "PASSED",
    "source_code": "for i in range(3, 26):\r\n    print(f\"? 1 {i}\", flush=True)\r\n    a = int(input())\r\n    if (a == -1):\r\n        print(f'! {i - 1}')\r\n        exit()\r\n    print(f\"? {i} 1\", flush=True)\r\n    b = int(input())\r\n    if a != b:\r\n        print(f'! {a + b}')\r\n        exit()",
    "prob_desc_created_at": "1662993300",
    "tags": [
        "interactive",
        "probabilities"
    ],
    "hidden_unit_tests": ""
}