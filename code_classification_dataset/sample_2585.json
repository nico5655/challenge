{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"10\", \"-1\"]",
    "src_uid": "8a4a46710104de78bdf3b9d5462f12bf",
    "prob_desc_notes": null,
    "prob_desc_description": "One not particularly beautiful evening Valera got very bored. To amuse himself a little bit, he found the following game.He took a checkered white square piece of paper, consisting of n × n cells. After that, he started to paint the white cells black one after the other. In total he painted m different cells on the piece of paper. Since Valera was keen on everything square, he wondered, how many moves (i.e. times the boy paints a square black) he should make till a black square with side 3 can be found on the piece of paper. But Valera does not know the answer to this question, so he asks you to help him.Your task is to find the minimum number of moves, till the checkered piece of paper has at least one black square with side of 3. Otherwise determine that such move does not exist.",
    "prob_desc_output_spec": "On a single line print the answer to the problem — the minimum number of the move after which the piece of paper has a black square with side 3. If no such move exists, print -1.",
    "prob_desc_input_spec": "The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ min(n·n, 105)) — the size of the squared piece of paper and the number of moves, correspondingly.  Then, m lines contain the description of the moves. The i-th line contains two integers xi, yi (1 ≤ xi, yi ≤ n) — the number of row and column of the square that gets painted on the i-th move.  All numbers on the lines are separated by single spaces. It is guaranteed that all moves are different. The moves are numbered starting from 1 in the order, in which they are given in the input. The columns of the squared piece of paper are numbered starting from 1, from the left to the right. The rows of the squared piece of paper are numbered starting from 1, from top to bottom.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1300,
    "file_name": "train_025.jsonl",
    "code_uid": "0f28da6a1d659e2b85fa4d13888fcc6c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 11\\n1 1\\n1 2\\n1 3\\n2 2\\n2 3\\n1 4\\n2 4\\n3 4\\n3 2\\n3 3\\n4 1\", \"4 12\\n1 1\\n1 2\\n1 3\\n2 2\\n2 3\\n1 4\\n2 4\\n3 4\\n3 2\\n4 2\\n4 1\\n3 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "read = lambda: map(int, input().split())\nxy = [[0]*1002 for i in range(1002)]\nn, m = read()\nfor i in range(m):\n    x, y = read()\n    for j in range(x-1, x+2):\n        for k in range(y-1, y+2):\n            xy[j][k] += 1\n            if xy[j][k] is 9:\n                print(i+1)\n                exit()\nprint(-1)",
    "prob_desc_created_at": "1341329400",
    "tags": [
        "implementation",
        "brute force"
    ],
    "hidden_unit_tests": ""
}