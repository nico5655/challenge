{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"Kuro\", \"Shiro\", \"Katie\", \"Draw\"]",
    "src_uid": "9b277feec7952947357b133a152fd599",
    "prob_desc_notes": "NoteIn the first example, after $$$3$$$ turns, Kuro can change his ribbon into ooooo, which has the beauty of $$$5$$$, while reaching such beauty for Shiro and Katie is impossible (both Shiro and Katie can reach the beauty of at most $$$4$$$, for example by changing Shiro's ribbon into SSiSS and changing Katie's ribbon into Kaaaa). Therefore, the winner is Kuro.In the fourth example, since the length of each of the string is $$$9$$$ and the number of turn is $$$15$$$, everyone can change their ribbons in some way to reach the maximal beauty of $$$9$$$ by changing their strings into zzzzzzzzz after 9 turns, and repeatedly change their strings into azzzzzzzz and then into zzzzzzzzz thrice. Therefore, the game ends in a draw.",
    "prob_desc_description": "After the big birthday party, Katie still wanted Shiro to have some more fun. Later, she came up with a game called treasure hunt. Of course, she invited her best friends Kuro and Shiro to play with her.The three friends are very smart so they passed all the challenges very quickly and finally reached the destination. But the treasure can only belong to one cat so they started to think of something which can determine who is worthy of the treasure. Instantly, Kuro came up with some ribbons.A random colorful ribbon is given to each of the cats. Each color of the ribbon can be represented as an uppercase or lowercase Latin letter. Let's call a consecutive subsequence of colors that appears in the ribbon a subribbon. The beauty of a ribbon is defined as the maximum number of times one of its subribbon appears in the ribbon. The more the subribbon appears, the more beautiful is the ribbon. For example, the ribbon aaaaaaa has the beauty of $$$7$$$ because its subribbon a appears $$$7$$$ times, and the ribbon abcdabc has the beauty of $$$2$$$ because its subribbon abc appears twice.The rules are simple. The game will have $$$n$$$ turns. Every turn, each of the cats must change strictly one color (at one position) in his/her ribbon to an arbitrary color which is different from the unchanged one. For example, a ribbon aaab can be changed into acab in one turn. The one having the most beautiful ribbon after $$$n$$$ turns wins the treasure.Could you find out who is going to be the winner if they all play optimally?",
    "prob_desc_output_spec": "Print the name of the winner (\"Kuro\", \"Shiro\" or \"Katie\"). If there are at least two cats that share the maximum beauty, print \"Draw\".",
    "prob_desc_input_spec": "The first line contains an integer $$$n$$$ ($$$0 \\leq n \\leq 10^{9}$$$) — the number of turns. Next 3 lines contain 3 ribbons of Kuro, Shiro and Katie one per line, respectively. Each ribbon is a string which contains no more than $$$10^{5}$$$ uppercase and lowercase Latin letters and is not empty. It is guaranteed that the length of all ribbons are equal for the purpose of fairness. Note that uppercase and lowercase letters are considered different colors.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_008.jsonl",
    "code_uid": "f1a3b554e7914d8d492b618f181dfb55",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\nKuroo\\nShiro\\nKatie\", \"7\\ntreasurehunt\\nthreefriends\\nhiCodeforces\", \"1\\nabcabc\\ncbabac\\nababca\", \"15\\nfoPaErcvJ\\nmZaxowpbt\\nmkuOlaHRE\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input())\nscores = []\n\nfor _ in range(3):\n    letters = {}\n    word = input()\n    if n >= len(word) - 1 and n > 1:\n        print(\"Draw\")\n        exit(0)\n    for c in word:\n        if c in letters:\n            letters[c] += 1\n        else:\n            letters[c] = 1\n    scores.append(max(letters.values()) + n)\n    if scores[_] > len(word):\n        scores[_] = len(word)\n    if len(letters) == 1 and n == 1:\n        scores[_] = len(word) - 1\n\nif sorted(scores)[2] == sorted(scores)[1]:\n    print(\"Draw\")\nelse:\n    if scores[0] == max(scores):\n        print(\"Kuro\")\n    elif scores[1] == max(scores):\n        print(\"Shiro\")\n    else:\n        print(\"Katie\")\n",
    "prob_desc_created_at": "1526308500",
    "tags": [
        "greedy"
    ],
    "hidden_unit_tests": ""
}