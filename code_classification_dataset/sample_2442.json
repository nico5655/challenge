{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3 2 1 5 4\", \"-1\", \"3 2 1 5 4\", \"-1\"]",
    "src_uid": "848e81bc0aeaec7dbe3ec8e68d7b07ef",
    "prob_desc_notes": null,
    "prob_desc_description": "Let's suppose you have an array a, a stack s (initially empty) and an array b (also initially empty).You may perform the following operations until both a and s are empty:  Take the first element of a, push it into s and remove it from a (if a is not empty);  Take the top element from s, append it to the end of array b and remove it from s (if s is not empty). You can perform these operations in arbitrary order.If there exists a way to perform the operations such that array b is sorted in non-descending order in the end, then array a is called stack-sortable.For example, [3, 1, 2] is stack-sortable, because b will be sorted if we perform the following operations:  Remove 3 from a and push it into s;  Remove 1 from a and push it into s;  Remove 1 from s and append it to the end of b;  Remove 2 from a and push it into s;  Remove 2 from s and append it to the end of b;  Remove 3 from s and append it to the end of b. After all these operations b = [1, 2, 3], so [3, 1, 2] is stack-sortable. [2, 3, 1] is not stack-sortable.You are given k first elements of some permutation p of size n (recall that a permutation of size n is an array of size n where each integer from 1 to n occurs exactly once). You have to restore the remaining n - k elements of this permutation so it is stack-sortable. If there are multiple answers, choose the answer such that p is lexicographically maximal (an array q is lexicographically greater than an array p iff there exists some integer k such that for every i &lt; k qi = pi, and qk &gt; pk). You may not swap or change any of first k elements of the permutation.Print the lexicographically maximal permutation p you can obtain.If there exists no answer then output -1.",
    "prob_desc_output_spec": "If it is possible to restore a stack-sortable permutation p of size n such that the first k elements of p are equal to elements given in the input, print lexicographically maximal such permutation. Otherwise print -1.",
    "prob_desc_input_spec": "The first line contains two integers n and k (2 ≤ n ≤ 200000, 1 ≤ k &lt; n) — the size of a desired permutation, and the number of elements you are given, respectively. The second line contains k integers p1, p2, ..., pk (1 ≤ pi ≤ n) — the first k elements of p. These integers are pairwise distinct.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_022.jsonl",
    "code_uid": "7314c022a4e89102a8f4f903ca374299",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 3\\n3 2 1\", \"5 3\\n2 3 1\", \"5 1\\n3\", \"5 2\\n3 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "# https://codeforces.com/problemset/problem/911/E\n\nn, k = map(int, input().split())\np    = list(map(int, input().split()))\nd    = {x:1 for x in p}\n\ndef solve(p, d, n):\n    add  = []\n    s    = []\n    \n    for x in range(1, n+1):\n        if x not in d:\n            while len(p) > 0:\n                s.append(p.pop(0))\n                \n                if len(s) >= 2 and s[-1] > s[-2]:\n                    return False, None\n                \n            # len(p)=0\n            if len(s) == 0 or s[-1] != x:\n                up = n if len(s) == 0 else s[-1]-1\n            \n                for y in range(up, x-1, -1):\n                    add.append(y)\n                    s.append(y)\n                    d[y]=1\n            s.pop()\n        else:\n            if len(s) == 0 or s[-1] != x:\n                while len(p) > 0:\n                    s.append(p.pop(0))\n                \n                    if len(s) >= 2 and s[-1] > s[-2]:\n                        return False, None\n                \n                    if s[-1] == x:\n                        break\n            s.pop()\n    return True, add\n\nans =  [x for x in p]\nflg, add = solve(p, d, n)\nif flg==False:\n    print(-1)\nelse:\n    print(' '.join([str(x) for x in ans+add]))",
    "prob_desc_created_at": "1514469900",
    "tags": [
        "data structures",
        "constructive algorithms",
        "implementation",
        "greedy"
    ],
    "hidden_unit_tests": ""
}