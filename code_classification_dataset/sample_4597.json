{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"Yes\\nYes\\nNo\\nNo\\nNo\\nNo\\nYes\"]",
    "src_uid": "76b3667cce9e23675e21caf6926f608d",
    "prob_desc_notes": "NoteIn the first test case, $$$[1,2,3]$$$ is already sorted in non-descending order.In the second test case, we can choose $$$i = 1,j = 2,k = 3$$$. Since $$$a_1 \\le a_3$$$, swap $$$a_2$$$ and $$$a_3$$$, the array then becomes $$$[1,2,3]$$$, which is sorted in non-descending order.In the seventh test case, we can do the following operations successively:  Choose $$$i = 5,j = 6,k = 7$$$. Since $$$a_5 \\le a_7$$$, swap $$$a_6$$$ and $$$a_7$$$, the array then becomes $$$[1,2,6,7,4,5,3]$$$.  Choose $$$i = 5,j = 6,k = 7$$$. Since $$$a_5 &gt; a_7$$$, replace $$$a_5$$$ with $$$a_5+a_6=9$$$, the array then becomes $$$[1,2,6,7,9,5,3]$$$.  Choose $$$i = 2,j = 5,k = 7$$$. Since $$$a_2 \\le a_7$$$, swap $$$a_5$$$ and $$$a_7$$$, the array then becomes $$$[1,2,6,7,3,5,9]$$$.  Choose $$$i = 2,j = 4,k = 6$$$. Since $$$a_2 \\le a_6$$$, swap $$$a_4$$$ and $$$a_6$$$, the array then becomes $$$[1,2,6,5,3,7,9]$$$.  Choose $$$i = 1,j = 3,k = 5$$$. Since $$$a_1 \\le a_5$$$, swap $$$a_3$$$ and $$$a_5$$$, the array then becomes $$$[1,2,3,5,6,7,9]$$$, which is sorted in non-descending order. In the third, the fourth, the fifth and the sixth test cases, it can be shown that the array cannot be sorted in non-descending order.",
    "prob_desc_description": "You are given a permutation $$$a_1, a_2, \\ldots, a_n$$$ of size $$$n$$$, where each integer from $$$1$$$ to $$$n$$$ appears exactly once.You can do the following operation any number of times (possibly, zero):  Choose any three indices $$$i, j, k$$$ ($$$1 \\le i &lt; j &lt; k \\le n$$$).  If $$$a_i &gt; a_k$$$, replace $$$a_i$$$ with $$$a_i + a_j$$$. Otherwise, swap $$$a_j$$$ and $$$a_k$$$. Determine whether you can make the array $$$a$$$ sorted in non-descending order.",
    "prob_desc_output_spec": "For each test case, output \"Yes\" (without quotes) if the array can be sorted in non-descending order, and \"No\" (without quotes) otherwise. You can output \"Yes\" and \"No\" in any case (for example, strings \"YES\", \"yEs\" and \"yes\" will be recognized as a positive response).",
    "prob_desc_input_spec": "Each test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 5000$$$) — the number of test cases. The description of test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$3 \\le n \\le 10$$$) — the length of the array $$$a$$$. The second line contains $$$n$$$ integers $$$a_1,a_2,\\dots,a_n$$$ ($$$1 \\le a_i \\le n$$$, $$$a_i \\neq a_j$$$ if $$$i \\neq j$$$) — the elements of the array $$$a$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_101.jsonl",
    "code_uid": "ca3636b92d4fcabeec673b443e461109",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7\\n\\n3\\n\\n1 2 3\\n\\n3\\n\\n1 3 2\\n\\n7\\n\\n5 3 4 7 6 2 1\\n\\n7\\n\\n7 6 5 4 3 2 1\\n\\n5\\n\\n2 1 4 5 3\\n\\n5\\n\\n2 1 3 4 5\\n\\n7\\n\\n1 2 6 7 4 3 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "for i in range(int(input())):\r\n\tn=int(input())\r\n\tx=list(map(int,input().split()))\r\n\tif x[0]==min(x): print('YES')\r\n\telse: print('NO')",
    "prob_desc_created_at": "1667745300",
    "tags": [
        "constructive algorithms",
        "implementation",
        "math"
    ],
    "hidden_unit_tests": ""
}