{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"3.4142135624\", \"37.7044021497\"]",
    "src_uid": "51c355a5b56f9b1599e7d985f0b7c04e",
    "prob_desc_notes": null,
    "prob_desc_description": "In Medieval times existed the tradition of burning witches at steaks together with their pets, black cats. By the end of the 15-th century the population of black cats ceased to exist. The difficulty of the situation led to creating the EIC - the Emergency Inquisitory Commission.The resolution #666 says that a white cat is considered black when and only when the perimeter of its black spots exceeds the acceptable norm. But what does the acceptable norm equal to? Every inquisitor will choose it himself depending on the situation. And your task is to find the perimeter of black spots on the cat's fur.The very same resolution says that the cat's fur is a white square with the length of 105. During the measurement of spots it is customary to put the lower left corner of the fur into the origin of axes (0;0) and the upper right one — to the point with coordinates (105;105). The cats' spots are nondegenerate triangles. The spots can intersect and overlap with each other, but it is guaranteed that each pair of the triangular spots' sides have no more than one common point.We'll regard the perimeter in this problem as the total length of the boarders where a cat's fur changes color.",
    "prob_desc_output_spec": "Print a single number, the answer to the problem, perimeter of the union of triangles. Your answer should differ from the correct one in no more than 10 - 6.",
    "prob_desc_input_spec": "The first input line contains a single integer n (0 ≤ n ≤ 100). It is the number of spots on the cat's fur. The i-th of the last n lines contains 6 integers: x1i, y1i, x2i, y2i, x3i, y3i. They are the coordinates of the i-th triangular spot (0 &lt; xji, yji &lt; 105).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_002.jsonl",
    "code_uid": "55208628c101d596b3c0e3b7a6bad399",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1\\n1 1 2 1 1 2\", \"3\\n3 3 10 3 3 10\\n1 1 9 4 5 6\\n2 2 11 7 6 11\"]",
    "exec_outcome": "PASSED",
    "source_code": "from math import *\neps=1e-14\nn = input()\nl = [map(int,raw_input().split()) for _ in xrange(n)]\nres = 0\ndef isect(a1,b1,c1,x1,y1,x2,y2):\n    a2,b2,c2=y1-y2,x2-x1,x1*y2-y1*x2\n    d = a1*b2-a2*b1\n    if d==0: return None, None\n    x = -1.0*(c1*b2-c2*b1)/d\n    y = -1.0*(c2*a1-a2*c1)/d\n    #print x1,y1,x2,y2,x,y\n    if min(x1,x2)-eps<=x<=max(x1,x2)+eps and min(y1,y2)-eps<=y<=max(y1,y2)+eps: return x,y\n    return None, None\n        \ndef cres(xmi,xma,rx):\n    #print rx\n    n = 0\n    sx = xma-xmi  \n    for j,(x,i) in enumerate(rx):\n        if n>0:\n            sx-=max(0,min(x,xma)-max(xmi,rx[j-1][0]))\n        if i: n+=1\n        else: n-=1\n    return sx\ndef count(x,y,xx,yy,i):\n    a1,b1,c1=y-yy,xx-x,x*yy-y*xx\n    xmi=min(x,xx)\n    xma=max(x,xx)\n    ymi=min(y,yy)\n    yma=max(y,yy)\n    rx=[]\n    ry=[]\n    for j,(ax,ay,bx,by,cx,cy) in enumerate(l):\n        if i==j: continue\n        x1,y1=isect(a1,b1,c1,ax,ay,bx,by)\n        x2,y2=isect(a1,b1,c1,cx,cy,bx,by)\n        x3,y3=isect(a1,b1,c1,cx,cy,ax,ay)\n        x = filter(lambda x: x is not None, [x1,x2,x3])\n        if len(x)<2: continue\n        y = filter(lambda x: x is not None, [y1,y2,y3])\n        #print xmi,xma,ymi,yma,x,y\n        rx.append((min(x),True))\n        rx.append((max(x),False))\n        ry.append((min(y),True))\n        ry.append((max(y),False))\n    rx.sort()\n    ry.sort()\n    return hypot(cres(xmi,xma,rx),cres(ymi,yma,ry))\n        \nfor i,(ax,ay,bx,by,cx,cy) in enumerate(l):\n    res+=count(ax,ay,bx,by,i)\n    res+=count(cx,cy,bx,by,i)\n    res+=count(ax,ay,cx,cy,i)\nprint \"%.7f\"%res\n    \n\n",
    "prob_desc_created_at": "1298649600",
    "tags": [
        "sortings",
        "implementation",
        "geometry"
    ],
    "hidden_unit_tests": ""
}