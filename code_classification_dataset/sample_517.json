{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1\", \"0\"]",
    "src_uid": "f3cf7726739290b280230b562cac7a74",
    "prob_desc_notes": null,
    "prob_desc_description": "The classic programming language of Bitland is Bit++. This language is so peculiar and complicated.The language is that peculiar as it has exactly one variable, called x. Also, there are two operations:  Operation ++ increases the value of variable x by 1.  Operation -- decreases the value of variable x by 1. A statement in language Bit++ is a sequence, consisting of exactly one operation and one variable x. The statement is written without spaces, that is, it can only contain characters \"+\", \"-\", \"X\". Executing a statement means applying the operation it contains.A programme in Bit++ is a sequence of statements, each of them needs to be executed. Executing a programme means executing all the statements it contains.You're given a programme in language Bit++. The initial value of x is 0. Execute the programme and find its final value (the value of the variable when this programme is executed).",
    "prob_desc_output_spec": "Print a single integer — the final value of x.",
    "prob_desc_input_spec": "The first line contains a single integer n (1 ≤ n ≤ 150) — the number of statements in the programme. Next n lines contain a statement each. Each statement contains exactly one operation (++ or --) and exactly one variable x (denoted as letter «X»). Thus, there are no empty statements. The operation and the variable can be written in any order.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_002.jsonl",
    "code_uid": "5757d67fbaebcfe3dcb7e7840b77febd",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1\\n++X\", \"2\\nX++\\n--X\"]",
    "exec_outcome": "PASSED",
    "source_code": "try:\n    n = int(input())\n    if n >= 1 and n <= 150:\n        s,x,c = [],0,True\n        \n        for i in range(n):\n            s = input()\n\n            if s in [\"++x\",\"x++\",\"++X\",\"X++\"]: x+=1\n            elif s in [\"--x\",\"x--\",\"--X\",\"X--\"]: x-=1\n            else:\n                c = False\n                break\n        \n        if c == True: print(x)\n\nexcept: pass",
    "prob_desc_created_at": "1363188600",
    "tags": [
        "implementation"
    ],
    "hidden_unit_tests": ""
}