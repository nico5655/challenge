{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"sword 2 petr mike \\npagstarmor 1 blackjack \\niceorb 2 teddy bobby\", \"longbow 1 mike \\npagstarmor 1 bobby \\niceorb 2 petr joe\"]",
    "src_uid": "b363a33bc8eca4b6c3509f479318aad6",
    "prob_desc_notes": "NoteIn the second sample we have no free space inside the items, therefore we cannot move the residents between them.",
    "prob_desc_description": "Each item in the game has a level. The higher the level is, the higher basic parameters the item has. We shall consider only the following basic parameters: attack (atk), defense (def) and resistance to different types of impact (res).Each item belongs to one class. In this problem we will only consider three of such classes: weapon, armor, orb.Besides, there's a whole new world hidden inside each item. We can increase an item's level travelling to its world. We can also capture the so-called residents in the Item WorldResidents are the creatures that live inside items. Each resident gives some bonus to the item in which it is currently located. We will only consider residents of types: gladiator (who improves the item's atk), sentry (who improves def) and physician (who improves res).Each item has the size parameter. The parameter limits the maximum number of residents that can live inside an item. We can move residents between items. Within one moment of time we can take some resident from an item and move it to some other item if it has a free place for a new resident. We cannot remove a resident from the items and leave outside — any of them should be inside of some item at any moment of time.Laharl has a certain number of items. He wants to move the residents between items so as to equip himself with weapon, armor and a defensive orb. The weapon's atk should be largest possible in the end. Among all equipping patterns containing weapon's maximum atk parameter we should choose the ones where the armor’s def parameter is the largest possible. Among all such equipment patterns we should choose the one where the defensive orb would have the largest possible res parameter. Values of the parameters def and res of weapon, atk and res of armor and atk and def of orb are indifferent for Laharl.Find the optimal equipment pattern Laharl can get.",
    "prob_desc_output_spec": "Print on the first line the name of the weapon in the optimal equipping pattern; then print the number of residents the weapon contains; then print the residents' names. Print on the second and third lines in the same form the names of the armor and defensive orb as well as the residents they contain.  Use single spaces for separation. If there are several possible solutions, print any of them.",
    "prob_desc_input_spec": "The first line contains number n (3 ≤ n ≤ 100) — representing how many items Laharl has. Then follow n lines. Each line contains description of an item. The description has the following form: \"name class atk def res size\" — the item's name, class, basic attack, defense and resistance parameters and its size correspondingly.    name and class are strings and atk, def, res and size are integers.  name consists of lowercase Latin letters and its length can range from 1 to 10, inclusive.  class can be \"weapon\", \"armor\" or \"orb\".  0 ≤ atk, def, res ≤ 1000.  1 ≤ size ≤ 10.  It is guaranteed that Laharl has at least one item of each class. The next line contains an integer k (1 ≤ k ≤ 1000) — the number of residents. Then k lines follow. Each of them describes a resident. A resident description looks like: \"name type bonus home\" — the resident's name, his type, the number of points the resident adds to the item's corresponding parameter and the name of the item which currently contains the resident.    name, type and home are strings and bonus is an integer.  name consists of lowercase Latin letters and its length can range from 1 to 10, inclusive.  type may be \"gladiator\", \"sentry\" or \"physician\".  1 ≤ bonus ≤ 100.  It is guaranteed that the number of residents in each item does not exceed the item's size. The names of all items and residents are pairwise different. All words and numbers in the input are separated by single spaces.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_010.jsonl",
    "code_uid": "10a261aa7bacb0a85234843e005eac41",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\nsword weapon 10 2 3 2\\npagstarmor armor 0 15 3 1\\niceorb orb 3 2 13 2\\nlongbow weapon 9 1 2 1\\n5\\nmike gladiator 5 longbow\\nbobby sentry 6 pagstarmor\\npetr gladiator 7 iceorb\\nteddy physician 6 sword\\nblackjack sentry 8 sword\", \"4\\nsword weapon 10 2 3 2\\npagstarmor armor 0 15 3 1\\niceorb orb 3 2 13 2\\nlongbow weapon 9 1 2 1\\n6\\nmike gladiator 5 longbow\\nbobby sentry 6 pagstarmor\\npetr gladiator 7 iceorb\\nteddy physician 6 sword\\nblackjack sentry 8 sword\\njoe physician 6 iceorb\"]",
    "exec_outcome": "PASSED",
    "source_code": "# written with help of failed tests\ndef searchBest(iType, number, rType, countResidents):\n    global items, equipped\n    best = 0\n    ret = None\n    for item, params in items.items():\n        if params[0] == iType:\n            val = int(params[number])\n            if countResidents:\n                for resid in equipped[item]:\n                    if resid[1] == rType:\n                        val += int(resid[2])\n            if val > best:\n                best = val\n                ret = item\n    return ret\n\ndef printItem(item):\n    global equipped\n    print(item, len(equipped[item]), ' '.join([x[0] for x in equipped[item]]))\n\ndef searchFor(iType, number, might):\n    global items, equipped, liesIn\n    pSum = [0]\n    for x in might:\n        pSum.append(pSum[-1] + int(x[2]))\n    while len(pSum) < 11:\n        pSum.append(pSum[-1])\n    \n    bestVal = 0\n    for item, params in items.items():\n        if params[0] == iType:\n            val = int(params[number]) + pSum[int(params[4])]\n            if val > bestVal:\n                bestVal = val\n\n    for item, params in items.items():\n        if params[0] == iType:\n            val = int(params[number]) + pSum[int(params[4])]\n            if val == bestVal:\n                for i in range(min(int(params[4]), len(might))):\n                    want = might[i]\n                    equipped[liesIn[want[0]]].remove(want)\n                    liesIn[want[0]] = item\n\n                    if len(equipped[item]) == int(params[4]):\n                        rm = equipped[item][0]\n                        liesIn[rm[0]] = want[3]\n                        equipped[want[3]] = [rm] + equipped[want[3]]\n                        equipped[item].remove(rm)\n                    equipped[item].append(want)\n                        \n                return item\n\n\ndef rel(item):\n    global liesIn, equipped, items\n    while len(equipped[item]) > int(items[item][4]):\n        toDelete = equipped[item][0]\n        for other in items:\n            if len(equipped[other]) < int(items[other][4]):\n                liesIn[toDelete[0]] = other\n                equipped[other].append(toDelete)\n                break\n        equipped[item] = equipped[item][1:]\n\nn = int(input())\nitems = dict()\nequipped = dict()\nfor i in range(n):\n    t = tuple(input().split())\n    items[t[0]] = t[1:]\n    equipped[t[0]] = []\n\nk = int(input())\nresidents = [None for i in range(k)]\nglads = dict()\nliesIn = dict()\nfor i in range(k):\n    residents[i] = tuple(input().split())\n    equipped[residents[i][3]] = equipped.get(residents[i][3], []) + [residents[i]]\n    liesIn[residents[i][0]] = residents[i][3]\n\ncanSwap = False\nfor name, val in equipped.items():\n    if len(val) < int(items[name][4]):\n        canSwap = True\n\nif canSwap:\n    glads = sorted([x for x in residents if x[1] == 'gladiator'], key = lambda x: -int(x[2]))\n    sentries = sorted([x for x in residents if x[1] == 'sentry'], key = lambda x: -int(x[2]))\n    phys = sorted([x for x in residents if x[1] == 'physician'], key = lambda x: -int(x[2]))\n\n    wp = searchFor('weapon', 1, glads)\n    ar = searchFor('armor', 2, sentries)\n    orb = searchFor('orb', 3, phys)\n    rel(wp)\n    rel(ar)\n    rel(orb)\n    printItem(wp)\n    printItem(ar)\n    printItem(orb)\nelse:\n    printItem(searchBest('weapon', 1, 'gladiator', True))\n    printItem(searchBest('armor', 2, 'sentry', True))\n    printItem(searchBest('orb', 3, 'physician', True))\n",
    "prob_desc_created_at": "1313247600",
    "tags": [
        "implementation",
        "sortings",
        "brute force"
    ],
    "hidden_unit_tests": ""
}