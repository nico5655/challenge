{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"54-98-71\", \"11-987-33\"]",
    "src_uid": "6f6859aabc1c9cbb9ee0d910064d87c2",
    "prob_desc_notes": null,
    "prob_desc_description": "Phone number in Berland is a sequence of n digits. Often, to make it easier to memorize the number, it is divided into groups of two or three digits. For example, the phone number 1198733 is easier to remember as 11-987-33. Your task is to find for a given phone number any of its divisions into groups of two or three digits.",
    "prob_desc_output_spec": "Output any of divisions of the given phone number into groups of two or three digits. Separate groups by single character -. If the answer is not unique, output any.",
    "prob_desc_input_spec": "The first line contains integer n (2 ≤ n ≤ 100) — amount of digits in the phone number. The second line contains n digits — the phone number to divide into groups.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_017.jsonl",
    "code_uid": "7c079cdbba7242b2b648af53b1a4cd37",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n549871\", \"7\\n1198733\"]",
    "exec_outcome": "PASSED",
    "source_code": "n  = int(raw_input())\npn = str(raw_input())\nphn =[i for i in pn]\nm= len(phn)//2\nfor i in range(1,m):\n    d=3*i-1\n    phn[d:d]=\"-\"\nF=''.join(phn)\nprint(F)",
    "prob_desc_created_at": "1280761200",
    "tags": [
        "implementation"
    ],
    "hidden_unit_tests": ""
}