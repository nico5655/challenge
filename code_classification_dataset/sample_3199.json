{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"0\", \"1\", \"2\"]",
    "src_uid": "a32db37cb2ebe8945a4c2f32fa2d7fc8",
    "prob_desc_notes": null,
    "prob_desc_description": "Polycarp loves geometric progressions — he collects them. However, as such progressions occur very rarely, he also loves the sequences of numbers where it is enough to delete a single element to get a geometric progression.In this task we shall define geometric progressions as finite sequences of numbers a1, a2, ..., ak, where ai = c·bi - 1 for some real numbers c and b. For example, the sequences [2, -4, 8], [0, 0, 0, 0], [199] are geometric progressions and [0, 1, 2, 3] is not.Recently Polycarp has found a sequence and he can't classify it. Help him to do it. Determine whether it is a geometric progression. If it is not, check if it can become a geometric progression if an element is deleted from it.",
    "prob_desc_output_spec": "Print 0, if the given sequence is a geometric progression. Otherwise, check if it is possible to make the sequence a geometric progression by deleting a single element. If it is possible, print 1. If it is impossible, print 2.",
    "prob_desc_input_spec": "The first line contains an integer n (1 ≤ n ≤ 105) — the number of elements in the given sequence. The second line contains the given sequence. The numbers are space-separated. All the elements of the given sequence are integers and their absolute value does not exceed 104.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_046.jsonl",
    "code_uid": "c338c005d3bca47bceb19ce36c52b28b",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n3 6 12 24\", \"4\\n-8 -16 24 -32\", \"4\\n0 1 2 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "def main():\n    n = int(input())\n    l = tuple(map(int, input().split()))\n    if n == 1:\n        return 0\n    if n == 2:\n        if l[0] == 0 and l[1] != 0: return 1\n        return 0\n    def div(a, b):\n        if b == 0: return 0 if a == 0 else \"inf\"\n        return a / b\n    pref, suff = [[\"init\", 1]], [[\"init\", 1]]\n    for i in range(1, n):\n        d = div(l[i], l[i-1])\n        if pref[-1][0] == \"init\":\n            pass\n        elif d != pref[-1][0]:\n            for j in range(i, n):\n                pref += [[\"null\", 0]]\n            break\n        pref += [[d, 1]]\n    for i in range(n - 1, -1, -1):\n        d = div(l[i], l[i-1])\n        if l[i - 1] == 0 and l[i] != 0:\n            suff[-1][0] = suff[-2][0] if len(suff) > 1 else 1\n        if d != suff[-1][0] and suff[-1][0] != \"init\":\n            for j in range(i-1, -1,-1):\n                suff += [[\"null\", 0]]\n            break\n        suff += [[d, 1]]\n    #print(pref)\n    #print(suff)\n    if pref[-1][1] == 1: return 0\n    if pref[-2][1] == 1 or suff[-2][1] == 1: return 1\n    \n    for i in range(1,n-1):\n        pr, sf = pref[i - 1], suff[n - i - 2]\n        dv = div(l[i+1], l[i-1])\n        #print(pr,sf,dv,l[i-1:i+2])\n        if pr[0] == \"init\" and sf[0] == \"init\": return 1\n        if pr[0] == \"init\" and dv == sf[0]:\n            return 1\n        elif sf[0] == \"init\" and dv == pr[0]:\n            return 1\n        elif dv == pr[0] and dv == sf[0]:\n            return 1\n    return 2\nprint(main())\n",
    "prob_desc_created_at": "1293552000",
    "tags": [
        "implementation"
    ],
    "hidden_unit_tests": ""
}