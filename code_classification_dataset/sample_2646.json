{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"++**\\n+*+*\\n++++\\n+**+\"]",
    "src_uid": "4e25d49e8a50dacc1cfcc9413ee83db6",
    "prob_desc_notes": "NoteConsider all scalar products in example:  Vectors 1 and 2: ( + 1)·( + 1) + ( + 1)·( - 1) + ( - 1)·( + 1) + ( - 1)·( - 1) = 0  Vectors 1 and 3: ( + 1)·( + 1) + ( + 1)·( + 1) + ( - 1)·( + 1) + ( - 1)·( + 1) = 0  Vectors 1 and 4: ( + 1)·( + 1) + ( + 1)·( - 1) + ( - 1)·( - 1) + ( - 1)·( + 1) = 0  Vectors 2 and 3: ( + 1)·( + 1) + ( - 1)·( + 1) + ( + 1)·( + 1) + ( - 1)·( + 1) = 0  Vectors 2 and 4: ( + 1)·( + 1) + ( - 1)·( - 1) + ( + 1)·( - 1) + ( - 1)·( + 1) = 0  Vectors 3 and 4: ( + 1)·( + 1) + ( + 1)·( - 1) + ( + 1)·( - 1) + ( + 1)·( + 1) = 0 ",
    "prob_desc_description": "The semester is already ending, so Danil made an effort and decided to visit a lesson on harmony analysis to know how does the professor look like, at least. Danil was very bored on this lesson until the teacher gave the group a simple task: find 4 vectors in 4-dimensional space, such that every coordinate of every vector is 1 or  - 1 and any two vectors are orthogonal. Just as a reminder, two vectors in n-dimensional space are considered to be orthogonal if and only if their scalar product is equal to zero, that is: .Danil quickly managed to come up with the solution for this problem and the teacher noticed that the problem can be solved in a more general case for 2k vectors in 2k-dimensinoal space. When Danil came home, he quickly came up with the solution for this problem. Can you cope with it?",
    "prob_desc_output_spec": "Print 2k lines consisting of 2k characters each. The j-th character of the i-th line must be equal to ' * ' if the j-th coordinate of the i-th vector is equal to  - 1, and must be equal to ' + ' if it's equal to  + 1. It's guaranteed that the answer always exists. If there are many correct answers, print any.",
    "prob_desc_input_spec": "The only line of the input contains a single integer k (0 ≤ k ≤ 9).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_027.jsonl",
    "code_uid": "ae68d802ca76f52f8f59319ee6682d55",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\"]",
    "exec_outcome": "PASSED",
    "source_code": "inv=lambda t:''.join('*'if u=='+'else'+'for u in t)\nn=int(input())\nr=['+']\nfor _ in range(n):\n\tr=[r[i] * 2 for i in range(len(r))] + [r[i]+inv(r[i]) for i in range(len(r))]\nprint(*r,sep='\\n')",
    "prob_desc_created_at": "1451215200",
    "tags": [
        "constructive algorithms"
    ],
    "hidden_unit_tests": ""
}