{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"50\", \"-1\"]",
    "src_uid": "91be5db48b44a44adff4c809ffbb8e3e",
    "prob_desc_notes": "NoteIn the first test sample Caisa can buy the fourth type of sugar, in such a case he will take 50 sweets as a change.",
    "prob_desc_description": "Caisa is going to have a party and he needs to buy the ingredients for a big chocolate cake. For that he is going to the biggest supermarket in town.Unfortunately, he has just s dollars for sugar. But that's not a reason to be sad, because there are n types of sugar in the supermarket, maybe he able to buy one. But that's not all. The supermarket has very unusual exchange politics: instead of cents the sellers give sweets to a buyer as a change. Of course, the number of given sweets always doesn't exceed 99, because each seller maximizes the number of dollars in the change (100 cents can be replaced with a dollar).Caisa wants to buy only one type of sugar, also he wants to maximize the number of sweets in the change. What is the maximum number of sweets he can get? Note, that Caisa doesn't want to minimize the cost of the sugar, he only wants to get maximum number of sweets as change. ",
    "prob_desc_output_spec": "Print a single integer representing the maximum number of sweets he can buy, or -1 if he can't buy any type of sugar.",
    "prob_desc_input_spec": "The first line contains two space-separated integers n, s (1 ≤ n, s ≤ 100). The i-th of the next n lines contains two integers xi, yi (1 ≤ xi ≤ 100; 0 ≤ yi &lt; 100), where xi represents the number of dollars and yi the number of cents needed in order to buy the i-th type of sugar.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1200,
    "file_name": "train_002.jsonl",
    "code_uid": "9628ba39f162ed2312dccaa5db2b64c2",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0\", \"5 5\\n10 10\\n20 20\\n30 30\\n40 40\\n50 50\"]",
    "exec_outcome": "PASSED",
    "source_code": "n,s=map(int,raw_input().strip().split())\n\nmax_change=-1\n\nfor i in range(n):\n    x,y=map(int,raw_input().strip().split())\n    if s==x and y==0 and max_change==-1:max_change=0    \n    elif s>x and (100-y)%100>max_change:max_change=(100-y)%100\n    \nprint max_change\n        \n        \n    \n",
    "prob_desc_created_at": "1409383800",
    "tags": [
        "implementation",
        "brute force"
    ],
    "hidden_unit_tests": ""
}