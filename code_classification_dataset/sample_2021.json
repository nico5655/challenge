{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"No\\nYes\\nNo\\nYes\"]",
    "src_uid": "09d0f11bdb9eca2161dee83a335dd2b7",
    "prob_desc_notes": "NoteIn the first test case it can be shown that it is impossible to convert $$$a$$$ into $$$b$$$.In the second test case,\"abba\" $$$\\xrightarrow{\\text{inc}}$$$ \"acca\" $$$\\xrightarrow{\\text{inc}}$$$ $$$\\ldots$$$ $$$\\xrightarrow{\\text{inc}}$$$ \"azza\".Here \"swap\" denotes an operation of the first type, and \"inc\" denotes an operation of the second type.In the fourth test case,\"aaabba\" $$$\\xrightarrow{\\text{swap}}$$$ \"aaabab\" $$$\\xrightarrow{\\text{swap}}$$$ \"aaaabb\" $$$\\xrightarrow{\\text{inc}}$$$ $$$\\ldots$$$ $$$\\xrightarrow{\\text{inc}}$$$ \"ddaabb\" $$$\\xrightarrow{\\text{inc}}$$$ $$$\\ldots$$$ $$$\\xrightarrow{\\text{inc}}$$$ \"ddddbb\" $$$\\xrightarrow{\\text{inc}}$$$ $$$\\ldots$$$ $$$\\xrightarrow{\\text{inc}}$$$ \"ddddcc\".",
    "prob_desc_description": "Ashish has two strings $$$a$$$ and $$$b$$$, each of length $$$n$$$, and an integer $$$k$$$. The strings only contain lowercase English letters.He wants to convert string $$$a$$$ into string $$$b$$$ by performing some (possibly zero) operations on $$$a$$$.In one move, he can either   choose an index $$$i$$$ ($$$1 \\leq i\\leq n-1$$$) and swap $$$a_i$$$ and $$$a_{i+1}$$$, or  choose an index $$$i$$$ ($$$1 \\leq i \\leq n-k+1$$$) and if $$$a_i, a_{i+1}, \\ldots, a_{i+k-1}$$$ are all equal to some character $$$c$$$ ($$$c \\neq$$$ 'z'), replace each one with the next character $$$(c+1)$$$, that is, 'a' is replaced by 'b', 'b' is replaced by 'c' and so on. Note that he can perform any number of operations, and the operations can only be performed on string $$$a$$$. Help Ashish determine if it is possible to convert string $$$a$$$ into $$$b$$$ after performing some (possibly zero) operations on it.",
    "prob_desc_output_spec": "For each test case, print \"Yes\" if Ashish can convert $$$a$$$ into $$$b$$$ after some moves, else print \"No\". You may print the letters of the answer in any case (upper or lower).",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^5$$$) — the number of test cases. The description of each test case is as follows. The first line of each test case contains two integers $$$n$$$ ($$$2 \\leq n \\leq 10^6$$$) and $$$k$$$ ($$$1 \\leq k \\leq n$$$). The second line of each test case contains the string $$$a$$$ of length $$$n$$$ consisting of lowercase English letters. The third line of each test case contains the string $$$b$$$ of length $$$n$$$ consisting of lowercase English letters. It is guaranteed that the sum of values $$$n$$$ among all test cases does not exceed $$$10^6$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": null,
    "file_name": "train_016.jsonl",
    "code_uid": "9508bd81d1aba0ef7f4ccf3208f0cd69",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n3 3\\nabc\\nbcd\\n4 2\\nabba\\nazza\\n2 1\\nzz\\naa\\n6 2\\naaabba\\nddddcc\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\ninput = sys.stdin.readline\n\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = input()\n    b = input()\n    c1 = [0] * 26\n    c2 = [0] * 26\n    for i in range(n):\n        c1[ord(a[i]) - 97] += 1\n        c2[ord(b[i]) - 97] += 1\n    ans = 'YES'\n    for j in range(26):\n        if c1[j] == c2[j]:\n            continue\n        elif c1[j] < c2[j]:\n            ans = 'NO'\n            break\n        elif (c1[j] - c2[j]) % k != 0:\n            ans = 'NO'\n            break\n        else:\n            c1[j+1] = c1[j+1] + c1[j] - c2[j]\n    print(ans)\n            \n        \n        \n    \n        \n        \n            \n        \n        \n    \n    \n            \n            \n\n\n  \n        \n    \n    \n    \n    \n            \n           \n                                \n            \n            \n            \n    \n\n    \n    \n    \n",
    "prob_desc_created_at": "1605969300",
    "tags": [
        "dp",
        "hashing",
        "greedy",
        "implementation",
        "strings"
    ],
    "hidden_unit_tests": ""
}