{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"24\", \"2835\", \"0\", \"46\"]",
    "src_uid": "45d8827bfee3afeeed79741a2c3b0a0f",
    "prob_desc_notes": "NoteIn the first example, we can obtain $$$9$$$ strings:  \"acabac\" — there are $$$2$$$ subsequences \"abc\",  \"acabbc\" — there are $$$4$$$ subsequences \"abc\",  \"acabcc\" — there are $$$4$$$ subsequences \"abc\",  \"acbbac\" — there are $$$2$$$ subsequences \"abc\",  \"acbbbc\" — there are $$$3$$$ subsequences \"abc\",  \"acbbcc\" — there are $$$4$$$ subsequences \"abc\",  \"accbac\" — there is $$$1$$$ subsequence \"abc\",  \"accbbc\" — there are $$$2$$$ subsequences \"abc\",  \"accbcc\" — there are $$$2$$$ subsequences \"abc\". So, there are $$$2 + 4 + 4 + 2 + 3 + 4 + 1 + 2 + 2 = 24$$$ subsequences \"abc\" in total.",
    "prob_desc_description": "You are given a string $$$s$$$ consisting of lowercase Latin letters \"a\", \"b\" and \"c\" and question marks \"?\".Let the number of question marks in the string $$$s$$$ be $$$k$$$. Let's replace each question mark with one of the letters \"a\", \"b\" and \"c\". Here we can obtain all $$$3^{k}$$$ possible strings consisting only of letters \"a\", \"b\" and \"c\". For example, if $$$s = $$$\"ac?b?c\" then we can obtain the following strings: $$$[$$$\"acabac\", \"acabbc\", \"acabcc\", \"acbbac\", \"acbbbc\", \"acbbcc\", \"accbac\", \"accbbc\", \"accbcc\"$$$]$$$.Your task is to count the total number of subsequences \"abc\" in all resulting strings. Since the answer can be very large, print it modulo $$$10^{9} + 7$$$.A subsequence of the string $$$t$$$ is such a sequence that can be derived from the string $$$t$$$ after removing some (possibly, zero) number of letters without changing the order of remaining letters. For example, the string \"baacbc\" contains two subsequences \"abc\" — a subsequence consisting of letters at positions $$$(2, 5, 6)$$$ and a subsequence consisting of letters at positions $$$(3, 5, 6)$$$.",
    "prob_desc_output_spec": "Print the total number of subsequences \"abc\" in all strings you can obtain if you replace all question marks with letters \"a\", \"b\" and \"c\", modulo $$$10^{9} + 7$$$.",
    "prob_desc_input_spec": "The first line of the input contains one integer $$$n$$$ $$$(3 \\le n \\le 200\\,000)$$$ — the length of $$$s$$$. The second line of the input contains the string $$$s$$$ of length $$$n$$$ consisting of lowercase Latin letters \"a\", \"b\" and \"c\" and question marks\"?\".",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_009.jsonl",
    "code_uid": "4e5adc354e27acba72d7110f0b62d8f7",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\nac?b?c\", \"7\\n???????\", \"9\\ncccbbbaaa\", \"5\\na???c\"]",
    "exec_outcome": "PASSED",
    "source_code": "#matthew's bad code\nimport re\nimport sys\nMOD = 1000000007\n\n# string s of length n\nn = input()\ns = input()\n \n# number of a sequences, ab sequences, and abc sequences in s\n# sets is the total number of distinct sets generated\n# e.g. {a, ?, b} branches into three sets {a, a, b}; {a, b, b}; {a, c, b}\nnum_a = 0\nnum_ab = 0\nnum_abc = 0\nnum_sets = 1;\n\nfor char in s:\n    if char == 'a':\n        num_a = (num_a + num_sets + MOD)%MOD\n    elif char == 'b':\n        num_ab = (num_a + num_ab + MOD)%MOD\n    elif char == 'c':\n        num_abc = (num_ab + num_abc + MOD)%MOD\n    elif char == '?':\n        num_abc = (num_ab + 3 * num_abc + MOD)%MOD\n        num_ab = (num_a + 3 * num_ab + MOD)%MOD \n        num_a = (num_sets + 3 * num_a + MOD)%MOD\n        num_sets = (3 * num_sets + MOD)%MOD\n    #print(num_a, num_ab, num_abc)\nprint(num_abc)",
    "prob_desc_created_at": "1601280300",
    "tags": [
        "dp",
        "combinatorics",
        "strings"
    ],
    "hidden_unit_tests": ""
}