{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"3\\n0\\n0\\n0\\n3\"]",
    "src_uid": "aded139ff4d3f313f8e4d81559760f12",
    "prob_desc_notes": "NoteIn the first test case, one of the ways to make $$$s$$$ good is the following.Change $$$s_3$$$, $$$s_6$$$ and $$$s_7$$$ to '0', after that $$$s$$$ becomes \"1100000000\", it can be divided into \"11\" and \"00000000\", which lengths are $$$2$$$ and $$$8$$$ respectively. There are other ways to operate $$$3$$$ times to make $$$s$$$ good, such as \"1111110000\", \"1100001100\", \"1111001100\".In the second, third and fourth test cases, $$$s$$$ is good initially, so no operation is required.",
    "prob_desc_description": "This is the easy version of the problem. The only difference between the two versions is that the harder version asks additionally for a minimum number of subsegments.Tokitsukaze has a binary string $$$s$$$ of length $$$n$$$, consisting only of zeros and ones, $$$n$$$ is even.Now Tokitsukaze divides $$$s$$$ into the minimum number of contiguous subsegments, and for each subsegment, all bits in each subsegment are the same. After that, $$$s$$$ is considered good if the lengths of all subsegments are even.For example, if $$$s$$$ is \"11001111\", it will be divided into \"11\", \"00\" and \"1111\". Their lengths are $$$2$$$, $$$2$$$, $$$4$$$ respectively, which are all even numbers, so \"11001111\" is good. Another example, if $$$s$$$ is \"1110011000\", it will be divided into \"111\", \"00\", \"11\" and \"000\", and their lengths are $$$3$$$, $$$2$$$, $$$2$$$, $$$3$$$. Obviously, \"1110011000\" is not good.Tokitsukaze wants to make $$$s$$$ good by changing the values of some positions in $$$s$$$. Specifically, she can perform the operation any number of times: change the value of $$$s_i$$$ to '0' or '1'($$$1 \\leq i \\leq n$$$). Can you tell her the minimum number of operations to make $$$s$$$ good?",
    "prob_desc_output_spec": "For each test case, print a single line with one integer — the minimum number of operations to make $$$s$$$ good.",
    "prob_desc_input_spec": "The first contains a single positive integer $$$t$$$ ($$$1 \\leq t \\leq 10\\,000$$$) — the number of test cases. For each test case, the first line contains a single integer $$$n$$$ ($$$2 \\leq n \\leq 2 \\cdot 10^5$$$) — the length of $$$s$$$, it is guaranteed that $$$n$$$ is even. The second line contains a binary string $$$s$$$ of length $$$n$$$, consisting only of zeros and ones. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_108.jsonl",
    "code_uid": "3c4b4b22b57a9eb77f1ccdd7704725b4",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n10\\n1110011000\\n8\\n11001111\\n2\\n00\\n2\\n11\\n6\\n100110\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input())\r\n\r\nfor i in range(n):\r\n    num = int(input())\r\n    s = input()\r\n    j = 0\r\n    son = []\r\n    while j < num - 1:\r\n        if s[j] == s[j + 1]:\r\n            j = j + 1\r\n        else:\r\n            son.append(j)\r\n            j = j + 1\r\n    son.append(num - 1)\r\n    lenth=[son[0]+1]\r\n    for obj in range(len(son)-1):\r\n        lenth.append(son[obj+1]-son[obj])\r\n    answer=0\r\n    n=0\r\n    while n<=len(lenth)-1:\r\n        if lenth[n]%2!=0:\r\n            x=n+1\r\n            while lenth[x]%2==0:\r\n                x=x+1\r\n            answer=answer+x-n\r\n            n=x+1\r\n        else:\r\n            n+=1\r\n    print(answer)",
    "prob_desc_created_at": "1652020500",
    "tags": [
        "implementation"
    ],
    "hidden_unit_tests": ""
}