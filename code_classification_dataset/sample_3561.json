{
    "prob_desc_time_limit": "2 секунды",
    "prob_desc_sample_outputs": "[\"16 3\", \"1 4\"]",
    "src_uid": "c4fe684387076927e6d177b5178db746",
    "prob_desc_notes": "ПримечаниеВ первом тестовом примере максимальная степень двойки, на которую делится хотя бы одно число, равна 16 = 24, на неё делятся числа 80, 16 и 48.Во втором тестовом примере все четыре числа нечётные, поэтому делятся только на 1 = 20. Это и будет максимальной степенью двойки для данного примера.",
    "prob_desc_description": "Поликарп мечтает стать программистом и фанатеет от степеней двойки. Среди двух чисел ему больше нравится то, которое делится на большую степень числа 2. По заданной последовательности целых положительных чисел a1, a2, ..., an требуется найти r — максимальную степень числа 2, на которую делится хотя бы одно из чисел последовательности. Кроме того, требуется вывести количество чисел ai, которые делятся на r.",
    "prob_desc_output_spec": "Выведите два числа:   r — максимальную степень двойки, на которую делится хотя бы одно из чисел заданной последовательности,  количество элементов последовательности, которые делятся на r. ",
    "prob_desc_input_spec": "В первой строке записано целое число n (1 ≤ n ≤ 100) — длина последовательности a. Во второй строке записана последовательность целых чисел a1, a2, ..., an (1 ≤ ai ≤ 109).",
    "prob_desc_output_to": "стандартный вывод",
    "prob_desc_input_from": "стандартный ввод",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1000,
    "file_name": "train_068.jsonl",
    "code_uid": "041e96cc8c1b69c93347c1160485538a",
    "prob_desc_memory_limit": "256 мегабайт",
    "prob_desc_sample_inputs": "[\"5\\n80 7 16 4 48\", \"4\\n21 5 3 33\"]",
    "exec_outcome": "PASSED",
    "source_code": "a = []\nn = int(input())\na += (int(i) for i in input().split())\nr, m = 1, 1\nwhile m != 0:\n    m2 = m\n    m = 0\n    for i in range(n):\n        if a[i] % r == 0:\n            m += 1\n    if m != 0:\n        r = r * 2\n    else:\n        break\nprint(r // 2, m2)",
    "prob_desc_created_at": "1458975600",
    "tags": [
        "constructive algorithms"
    ],
    "hidden_unit_tests": ""
}