{
    "prob_desc_time_limit": "4 seconds",
    "prob_desc_sample_outputs": "[\"3\\n6\\n4\", \"7\\n1\"]",
    "src_uid": "d256f8cf105b08624eee21dd76a6ad3d",
    "prob_desc_notes": "NoteConsider the first sample.We produce up to 1 thimble a day currently and will produce up to 2 thimbles a day after repairs. Repairs take 2 days.For the first question, we are able to fill 1 order on day 1, no orders on days 2 and 3 since we are repairing, no orders on day 4 since no thimbles have been ordered for that day, and 2 orders for day 5 since we are limited to our production capacity, for a total of 3 orders filled.For the third question, we are able to fill 1 order on day 1, 1 order on day 2, and 2 orders on day 5, for a total of 4 orders.",
    "prob_desc_description": "A factory produces thimbles in bulk. Typically, it can produce up to a thimbles a day. However, some of the machinery is defective, so it can currently only produce b thimbles each day. The factory intends to choose a k-day period to do maintenance and construction; it cannot produce any thimbles during this time, but will be restored to its full production of a thimbles per day after the k days are complete.Initially, no orders are pending. The factory receives updates of the form di, ai, indicating that ai new orders have been placed for the di-th day. Each order requires a single thimble to be produced on precisely the specified day. The factory may opt to fill as many or as few of the orders in a single batch as it likes.As orders come in, the factory owner would like to know the maximum number of orders he will be able to fill if he starts repairs on a given day pi. Help the owner answer his questions.",
    "prob_desc_output_spec": "For each query of the second type, print a line containing a single integer — the maximum number of orders that the factory can fill over all n days.",
    "prob_desc_input_spec": "The first line contains five integers n, k, a, b, and q (1 ≤ k ≤ n ≤ 200 000, 1 ≤ b &lt; a ≤ 10 000, 1 ≤ q ≤ 200 000) — the number of days, the length of the repair time, the production rates of the factory, and the number of updates, respectively. The next q lines contain the descriptions of the queries. Each query is of one of the following two forms:    1 di ai (1 ≤ di ≤ n, 1 ≤ ai ≤ 10 000), representing an update of ai orders on day di, or  2 pi (1 ≤ pi ≤ n - k + 1), representing a question: at the moment, how many orders could be filled if the factory decided to commence repairs on day pi?  It's guaranteed that the input will contain at least one query of the second type.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_001.jsonl",
    "code_uid": "e4b78b96db41b02be3893294e8104d7b",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 2 2 1 8\\n1 1 2\\n1 5 3\\n1 2 1\\n2 2\\n1 4 2\\n1 3 2\\n2 1\\n2 3\", \"5 4 10 1 6\\n1 1 5\\n1 5 5\\n1 3 2\\n1 5 2\\n2 1\\n2 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "from functools import reduce\nclass SegmentTree():\n    def __init__(self, L, function = lambda x,y: x+y, initilizer = None):\n        self.function = function\n        self.initilizer = initilizer\n        N = self.size = len(L)\n        M = 1 << N.bit_length()\n        self.margin = 2*M - N\n        self.L = [None for i in range(self.margin)] + L\n        for i in range(M-1, 0, -1):\n            x, y = self.L[i<<1], self.L[i<<1|1]\n            self.L[i] = None if x is None or y is None else function(x, y)\n    def modify(self, pos, value):\n        p = pos + self.margin\n        self.L[p] = value \n        while p > 1:\n            x, y = self.L[p], self.L[p^1]\n            if p&1: x, y = y, x\n            self.L[p>>1] = None if x is None or y is None else self.function(x, y)\n            p>>=1\n    def query(self, left, right):\n        l, r = left + self.margin, right + self.margin\n        stack = []\n        void = True\n        if self.initilizer is not None:\n            void = False\n            result = self.initilizer\n        while l < r:\n            if l&1:\n                if void:\n                    result = self.L[l]\n                    void = False\n                else:\n                    result = self.function(result, self.L[l])\n                l+=1\n            if r&1:\n                r-=1\n                stack.append(self.L[r])\n            l>>=1\n            r>>=1\n        init = stack.pop() if void else result\n        return reduce(self.function, reversed(stack), init)\n\nimport sys\nn, k, a, b, q = [int(x) for x in input().split()]\norders = [0]*(n+2)\na_tree, b_tree = SegmentTree(orders, initilizer = 0), SegmentTree(orders, initilizer = 0)\nfor line in sys.stdin:\n    s = [int(x) for x in line.split()]\n    if s[0] == 1:\n        orders[s[1]] += s[2]\n        a_tree.modify(s[1], min(a, orders[s[1]]))\n        b_tree.modify(s[1], min(b, orders[s[1]]))\n    else:\n        query = b_tree.query(0, s[1]) + a_tree.query(s[1]+k, n+1)\n        print(query)\n",
    "prob_desc_created_at": "1456683000",
    "tags": [
        "data structures"
    ],
    "hidden_unit_tests": ""
}