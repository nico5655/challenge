{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\\n1 2 3\\nNO\\nYES\\n-4 -1 -3 -2\\nYES\\n-3 -2 1 6 7 -8 -5 -4\"]",
    "src_uid": "2ac1d45db008fb4cbb503d0c1bcec200",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given a permutation $$$p$$$ consisting of $$$n$$$ integers $$$1, 2, \\dots, n$$$ (a permutation is an array where each element from $$$1$$$ to $$$n$$$ occurs exactly once).Let's call an array $$$a$$$ bipartite if the following undirected graph is bipartite:  the graph consists of $$$n$$$ vertices;  two vertices $$$i$$$ and $$$j$$$ are connected by an edge if $$$i &lt; j$$$ and $$$a_i &gt; a_j$$$. Your task is to find a bipartite array of integers $$$a$$$ of size $$$n$$$, such that $$$a_i = p_i$$$ or $$$a_i = -p_i$$$, or report that no such array exists. If there are multiple answers, print any of them.",
    "prob_desc_output_spec": "For each test case, print the answer in the following format. If such an array $$$a$$$ does not exist, print \"NO\" in a single line. Otherwise, print \"YES\" in the first line and $$$n$$$ integers — array $$$a$$$ in the second line.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 2 \\cdot 10^5$$$) — the number of test cases. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^6$$$) — the size of the permutation. The second line contains $$$n$$$ integers $$$p_1, p_2, \\dots, p_n$$$. The sum of $$$n$$$ over all test cases doesn't exceed $$$10^6$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2800,
    "file_name": "train_095.jsonl",
    "code_uid": "c93645cda3b5798443dbe55ed8e40f36",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n3\\n1 2 3\\n6\\n1 3 2 6 5 4\\n4\\n4 1 3 2\\n8\\n3 2 1 6 7 8 5 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "from math import inf\r\nimport sys\r\n\r\ninput = sys.stdin.readline\r\ninf = 1 << 20\r\n\r\ndef sol(numbers):\r\n    n, elems = numbers\r\n\r\n    # dp[i, sign]\r\n    # i: posición del elemento i-ésimo del array elems que se está analizando\r\n    # sign: signo que se le puso al elemento (i-1)-ésimo de elems   \r\n    dp = [[inf, inf] for _ in range(n)]\r\n    dp[0][0] = dp[0][1] = -inf\r\n\r\n    # cad\r\n    cad = [[0, 0] for _ in range(n)]\r\n\r\n    for i in range(n - 1):\r\n        for s in range(2):\r\n            if dp[i][s] != inf:\r\n                x = -1 * elems[i] if s else elems[i]\r\n                y = dp[i][s]\r\n                if x < y:\r\n                    x, y = y, x\r\n                for sp in range(2):\r\n                    z = -1 * elems[i + 1] if sp else elems[i + 1]\r\n                    if z > x and dp[i + 1][sp] > y:\r\n                        dp[i + 1][sp] = y\r\n                        cad[i + 1][sp] = s\r\n                    elif z > y and dp[i + 1][sp] > x:\r\n                        dp[i + 1][sp] = x\r\n                        cad[i + 1][sp] = s\r\n\r\n    sg = -1\r\n    for s in range(2):\r\n        if dp[n - 1][s] != inf:\r\n            sg = s\r\n\r\n    if sg == -1:\r\n        print(\"NO\")\r\n        return\r\n\r\n    res = [0] * n\r\n    for i in range(n - 1, -1, -1):\r\n        res[i] = -1 * elems[i] if sg else elems[i]\r\n        sg = cad[i][sg]\r\n\r\n    print(\"YES\")\r\n    print(*res)\r\n\r\ndef main():\r\n    # t: number of test cases\r\n    t = int(input())\r\n\r\n    # test cases\r\n    for _ in range(t):\r\n        n = int(input())\r\n        numbers = (n, list(map(int, input().split(\" \"))))\r\n        sol(numbers)\r\n    \r\n\r\n\r\n\r\nmain()",
    "prob_desc_created_at": "1639841700",
    "tags": [
        "dp",
        "greedy"
    ],
    "hidden_unit_tests": ""
}