{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"0 3\\n1 2\\n0 2\\n1 3\\n0 1\\n2 3\\n-1\"]",
    "src_uid": "28d1c6a6effb1aea722164d5735377fc",
    "prob_desc_notes": "NoteIn the first test, $$$(0\\&amp;3)+(1\\&amp;2) = 0$$$.In the second test, $$$(0\\&amp;2)+(1\\&amp;3) = 1$$$.In the third test, $$$(0\\&amp;1)+(2\\&amp;3) = 2$$$.In the fourth test, there is no solution.",
    "prob_desc_description": "You are given a set of $$$n$$$ ($$$n$$$ is always a power of $$$2$$$) elements containing all integers $$$0, 1, 2, \\ldots, n-1$$$ exactly once.Find $$$\\frac{n}{2}$$$ pairs of elements such that:  Each element in the set is in exactly one pair.  The sum over all pairs of the bitwise AND of its elements must be exactly equal to $$$k$$$. Formally, if $$$a_i$$$ and $$$b_i$$$ are the elements of the $$$i$$$-th pair, then the following must hold: $$$$$$\\sum_{i=1}^{n/2}{a_i \\&amp; b_i} = k,$$$$$$ where $$$\\&amp;$$$ denotes the bitwise AND operation. If there are many solutions, print any of them, if there is no solution, print $$$-1$$$ instead.",
    "prob_desc_output_spec": "For each test case, if there is no solution, print a single line with the integer $$$-1$$$. Otherwise, print $$$\\frac{n}{2}$$$ lines, the $$$i$$$-th of them must contain $$$a_i$$$ and $$$b_i$$$, the elements in the $$$i$$$-th pair.  If there are many solutions, print any of them. Print the pairs and the elements in the pairs in any order.",
    "prob_desc_input_spec": "The input consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 400$$$) â€” the number of test cases. Description of the test cases follows. Each test case consists of a single line with two integers $$$n$$$ and $$$k$$$ ($$$4 \\leq n \\leq 2^{16}$$$, $$$n$$$ is a power of $$$2$$$, $$$0 \\leq k \\leq n-1$$$). The sum of $$$n$$$ over all test cases does not exceed $$$2^{16}$$$. All test cases in each individual input will be pairwise different.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_088.jsonl",
    "code_uid": "e1a5e31a26e20646740885513e7f1031",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n\\n4 0\\n\\n4 1\\n\\n4 2\\n\\n4 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "from re import L, M\r\nimport sys\r\nfrom collections import deque\r\nimport math\r\nfrom bisect import bisect_left\r\nfrom functools import cmp_to_key\r\nimport random\r\ndef II():\r\n\treturn int(sys.stdin.readline())\r\n \r\ndef LI():\r\n\treturn list(map(int, sys.stdin.readline().split()))\r\n \r\ndef MI():\r\n\treturn map(int, sys.stdin.readline().split())\r\n \r\ndef SI():\r\n\treturn sys.stdin.readline().strip()\r\n \r\ndef FACT(n, mod):\r\n    s = 1\r\n    facts = [1]\r\n    for i in range(1,n+1):\r\n        s*=i\r\n        s%=mod\r\n        facts.append(s)\r\n    return facts[n]\r\n \r\ndef C(n, k, mod):\r\n    return (FACT(n,mod) * pow((FACT(k,mod)*FACT(n-k,mod))%mod,mod-2, mod))%mod\r\n \r\ndef lcm(a,b):\r\n    return abs(a*b) // math.gcd(a, b)\r\n \r\n\r\nfor _ in range(II()):\r\n    n,k = MI()\r\n    if n == 4 and k == 3:\r\n        print(-1)\r\n    elif k == n-1:\r\n        print(n-2, n-1)\r\n        print(1, n-3)\r\n        print(0,2)\r\n        l = 3\r\n        r = n-4\r\n        while l < r:\r\n            print(l,r)\r\n            l+=1\r\n            r-=1\r\n    else:\r\n        l = 1\r\n        r = n-2\r\n        x = -1\r\n        while l < r:\r\n            if l == k:\r\n                x = r\r\n            elif r == k:\r\n                x = l\r\n            else:\r\n                print(l,r)\r\n            l+=1\r\n            r-=1\r\n        if k == 0:\r\n            print(0, n-1)\r\n        else:\r\n            print(0,x)\r\n            print(n-1,k)",
    "prob_desc_created_at": "1643294100",
    "tags": [
        "bitmasks",
        "constructive algorithms"
    ],
    "hidden_unit_tests": ""
}