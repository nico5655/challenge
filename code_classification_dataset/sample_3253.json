{
    "prob_desc_time_limit": "4 seconds",
    "prob_desc_sample_outputs": "[\"3\", \"2\", \"1\"]",
    "src_uid": "10f2f1df27cf61f11afb074dab01ebec",
    "prob_desc_notes": "NoteThere are three good substrings in the first sample test: «aab», «ab» and «b».In the second test only substrings «e» and «t» are good.",
    "prob_desc_description": "Smart Beaver recently got interested in a new word game. The point is as follows: count the number of distinct good substrings of some string s. To determine if a string is good or not the game uses rules. Overall there are n rules. Each rule is described by a group of three (p, l, r), where p is a string and l and r (l ≤ r) are integers. We’ll say that string t complies with rule (p, l, r), if the number of occurrences of string t in string p lies between l and r, inclusive. For example, string \"ab\", complies with rules (\"ab\", 1, 2) and (\"aab\", 0, 1), but does not comply with rules (\"cd\", 1, 2) and (\"abab\", 0, 1).A substring s[l... r] (1 ≤ l ≤ r ≤ |s|) of string s = s1s2... s|s| (|s| is a length of s) is string slsl + 1... sr.Consider a number of occurrences  of string t in string p as a number of pairs of integers l, r (1 ≤ l ≤ r ≤ |p|) such that p[l... r] = t.We’ll say that string t is good if it complies with all n rules. Smart Beaver asks you to help him to write a program that can calculate the number of distinct good substrings of string s. Two substrings s[x... y] and s[z... w] are cosidered to be distinct iff s[x... y] ≠ s[z... w].",
    "prob_desc_output_spec": "Print a single integer — the number of good substrings of string s.",
    "prob_desc_input_spec": "The first line contains string s. The second line contains integer n. Next n lines contain the rules, one per line. Each of these lines contains a string and two integers pi, li, ri, separated by single spaces (0 ≤ li ≤ ri ≤ |pi|). It is guaranteed that all the given strings are non-empty and only contain lowercase English letters. The input limits for scoring 30 points are (subproblem G1):    0 ≤ n ≤ 10.  The length of string s and the maximum length of string p is  ≤ 200.  The input limits for scoring 70 points are (subproblems G1+G2):    0 ≤ n ≤ 10.  The length of string s and the maximum length of string p is  ≤ 2000.  The input limits for scoring 100 points are (subproblems G1+G2+G3):    0 ≤ n ≤ 10.  The length of string s and the maximum length of string p is  ≤ 50000. ",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_050.jsonl",
    "code_uid": "9e646f3585e336052db5afa339565ff5",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"aaab\\n2\\naa 0 0\\naab 1 1\", \"ltntlnen\\n3\\nn 0 0\\nttlneenl 1 4\\nlelllt 1 1\", \"a\\n0\"]",
    "exec_outcome": "PASSED",
    "source_code": "\ndef count(p, s):\n    start = 0\n    c = 0\n    while True:\n        try:\n            pos = s.index(p, start)\n            c += 1\n            start = pos + 1\n        except ValueError:\n            return c\n\ns = input()\nn = int(input())\n\npravs = []\nfor i in range(n):\n    p, l, r = input().split()\n    l = int(l); r = int(r)\n    pravs.append((p, l, r))\n\nvar = set()\nfor l in range(len(s)):\n    for r in range(l+1, len(s)+1):\n        pods = s[l:r]\n        for prav in pravs:\n            if not prav[1] <= count(pods, prav[0]) <= prav[2]:\n                break\n        else:\n            var.add(pods)\n\nprint(len(var))\n",
    "prob_desc_created_at": "1371042000",
    "tags": [
        "hashing",
        "strings"
    ],
    "hidden_unit_tests": ""
}