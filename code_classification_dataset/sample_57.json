{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\\n0 1 0 1 2 3 2\", \"NO\", \"NO\"]",
    "src_uid": "a981e174f1f3864d50deb541834f7831",
    "prob_desc_notes": "NoteIn the first test, it is easy to see, that the sequence is beautiful because the difference between any two consecutive numbers is equal to $$$1$$$. Also, there are exactly two numbers, equal to $$$0$$$, $$$1$$$, $$$2$$$ and exactly one number, equal to $$$3$$$.It can be proved, that it is impossible to construct beautiful sequences in the second and third tests.",
    "prob_desc_description": "An integer sequence is called beautiful if the difference between any two consecutive numbers is equal to $$$1$$$. More formally, a sequence $$$s_1, s_2, \\ldots, s_{n}$$$ is beautiful if $$$|s_i - s_{i+1}| = 1$$$ for all $$$1 \\leq i \\leq n - 1$$$.Trans has $$$a$$$ numbers $$$0$$$, $$$b$$$ numbers $$$1$$$, $$$c$$$ numbers $$$2$$$ and $$$d$$$ numbers $$$3$$$. He wants to construct a beautiful sequence using all of these $$$a + b + c + d$$$ numbers.However, it turns out to be a non-trivial task, and Trans was not able to do it. Could you please help Trans?",
    "prob_desc_output_spec": "If it is impossible to construct a beautiful sequence satisfying the above constraints, print \"NO\" (without quotes) in one line. Otherwise, print \"YES\" (without quotes) in the first line. Then in the second line print $$$a + b + c + d$$$ integers, separated by spaces — a beautiful sequence. There should be $$$a$$$ numbers equal to $$$0$$$, $$$b$$$ numbers equal to $$$1$$$, $$$c$$$ numbers equal to $$$2$$$ and $$$d$$$ numbers equal to $$$3$$$. If there are multiple answers, you can print any of them.",
    "prob_desc_input_spec": "The only input line contains four non-negative integers $$$a$$$, $$$b$$$, $$$c$$$ and $$$d$$$ ($$$0 &lt; a+b+c+d \\leq 10^5$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_000.jsonl",
    "code_uid": "40d628d4f76d1f5507af70d9143f3207",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2 2 2 1\", \"1 2 3 4\", \"2 2 2 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "#  =========     /\\       /|    |====/|\n#      |        /  \\       |    |   / |\n#      |       /____\\      |    |  /  |\n#      |      /      \\     |    | /   |\n#  ========= /        \\  =====  |/====|  \n#  code\n\ndef sexy(a):\n    a.append(0)\n    # print(a)\n    k = sum(a)\n    b = a[:]\n    s0 = []\n    s1 = []\n    i = 0\n    j = 1\n    c = 0\n    while True:\n        if c % 2 == 0:\n            while a[i] == 0 and i < 4:\n                i += 1\n            if i == 4:\n                break\n            if i == j:\n                i += 1\n                while a[i] == 0 and i < 4:\n                    i += 1\n                if i == 4:\n                    break\n            s0.append(i)\n            a[i] -= 1\n        else:\n            while a[j] == 0 and j < 4:\n                j += 1\n            if j == 4:\n                break\n            if i == j:\n                j += 1\n                while a[j] == 0 and j < 4:\n                    j += 1\n                if j == 4:\n                    break\n            s0.append(j)\n            a[j] -= 1\n        c += 1\n    \n    i = 1\n    j = 0\n    c = 0\n    while True:\n        if c % 2 == 0:\n            while b[i] == 0 and i < 4:\n                i += 1\n            if i == 4:\n                break\n            if i == j:\n                i += 1\n                while b[i] == 0 and i < 4:\n                    i += 1\n                if i == 4:\n                    break\n            s1.append(i)\n            b[i] -= 1\n        else:\n            while b[j] == 0 and j < 4:\n                j += 1\n            if j == 4:\n                break\n            if i == j:\n                j += 1\n                while b[j] == 0 and j < 4:\n                    j += 1\n                if j == 4:\n                    break\n            s1.append(j)\n            b[j] -= 1\n        c += 1\n    \n    if k == 1:\n        print(\"YES\")\n        return [s0 if len(s0) == 1 else s1 , True]\n    ok1 = True\n    ok2 = True\n    for i in range(1 , len(s0)):\n        if abs(s0[i] - s0[i - 1]) != 1:\n            ok1 = False\n            break\n    if len(s0) != k:\n        ok1 = False\n    for i in range(1 , len(s1)):\n        if abs(s1[i] - s1[i - 1]) != 1:\n            ok2 = False\n            break\n    if len(s1) != k:\n        ok2 = False\n    \n    if ok1:\n        print(\"YES\")\n        return [s0 , True]\n    elif ok2:\n        print(\"YES\")\n        return [s1 , True]\n    else:\n        return [[] , False]\n    \ndef main():\n    a = list(map(int , input().split()))\n    b = a[:]\n    p = sexy(b)\n    if p[1]:\n        print(*p[0])\n        return\n    else:\n        a = a[::-1]\n        p = sexy(a)\n        if not p[1]:\n            print('NO')\n            return\n        for i in range(len(p[0])):\n            p[0][i] = 3 - p[0][i]\n        print(*p[0])\n    return\n\nif __name__ == \"__main__\":\n    main()\n",
    "prob_desc_created_at": "1575556500",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "hidden_unit_tests": ""
}