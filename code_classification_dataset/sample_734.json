{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"First\\nSecond\\nSecond\\nFirst\\nFirst\\nSecond\\nFirst\"]",
    "src_uid": "0c9030689394ad4e126e5b8681f1535c",
    "prob_desc_notes": "NoteIn the first test case, the first player will win the game. His winning strategy is:   The first player should take the stones from the first pile. He will take $$$1$$$ stone. The numbers of stones in piles will be $$$[1, 5, 4]$$$.  The second player should take the stones from the first pile. He will take $$$1$$$ stone because he can't take any other number of stones. The numbers of stones in piles will be $$$[0, 5, 4]$$$.  The first player should take the stones from the second pile because the first pile is empty. He will take $$$4$$$ stones. The numbers of stones in piles will be $$$[0, 1, 4]$$$.  The second player should take the stones from the second pile because the first pile is empty. He will take $$$1$$$ stone because he can't take any other number of stones. The numbers of stones in piles will be $$$[0, 0, 4]$$$.  The first player should take the stones from the third pile because the first and second piles are empty. He will take $$$4$$$ stones. The numbers of stones in piles will be $$$[0, 0, 0]$$$.  The second player will lose the game because all piles will be empty. ",
    "prob_desc_description": "There are $$$n$$$ piles of stones, where the $$$i$$$-th pile has $$$a_i$$$ stones. Two people play a game, where they take alternating turns removing stones.In a move, a player may remove a positive number of stones from the first non-empty pile (the pile with the minimal index, that has at least one stone). The first player who cannot make a move (because all piles are empty) loses the game. If both players play optimally, determine the winner of the game.",
    "prob_desc_output_spec": "For each test case, if the player who makes the first move will win, output \"First\". Otherwise, output \"Second\".",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1\\le t\\le 1000$$$)  — the number of test cases. Next $$$2t$$$ lines contain descriptions of test cases. The first line of each test case contains a single integer $$$n$$$ ($$$1\\le n\\le 10^5$$$)  — the number of piles. The second line of each test case contains $$$n$$$ integers $$$a_1,\\ldots,a_n$$$ ($$$1\\le a_i\\le 10^9$$$)  — $$$a_i$$$ is equal to the number of stones in the $$$i$$$-th pile. It is guaranteed that the sum of $$$n$$$ for all test cases does not exceed $$$10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_003.jsonl",
    "code_uid": "11990ae9d14d72d0413a6a13ca438076",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7\\n3\\n2 5 4\\n8\\n1 1 1 1 1 1 1 1\\n6\\n1 2 3 4 5 6\\n6\\n1 1 2 1 2 2\\n1\\n1000000000\\n5\\n1 2 2 1 1\\n3\\n1 1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "\nfor _ in range(int(input())):\n    n = input()\n    arr = input().split()\n    #\n    idx = 0\n    for v in arr:\n        if v != '1':\n            break\n        idx += 1\n    #\n    if idx != len(arr):\n        print('First' if (idx+1)%2==1 else 'Second')\n    else:\n        print('First' if len(arr)%2==1 else 'Second')\n",
    "prob_desc_created_at": "1595342100",
    "tags": [
        "dp",
        "games"
    ],
    "hidden_unit_tests": ""
}