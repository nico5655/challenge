{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"? 1\\n\\n? 2\\n\\n!\\n4 2\\n1 2\\n2 3\", \"? 5\\n\\n!\\n4 5\\n3 5\\n2 4\\n1 3\"]",
    "src_uid": "5dbafdd7c4e93b2c01122fa80ef42f0e",
    "prob_desc_notes": "NoteHere is the tree from the first example.  Notice that the edges can be output in any order.Additionally, here are the answers for querying every single node in example $$$1$$$: $$$1$$$: $$$[0,1,2,2]$$$  $$$2$$$: $$$[1,0,1,1]$$$  $$$3$$$: $$$[2,1,0,2]$$$  $$$4$$$: $$$[2,1,2,0]$$$Below is the tree from the second example interaction.  Lastly, here are the answers for querying every single node in example $$$2$$$: $$$1$$$: $$$[0,4,1,3,2]$$$  $$$2$$$: $$$[4,0,3,1,2]$$$  $$$3$$$: $$$[1,3,0,2,1]$$$  $$$4$$$: $$$[3,1,2,0,1]$$$  $$$5$$$: $$$[2,2,1,1,0]$$$",
    "prob_desc_description": "This is an interactive problem.Little Dormi was faced with an awkward problem at the carnival: he has to guess the edges of an unweighted tree of $$$n$$$ nodes! The nodes of the tree are numbered from $$$1$$$ to $$$n$$$.The game master only allows him to ask one type of question: Little Dormi picks a node $$$r$$$ ($$$1 \\le r \\le n$$$), and the game master will reply with an array $$$d_1, d_2, \\ldots, d_n$$$, where $$$d_i$$$ is the length of the shortest path from node $$$r$$$ to $$$i$$$, for all $$$1 \\le i \\le n$$$.Additionally, to make the game unfair challenge Little Dormi the game master will allow at most $$$\\lceil\\frac{n}{2}\\rceil$$$ questions, where $$$\\lceil x \\rceil$$$ denotes the smallest integer greater than or equal to $$$x$$$.Faced with the stomach-churning possibility of not being able to guess the tree, Little Dormi needs your help to devise a winning strategy!Note that the game master creates the tree before the game starts, and does not change it during the game.",
    "prob_desc_output_spec": "When your program has found the tree, first output a line consisting of a single \"!\" followed by $$$n-1$$$ lines each with two space separated integers $$$a$$$ and $$$b$$$, denoting an edge connecting nodes $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le n$$$). Once you are done, terminate your program normally immediately after flushing the output stream. You may output the edges in any order and an edge $$$(a,b)$$$ is considered the same as an edge $$$(b,a)$$$. Answering is not considered as a query.",
    "prob_desc_input_spec": "The first line of input contains the integer $$$n$$$ ($$$2 \\le n \\le 2\\,000$$$), the number of nodes in the tree. You will then begin interaction.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_091.jsonl",
    "code_uid": "3ae00c1972508f731c79be42c339de02",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n\\n0 1 2 2\\n\\n1 0 1 1\", \"5\\n\\n2 2 1 1 0\"]",
    "exec_outcome": "PASSED",
    "source_code": "\n\nimport sys\nfrom sys import stdout\n\ninput = sys.stdin.readline\ninf = float('inf')\n\n\ndef getInt():\n    return int(input())\n\n\ndef getStr():\n    return input().strip()\n\n\ndef getList(split=True):\n    s = getStr()\n    if split:\n        s = s.split()\n    return map(int, s)\n\n\n# t = getInt()\nt = 1\n\n\ndef p(*args, **kwargs):\n    print(*args, **kwargs)\n    stdout.flush()\n\n\ndef solve():\n    n = getInt()\n    e = [[0] * (n+1) for _ in range(n+1)]\n\n    def ask(i):\n        p(\"?\", i)\n        return list(getList())\n    level = ask(1)\n\n    def assign(i, a):\n        for j, x in enumerate(a, 1):\n            if x == 1:\n                e[i][j] = e[j][i] = 1\n\n    assign(1, level)\n    l = max(level)\n    color = [0, 0]\n    for j in level:\n        color[j & 1] += 1\n\n    # color tree black and white, only query the color with the small nodes\n    # which is <= n /2\n    # we can color the graph by block and white nodes, odd level is black, even level is white\n    # we notice that min(black, white) <= n / 2\n    # hence we just need to query level of the min color\n    who = color[1] < color[0]\n    w = [[] for _ in range(l+1)]\n    for i, j in enumerate(level, 1):\n        w[j].append(i)\n    for i in range(1, l+1):\n        if i & 1 == who:\n            for j in w[i]:\n                assign(j, ask(j))\n\n    p(\"!\")\n    for i in range(1, n+1):\n        for j in range(1, i):\n            if e[i][j]:\n                p(i, j)\n\n\nfor _ in range(t):\n    solve()\n",
    "prob_desc_created_at": "1623598500",
    "tags": [
        "constructive algorithms",
        "interactive",
        "trees"
    ],
    "hidden_unit_tests": ""
}