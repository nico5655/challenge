{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"9\", \"14\", \"448201910\"]",
    "src_uid": "fbb6d21b757d8d56396af1253ec9e719",
    "prob_desc_notes": "NoteIn the first example, the elements smaller than $$$2^4$$$ are $$$\\{1, 3, 4, 6, 7, 9, 12, 13, 15\\}$$$.In the second example, the elements smaller than $$$2^7$$$ are $$$\\{5,11,20,23,39,41,44,47,79,80,83,89,92,95\\}$$$.",
    "prob_desc_description": "You are given an array $$$a$$$ consisting of $$$n$$$ distinct positive integers.Let's consider an infinite integer set $$$S$$$ which contains all integers $$$x$$$ that satisfy at least one of the following conditions: $$$x = a_i$$$ for some $$$1 \\leq i \\leq n$$$. $$$x = 2y + 1$$$ and $$$y$$$ is in $$$S$$$. $$$x = 4y$$$ and $$$y$$$ is in $$$S$$$.For example, if $$$a = [1,2]$$$ then the $$$10$$$ smallest elements in $$$S$$$ will be $$$\\{1,2,3,4,5,7,8,9,11,12\\}$$$.Find the number of elements in $$$S$$$ that are strictly smaller than $$$2^p$$$. Since this number may be too large, print it modulo $$$10^9 + 7$$$.",
    "prob_desc_output_spec": "Print a single integer, the number of elements in $$$S$$$ that are strictly smaller than $$$2^p$$$. Remember to print it modulo $$$10^9 + 7$$$. ",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$p$$$ $$$(1 \\leq n, p \\leq 2 \\cdot 10^5)$$$. The second line contains $$$n$$$ integers $$$a_1,a_2,\\ldots,a_n$$$ $$$(1 \\leq a_i \\leq 10^9)$$$. It is guaranteed that all the numbers in $$$a$$$ are distinct.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_108.jsonl",
    "code_uid": "e2bf28c0f855ccb4bb78b2d437d07090",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2 4\\n6 1\", \"4 7\\n20 39 5 200\", \"2 200000\\n48763 1000000000\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\nfrom array import array\r\n\r\n\r\nclass dict_(dict):\r\n    def __missing__(self, key):\r\n        return 0\r\n\r\n\r\nmod = 10 ** 9 + 7\r\nadd = lambda a, b: (a % mod + b % mod) % mod\r\nmult = lambda a, b: (a % mod * b % mod) % mod\r\ninput = lambda: sys.stdin.buffer.readline().decode().strip()\r\n\r\nn, p = map(int, input().split())\r\na = array('i', [int(x) for x in input().split()])\r\ndp = array('i', [0] * (p + 1))\r\nmem, ans = set(), 0\r\ndp[0] = dp[1] = 1\r\n\r\nfor i in range(2, p + 1):\r\n    dp[i] = add(dp[i - 2], dp[i - 1])\r\nfor i in range(1, p + 1):\r\n    dp[i] = add(dp[i], dp[i - 1])\r\n\r\nfor bit in range(1, min(30, p) + 1):\r\n    for i in range(n):\r\n        if a[i].bit_length() == bit:\r\n            su, cur = dp[p - bit], a[i]\r\n            while cur:\r\n                if cur & 1:\r\n                    cur >>= 1\r\n                elif cur % 4 == 0:\r\n                    cur >>= 2\r\n                else:\r\n                    break\r\n\r\n                if cur in mem:\r\n                    su = 0\r\n                    break\r\n\r\n            mem.add(a[i])\r\n            ans += su\r\n\r\nprint(ans % mod)\r\n",
    "prob_desc_created_at": "1645367700",
    "tags": [
        "bitmasks",
        "dp",
        "math",
        "matrices",
        "number theory",
        "strings"
    ],
    "hidden_unit_tests": ""
}