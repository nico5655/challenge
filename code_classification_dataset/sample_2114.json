{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\", \"1\", \"18\", \"16\"]",
    "src_uid": "6956d1c98c4047f1b8f832df3566ddce",
    "prob_desc_notes": "Note  The first sample will be (1 + 1)  =  2.  The second sample will be (2 + (1 - 2))  =  1.  The third sample will be ((1 - (5 - 7)) + ((6 + 2) + 7))  =  18.  The fourth sample will be ((1 + (5 + 7)) - ((6 - 2) - 7))  =  16. ",
    "prob_desc_description": "Ancient Egyptians are known to have understood difficult concepts in mathematics. The ancient Egyptian mathematician Ahmes liked to write a kind of arithmetic expressions on papyrus paper which he called as Ahmes arithmetic expression.An Ahmes arithmetic expression can be defined as:   \"d\" is an Ahmes arithmetic expression, where d is a one-digit positive integer;  \"(E1 op E2)\" is an Ahmes arithmetic expression, where E1 and E2 are valid Ahmes arithmetic expressions (without spaces) and op is either plus ( + ) or minus ( - ).  For example 5, (1-1) and ((1+(2-3))-5) are valid Ahmes arithmetic expressions.On his trip to Egypt, Fafa found a piece of papyrus paper having one of these Ahmes arithmetic expressions written on it. Being very ancient, the papyrus piece was very worn out. As a result, all the operators were erased, keeping only the numbers and the brackets. Since Fafa loves mathematics, he decided to challenge himself with the following task:Given the number of plus and minus operators in the original expression, find out the maximum possible value for the expression on the papyrus paper after putting the plus and minus operators in the place of the original erased operators.",
    "prob_desc_output_spec": "Print one line containing the answer to the problem.",
    "prob_desc_input_spec": "The first line contains a string E (1 ≤ |E| ≤ 104) — a valid Ahmes arithmetic expression. All operators are erased and replaced with '?'. The second line contains two space-separated integers P and M (0 ≤ min(P, M) ≤ 100) — the number of plus and minus operators, respectively.  It is guaranteed that P + M =  the number of erased operators.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_017.jsonl",
    "code_uid": "b2481597d857a96d042ef7525a5b366b",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"(1?1)\\n1 0\", \"(2?(1?2))\\n1 1\", \"((1?(5?7))?((6?2)?7))\\n3 2\", \"((1?(5?7))?((6?2)?7))\\n2 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "from math import inf\n\nclass Node:\n    def __init__(self, parent = None, leftExp = None, rightExp = None, signQ = 0):\n        self.parent, self.leftExp, self.rightExp, self.signQ = parent, leftExp, rightExp, signQ\n    def __str__(self):\n        return \"Node\"\n\nmemo = {}\n\ndef Memoize(node, p, maxValue, minValue):\n    if not node in memo:\n        memo.update({node : {p : [maxValue, minValue]} })\n    else:\n        memo[node].update({p : [maxValue, minValue]})\n\ndef ExpMaxValue(root: Node, p):\n\n    m = root.signQ - p\n    \"\"\"if root.signQ == 1:\n        if p == 1:\n            return [root.leftExp.value + root.rightExp.value, root.leftExp.value + root.rightExp.value]\n        else:\n            return [root.leftExp.value - root.rightExp.value, root.leftExp.value - root.rightExp.value]\"\"\"\n\n    if root.signQ == 0:\n        return [root.value, root.value]\n    \n    if root in memo:\n        if p in memo[root]:\n            return memo[root][p]\n\n    if m == 0:\n        value = ExpMaxValue(root.leftExp, root.leftExp.signQ)[0] + ExpMaxValue(root.rightExp, root.rightExp.signQ)[0]\n        Memoize(root, p, value, value)\n        return [value, value]\n    if p == 0:\n        value = ExpMaxValue(root.leftExp, 0)[0] - ExpMaxValue(root.rightExp, 0)[0]\n        Memoize(root, p, value, value)\n        return [value, value]\n        \n    maxValue = -inf\n    minValue = inf\n    if m >= p:\n        for pQMid in range(2):\n            pQLeftMin = min(p - pQMid, root.leftExp.signQ)\n            for pQLeft in range(pQLeftMin + 1):\n                if root.leftExp.signQ - pQLeft + (1 - pQMid) > m:\n                    continue\n                \n                resLeft = ExpMaxValue(root.leftExp, pQLeft)\n                resRight = ExpMaxValue(root.rightExp, p - pQMid - pQLeft)\n                \n                if pQMid == 1:\n                    maxValue = max(resLeft[0] + resRight[0], maxValue)\n                    minValue = min(resLeft[1] + resRight[1], minValue)\n                else:\n                    maxValue = max(resLeft[0] - resRight[1], maxValue)\n                    minValue = min(resLeft[1] - resRight[0], minValue)\n    else:\n        for mQMid in range(2):\n            mQLeftMin = min(m - mQMid, root.leftExp.signQ)\n            for mQLeft in range(mQLeftMin + 1):\n                pQLeft = root.leftExp.signQ - mQLeft\n                if pQLeft + (1 - mQMid) > p:\n                    continue\n                \n                resLeft = ExpMaxValue(root.leftExp, pQLeft)\n                resRight = ExpMaxValue(root.rightExp, p - (1 - mQMid) - pQLeft)\n                \n                if mQMid == 0:\n                    maxValue = max(resLeft[0] + resRight[0], maxValue)\n                    minValue = min(resLeft[1] + resRight[1], minValue)\n                else:\n                    maxValue = max(resLeft[0] - resRight[1], maxValue)\n                    minValue = min(resLeft[1] - resRight[0], minValue)\n\n    Memoize(root, p, int(maxValue), int(minValue))\n\n    return [int(maxValue), int(minValue)]\n                \n                \n\ndef PrintNodes(root: Node):\n    if root.signQ != 0:\n        leftExp = root.leftExp if root.leftExp.signQ != 0 else root.leftExp.value\n        rightExp = root.rightExp if root.rightExp.signQ != 0 else root.rightExp.value\n        check = root.signQ == root.leftExp.signQ + root.rightExp.signQ + 1\n        print(root.signQ, root.parent, leftExp, rightExp, check)\n        PrintNodes(root.leftExp)\n        PrintNodes(root.rightExp)\n\n        \n\ndef main():\n    exp = str(input())\n    if len(exp) == 1:\n        print(exp)\n        return\n    \n    #root = Node(None, None, None)\n    #root.parent = root\n    cNode = Node()\n    isRight = False\n    \n    for i in range(1, len(exp) - 1):\n        if exp[i] == '(':\n            if not isRight:\n                cNode.leftExp = Node(cNode)\n                cNode = cNode.leftExp\n            else:\n                cNode.rightExp = Node(cNode)\n                cNode = cNode.rightExp\n            isRight = False\n        elif exp[i] == '?':\n            isRight = True\n            cNode.signQ += 1\n        elif exp[i] == ')':\n            if cNode.parent != None:\n                cNode.parent.signQ += cNode.signQ\n            cNode = cNode.parent\n            isRight = False\n        else:\n            if not isRight:\n                cNode.leftExp = Node(cNode)\n                cNode.leftExp.value = int(exp[i])\n            else:\n                cNode.rightExp = Node(cNode)\n                cNode.rightExp.value = int(exp[i])\n\n    \n    #PrintNodes(cNode)\n\n    ss = str(input()).split()\n    p, m = int(ss[0]), int(ss[1])\n\n    print(ExpMaxValue(cNode, p)[0])\n    \n\n\n    \n\nmain()",
    "prob_desc_created_at": "1519058100",
    "tags": [
        "dp",
        "dfs and similar",
        "trees"
    ],
    "hidden_unit_tests": ""
}