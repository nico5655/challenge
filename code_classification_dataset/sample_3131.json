{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"3 2\", \"0 0\"]",
    "src_uid": "9a365e26f58ecb22a1e382fad3062387",
    "prob_desc_notes": "NoteIn the first sample the game went like this:  R - R. Draw.  P - S. Nikephoros loses.  S - P. Polycarpus loses.  R - P. Nikephoros loses.  P - R. Polycarpus loses.  S - S. Draw.  R - P. Nikephoros loses. Thus, in total Nikephoros has 3 losses (and 3 red spots), and Polycarpus only has 2.",
    "prob_desc_description": "Nikephoros and Polycarpus play rock-paper-scissors. The loser gets pinched (not too severely!).Let us remind you the rules of this game. Rock-paper-scissors is played by two players. In each round the players choose one of three items independently from each other. They show the items with their hands: a rock, scissors or paper. The winner is determined by the following rules: the rock beats the scissors, the scissors beat the paper and the paper beats the rock. If the players choose the same item, the round finishes with a draw.Nikephoros and Polycarpus have played n rounds. In each round the winner gave the loser a friendly pinch and the loser ended up with a fresh and new red spot on his body. If the round finished in a draw, the players did nothing and just played on.Nikephoros turned out to have worked out the following strategy: before the game began, he chose some sequence of items A = (a1, a2, ..., am), and then he cyclically showed the items from this sequence, starting from the first one. Cyclically means that Nikephoros shows signs in the following order: a1, a2, ..., am, a1, a2, ..., am, a1, ... and so on. Polycarpus had a similar strategy, only he had his own sequence of items B = (b1, b2, ..., bk).Determine the number of red spots on both players after they've played n rounds of the game. You can consider that when the game began, the boys had no red spots on them.",
    "prob_desc_output_spec": "Print two space-separated integers: the numbers of red spots Nikephoros and Polycarpus have.",
    "prob_desc_input_spec": "The first line contains integer n (1 ≤ n ≤ 2·109) — the number of the game's rounds. The second line contains sequence A as a string of m characters and the third line contains sequence B as a string of k characters (1 ≤ m, k ≤ 1000). The given lines only contain characters \"R\", \"S\" and \"P\". Character \"R\" stands for the rock, character \"S\" represents the scissors and \"P\" represents the paper.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1300,
    "file_name": "train_043.jsonl",
    "code_uid": "d87b306ee5562691c3987bc0c9d98ef1",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7\\nRPS\\nRSPP\", \"5\\nRRRRRRRR\\nR\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input())\na = input()\nb = input()\nai = 0\nalen = len(a)\nbi = 0\nblen = len(b)\nnik = 0\npol = 0\nif alen == blen: rnd = alen\nelse: rnd = alen*blen\nnumofrounds = 0\nfor i in range(n):\n    #print(i,rnd)\n    if i == rnd:\n        numofrounds = n//rnd\n        # print(numofrounds)\n        nik *= numofrounds\n        pol *= numofrounds\n        break\n        #print(a[ai%alen], b[bi%blen])\n    if a[ai] == b[bi]: pass\n    elif (a[ai] == 'R' and b[bi] == 'S') or (a[ai] == 'S'\n        and b[bi] == 'P') or (a[ai] == 'P' and b[bi] == 'R'):\n        pol += 1\n    else: nik += 1\n    ai = (ai+1)%alen\n    bi = (bi+1)%blen\nif n%rnd != 0 and numofrounds != 0:\n    n -= rnd*numofrounds\n    ai = 0\n    bi = 0\n    for i in range(n):\n        if a[ai] == b[bi]: pass\n        elif (a[ai] == 'R' and b[bi] == 'S') or (a[ai] == 'S'\n        and b[bi] == 'P') or (a[ai] == 'P' and b[bi] == 'R'):\n            pol += 1\n        else: nik += 1\n        ai = (ai+1)%alen\n        bi = (bi+1)%blen\nprint(nik, pol)   ",
    "prob_desc_created_at": "1333724400",
    "tags": [
        "implementation",
        "math"
    ],
    "hidden_unit_tests": ""
}