{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"6\\n1\\n0\\n3\"]",
    "src_uid": "759b3909ccdf1b9ffd800bf0f65361cc",
    "prob_desc_notes": "NoteThe first test case is shown in the second picture in the statement.In the second test case, the only wiring possible has the two wires cross, so the answer is $$$1$$$.In the third test case, the only wiring possible has one wire, so the answer is $$$0$$$.",
    "prob_desc_description": "The only difference between the two versions is that in this version $$$n \\leq 1000$$$ and the sum of $$$n$$$ over all test cases does not exceed $$$1000$$$.A terminal is a row of $$$n$$$ equal segments numbered $$$1$$$ to $$$n$$$ in order. There are two terminals, one above the other. You are given an array $$$a$$$ of length $$$n$$$. For all $$$i = 1, 2, \\dots, n$$$, there should be a straight wire from some point on segment $$$i$$$ of the top terminal to some point on segment $$$a_i$$$ of the bottom terminal. You can't select the endpoints of a segment. For example, the following pictures show two possible wirings if $$$n=7$$$ and $$$a=[4,1,4,6,7,7,5]$$$.  A crossing occurs when two wires share a point in common. In the picture above, crossings are circled in red.What is the maximum number of crossings there can be if you place the wires optimally?",
    "prob_desc_output_spec": "For each test case, output a single integer — the maximum number of crossings there can be if you place the wires optimally.",
    "prob_desc_input_spec": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases. The first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 1000$$$) — the length of the array. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq n$$$) — the elements of the array. The sum of $$$n$$$ across all test cases does not exceed $$$1000$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_106.jsonl",
    "code_uid": "56bc8936245da87c93eed71e738a53dd",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n\\n7\\n\\n4 1 4 6 7 7 5\\n\\n2\\n\\n2 1\\n\\n1\\n\\n1\\n\\n3\\n\\n2 2 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "from heapq import heapify, heappush, heappop\nfrom collections import Counter, defaultdict, deque\nfrom queue import PriorityQueue\nfrom itertools import combinations, product, permutations\nfrom bisect import bisect_left, bisect_right\nfrom functools import lru_cache\nfrom sys import stdin, stdout # for input /output\nimport copy\nimport math\n\n####################\n# stdin = open(\"testcase.txt\")\n# def input():\n\t# \treturn stdin.readline().strip()\n\n#####################################################################\n\nclass FastIO:\n\n\t@classmethod\n\tdef input(cls):\n\t\tfrom sys import stdin\n\t\tx = stdin.buffer.readline().decode().strip()\n\t\treturn x\n\n\t@classmethod\n\tdef integer_list(cls):\n\t\treturn list(map(int, cls.input().split()))\n\n\t@classmethod\n\tdef print(cls, s, end = \"\\n\"):\n\t\tfrom sys import stdout\n\t\tstdout.write(str(s) + end)\n\n\t@classmethod\n\tdef flush(cls):\n\t\tfrom sys import stdout\n\t\tstdout.flush()\n\n\n####################################################################\n\nclass SegmentTree:\n\tdef __init__(self, data, default=0, func=lambda a, b: a + b):\n\t\t\"\"\"initialize the segment tree with data\"\"\"\n\t\t\"\"\" initial default value for each node \"\"\"\n\t\t\"\"\" func which you want to apply to range \"\"\"\n\t\tself._default = default\n\t\tself._func = func\n\t\tself._len = len(data)\n\t\tself._size = _size = 1 << (self._len - 1).bit_length()\n \n\t\tself.data = [default] * (2 * _size)\n\t\tself.data[_size:_size + self._len] = data\n\t\tfor i in reversed(range(_size)):\n\t\t\tself.data[i] = func(self.data[2*i], self.data[2*i + 1])\n \n\tdef __delitem__(self, idx):\n\t\t\"\"\" delete item set item value to its default \"\"\"\n\t\tself[idx] = self._default\n \n\tdef __getitem__(self, idx):\n\t\t\"\"\" geting item by inx \"\"\"\n\t\treturn self.data[idx + self._size]\n \n\tdef __setitem__(self, idx, value):\n\t\t\"\"\" changing seting value to given index\"\"\"\n\t\t\"\"\" apply function to range \"\"\"\n\t\tidx += self._size\n\t\tself.data[idx] = value\n\t\tidx >>= 1\n\t\twhile idx:\n\t\t\tself.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n\t\t\tidx >>= 1\n \n\tdef __len__(self):\n\t\treturn self._len\n \n\tdef query(self, start, stop):\n\t\t\"\"\"func of data[start, stop)\"\"\"\n\t\tstart += self._size\n\t\tstop += self._size\n \n\t\tres_left = res_right = self._default\n\t\twhile start < stop:\n\t\t\tif start & 1:\n\t\t\t\tres_left = self._func(res_left, self.data[start])\n\t\t\t\tstart += 1\n\t\t\tif stop & 1:\n\t\t\t\tstop -= 1\n\t\t\t\tres_right = self._func(self.data[stop], res_right)\n\t\t\tstart >>= 1\n\t\t\tstop >>= 1\n \n\t\treturn self._func(res_left, res_right)\n \n\tdef __repr__(self):\n\t\treturn \"SegmentTree({0})\".format(self.data)\n\n\n#######################################################################\n\ndef integer_list():\n\treturn list(map(int, input().split()))\n \ndef string_list():\n\treturn list(map(str, input().split()))\n \ndef hetro_list():\n\treturn list(input().split())\n\ndef pprint(matrix):\n\tfor i in range(len(matrix)):\n\t\tprint(*matrix[i])\n\n\n\n#####################################################\n#test case section \n\"\"\"\n\n\n\"\"\"       \n#############################################################\n# for manipulating 0 for runing to your system 1 for online \nMOD = 10**9+7\n\nONLINE_JUDGE = 1\n\ndef solve():\n\tn = int(input())\n\tcount = 0\n\tlst = integer_list()\n\tfor i in range(n):\n\t\tele = lst[i]\n\t\tfor j in range(i+1, n):\n\t\t\tif lst[j] <= ele:\n\t\t\t\tcount += 1\n\tprint(count)\t\n\n\n\n\ndef main():\n\n\tt = int(input())\n\tfor _ in range(t):\n\t\tsolve()\n\n\n\n\n###############################################\nif ONLINE_JUDGE:\n\tinput = lambda : stdin.buffer.readline().decode().strip()\n\nelse:\n\tstdin = open(\"testcase.txt\")\n\tinput = lambda : stdin.readline().strip()\n\t\n\nmain()\t\t\n\t\n\n\n\n",
    "prob_desc_created_at": "1652193900",
    "tags": [
        "brute force"
    ],
    "hidden_unit_tests": ""
}