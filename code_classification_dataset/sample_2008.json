{
    "prob_desc_time_limit": "2 секунды",
    "prob_desc_sample_outputs": "[\"10: 1 42\\n23: 1 39\\n39: 1 23\\n42: 1 10\\n58: 2 10 42\", \"1: 0\\n2: 0\\n3: 1 4\\n4: 1 3\"]",
    "src_uid": "19079c10a1bdfa8ae9b7b6e0378d3aad",
    "prob_desc_notes": null,
    "prob_desc_description": "Основой любой социальной сети является отношение дружбы между двумя пользователями в том или ином смысле. В одной известной социальной сети дружба симметрична, то есть если a является другом b, то b также является другом a. В этой же сети есть функция, которая демонстрирует множество людей, имеющих высокую вероятность быть знакомыми для пользователя. Эта функция работает следующим образом. Зафиксируем пользователя x. Пусть некоторый другой человек y, не являющийся другом x на текущий момент, является другом не менее, чем для k% друзей x. Тогда он является предполагаемым другом для x.У каждого человека в социальной сети есть свой уникальный идентификатор — это целое число от 1 до 109. Вам дан список пар пользователей, являющихся друзьями. Определите для каждого упомянутого пользователя множество его предполагаемых друзей.",
    "prob_desc_output_spec": "Для всех упомянутых людей в порядке возрастания id выведите информацию о предполагаемых друзьях. Информация должна иметь вид \"id:  k id1 id2 ... idk\", где id — это id самого человека, k — количество его предполагаемых друзей, а id1, id2, ..., idk — идентификаторы его предполагаемых друзей в возрастающем порядке. ",
    "prob_desc_input_spec": "В первой строке следуют два целых числа m и k (1 ≤ m ≤ 100, 0 ≤ k ≤ 100) — количество пар друзей и необходимый процент общих друзей для того, чтобы считаться предполагаемым другом. В последующих m строках записано по два числа ai, bi (1 ≤ ai, bi ≤ 109, ai ≠ bi), обозначающих идентификаторы пользователей, являющихся друзьями.  Гарантируется, что каждая пара людей фигурирует в списке не более одного раза.",
    "prob_desc_output_to": "стандартный вывод",
    "prob_desc_input_from": "стандартный ввод",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_015.jsonl",
    "code_uid": "ab4ace8eb0b3d14a1d420c8e0221d07a",
    "prob_desc_memory_limit": "256 мегабайт",
    "prob_desc_sample_inputs": "[\"5 51\\n10 23\\n23 42\\n39 42\\n10 39\\n39 58\", \"5 100\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "# import sys\n\n# sys.stdin = open('a.in')\n\nm, k = (int(x) for x in raw_input().split())\n\nf = {}\nff = {}\nall_users = set()\n\nfor i in range(m):\n    a, b = (int(x) for x in raw_input().split())\n\n    f.setdefault(a, set()).add(b)\n    f.setdefault(b, set()).add(a)\n    all_users.add(a)\n    all_users.add(b)\n\nfor x in f:\n    ff.setdefault(x, {})\n    for y in f[x]:\n        for z in f[y]:\n            if z not in f[x]:\n                ff[x].setdefault(z, 0) \n                ff[x][z] += 1\n\n#print(f, ff)\n\nfor x in sorted(f):\n    fl = []\n    l = len(f[x])\n    for y in all_users:\n        if y == x or y in f[x]:\n            continue\n        v = ff[x].get(y, 0)\n        #print(x, y, v, l, 100*v/l, k)\n        if 100 * v >= l * k:\n            fl.append(y)\n    print(\"{}: {} {}\".format(x, len(fl), \" \".join(str(t) for t in sorted(fl))))",
    "prob_desc_created_at": "1426946400",
    "tags": [
        "implementation"
    ],
    "hidden_unit_tests": ""
}