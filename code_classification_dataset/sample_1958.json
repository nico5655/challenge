{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\", \"-1\", \"4\"]",
    "src_uid": "3800f4d44031aad264e43dc6b490592c",
    "prob_desc_notes": "NoteIn the first example, $$$k=2$$$ and $$$k=3$$$ satisfy: in the first case, Levian will report the numbers $$$1, 1$$$, and in the second case — one number $$$3$$$.In the second example, there is no such $$$k$$$.In the third example, the only answer is $$$k=4$$$: he will report the numbers $$$1,2,3$$$.",
    "prob_desc_description": "Levian works as an accountant in a large company. Levian knows how much the company has earned in each of the $$$n$$$ consecutive months — in the $$$i$$$-th month the company had income equal to $$$a_i$$$ (positive income means profit, negative income means loss, zero income means no change). Because of the general self-isolation, the first $$$\\lceil \\tfrac{n}{2} \\rceil$$$ months income might have been completely unstable, but then everything stabilized and for the last $$$\\lfloor \\tfrac{n}{2} \\rfloor$$$ months the income was the same.Levian decided to tell the directors $$$n-k+1$$$ numbers — the total income of the company for each $$$k$$$ consecutive months. In other words, for each $$$i$$$ between $$$1$$$ and $$$n-k+1$$$ he will say the value $$$a_i + a_{i+1} + \\ldots + a_{i + k - 1}$$$. For example, if $$$a=[-1, 0, 1, 2, 2]$$$ and $$$k=3$$$ he will say the numbers $$$0, 3, 5$$$.Unfortunately, if at least one total income reported by Levian is not a profit (income $$$\\le 0$$$), the directors will get angry and fire the failed accountant.Save Levian's career: find any such $$$k$$$, that for each $$$k$$$ months in a row the company had made a profit, or report that it is impossible.",
    "prob_desc_output_spec": "In a single line, print the appropriate integer $$$k$$$ or $$$-1$$$, if it does not exist. If there are multiple possible answers, you can print any.",
    "prob_desc_input_spec": "The first line contains a single integer $$$n$$$ ($$$2 \\le n \\le 5\\cdot 10^5$$$) — the number of months for which Levian must account. The second line contains $$$\\lceil{\\frac{n}{2}}\\rceil$$$ integers $$$a_1, a_2, \\ldots, a_{\\lceil{\\frac{n}{2}}\\rceil}$$$, where $$$a_i$$$ ($$$-10^9 \\le a_i \\le 10^9$$$) — the income of the company in the $$$i$$$-th month. Third line contains a single integer $$$x$$$ ($$$-10^9 \\le x \\le 10^9$$$) — income in every month from $$$\\lceil{\\frac{n}{2}}\\rceil + 1$$$ to $$$n$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_015.jsonl",
    "code_uid": "c30b6a748a501c358f5d7381ba32dde6",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n2 -1\\n2\", \"5\\n2 2 -8\\n2\", \"6\\n-2 -2 6\\n-1\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin,stderr\ndef rl():\n    return [int(w) for w in stdin.readline().split()]\n\nn, = rl()\na = rl()\nx, = rl()\n\nif x >= 0:\n    if sum(a) + (n // 2) * x > 0:\n        print(n)\n    else:\n        print(-1)\nelse:\n    margin = sum(a)\n    if margin + (1 - n % 2) * x <= 0:\n        print(-1)\n    else:\n        k = n\n        for i, ai in enumerate(a):\n            if margin <= 0:\n                print(-1)\n                break\n            max_k_i = (n + 1) // 2 - i + (margin - 1) // (-x)\n            if max_k_i < k:\n                k = max_k_i\n            if i + k >= n:\n                print(k)\n                break\n            margin -= ai\n        else:\n            print(-1)\n",
    "prob_desc_created_at": "1590503700",
    "tags": [
        "data structures",
        "constructive algorithms",
        "implementation",
        "greedy"
    ],
    "hidden_unit_tests": ""
}