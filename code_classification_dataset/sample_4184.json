{
    "prob_desc_time_limit": "7 seconds",
    "prob_desc_sample_outputs": "[\"2\", \"3\", \"4\", \"999999978\"]",
    "src_uid": "611845be511503f1787603428a4de6c0",
    "prob_desc_notes": null,
    "prob_desc_description": "There are $$$n+1$$$ teleporters on a straight line, located in points $$$0$$$, $$$a_1$$$, $$$a_2$$$, $$$a_3$$$, ..., $$$a_n$$$. It's possible to teleport from point $$$x$$$ to point $$$y$$$ if there are teleporters in both of those points, and it costs $$$(x-y)^2$$$ energy.You want to install some additional teleporters so that it is possible to get from the point $$$0$$$ to the point $$$a_n$$$ (possibly through some other teleporters) spending no more than $$$m$$$ energy in total. Each teleporter you install must be located in an integer point.What is the minimum number of teleporters you have to install?",
    "prob_desc_output_spec": "Print one integer â€” the minimum number of teleporters you have to install so that it is possible to get from $$$0$$$ to $$$a_n$$$ spending at most $$$m$$$ energy. It can be shown that it's always possible under the constraints from the input format.",
    "prob_desc_input_spec": "The first line contains one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$). The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_1 &lt; a_2 &lt; a_3 &lt; \\dots &lt; a_n \\le 10^9$$$). The third line contains one integer $$$m$$$ ($$$a_n \\le m \\le 10^{18}$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2600,
    "file_name": "train_092.jsonl",
    "code_uid": "d3a45b54b6a7f2bbb160e4a26bdba484",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n1 5\\n7\", \"2\\n1 5\\n6\", \"1\\n5\\n5\", \"1\\n1000000000\\n1000000043\"]",
    "exec_outcome": "PASSED",
    "source_code": "\r\ndef split_cost(total_len, k):\r\n    bigger_interv = total_len % (k + 1) # number of intervals with len = total_len // (k + 1) + 1\r\n    lesser_interv = k + 1 - bigger_interv # number of intervals with len = total_len // (k + 1)\r\n    basic_cost = total_len // (k + 1)\r\n\r\n    # sum of all the smaller intervals + sum of all the bigger intervals\r\n    return basic_cost**2 * lesser_interv + (basic_cost + 1)**2 * bigger_interv\r\n\r\n\r\ndef get_segment_portals_and_cost(interv_len, min_change):\r\n    l = 0; r = interv_len - 1 # bigger and smaller change reached in 'l' and 'r' respectively\r\n    if split_cost(interv_len, r) - split_cost(interv_len, r + 1) >= min_change:\r\n        return r, split_cost(interv_len, r)\r\n\r\n    while l + 1 < r:\r\n        mid = (l + r) >> 1\r\n        # if change f(k-1) - f(k) >= min_change\r\n        if split_cost(interv_len, mid -1) - split_cost(interv_len, mid) >= min_change:\r\n            l = mid # we keep l in 'YES' part of the Predicate\r\n        else:\r\n            r = mid # we keep r in 'NO' part of the Predicate\r\n\r\n    # We keep the last value that satisfies f(k-1) - f(k) >= min_change\r\n    return l, split_cost(interv_len, l)\r\n\r\n\r\ndef put_portals(min_cost, intervals):\r\n    h = 0 # number of portals used\r\n    g = 0 # total cost\r\n    for inter in intervals:\r\n        portals, cost = get_segment_portals_and_cost(inter, min_cost)\r\n        h += portals\r\n        g += cost\r\n\r\n    return h, g\r\n\r\n\r\ndef solve(n, m, intervals):\r\n    # search for minimum cost change in all the intervals\r\n    l = 0; r = m+10\r\n\r\n    if put_portals(r, intervals)[1] <= m: # if the cost without portals is <= m\r\n        return 0  # optimus is put 0 portals\r\n\r\n    while l + 1 < r:\r\n        mid = (l + r) // 2\r\n        _, cost = put_portals(mid, intervals)\r\n        if cost <= m:  # possible solution\r\n            l = mid  # we keep l in 'YES' part of the Predicate\r\n        else:\r\n            r = mid  # we keep r in 'NO' part of the Predicate\r\n\r\n    c_amount, c_cost = put_portals(l, intervals)  # last value that satisfies: cost <= m\r\n    c_next_amount, c_next_cost = put_portals(r, intervals)  # first value that not satisfies: cost <= m\r\n\r\n    change = (c_next_cost - c_cost) // (c_amount - c_next_amount)  # change that gave every new teleport\r\n    # we subtract the just amount of teleports for pass cost restriction, slowly converting l to r\r\n    return c_amount - (m - c_cost) // change\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    list_telep = [int(x) for x in input().split()]\r\n    m = int(input())\r\n    # distance betwen list_telep[i] and [i+1]\r\n    list_intervals = [list_telep[0]]\r\n    list_intervals += [list_telep[i+1] - list_telep[i] for i in range(n-1)]\r\n\r\n    res = solve(n, m, list_intervals)\r\n    print(res)",
    "prob_desc_created_at": "1649514900",
    "tags": [
        "binary search",
        "greedy"
    ],
    "hidden_unit_tests": ""
}