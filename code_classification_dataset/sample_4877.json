{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1 2\\n3 3 2 1\"]",
    "src_uid": "01703877719e19dd8551e4599c3e1c85",
    "prob_desc_notes": "NoteIn the first test case, the array $$$[1,2]$$$ has sadness $$$1$$$. We can transform $$$[1,2]$$$ into $$$[2,1]$$$ using one operation with $$$(i,j)=(1,2)$$$.In the second test case, the array $$$[3,3,2,1]$$$ has sadness $$$2$$$. We can transform $$$[3,3,2,1]$$$ into $$$[1,2,3,3]$$$ with two operations with $$$(i,j)=(1,4)$$$ and $$$(i,j)=(2,3)$$$ respectively.",
    "prob_desc_description": "oolimry has an array $$$a$$$ of length $$$n$$$ which he really likes. Today, you have changed his array to $$$b$$$, a permutation of $$$a$$$, to make him sad.Because oolimry is only a duck, he can only perform the following operation to restore his array:   Choose two integers $$$i,j$$$ such that $$$1 \\leq i,j \\leq n$$$.  Swap $$$b_i$$$ and $$$b_j$$$. The sadness of the array $$$b$$$ is the minimum number of operations needed to transform $$$b$$$ into $$$a$$$.Given the array $$$a$$$, find any array $$$b$$$ which is a permutation of $$$a$$$ that has the maximum sadness over all permutations of the array $$$a$$$.",
    "prob_desc_output_spec": "For each test case, print $$$n$$$ integers $$$b_1, b_2, \\ldots, b_n$$$ — describing the array $$$b$$$. If there are multiple answers, you may print any.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$)  — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$)  — the length of the array. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq n$$$)  — elements of the array $$$a$$$. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_108.jsonl",
    "code_uid": "7dff26ed019f67ef30f11afa78e86cd6",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n\\n2\\n\\n2 1\\n\\n4\\n\\n1 2 3 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\n\r\ndef solve():\r\n\tinp = sys.stdin.readline\r\n\tn = int(inp())\r\n\ta = list(map(int, inp().split()))\r\n\tc = [[] for i in range(n + 1)]\r\n\tp = [None] * (n + 1)\r\n\tfor i in range(n):\r\n\t\tc[a[i]].append(i)\r\n\tfor i in range(n + 1):\r\n\t\tp[i] = (-len(c[i]), i)\r\n\tp.sort()\r\n\tb = [None] * n\r\n\tfor k in range(-p[0][0]):\r\n\t\tpr = p[0][1]\r\n\t\tfor i in range(1, n + 5):\r\n\t\t\tsz, v = p[i]\r\n\t\t\t#print(k, pr, v, sz)\r\n\t\t\tif -sz > k:\r\n\t\t\t\tb[c[pr][k]] = v\r\n\t\t\t\tpr = v\r\n\t\t\telse:\r\n\t\t\t\t#print(c[pr])\r\n\t\t\t\tb[c[pr][k]] = p[0][1]\r\n\t\t\t\tbreak\r\n\tprint(' '.join(map(str, b)))\r\n\r\n\r\ndef main():\r\n\tfor i in range(int(sys.stdin.readline())):\r\n\t\tsolve()\r\n\r\n\r\nif __name__ == '__main__':\r\n\tmain()\r\n",
    "prob_desc_created_at": "1650722700",
    "tags": [
        "constructive algorithms",
        "graphs",
        "greedy"
    ],
    "hidden_unit_tests": ""
}