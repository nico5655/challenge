{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1\\n0\\n-1\\n2\\n2\\n0\\n-1\\n1\\n1\"]",
    "src_uid": "4ca13794471831953f2737ca9d4ba853",
    "prob_desc_notes": "NoteThe first test case is pictured below.  We can take the black cell in row $$$1$$$ and column $$$2$$$, and make all cells in its row black. Therefore, the cell in row $$$1$$$ and column $$$4$$$ will become black.  In the second test case, the cell in row $$$2$$$ and column $$$1$$$ is already black.In the third test case, it is impossible to make the cell in row $$$2$$$ and column $$$2$$$ black.The fourth test case is pictured below.  We can take the black cell in row $$$2$$$ and column $$$2$$$ and make its column black.   Then, we can take the black cell in row $$$1$$$ and column $$$2$$$ and make its row black.   Therefore, the cell in row $$$1$$$ and column $$$1$$$ will become black.",
    "prob_desc_description": "There is a grid with $$$n$$$ rows and $$$m$$$ columns. Some cells are colored black, and the rest of the cells are colored white.In one operation, you can select some black cell and do exactly one of the following:   color all cells in its row black, or  color all cells in its column black. You are given two integers $$$r$$$ and $$$c$$$. Find the minimum number of operations required to make the cell in row $$$r$$$ and column $$$c$$$ black, or determine that it is impossible.",
    "prob_desc_output_spec": "For each test case, if it is impossible to make the cell in row $$$r$$$ and column $$$c$$$ black, output $$$-1$$$.  Otherwise, output a single integer — the minimum number of operations required to make the cell in row $$$r$$$ and column $$$c$$$ black. ",
    "prob_desc_input_spec": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases. The description of the test cases follows. The first line of each test case contains four integers $$$n$$$, $$$m$$$, $$$r$$$, and $$$c$$$ ($$$1 \\leq n, m \\leq 50$$$; $$$1 \\leq r \\leq n$$$; $$$1 \\leq c \\leq m$$$) — the number of rows and the number of columns in the grid, and the row and column of the cell you need to turn black, respectively. Then $$$n$$$ lines follow, each containing $$$m$$$ characters. Each of these characters is either 'B' or 'W' — a black and a white cell, respectively.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_109.jsonl",
    "code_uid": "880a9a519cd602d2e9c7ad83522b6955",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"9\\n\\n3 5 1 4\\n\\nWBWWW\\n\\nBBBWB\\n\\nWWBBB\\n\\n4 3 2 1\\n\\nBWW\\n\\nBBW\\n\\nWBB\\n\\nWWB\\n\\n2 3 2 2\\n\\nWWW\\n\\nWWW\\n\\n2 2 1 1\\n\\nWW\\n\\nWB\\n\\n5 9 5 9\\n\\nWWWWWWWWW\\n\\nWBWBWBBBW\\n\\nWBBBWWBWW\\n\\nWBWBWBBBW\\n\\nWWWWWWWWW\\n\\n1 1 1 1\\n\\nB\\n\\n1 1 1 1\\n\\nW\\n\\n1 2 1 1\\n\\nWB\\n\\n2 1 1 1\\n\\nW\\n\\nB\"]",
    "exec_outcome": "PASSED",
    "source_code": "def main():\n    t = int(input())\n    for i in range(t):\n        result = -1\n\n        n, m, r, c = map(int, input().split())\n        if r > n or c > m:\n            print(str(-1))\n            continue\n        arr = []\n        for x in range(n):\n            arr.append(list(input()))\n            if 'B' in arr[x]:\n                result = 0\n\n        if result == -1:\n            print(str(-1))\n            continue \n        \n        if arr[r-1][c-1] == 'B':\n            print(str(0))\n            continue\n\n        if 'B' in arr[r-1]:\n            print(str(1))\n            continue\n        \n        for z in range(n):\n            if result == 1:\n                break\n            if arr[z][c-1] == 'B':\n                print(str(1))\n                result = 1\n        \n        if result != 1:\n            print(str(2))\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "prob_desc_created_at": "1642257300",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "hidden_unit_tests": ""
}