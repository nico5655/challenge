{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"1000\\n1\\n0\\n2\"]",
    "src_uid": "993f96a62a2ba75a12684b75a5b2f1ed",
    "prob_desc_notes": null,
    "prob_desc_description": "Let's call some positive integer classy if its decimal representation contains no more than $$$3$$$ non-zero digits. For example, numbers $$$4$$$, $$$200000$$$, $$$10203$$$ are classy and numbers $$$4231$$$, $$$102306$$$, $$$7277420000$$$ are not.You are given a segment $$$[L; R]$$$. Count the number of classy integers $$$x$$$ such that $$$L \\le x \\le R$$$.Each testcase contains several segments, for each of them you are required to solve the problem separately.",
    "prob_desc_output_spec": "Print $$$T$$$ lines — the $$$i$$$-th line should contain the number of classy integers on a segment $$$[L_i; R_i]$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$T$$$ ($$$1 \\le T \\le 10^4$$$) — the number of segments in a testcase. Each of the next $$$T$$$ lines contains two integers $$$L_i$$$ and $$$R_i$$$ ($$$1 \\le L_i \\le R_i \\le 10^{18}$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_012.jsonl",
    "code_uid": "7ac9248f7d0cee55d2de7e50f3bc9834",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n1 1000\\n1024 1024\\n65536 65536\\n999999 1000001\"]",
    "exec_outcome": "PASSED",
    "source_code": "#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n    return list(map(int, input().split()))    \n\ntry :\n    #raise ModuleNotFoundError\n    import numpy\n    def dprint(*args, **kwargs):\n        print(*args, **kwargs, file=sys.stderr)\n    dprint('debug mode')\nexcept ModuleNotFoundError:\n    def dprint(*args, **kwargs):\n        pass\n\n\n\ninId = 0\noutId = 0\nif inId>0:\n    dprint('use input', inId)\n    sys.stdin = open('input'+ str(inId) + '.txt', 'r') #标准输出重定向至文件\nif outId>0:\n    dprint('use output', outId)\n    sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #标准输出重定向至文件\n    atexit.register(lambda :sys.stdout.close())     #idle 中不会执行 atexit\n    \nN, = getIntList()\ndef memo(func):  \n    cache={}  \n    def wrap(*args):  \n        if args not in cache:  \n            cache[args]=func(*args)  \n        return cache[args]  \n    return wrap\n\n@memo\ndef comb (n,k):\n    if k>n: return 0    \n    if k==0: return 1\n    if n==k: return 1\n    return comb(n-1,k-1) + comb(n-1,k)\ndef getclam(K, left = 3):\n    if K==0: return 1\n    if left ==0: return 1\n    s = str(K)\n    l = len(s)\n\n    r = 0\n    x = int(s[0])\n    if l>1:\n        for i in range(left+1):\n            r += comb(l-1,i) * 9 ** i\n        if x>0:\n            for i in range(left):\n                r += comb(l-1,i) * 9 ** i * (x-1)\n        s1 = s[1:]\n        y = 0\n        if s1:\n            y = int(s1)\n        if x!=0:\n            left-=1\n        r+= getclam( y, left)\n        return r\n    else:\n        return x+1\nfor i in range(1000, 1100):\n    continue\n    dprint(i, getclam(i))\n\nfor _ in range(N):\n    L,R = getIntList()\n    r = getclam(R) - getclam(L-1)\n    print(r)\n\n\n\n\n\n",
    "prob_desc_created_at": "1536330900",
    "tags": [
        "dp",
        "combinatorics"
    ],
    "hidden_unit_tests": ""
}