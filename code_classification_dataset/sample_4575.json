{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\\nYES\\nNO\\nYES\\nYES\\nNO\"]",
    "src_uid": "7b6a3de5ad0975e4c43f097d4648c9c9",
    "prob_desc_notes": "NoteThe first three test cases are explained in the statement.",
    "prob_desc_description": "You are given an array $$$a[0 \\dots n-1]$$$ of $$$n$$$ integers. This array is called a \"valley\" if there exists exactly one subarray $$$a[l \\dots r]$$$ such that:  $$$0 \\le l \\le r \\le n-1$$$,  $$$a_l = a_{l+1} = a_{l+2} = \\dots = a_r$$$,  $$$l = 0$$$ or $$$a_{l-1} &gt; a_{l}$$$,  $$$r = n-1$$$ or $$$a_r &lt; a_{r+1}$$$. Here are three examples:  The first image shows the array [$$$3, 2, 2, 1, 2, 2, 3$$$], it is a valley because only subarray with indices $$$l=r=3$$$ satisfies the condition.The second image shows the array [$$$1, 1, 1, 2, 3, 3, 4, 5, 6, 6, 6$$$], it is a valley because only subarray with indices $$$l=0, r=2$$$ satisfies the codition.The third image shows the array [$$$1, 2, 3, 4, 3, 2, 1$$$], it is not a valley because two subarrays $$$l=r=0$$$ and $$$l=r=6$$$ that satisfy the condition.You are asked whether the given array is a valley or not.Note that we consider the array to be indexed from $$$0$$$.",
    "prob_desc_output_spec": "For each test case, output \"YES\" (without quotes) if the array is a valley, and \"NO\" (without quotes) otherwise. You can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2\\cdot10^5$$$) — the length of the array. The second line of each test case contains $$$n$$$ integers $$$a_i$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the elements of the array. It is guaranteed that the sum of $$$n$$$ over all test cases is smaller than $$$2\\cdot10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1000,
    "file_name": "train_101.jsonl",
    "code_uid": "177fbc206c23b53e8f247df61aea756c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n\\n7\\n\\n3 2 2 1 2 2 3\\n\\n11\\n\\n1 1 1 2 3 3 4 5 6 6 6\\n\\n7\\n\\n1 2 3 4 3 2 1\\n\\n7\\n\\n9 7 4 6 9 9 10\\n\\n1\\n\\n1000000000\\n\\n8\\n\\n9 4 4 5 9 4 9 10\"]",
    "exec_outcome": "PASSED",
    "source_code": "from itertools import groupby\r\nt = int(input())\r\ndef removeconsdup(arr):\r\n    idx = 1\r\n    while idx < len(arr):\r\n        if arr[idx] == arr[idx-1]:\r\n            arr.pop(idx)\r\n            idx -= 1\r\n        idx += 1\r\n    return arr\r\nfor i in range(0,t):\r\n    n = int(input())\r\n    a = [int(i) for i in input().split()]\r\n    b = [i[0] for i in groupby(a)] #removes consecutive duplicates boolean = \"Yes\"\r\n    count = 0\r\n    if len(b) != 1:\r\n        for i in range(0,len(b)):\r\n            if i != 0 and i != len(b)-1:\r\n                if b[i+1] > b[i] and b[i-1] > b[i]:\r\n                    count += 1\r\n            elif i == 0:\r\n                if b[1] > b[i]:\r\n                    count += 1\r\n            elif i == len(b)-1:\r\n                if b[i-1] > b[i]:\r\n                    count += 1\r\n    if count == 1 or len(b) == 1:\r\n        boolean = \"Yes\"\r\n    else:\r\n        boolean = \"No\"\r\n    print(boolean)\r\n\r\n",
    "prob_desc_created_at": "1669041300",
    "tags": [
        "implementation",
        "two pointers"
    ],
    "hidden_unit_tests": ""
}