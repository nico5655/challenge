{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2 1\\n3 1 2\\n1 6 5 8 3 2 4 7\"]",
    "src_uid": "0903a40d72c19a9d1cc1147d01ea94a7",
    "prob_desc_notes": "NoteIn the first testcase, there exists only one permutation $$$q$$$ such that each liked song is rating higher than each disliked song: song $$$1$$$ gets rating $$$2$$$ and song $$$2$$$ gets rating $$$1$$$. $$$\\sum\\limits_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2$$$.In the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to $$$p$$$. Its cost is $$$0$$$.",
    "prob_desc_description": "Berland Music is a music streaming service built specifically to support Berland local artist. Its developers are currently working on a song recommendation module.So imagine Monocarp got recommended $$$n$$$ songs, numbered from $$$1$$$ to $$$n$$$. The $$$i$$$-th song had its predicted rating equal to $$$p_i$$$, where $$$1 \\le p_i \\le n$$$ and every integer from $$$1$$$ to $$$n$$$ appears exactly once. In other words, $$$p$$$ is a permutation.After listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string $$$s$$$, such that $$$s_i=0$$$ means that he disliked the $$$i$$$-th song, and $$$s_i=1$$$ means that he liked it.Now the service has to re-evaluate the song ratings in such a way that:  the new ratings $$$q_1, q_2, \\dots, q_n$$$ still form a permutation ($$$1 \\le q_i \\le n$$$; each integer from $$$1$$$ to $$$n$$$ appears exactly once);  every song that Monocarp liked should have a greater rating than every song that Monocarp disliked (formally, for all $$$i, j$$$ such that $$$s_i=1$$$ and $$$s_j=0$$$, $$$q_i&gt;q_j$$$ should hold). Among all valid permutations $$$q$$$ find the one that has the smallest value of $$$\\sum\\limits_{i=1}^n |p_i-q_i|$$$, where $$$|x|$$$ is an absolute value of $$$x$$$.Print the permutation $$$q_1, q_2, \\dots, q_n$$$. If there are multiple answers, you can print any of them.",
    "prob_desc_output_spec": "For each testcase, print a permutation $$$q$$$ — the re-evaluated ratings of the songs. If there are multiple answers such that $$$\\sum\\limits_{i=1}^n |p_i-q_i|$$$ is minimum possible, you can print any of them.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of testcases. The first line of each testcase contains a single integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the number of songs. The second line of each testcase contains $$$n$$$ integers $$$p_1, p_2, \\dots, p_n$$$ ($$$1 \\le p_i \\le n$$$) — the permutation of the predicted ratings. The third line contains a single string $$$s$$$, consisting of $$$n$$$ characters. Each character is either a $$$0$$$ or a $$$1$$$. $$$0$$$ means that Monocarp disliked the song, and $$$1$$$ means that he liked it. The sum of $$$n$$$ over all testcases doesn't exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1000,
    "file_name": "train_085.jsonl",
    "code_uid": "654feabfa49f056eedf2d0f1a93f911a",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n2\\n1 2\\n10\\n3\\n3 1 2\\n111\\n8\\n2 3 1 8 5 4 7 6\\n01110001\"]",
    "exec_outcome": "PASSED",
    "source_code": "t= int(input())\r\n\r\nfor i in range(t):\r\n    n= int(input())\r\n    p= [int(x) for x in input().split()]\r\n    s= [int(x) for x in input()]\r\n\r\n    l= sorted([[s[i], p[i], i] for i in range(n)])\r\n    q= [0] * n\r\n    for i in range(n):\r\n        q[l[i][2]] = i+1\r\n\r\n    print(*q)\r\n",
    "prob_desc_created_at": "1640615700",
    "tags": [
        "data structures",
        "greedy",
        "math",
        "sortings"
    ],
    "hidden_unit_tests": ""
}