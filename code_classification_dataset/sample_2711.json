{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\"]",
    "src_uid": "e132767dd89801a237b998a410b22a44",
    "prob_desc_notes": "NoteConsider the first example. Bubble sort swaps elements 3 and 1. We add edge (1, 3). Permutation is now [1, 3, 2]. Then bubble sort swaps elements 3 and 2. We add edge (2, 3). Permutation is now sorted. We have a graph with 3 vertices and 2 edges (1, 3) and (2, 3). Its maximal independent set is [1, 2].",
    "prob_desc_description": "Iahub recently has learned Bubble Sort, an algorithm that is used to sort a permutation with n elements a1, a2, ..., an in ascending order. He is bored of this so simple algorithm, so he invents his own graph. The graph (let's call it G) initially has n vertices and 0 edges. During Bubble Sort execution, edges appear as described in the following algorithm (pseudocode). procedure bubbleSortGraph()    build a graph G with n vertices and 0 edges    repeat        swapped = false        for i = 1 to n - 1 inclusive do:            if a[i] &gt; a[i + 1] then                add an undirected edge in G between a[i] and a[i + 1]                swap( a[i], a[i + 1] )                swapped = true            end if        end for    until not swapped     /* repeat the algorithm as long as swapped value is true. */ end procedureFor a graph, an independent set is a set of vertices in a graph, no two of which are adjacent (so there are no edges between vertices of an independent set). A maximum independent set is an independent set which has maximum cardinality. Given the permutation, find the size of the maximum independent set of graph G, if we use such permutation as the premutation a in procedure bubbleSortGraph.",
    "prob_desc_output_spec": "Output a single integer — the answer to the problem. ",
    "prob_desc_input_spec": "The first line of the input contains an integer n (2 ≤ n ≤ 105). The next line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ n).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_029.jsonl",
    "code_uid": "47b99e97c98413a2b31c42f89db0720d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n3 1 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "def lis(a):\n\n    b = []\n\n    for c in a:\n\n        # if len(b) == 0 or c > b[-1]\n\n        if len(b) == 0 or c > b[-1]:\n\n            b.append(c)\n\n        else:\n\n            l = 0\n\n            r = len(b)\n\n            while l < r-1:\n\n                m = l+r>>1\n\n                # if b[m] <= c: l = m\n\n                if b[m] < c: l = m\n\n                else: r = m\n\n            # if b[l] <= c: l += 1\n\n            if b[l] < c: l += 1\n\n            b[l] = c\n\n        \n\n    return len(b)\n\n                    \n\n\n\nn = int(input())\n\n\n\na = list(map(int, input().split()))\n\n\n\nprint(lis(a))\n\n\n\n\n\n# Made By Mostafa_Khaled",
    "prob_desc_created_at": "1377876600",
    "tags": [
        "dp",
        "binary search",
        "data structures"
    ],
    "hidden_unit_tests": ""
}