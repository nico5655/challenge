{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\"]",
    "src_uid": "de87bb6ffd3c703d8845d4dd301bdbf5",
    "prob_desc_notes": "NoteThe answer for the first test sample is subsequence [1, 2, 3].",
    "prob_desc_description": "Gargari got bored to play with the bishops and now, after solving the problem about them, he is trying to do math homework. In a math book he have found k permutations. Each of them consists of numbers 1, 2, ..., n in some order. Now he should find the length of the longest common subsequence of these permutations. Can you help Gargari?You can read about longest common subsequence there: https://en.wikipedia.org/wiki/Longest_common_subsequence_problem",
    "prob_desc_output_spec": "Print the length of the longest common subsequence.",
    "prob_desc_input_spec": "The first line contains two integers n and k (1 ≤ n ≤ 1000; 2 ≤ k ≤ 5). Each of the next k lines contains integers 1, 2, ..., n in some order — description of the current permutation.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_008.jsonl",
    "code_uid": "8713fe1256830155b10308bdc1b64283",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 3\\n1 4 2 3\\n4 1 2 3\\n1 2 4 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "#   ==========     //\\\\       //||     ||====//||\n#       ||        //  \\\\        ||     ||   // ||\n#       ||       //====\\\\       ||     ||  //  ||\n#       ||      //      \\\\      ||     || //   ||\n#   ========== //        \\\\  ========  ||//====|| \n#  code\n\ndef solve():\n    n, k = map(int, input().split())\n    c = [ [-1 for i in range(n + 1)] for i in range(k)]\n    dp = [0 for i in range(n + 1)]\n    a = []\n\n    for i in range(k):\n        b = list(map(int, input().split()))\n        for j, v in enumerate(b):\n            c[i][v] = j\n        a.append(b)\n\n    \n    for i in range(n):\n        curpos = a[0][i]\n        dp[i] = 1\n        for j in range(i):\n            prevpos = a[0][j]\n            ok = True\n            for p in range(k):\n                if c[p][curpos] < c[p][prevpos]:\n                    ok = False\n                    break\n            if ok:\n                dp[i] = max(dp[i], dp[j] + 1)\n    print(max(dp))\n    return\n\ndef main():\n    t = 1\n    # t = int(input())\n    for _ in range(t):\n        solve()\n\nif __name__ == \"__main__\":\n    main()",
    "prob_desc_created_at": "1409383800",
    "tags": [
        "dp",
        "implementation",
        "dfs and similar",
        "graphs"
    ],
    "hidden_unit_tests": ""
}