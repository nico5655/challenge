{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"2\", \"0\", \"1\"]",
    "src_uid": "02b0ffb0045fc0a2c8613c8ef58ed2c8",
    "prob_desc_notes": "NoteIn the first example Polycarpus can tell letters \"b\" and \"c\", which assuredly will be revealed.The second example contains no letters which can be told as it is not clear, which of the letters \"v\" or \"s\" is located at the third position of the hidden word.In the third example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.",
    "prob_desc_description": "Polycarpus takes part in the \"Field of Wonders\" TV show. The participants of the show have to guess a hidden word as fast as possible. Initially all the letters of the word are hidden.The game consists of several turns. At each turn the participant tells a letter and the TV show host responds if there is such letter in the word or not. If there is such letter then the host reveals all such letters. For example, if the hidden word is \"abacaba\" and the player tells the letter \"a\", the host will reveal letters at all positions, occupied by \"a\": 1, 3, 5 and 7 (positions are numbered from left to right starting from 1).Polycarpus knows m words of exactly the same length as the hidden word. The hidden word is also known to him and appears as one of these m words.At current moment a number of turns have already been made and some letters (possibly zero) of the hidden word are already revealed. Previously Polycarp has told exactly the letters which are currently revealed.It is Polycarpus' turn. He wants to tell a letter in such a way, that the TV show host will assuredly reveal at least one more letter. Polycarpus cannot tell the letters, which are already revealed.Your task is to help Polycarpus and find out the number of letters he can tell so that the show host will assuredly reveal at least one of the remaining letters.",
    "prob_desc_output_spec": "Output the single integer — the number of letters Polycarpus can tell so that the TV show host definitely reveals at least one more letter. It is possible that this number is zero.",
    "prob_desc_input_spec": "The first line contains one integer n (1 ≤ n ≤ 50) — the length of the hidden word. The following line describes already revealed letters. It contains the string of length n, which consists of lowercase Latin letters and symbols \"*\". If there is a letter at some position, then this letter was already revealed. If the position contains symbol \"*\", then the letter at this position has not been revealed yet. It is guaranteed, that at least one letter is still closed. The third line contains an integer m (1 ≤ m ≤ 1000) — the number of words of length n, which Polycarpus knows. The following m lines contain the words themselves — n-letter strings of lowercase Latin letters. All words are distinct. It is guaranteed that the hidden word appears as one of the given m words. Before the current move Polycarp has told exactly the letters which are currently revealed.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_016.jsonl",
    "code_uid": "5f9d9239677c5cd147e3ba64c786d8e5",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\na**d\\n2\\nabcd\\nacbd\", \"5\\nlo*er\\n2\\nlover\\nloser\", \"3\\na*a\\n2\\naaa\\naba\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(raw_input())\ns = str(raw_input())\nm = int(raw_input())\ncur = set(s)\nst = None\nfor i in range(m):\n    t = str(raw_input())\n    #check first if t is possible\n    ch = ''.join(i if i in s else '*' for i in t)\n    if ch == s:\n        if st is None:\n            st = set(t)\n        else:\n            st.intersection_update(set(t))\n\nif st is None:\n    st = set()\nst.difference_update(cur)\nprint len(st)",
    "prob_desc_created_at": "1508573100",
    "tags": [
        "implementation",
        "strings"
    ],
    "hidden_unit_tests": ""
}