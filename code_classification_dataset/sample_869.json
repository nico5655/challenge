{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"15129\", \"51\", \"1099509530625\"]",
    "src_uid": "56fbdca75b69bf41d2a45a1dfe81d022",
    "prob_desc_notes": "NoteIn the first sample no operation can be made, thus the answer is $$$123^2$$$.In the second sample we can obtain the collection $$$1, 1, 7$$$, and $$$1^2 + 1^2 + 7^2 = 51$$$.If $$$x$$$ and $$$y$$$ are represented in binary with equal number of bits (possibly with leading zeros), then each bit of $$$x~\\mathsf{AND}~y$$$ is set to $$$1$$$ if and only if both corresponding bits of $$$x$$$ and $$$y$$$ are set to $$$1$$$. Similarly, each bit of $$$x~\\mathsf{OR}~y$$$ is set to $$$1$$$ if and only if at least one of the corresponding bits of $$$x$$$ and $$$y$$$ are set to $$$1$$$. For example, $$$x = 3$$$ and $$$y = 5$$$ are represented as $$$011_2$$$ and $$$101_2$$$ (highest bit first). Then, $$$x~\\mathsf{AND}~y = 001_2 = 1$$$, and $$$x~\\mathsf{OR}~y = 111_2 = 7$$$.",
    "prob_desc_description": "Gottfried learned about binary number representation. He then came up with this task and presented it to you.You are given a collection of $$$n$$$ non-negative integers $$$a_1, \\ldots, a_n$$$. You are allowed to perform the following operation: choose two distinct indices $$$1 \\leq i, j \\leq n$$$. If before the operation $$$a_i = x$$$, $$$a_j = y$$$, then after the operation $$$a_i = x~\\mathsf{AND}~y$$$, $$$a_j = x~\\mathsf{OR}~y$$$, where $$$\\mathsf{AND}$$$ and $$$\\mathsf{OR}$$$ are bitwise AND and OR respectively (refer to the Notes section for formal description). The operation may be performed any number of times (possibly zero).After all operations are done, compute $$$\\sum_{i=1}^n a_i^2$$$ — the sum of squares of all $$$a_i$$$. What is the largest sum of squares you can achieve?",
    "prob_desc_output_spec": "Print a single integer — the largest possible sum of squares that can be achieved after several (possibly zero) operations.",
    "prob_desc_input_spec": "The first line contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$). The second line contains $$$n$$$ integers $$$a_1, \\ldots, a_n$$$ ($$$0 \\leq a_i &lt; 2^{20}$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_004.jsonl",
    "code_uid": "a9799663967c08989d5c153d5db9ae99",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"1\\n123\", \"3\\n1 3 5\", \"2\\n349525 699050\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input())\nl = list(map(int, input().split()))\nans = []\nfor i in range(20): ans.append([])\nfor i in range(n):\n    tmp = bin(l[i])[2: ]\n    ln = 20 - len(tmp)\n    tmp = '0' * ln + tmp\n    for j in range(20): ans[j].append(tmp[j])\nfor i in range(20): ans[i].sort()\nfin = 0\nfor i in range(n):\n    tmp = 0\n    for j in range(20):\n        tmp += int(ans[j][i]) * (2 ** (20 - j - 1))\n    fin += tmp * tmp\nprint(fin)",
    "prob_desc_created_at": "1592491500",
    "tags": [
        "bitmasks",
        "greedy",
        "math"
    ],
    "hidden_unit_tests": ""
}