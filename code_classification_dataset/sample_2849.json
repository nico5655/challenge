{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"7\", \"6\"]",
    "src_uid": "55512092f84fdf712b212ed389ae6bc8",
    "prob_desc_notes": "NoteThere are $$$7$$$ subpermutations in the first test case. Their segments of indices are $$$[1, 4]$$$, $$$[3, 3]$$$, $$$[3, 6]$$$, $$$[4, 7]$$$, $$$[6, 7]$$$, $$$[7, 7]$$$ and $$$[7, 8]$$$.In the second test case $$$6$$$ subpermutations exist: $$$[1, 1]$$$, $$$[2, 2]$$$, $$$[2, 3]$$$, $$$[3, 4]$$$, $$$[4, 4]$$$ and $$$[4, 5]$$$.",
    "prob_desc_description": "You have an array $$$a_1, a_2, \\dots, a_n$$$. Let's call some subarray $$$a_l, a_{l + 1}, \\dots , a_r$$$ of this array a subpermutation if it contains all integers from $$$1$$$ to $$$r-l+1$$$ exactly once. For example, array $$$a = [2, 2, 1, 3, 2, 3, 1]$$$ contains $$$6$$$ subarrays which are subpermutations: $$$[a_2 \\dots a_3]$$$, $$$[a_2 \\dots a_4]$$$, $$$[a_3 \\dots a_3]$$$, $$$[a_3 \\dots a_5]$$$, $$$[a_5 \\dots a_7]$$$, $$$[a_7 \\dots a_7]$$$.You are asked to calculate the number of subpermutations.",
    "prob_desc_output_spec": "Print the number of subpermutations of the array $$$a$$$.",
    "prob_desc_input_spec": "The first line contains one integer $$$n$$$ ($$$1 \\le n \\le 3 \\cdot 10^5$$$). The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots , a_n$$$ ($$$1 \\le a_i \\le n$$$).  This array can contain the same integers.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2500,
    "file_name": "train_033.jsonl",
    "code_uid": "4ff0b87eabe82c7e06ea8d4c654cc33c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"8\\n2 4 1 3 4 2 1 2\", \"5\\n1 1 2 1 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "import  sys\nimport  math\ninput=sys.stdin.readline\n#sys.setrecursionlimit(1000000)\nmod=int(1000000007)\ni=lambda :map(int,input().split())\nn=int(input())\na=[int(x) for x in input().split()]\nt=[[0]*21 for i in range(300005)]\nfor i in range(n):\n    t[i][0]=a[i]\n\ndef build(n):\n    for j in range(1,20):\n        for i in range(n):\n            if i+(1<<j)-1>n-1:\n                break;\n            t[i][j]=max(t[i][j-1],t[i+(1<<(j-1))][j-1])\n\ndef query(p,q):\n    p,q=int(p),int(q)\n    log=int(math.log2(q-p+1))\n    m=t[p][log]\n    n=t[q-(1<<log)+1][log]\n    return max(m,n)\n\nb=[-1]*(n+2)\nbuild(n)\nmax1=-1\nans=0\nfor i in range(n):\n    max1=max(max1,b[a[i]])\n    b[a[i]]=i\n    x=b[1]\n    while x>max1:\n        if x<=max1:\n            break\n        p=query(x,i)\n        if p==i-x+1:\n            ans+=1\n            x=b[p+1]\n        else:\n            x=i-p+1\nprint(ans)",
    "prob_desc_created_at": "1559745300",
    "tags": [
        "hashing",
        "math",
        "divide and conquer",
        "data structures",
        "brute force"
    ],
    "hidden_unit_tests": ""
}