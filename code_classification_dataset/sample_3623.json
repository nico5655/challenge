{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"9\", \"8\"]",
    "src_uid": "f010eebcf35357f8c791a1c6101189ba",
    "prob_desc_notes": "NoteIn the first sample, roads of the spanning tree have cost 2, while other roads have cost 3. One example of an optimal path is .In the second sample, we have the same spanning tree, but roads in the spanning tree cost 3, while other roads cost 2. One example of an optimal path is .",
    "prob_desc_description": "A group of n cities is connected by a network of roads. There is an undirected road between every pair of cities, so there are  roads in total. It takes exactly y seconds to traverse any single road.A spanning tree is a set of roads containing exactly n - 1 roads such that it's possible to travel between any two cities using only these roads.Some spanning tree of the initial network was chosen. For every road in this tree the time one needs to traverse this road was changed from y to x seconds. Note that it's not guaranteed that x is smaller than y.You would like to travel through all the cities using the shortest path possible. Given n, x, y and a description of the spanning tree that was chosen, find the cost of the shortest path that starts in any city, ends in any city and visits all cities exactly once.",
    "prob_desc_output_spec": "Print a single integer — the minimum number of seconds one needs to spend in order to visit all the cities exactly once.",
    "prob_desc_input_spec": "The first line of the input contains three integers n, x and y (2 ≤ n ≤ 200 000, 1 ≤ x, y ≤ 109). Each of the next n - 1 lines contains a description of a road in the spanning tree. The i-th of these lines contains two integers ui and vi (1 ≤ ui, vi ≤ n) — indices of the cities connected by the i-th road. It is guaranteed that these roads form a spanning tree.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_074.jsonl",
    "code_uid": "b3b362d8ee8d5790f5f91b32ef29d636",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 2 3\\n1 2\\n1 3\\n3 4\\n5 3\", \"5 3 2\\n1 2\\n1 3\\n3 4\\n5 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import defaultdict\nfrom collections import deque\nfrom functools import reduce\nn, x, y = [int(x) for x in input().split()]\nE = defaultdict(set)\nfor i in range(n-1):\n    u, v = [int(x) for x in input().split()]\n    E[u].add(v)\n    E[v].add(u)\n\nif x > y:\n    for v in E:\n        if len(E[v]) == n-1:\n            print((n-2)*y + x)\n            break\n        elif len(E[v]) > 1:\n            print((n-1)*y)\n            break\nelse:\n    visited = {v : False for v in E}\n    stack = [1]\n    topsorted = deque()\n    while stack:\n        v = stack.pop()\n        if visited[v]: continue\n        visited[v] = True\n        topsorted.appendleft(v)\n        stack.extend(E[v])\n    chopped = set()\n    ans = 0\n    for v in topsorted:\n        ans += max(0, len(E[v])-2)\n        if len(E[v]) > 2:\n            S = E[v].intersection(chopped)\n            S1 = {S.pop(), S.pop()}\n            for u in E[v]:\n                if not u in S1:\n                    E[u].remove(v)\n            E[v].clear()\n            E[v].update(S1)\n        chopped.add(v)\n    print(ans*y + (n-1-ans)*x)\n        \n",
    "prob_desc_created_at": "1454087400",
    "tags": [
        "dp",
        "greedy",
        "graph matchings",
        "dfs and similar",
        "trees"
    ],
    "hidden_unit_tests": ""
}