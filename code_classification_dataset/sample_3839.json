{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\\n2\\n3\\n3\\n5\\n4\"]",
    "src_uid": "0eee4b8f074e02311329d5728138c7fe",
    "prob_desc_notes": null,
    "prob_desc_description": "$$$2^k$$$ teams participate in a playoff tournament. The tournament consists of $$$2^k - 1$$$ games. They are held as follows: first of all, the teams are split into pairs: team $$$1$$$ plays against team $$$2$$$, team $$$3$$$ plays against team $$$4$$$ (exactly in this order), and so on (so, $$$2^{k-1}$$$ games are played in that phase). When a team loses a game, it is eliminated, and each game results in elimination of one team (there are no ties). After that, only $$$2^{k-1}$$$ teams remain. If only one team remains, it is declared the champion; otherwise, $$$2^{k-2}$$$ games are played: in the first one of them, the winner of the game \"$$$1$$$ vs $$$2$$$\" plays against the winner of the game \"$$$3$$$ vs $$$4$$$\", then the winner of the game \"$$$5$$$ vs $$$6$$$\" plays against the winner of the game \"$$$7$$$ vs $$$8$$$\", and so on. This process repeats until only one team remains.For example, this picture describes the chronological order of games with $$$k = 3$$$:  Let the string $$$s$$$ consisting of $$$2^k - 1$$$ characters describe the results of the games in chronological order as follows:  if $$$s_i$$$ is 0, then the team with lower index wins the $$$i$$$-th game;  if $$$s_i$$$ is 1, then the team with greater index wins the $$$i$$$-th game;  if $$$s_i$$$ is ?, then the result of the $$$i$$$-th game is unknown (any team could win this game). Let $$$f(s)$$$ be the number of possible winners of the tournament described by the string $$$s$$$. A team $$$i$$$ is a possible winner of the tournament if it is possible to replace every ? with either 1 or 0 in such a way that team $$$i$$$ is the champion.You are given the initial state of the string $$$s$$$. You have to process $$$q$$$ queries of the following form:   $$$p$$$ $$$c$$$ — replace $$$s_p$$$ with character $$$c$$$, and print $$$f(s)$$$ as the result of the query. ",
    "prob_desc_output_spec": "For each query, print one integer — $$$f(s)$$$.",
    "prob_desc_input_spec": "The first line contains one integer $$$k$$$ ($$$1 \\le k \\le 18$$$). The second line contains a string consisting of $$$2^k - 1$$$ characters — the initial state of the string $$$s$$$. Each character is either ?, 0, or 1. The third line contains one integer $$$q$$$ ($$$1 \\le q \\le 2 \\cdot 10^5$$$) — the number of queries. Then $$$q$$$ lines follow, the $$$i$$$-th line contains an integer $$$p$$$ and a character $$$c$$$ ($$$1 \\le p \\le 2^k - 1$$$; $$$c$$$ is either ?, 0, or 1), describing the $$$i$$$-th query.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_085.jsonl",
    "code_uid": "2cb9dce8b147673c6414b28cbc35a4ac",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n0110?11\\n6\\n5 1\\n6 ?\\n7 ?\\n1 ?\\n5 ?\\n1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\n\r\n\r\ndef upd(ix, cur):\r\n    if s[ix] == '?':\r\n        tree[cur] = tree[cur << 1] + tree[(cur << 1) + 1]\r\n    else:\r\n        tree[cur] = tree[(cur << 1) + (int(s[ix]) ^ 1)]\r\n\r\n\r\ninput = lambda: sys.stdin.buffer.readline().decode().strip()\r\nispow2 = lambda x: x and (not (x & (x - 1)))\r\nk, s = int(input()), list(input())\r\ntree, n, out = [1] * (1 << (k + 1)), len(s), []\r\n\r\nfor i in range(len(s)):\r\n    cur = n - i\r\n    upd(i, cur)\r\n\r\nfor i in range(int(input())):\r\n    ix, ch = input().split()\r\n    ix = int(ix) - 1\r\n    cur, s[ix] = n - ix, ch\r\n\r\n    while cur:\r\n        upd(ix, cur)\r\n        cur >>= 1\r\n        ix = n - cur\r\n    out.append(tree[1])\r\nprint('\\n'.join(map(str, out)))\r\n",
    "prob_desc_created_at": "1622817300",
    "tags": [
        "data structures",
        "dfs and similar",
        "dp",
        "implementation",
        "trees"
    ],
    "hidden_unit_tests": ""
}