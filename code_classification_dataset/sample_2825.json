{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"0\\n9\\n0\\n0\"]",
    "src_uid": "5aa653e7af021505e6851c561a762578",
    "prob_desc_notes": "NoteFor the first example before any updates it's optimal to choose j = 0, f(0) = |(1 - 1) - (2 - 2) + (3 - 3) - (4 - 4) + (5 - 5)| = |0| = 0.After the first update a becomes {11, 2, 3, 4, 5} and it's optimal to choose j = 1, f(1) = |(11 - 2) - (2 - 3) + (3 - 4) - (4 - 5) + (5 - 6) = |9| = 9.After the second update a becomes {2, 2, 3, 4, 5} and it's optimal to choose j = 1, f(1) = |(2 - 2) - (2 - 3) + (3 - 4) - (4 - 5) + (5 - 6)| = |0| = 0.After the third update a becomes {1, 1, 2, 3, 4} and it's optimal to choose j = 0, f(0) = |(1 - 1) - (1 - 2) + (2 - 3) - (3 - 4) + (4 - 5)| = |0| = 0.",
    "prob_desc_description": "Dr. Evil is interested in math and functions, so he gave Mahmoud and Ehab array a of length n and array b of length m. He introduced a function f(j) which is defined for integers j, which satisfy 0 ≤ j ≤ m - n. Suppose, ci = ai - bi + j. Then f(j) = |c1 - c2 + c3 - c4... cn|. More formally, . Dr. Evil wants Mahmoud and Ehab to calculate the minimum value of this function over all valid j. They found it a bit easy, so Dr. Evil made their task harder. He will give them q update queries. During each update they should add an integer xi to all elements in a in range [li;ri] i.e. they should add xi to ali, ali + 1, ... , ari and then they should calculate the minimum value of f(j) for all valid j.Please help Mahmoud and Ehab.",
    "prob_desc_output_spec": "The first line should contain the minimum value of the function f before any update. Then output q lines, the i-th of them should contain the minimum value of the function f after performing the i-th update .",
    "prob_desc_input_spec": "The first line contains three integers n, m and q (1 ≤ n ≤ m ≤ 105, 1 ≤ q ≤ 105) — number of elements in a, number of elements in b and number of queries, respectively. The second line contains n integers a1, a2, ..., an. ( - 109 ≤ ai ≤ 109) — elements of a. The third line contains m integers b1, b2, ..., bm. ( - 109 ≤ bi ≤ 109) — elements of b. Then q lines follow describing the queries. Each of them contains three integers li ri xi (1 ≤ li ≤ ri ≤ n,  - 109 ≤ x ≤ 109) — range to be updated and added value.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_032.jsonl",
    "code_uid": "1a8b2c46255b5f990d04fc576ccb356e",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 6 3\\n1 2 3 4 5\\n1 2 3 4 5 6\\n1 1 10\\n1 1 -9\\n1 5 -1\"]",
    "exec_outcome": "PASSED",
    "source_code": "def read(): return list(map(int, input().split(' ')))\nn, m, q = read()\naa = read()\nbb = read()\nreqs = [read() for _ in range(q)]\n\nasum = 0\nbsum = 0\nfor i, (a, b) in enumerate(zip(aa, bb)):\n    asum += a if i % 2 == 0 else -a\n    bsum += b if i % 2 == 0 else -b\n\nbpos = [bsum]\nfor i in range(len(aa), len(bb)):\n    b = bb[i]\n\n    rempos = i - len(aa)\n    bsum += b if i % 2 == 0 else -b\n    bsum -= bb[rempos] if rempos % 2 == 0 else -bb[rempos]\n    bpos += [bsum if rempos % 2 == 1 else -bsum]\n\nbpos = sorted(set(bpos))\n\ndef closest(arr, value):\n    l = 0\n    r = len(arr)\n    while l + 1 < r:\n        m = (l + r) // 2\n        if arr[m] <= value:\n            l = m\n        else:\n            r = m\n        \n    res = arr[l]\n    if l + 1 < len(arr) and abs(arr[l + 1] - value) < abs(arr[l] - value):\n        res = arr[l + 1]\n    return res\n\nprint(abs(asum - closest(bpos, asum)))\nfor req in reqs:\n    l, r, x = req\n    l -= 1\n    if (r - l) % 2 != 0:\n        asum += x if l % 2 == 0 else -x\n    print(abs(asum - closest(bpos, asum)))\n",
    "prob_desc_created_at": "1505833500",
    "tags": [
        "data structures",
        "binary search",
        "sortings"
    ],
    "hidden_unit_tests": ""
}