{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2 3 4 3\\n2 3 4 3 5 4 6 5\\n2 3 3 3 4 4 4 5\"]",
    "src_uid": "ca835eeb8f24de8860d6f5ac6c0af55d",
    "prob_desc_notes": "NoteThe first test case is shown in the statement.After the $$$1$$$-st student enters the meeting hall, there are $$$2$$$ good rows and columns: the $$$1$$$-st row and the $$$1$$$-st column.After the $$$2$$$-nd student enters the meeting hall, there are $$$3$$$ good rows and columns: the $$$1$$$-st row, the $$$1$$$-st column and the $$$2$$$-nd column.After the $$$3$$$-rd student enters the meeting hall, the $$$4$$$ rows and columns are all good.After the $$$4$$$-th student enters the meeting hall, there are $$$3$$$ good rows and columns: the $$$2$$$-nd row, the $$$1$$$-st column and the $$$2$$$-nd column.",
    "prob_desc_description": "Tokitsukaze is arranging a meeting. There are $$$n$$$ rows and $$$m$$$ columns of seats in the meeting hall.There are exactly $$$n \\cdot m$$$ students attending the meeting, including several naughty students and several serious students. The students are numerated from $$$1$$$ to $$$n\\cdot m$$$. The students will enter the meeting hall in order. When the $$$i$$$-th student enters the meeting hall, he will sit in the $$$1$$$-st column of the $$$1$$$-st row, and the students who are already seated will move back one seat. Specifically, the student sitting in the $$$j$$$-th ($$$1\\leq j \\leq m-1$$$) column of the $$$i$$$-th row will move to the $$$(j+1)$$$-th column of the $$$i$$$-th row, and the student sitting in $$$m$$$-th column of the $$$i$$$-th row will move to the $$$1$$$-st column of the $$$(i+1)$$$-th row.For example, there is a meeting hall with $$$2$$$ rows and $$$2$$$ columns of seats shown as below:  There will be $$$4$$$ students entering the meeting hall in order, represented as a binary string \"1100\", of which '0' represents naughty students and '1' represents serious students. The changes of seats in the meeting hall are as follows:  Denote a row or a column good if and only if there is at least one serious student in this row or column. Please predict the number of good rows and columns just after the $$$i$$$-th student enters the meeting hall, for all $$$i$$$.",
    "prob_desc_output_spec": "For each test case, print a single line with $$$n \\cdot m$$$ integers — the number of good rows and columns just after the $$$i$$$-th student enters the meeting hall.",
    "prob_desc_input_spec": "The first contains a single positive integer $$$t$$$ ($$$1 \\leq t \\leq 10\\,000$$$) — the number of test cases. For each test case, the first line contains two integers $$$n$$$, $$$m$$$ ($$$1 \\leq n,m \\leq 10^6$$$; $$$1 \\leq n \\cdot m \\leq 10^6$$$), denoting there are $$$n$$$ rows and $$$m$$$ columns of seats in the meeting hall. The second line contains a binary string $$$s$$$ of length $$$n \\cdot m$$$, consisting only of zeros and ones. If $$$s_i$$$ equal to '0' represents the $$$i$$$-th student is a naughty student, and $$$s_i$$$ equal to '1' represents the $$$i$$$-th student is a serious student. It is guaranteed that the sum of $$$n \\cdot m$$$ over all test cases does not exceed $$$10^6$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_097.jsonl",
    "code_uid": "348bbd4d1769cd2578ec53497701444c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n\\n2 2\\n\\n1100\\n\\n4 2\\n\\n11001101\\n\\n2 4\\n\\n11001101\"]",
    "exec_outcome": "PASSED",
    "source_code": "t = int(input())\r\nfor _ in range(t):\r\n    n, m = list(map(int, input().split()))\r\n    s = list(input())\r\n    if s[0] == '1':\r\n        rw = [1]\r\n        cn = [True]\r\n        cnt = 1\r\n        ans = [2]\r\n    else:\r\n        rw = [0]\r\n        cn = [False]\r\n        cnt = 0\r\n        ans = [0]\r\n    k = 0\r\n    for i in range(1, m):\r\n        if s[i] == '1':\r\n            cnt += 1\r\n            cn += [True]\r\n            rw += [1]\r\n            k = m\r\n        else:\r\n            cn += [False]\r\n            rw += [rw[-1]]\r\n        k -= 1\r\n        ans += [cnt + rw[-1]]\r\n    for i in range(m, m * n):\r\n        if s[i] == '1':\r\n            if not cn[i % m]:\r\n                cnt += 1\r\n                cn[i % m] = True\r\n            k = m\r\n            rw[i % m] += 1\r\n        elif k > 0:\r\n            rw[i % m] += 1\r\n        k -= 1\r\n        ans += [cnt + rw[i % m]]\r\n    print(' '.join(map(str, ans)))",
    "prob_desc_created_at": "1652020500",
    "tags": [
        "data structures",
        "implementation",
        "math"
    ],
    "hidden_unit_tests": ""
}