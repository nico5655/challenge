{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\\n5\"]",
    "src_uid": "e69c0010e093792011a0c7b846a9bc42",
    "prob_desc_notes": "NoteThe second test case is pictured below:   For example, points $$$3$$$ and $$$4$$$ form an inconvenient pair, since the shortest path between them (shown red and equal to $$$7$$$) is greater than its Manhattan distance (equal to $$$5$$$).Points $$$3$$$ and $$$5$$$ also form an inconvenient pair: the shortest path equal to $$$1000001$$$ (shown green) is greater than the Manhattan distance equal to $$$999999$$$.But points $$$5$$$ and $$$9$$$ don't form an inconvenient pair, since the shortest path (shown purple) is equal to its Manhattan distance.",
    "prob_desc_description": "There is a city that can be represented as a square grid with corner points in $$$(0, 0)$$$ and $$$(10^6, 10^6)$$$.The city has $$$n$$$ vertical and $$$m$$$ horizontal streets that goes across the whole city, i. e. the $$$i$$$-th vertical streets goes from $$$(x_i, 0)$$$ to $$$(x_i, 10^6)$$$ and the $$$j$$$-th horizontal street goes from $$$(0, y_j)$$$ to $$$(10^6, y_j)$$$. All streets are bidirectional. Borders of the city are streets as well.There are $$$k$$$ persons staying on the streets: the $$$p$$$-th person at point $$$(x_p, y_p)$$$ (so either $$$x_p$$$ equal to some $$$x_i$$$ or $$$y_p$$$ equal to some $$$y_j$$$, or both).Let's say that a pair of persons form an inconvenient pair if the shortest path from one person to another going only by streets is strictly greater than the Manhattan distance between them.Calculate the number of inconvenient pairs of persons (pairs $$$(x, y)$$$ and $$$(y, x)$$$ are the same pair).Let's recall that Manhattan distance between points $$$(x_1, y_1)$$$ and $$$(x_2, y_2)$$$ is $$$|x_1 - x_2| + |y_1 - y_2|$$$.",
    "prob_desc_output_spec": "For each test case, print the number of inconvenient pairs.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases. The first line of each test case contains three integers $$$n$$$, $$$m$$$ and $$$k$$$ ($$$2 \\le n, m \\le 2 \\cdot 10^5$$$; $$$2 \\le k \\le 3 \\cdot 10^5$$$) — the number of vertical and horizontal streets and the number of persons. The second line of each test case contains $$$n$$$ integers $$$x_1, x_2, \\dots, x_n$$$ ($$$0 = x_1 &lt; x_2 &lt; \\dots &lt; x_{n - 1} &lt; x_n = 10^6$$$) — the $$$x$$$-coordinates of vertical streets. The third line contains $$$m$$$ integers $$$y_1, y_2, \\dots, y_m$$$ ($$$0 = y_1 &lt; y_2 &lt; \\dots &lt; y_{m - 1} &lt; y_m = 10^6$$$) — the $$$y$$$-coordinates of horizontal streets. Next $$$k$$$ lines contains description of people. The $$$p$$$-th line contains two integers $$$x_p$$$ and $$$y_p$$$ ($$$0 \\le x_p, y_p \\le 10^6$$$; $$$x_p \\in \\{x_1, \\dots, x_n\\}$$$ or $$$y_p \\in \\{y_1, \\dots, y_m\\}$$$) — the coordinates of the $$$p$$$-th person. All points are distinct. It guaranteed that sum of $$$n$$$ doesn't exceed $$$2 \\cdot 10^5$$$, sum of $$$m$$$ doesn't exceed $$$2 \\cdot 10^5$$$ and sum of $$$k$$$ doesn't exceed $$$3 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_099.jsonl",
    "code_uid": "a3350404ee601d80482033e31edd0534",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n2 2 4\\n0 1000000\\n0 1000000\\n1 0\\n1000000 1\\n999999 1000000\\n0 999999\\n5 4 9\\n0 1 2 6 1000000\\n0 4 8 1000000\\n4 4\\n2 5\\n2 2\\n6 3\\n1000000 1\\n3 8\\n5 8\\n8 8\\n6 8\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\nfrom collections import Counter, deque\r\ninput = sys.stdin.buffer.readline\r\n\r\ndef calc(xl, ppls):\r\n    n, res = len(xl), 0\r\n    p, pn = 0, len(ppls)\r\n    ppls.sort()\r\n    cc = Counter()\r\n    for i in range(1, n):\r\n        bx, cx = xl[i-1], xl[i]\r\n        while p < pn and ppls[p][0] < cx:\r\n            if ppls[p][0] != bx: cc[ppls[p][1]] += 1\r\n            p += 1\r\n        if not cc: continue\r\n        m = 0\r\n        for yc in cc.values():\r\n            res, m = res+m*yc, m+yc\r\n        if cc: cc.clear()\r\n    return res\r\n\r\nT = int(input())\r\nfor _ in range(T):\r\n    n, m, k = map(int, input().split())\r\n    xl = list(map(int, input().split()))\r\n    yl = list(map(int, input().split()))\r\n    ppls = []\r\n    for _ in range(k):\r\n        x, y = map(int, input().split())\r\n        ppls.append((x, y))\r\n    \r\n    res = calc(xl, ppls)\r\n    ppls = [ (y, x) for x, y in ppls ]\r\n    res += calc(yl, ppls)\r\n    print(res)\r\n",
    "prob_desc_created_at": "1631111700",
    "tags": [
        "binary search",
        "data structures",
        "implementation",
        "sortings",
        "two pointers"
    ],
    "hidden_unit_tests": ""
}