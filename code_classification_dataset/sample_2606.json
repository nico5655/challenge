{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\\n3 2\", \"1\\n2\", \"3\\n1 1 2\", \"2\\n14 83\"]",
    "src_uid": "6be0731d9d2d55bf9aa3492a8161d23c",
    "prob_desc_notes": null,
    "prob_desc_description": "A tuple of positive integers {x1, x2, ..., xk} is called simple if for all pairs of positive integers (i,  j) (1  ≤ i  &lt;  j ≤ k), xi  +  xj is a prime.You are given an array a with n positive integers a1,  a2,  ...,  an (not necessary distinct). You want to find a simple subset of the array a with the maximum size.A prime number (or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself.Let's define a subset of the array a as a tuple that can be obtained from a by removing some (possibly all) elements of it.",
    "prob_desc_output_spec": "On the first line print integer m — the maximum possible size of simple subset of a. On the second line print m integers bl — the elements of the simple subset of the array a with the maximum size. If there is more than one solution you can print any of them. You can print the elements of the subset in any order.",
    "prob_desc_input_spec": "The first line contains integer n (1 ≤ n ≤ 1000) — the number of integers in the array a. The second line contains n integers ai (1 ≤ ai ≤ 106) — the elements of the array a.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_026.jsonl",
    "code_uid": "437927b2b62fd62c4cd7dc12dfcae8ae",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n2 3\", \"2\\n2 2\", \"3\\n2 1 1\", \"2\\n83 14\"]",
    "exec_outcome": "PASSED",
    "source_code": "def f(N):\n    p=[1]*N\n    k=4\n    for i in range(2,N):\n        if p[i]:\n            for j in range(k,N,i):\n                p[j]=0\n        k+=i<<1|1\n    return p\np=f(2000001)\nn=input()\na=map(int,raw_input().split())\none=a.count(1)\nif one>1:\n    for x in a:\n        if not x&1:\n            if p[x+1]:\n                print one+1\n                print x, '1 '*one\n                exit()\n    print one\n    print '1 '*one\nelse:\n    for x in a:\n        for y in a:\n            if p[x+y] and x+y>2:\n                print 2\n                print x,y\n                exit()\n    print 1\n    print a[0]\n",
    "prob_desc_created_at": "1461164400",
    "tags": [
        "constructive algorithms",
        "number theory",
        "greedy"
    ],
    "hidden_unit_tests": ""
}