{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\", \"1\"]",
    "src_uid": "6ef8200d05dd5eb729edceb62e393c50",
    "prob_desc_notes": "NoteIn the first sample if we exclude the movies of the 1st genre, the genres 2, 3, 2, 3, 3, 3 remain, that is 3 stresses; if we exclude the movies of the 2nd genre, the genres 1, 1, 3, 3, 3, 1, 1, 3 remain, that is 3 stresses; if we exclude the movies of the 3rd genre the genres 1, 1, 2, 2, 1, 1 remain, that is 2 stresses.In the second sample whatever genre Valentine excludes, he will have exactly 3 stresses.",
    "prob_desc_description": "A film festival is coming up in the city N. The festival will last for exactly n days and each day will have a premiere of exactly one film. Each film has a genre — an integer from 1 to k.On the i-th day the festival will show a movie of genre ai. We know that a movie of each of k genres occurs in the festival programme at least once. In other words, each integer from 1 to k occurs in the sequence a1, a2, ..., an at least once.Valentine is a movie critic. He wants to watch some movies of the festival and then describe his impressions on his site.As any creative person, Valentine is very susceptive. After he watched the movie of a certain genre, Valentine forms the mood he preserves until he watches the next movie. If the genre of the next movie is the same, it does not change Valentine's mood. If the genres are different, Valentine's mood changes according to the new genre and Valentine has a stress.Valentine can't watch all n movies, so he decided to exclude from his to-watch list movies of one of the genres. In other words, Valentine is going to choose exactly one of the k genres and will skip all the movies of this genre. He is sure to visit other movies.Valentine wants to choose such genre x (1 ≤ x ≤ k), that the total number of after-movie stresses (after all movies of genre x are excluded) were minimum.",
    "prob_desc_output_spec": "Print a single number — the number of the genre (from 1 to k) of the excluded films. If there are multiple answers, print the genre with the minimum number.",
    "prob_desc_input_spec": "The first line of the input contains two integers n and k (2 ≤ k ≤ n ≤ 105), where n is the number of movies and k is the number of genres. The second line of the input contains a sequence of n positive integers a1, a2, ..., an (1 ≤ ai ≤ k), where ai is the genre of the i-th movie. It is guaranteed that each number from 1 to k occurs at least once in this sequence.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_039.jsonl",
    "code_uid": "bbebe516280b8349fe4f605feb749603",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"10 3\\n1 1 2 3 2 3 3 1 1 3\", \"7 3\\n3 1 3 2 3 1 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn map(int, minp().split())\n\nn, k = mints()\na = list(mints())\ni = 0\nc = [0]*(k+1)\nwhile i < n:\n\tj = i\n\twhile j < n and a[j] == a[i]:\n\t\tj += 1\n\tif i - 1 >= 0:\n\t\tif j < n:\n\t\t\tif a[i-1] != a[j]:\n\t\t\t\tc[a[i]] += 1\n\t\t\telse:\n\t\t\t\tc[a[i]] += 2\n\t\telse:\n\t\t\tc[a[i]] += 1\n\telif j < n:\n\t\t\tc[a[i]] += 1\n\ti = j\nz = 1\nfor i in range(k+1):\n\tif c[z] < c[i]:\n\t\tz = i\nprint(z)\n",
    "prob_desc_created_at": "1353938400",
    "tags": [
        "greedy"
    ],
    "hidden_unit_tests": ""
}