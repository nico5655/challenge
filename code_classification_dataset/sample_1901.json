{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1\\n1\", \"0\", \"4\\n1 2 3 4\"]",
    "src_uid": "794b0ac038e4e32f35f754e9278424d3",
    "prob_desc_notes": "NoteIn the first sample Igor supposes that the first employee will receive 0 messages. Since he isn't contained in any other contact list he must come to the party in order to receive one message from himself. If he is the only who come to the party then he will receive 1 message, the second employee will receive 0 messages and the third will also receive 1 message. Thereby Igor won't guess any number.In the second sample if the single employee comes to the party he receives 1 message and Igor wins, so he shouldn't do it.In the third sample the first employee will receive 2 messages, the second — 3, the third — 2, the fourth — 3.",
    "prob_desc_description": "The Looksery company, consisting of n staff members, is planning another big party. Every employee has his phone number and the phone numbers of his friends in the phone book. Everyone who comes to the party, sends messages to his contacts about how cool it is. At the same time everyone is trying to spend as much time on the fun as possible, so they send messages to everyone without special thinking, moreover, each person even sends a message to himself or herself.Igor and Max, Looksery developers, started a dispute on how many messages each person gets. Igor indicates n numbers, the i-th of which indicates how many messages, in his view, the i-th employee is going to take. If Igor guesses correctly at least one of these numbers, he wins, otherwise Max wins.You support Max in this debate, so you need, given the contact lists of the employees, to determine whether there is a situation where Igor loses. Specifically, you need to determine which employees should come to the party, and which should not, so after all the visitors send messages to their contacts, each employee received a number of messages that is different from what Igor stated.",
    "prob_desc_output_spec": "In the first line print a single integer m — the number of employees who should come to the party so that Igor loses the dispute. In the second line print m space-separated integers — the numbers of these employees in an arbitrary order. If Igor wins the dispute in any case, print -1. If there are multiple possible solutions, print any of them.",
    "prob_desc_input_spec": "The first line contains a single integer n (1 ≤ n ≤ 100) — the number of employees of company Looksery. Next n lines contain the description of the contact lists of the employees. The i-th of these lines contains a string of length n, consisting of digits zero and one, specifying the contact list of the i-th employee. If the j-th character of the i-th string equals 1, then the j-th employee is in the i-th employee's contact list, otherwise he isn't. It is guaranteed that the i-th character of the i-th line is always equal to 1. The last line contains n space-separated integers: a1, a2, ..., an (0 ≤ ai ≤ n), where ai represents the number of messages that the i-th employee should get according to Igor.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_014.jsonl",
    "code_uid": "df5efee3e21521aba858c9ded9496d96",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n101\\n010\\n001\\n0 1 2\", \"1\\n1\\n1\", \"4\\n1111\\n0101\\n1110\\n0001\\n1 0 1 0\"]",
    "exec_outcome": "PASSED",
    "source_code": "n=int(input().strip())\n\nnums=['']+[' '+input().strip() for _ in range(n)]\na=[0]+list(map(int,input().split()))\n\n\ndef send(x):\n    for i in range(1,n+1):\n        if nums[x][i]=='1':\n            a[i]-=1\n\nvis=[0]*(n+1)\nwhile True:\n    for i in range(1,n+1):\n        if not vis[i] and not a[i]:\n            vis[i]=1\n            send(i)\n            break\n    else:\n        for i in range(1,n+1):\n            if not a[i]:\n                print(-1)\n                exit()\n        break\n\n\nans=[]\nfor i in range(1,n+1):\n    if vis[i]:\n        ans.append(i)\n\nif ans:\n    print(len(ans))\n    print(*ans)\nelse:\n    print(0)\n",
    "prob_desc_created_at": "1433595600",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "greedy",
        "graphs"
    ],
    "hidden_unit_tests": ""
}