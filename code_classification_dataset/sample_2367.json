{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"4427477\", \"4478\"]",
    "src_uid": "8ce1ba0a98031c1bc28f53c11905391c",
    "prob_desc_notes": "NoteIn the first sample the number changes in the following sequence: 4727447 → 4427447 → 4427477 → 4427447 → 4427477.In the second sample: 4478 → 4778 → 4478.",
    "prob_desc_description": "Petya loves lucky numbers. Everybody knows that lucky numbers are positive integers whose decimal representation contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.Petya has a number consisting of n digits without leading zeroes. He represented it as an array of digits without leading zeroes. Let's call it d. The numeration starts with 1, starting from the most significant digit. Petya wants to perform the following operation k times: find the minimum x (1 ≤ x &lt; n) such that dx = 4 and dx + 1 = 7, if x is odd, then to assign dx = dx + 1 = 4, otherwise to assign dx = dx + 1 = 7. Note that if no x was found, then the operation counts as completed and the array doesn't change at all.You are given the initial number as an array of digits and the number k. Help Petya find the result of completing k operations.",
    "prob_desc_output_spec": "In the single line print the result without spaces — the number after the k operations are fulfilled.",
    "prob_desc_input_spec": "The first line contains two integers n and k (1 ≤ n ≤ 105, 0 ≤ k ≤ 109) — the number of digits in the number and the number of completed operations. The second line contains n digits without spaces representing the array of digits d, starting with d1. It is guaranteed that the first digit of the number does not equal zero.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_021.jsonl",
    "code_uid": "f1e020a8afc8535f9b870a7df58949d8",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7 4\\n4727447\", \"4 2\\n4478\"]",
    "exec_outcome": "PASSED",
    "source_code": "# 447 or 477 start with odd\n\n\nn, k = map(int, input().split())\ns = input()\ns = list(s)\n\nfor i in range(n - 1):\n    if not k:\n        break\n    if s[i] != '4':\n        continue\n    tt = ''.join(s[i:i + 3])\n    if tt in ('447', '477') and i % 2 == 0:\n        if k % 2 == 1 and tt == '447':\n            s[i + 1] = '7'\n        if k % 2 == 1 and tt == '477':\n            s[i + 1] = '4'\n        break\n    if s[i] == '4' and s[i + 1] == '7':\n        if i % 2 == 0:\n            s[i + 1] = '4'\n        else:\n            s[i] = '7'\n        k -= 1\n\nprint(''.join(s))\n",
    "prob_desc_created_at": "1319727600",
    "tags": [
        "strings"
    ],
    "hidden_unit_tests": ""
}