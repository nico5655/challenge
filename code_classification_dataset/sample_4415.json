{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"0 1 \\n0 0\", \"1 2 2\\n1 1 0\\n1 0 1\", \"1 0 1 3 4\\n1 4 3 1 0\\n2 4 1 0 2\\n1 2 2 2 2\\n2 2 0 1 4\"]",
    "src_uid": "a6e13812cdf771ba480e69c0ff6f4c74",
    "prob_desc_notes": "NoteIn the first example, the answer is valid because all entries are non-negative integers less than $$$n = 2$$$, and $$$a_{1,1}+a_{2,2} \\not\\equiv a_{1,2}+a_{2,1} \\pmod 2$$$ (because $$$a_{1,1}+a_{2,2} = 0 + 0 \\equiv 0 \\pmod 2$$$ and $$$a_{1,2}+a_{2,1} = 1 + 0 \\equiv 1 \\pmod 2 $$$). Moreover, the values on the main diagonals are equal to $$$0,0$$$ as required.In the second example, the answer is correct because all entries are non-negative integers less than $$$n = 3$$$, and the second condition is satisfied for all quadruplets $$$(r_1, r_2, c_1, c_2)$$$. For example:   When $$$r_1=1$$$, $$$r_2=2$$$, $$$c_1=1$$$ and $$$c_2=2$$$, $$$a_{1,1}+a_{2,2} \\not\\equiv a_{1,2}+a_{2,1} \\pmod 3$$$ because $$$a_{1,1}+a_{2,2} = 1 + 1 \\equiv 2 \\pmod 3$$$ and $$$a_{1,2}+a_{2,1} = 2 + 1 \\equiv 0 \\pmod 3 $$$.  When $$$r_1=2$$$, $$$r_2=3$$$, $$$c_1=1$$$, and $$$c_2=3$$$, $$$a_{2,1}+a_{3,3} \\not\\equiv a_{2,3}+a_{3,1} \\pmod 3$$$ because $$$a_{2,1}+a_{3,3} = 1 + 1 \\equiv 2 \\pmod 3$$$ and $$$a_{2,3}+a_{3,1} = 0 + 1 \\equiv 1 \\pmod 3 $$$.  Moreover, the values on the main diagonal are equal to $$$1,1,1$$$ as required.",
    "prob_desc_description": "You are given a prime number $$$n$$$, and an array of $$$n$$$ integers $$$b_1,b_2,\\ldots, b_n$$$, where $$$0 \\leq b_i &lt; n$$$ for each $$$1 \\le i \\leq n$$$.You have to find a matrix $$$a$$$ of size $$$n \\times n$$$ such that all of the following requirements hold:  $$$0 \\le a_{i,j} &lt; n$$$ for all $$$1 \\le i, j \\le n$$$.  $$$a_{r_1, c_1} + a_{r_2, c_2} \\not\\equiv a_{r_1, c_2} + a_{r_2, c_1} \\pmod n$$$ for all positive integers $$$r_1$$$, $$$r_2$$$, $$$c_1$$$, and $$$c_2$$$ such that $$$1 \\le r_1 &lt; r_2 \\le n$$$ and $$$1 \\le c_1 &lt; c_2 \\le n$$$. $$$a_{i,i} = b_i$$$ for all $$$1 \\le i \\leq n$$$. Here $$$x \\not \\equiv y \\pmod m$$$ denotes that $$$x$$$ and $$$y$$$ give different remainders when divided by $$$m$$$.If there are multiple solutions, output any. It can be shown that such a matrix always exists under the given constraints.",
    "prob_desc_output_spec": "Print $$$n$$$ lines. On the $$$i$$$-th line, print $$$n$$$ integers $$$a_{i, 1}, a_{i, 2}, \\ldots, a_{i, n}$$$, each separated with a space. If there are multiple solutions, output any.",
    "prob_desc_input_spec": "The first line contains a single positive integer $$$n$$$ ($$$2 \\le n &lt; 350$$$).  The second line contains $$$n$$$ integers $$$b_1, b_2, \\ldots, b_n$$$ ($$$0 \\le b_i &lt; n$$$) — the required values on the main diagonal of the matrix. It is guaranteed that $$$n$$$ is prime.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_097.jsonl",
    "code_uid": "eec2e304ca63cc335fa473ab5af5cba3",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n0 0\", \"3\\n1 1 1\", \"5\\n1 4 1 2 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin\r\n\r\n# import tracemalloc\r\n# from sys import setrecursionlimit\r\n# import resource\r\ninput = stdin.readline\r\n\r\n\r\n# setrecursionlimit(int(1e9))\r\n# resource.setrlimit(resource.RLIMIT_STACK, (2**29,-1))\r\n\r\ndef ii():\r\n    return int(input())\r\n\r\n\r\ndef li():\r\n    return list(map(int, input().split()))\r\n\r\n\r\nfrom math import sqrt\r\n\r\n\r\ndef perfect_sq(n):\r\n    x = int(sqrt(n))\r\n\r\n    while x * x < n:\r\n        x += 1\r\n\r\n    while x * x > n:\r\n        x -= 1\r\n\r\n    return (x * x == n)\r\n\r\nn=ii()\r\na=li()\r\nfor i in range(n):\r\n    for j in range(n):\r\n        tmp = j*i - i*i\r\n        print(((tmp + a[i] )%n + n)%n , end=' ')\r\n    print()",
    "prob_desc_created_at": "1663934700",
    "tags": [
        "constructive algorithms",
        "number theory"
    ],
    "hidden_unit_tests": ""
}