{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\", \"-1\"]",
    "src_uid": "71dd4827bdf23c20d06901f3ef8551aa",
    "prob_desc_notes": "NoteIn the first case, changing $$$a_{1,1}$$$ to $$$0$$$ and $$$a_{2,2}$$$ to $$$1$$$ is enough. You can verify that there is no way to make the matrix in the second case good. Some definitions —   A binary matrix is one in which every element is either $$$1$$$ or $$$0$$$.  A sub-matrix is described by $$$4$$$ parameters — $$$r_1$$$, $$$r_2$$$, $$$c_1$$$, and $$$c_2$$$; here, $$$1 \\leq r_1 \\leq r_2 \\leq n$$$ and $$$1 \\leq c_1 \\leq c_2 \\leq m$$$.  This sub-matrix contains all elements $$$a_{i,j}$$$ that satisfy both $$$r_1 \\leq i \\leq r_2$$$ and $$$c_1 \\leq j \\leq c_2$$$.  A sub-matrix is, further, called an even length square if $$$r_2-r_1 = c_2-c_1$$$ and $$$r_2-r_1+1$$$ is divisible by $$$2$$$. ",
    "prob_desc_description": "A binary matrix is called good if every even length square sub-matrix has an odd number of ones. Given a binary matrix $$$a$$$ consisting of $$$n$$$ rows and $$$m$$$ columns, determine the minimum number of cells you need to change to make it good, or report that there is no way to make it good at all. All the terms above have their usual meanings — refer to the Notes section for their formal definitions. ",
    "prob_desc_output_spec": "Output the minimum number of cells you need to change to make $$$a$$$ good, or output $$$-1$$$ if it's not possible at all.",
    "prob_desc_input_spec": "The first line of input contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n \\leq m \\leq 10^6$$$ and $$$n\\cdot m \\leq 10^6$$$)  — the number of rows and columns in $$$a$$$, respectively.  The following $$$n$$$ lines each contain $$$m$$$ characters, each of which is one of 0 and 1. If the $$$j$$$-th character on the $$$i$$$-th line is 1, then $$$a_{i,j} = 1$$$. Similarly, if the $$$j$$$-th character on the $$$i$$$-th line is 0, then $$$a_{i,j} = 0$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_007.jsonl",
    "code_uid": "8f733831813bf90be1086f706bdf755d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 3\\n101\\n001\\n110\", \"7 15\\n000100001010010\\n100111010110001\\n101101111100100\\n010000111111010\\n111010010100001\\n000011001111101\\n111111011010011\"]",
    "exec_outcome": "PASSED",
    "source_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = [input() for _ in range(n)]\n\n    if n > m:\n        n, m = m, n\n        a = list(zip(*a))\n\n    if n == 1:\n        print(0)\n        return\n    elif n == 2:\n        best_sol = float('inf')\n\n        for i in [0, 1]:\n            sol = 0\n\n            for j in range(m):\n                if j % 2 == i:\n                    sol += a[0][j] != a[1][j]\n                else:\n                    sol += a[0][j] == a[1][j]\n\n            best_sol = min(best_sol, sol)\n\n        print(best_sol)\n    elif n == 3:\n        best_sol = float('inf')\n\n        for i in [0, 1]:\n            for j in [0, 1]:\n                sol = 0\n\n                for k in range(m):\n                    cond1 = a[0][k] != a[1][k] if k % 2 == i else a[0][k] == a[1][k]\n                    cond2 = a[1][k] != a[2][k] if k % 2 == j else a[1][k] == a[2][k]\n\n                    sol += cond1 or cond2\n\n                best_sol = min(best_sol, sol)\n\n        print(best_sol)\n    else:\n        print(-1)\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
    "prob_desc_created_at": "1596983700",
    "tags": [
        "dp",
        "greedy",
        "constructive algorithms",
        "bitmasks",
        "implementation",
        "brute force"
    ],
    "hidden_unit_tests": ""
}