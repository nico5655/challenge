{
    "prob_desc_time_limit": "5 seconds",
    "prob_desc_sample_outputs": "[\"2\", \"4\", \"0\", \"4\"]",
    "src_uid": "2f171f2a3774c5eb3a6d830ac66233d1",
    "prob_desc_notes": null,
    "prob_desc_description": "This is an easier version of the next problem. In this version, $$$q = 0$$$.A sequence of integers is called nice if its elements are arranged in blocks like in $$$[3, 3, 3, 4, 1, 1]$$$. Formally, if two elements are equal, everything in between must also be equal.Let's define difficulty of a sequence as a minimum possible number of elements to change to get a nice sequence. However, if you change at least one element of value $$$x$$$ to value $$$y$$$, you must also change all other elements of value $$$x$$$ into $$$y$$$ as well. For example, for $$$[3, 3, 1, 3, 2, 1, 2]$$$ it isn't allowed to change first $$$1$$$ to $$$3$$$ and second $$$1$$$ to $$$2$$$. You need to leave $$$1$$$'s untouched or change them to the same value.You are given a sequence of integers $$$a_1, a_2, \\ldots, a_n$$$ and $$$q$$$ updates.Each update is of form \"$$$i$$$ $$$x$$$\" — change $$$a_i$$$ to $$$x$$$. Updates are not independent (the change stays for the future).Print the difficulty of the initial sequence and of the sequence after every update.",
    "prob_desc_output_spec": "Print $$$q+1$$$ integers, the answer for the initial sequence and the answer after every update.",
    "prob_desc_input_spec": "The first line contains integers $$$n$$$ and $$$q$$$ ($$$1 \\le n \\le 200\\,000$$$, $$$q = 0$$$), the length of the sequence and the number of the updates. The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 200\\,000$$$), the initial sequence. Each of the following $$$q$$$ lines contains integers $$$i_t$$$ and $$$x_t$$$ ($$$1 \\le i_t \\le n$$$, $$$1 \\le x_t \\le 200\\,000$$$), the position and the new value for this position.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_052.jsonl",
    "code_uid": "58fde92d7dbbf1318d667bc18accea3c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 0\\n3 7 3 7 3\", \"10 0\\n1 2 1 2 3 1 1 1 50 1\", \"6 0\\n6 6 3 3 4 4\", \"7 0\\n3 3 1 3 2 1 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "MAXN = 200100\n\nn, q = map(int, input().split())\na = list(map(int, input().split()))\nlpos = [-1]*MAXN\nfor i in range(n):\n\tlpos[a[i]] = i\nneed = 0\ni = 0\nwhile i < n:\n\tstart = i\n\tr = lpos[a[i]]\n\tj = i + 1\n\twhile j < r:\n\t\tr = max(r, lpos[a[j]])\n\t\tj += 1\n\tcnts = {}\n\twhile i <= r:\n\t\tif a[i] in cnts:\n\t\t\tcnts[a[i]] += 1\n\t\telse:\n\t\t\tcnts[a[i]] = 1\n\t\ti += 1\n\tbest = 0\n\tfor k, v in cnts.items():\n\t\tbest = max(best, v)\n\tneed += i - start - best\n\nprint(need)\n ",
    "prob_desc_created_at": "1568466300",
    "tags": [
        "greedy",
        "two pointers",
        "dsu",
        "implementation",
        "data structures"
    ],
    "hidden_unit_tests": ""
}