{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"0\\n1 2\\n2 3 5\\n1 2 5\\n3 2 3 4\\n1 4\\n-1\"]",
    "src_uid": "c313a305cc229ec23b19c6e4dd46b57b",
    "prob_desc_notes": "NoteIn the first test case, $$$b$$$ is empty. So string $$$s$$$ is not changed. Now $$$s^p = s_1 s_2 = \\mathtt{10}$$$, and $$$s^q = s_3s_4 = \\mathtt{10}$$$.In the second test case, $$$b=[3,5]$$$. Initially $$$s_3=\\mathtt{0}$$$, and $$$s_5=\\mathtt{1}$$$. On performing the operation, we simultaneously set $$$s_3=\\mathtt{1}$$$, and $$$s_5=\\mathtt{0}$$$.So $$$s$$$ is updated to 101000 on performing the operation.Now if we take characters at indices $$$[1,2,5]$$$ in $$$s^p$$$, we get $$$s_1=\\mathtt{100}$$$. Also characters at indices $$$[3,4,6]$$$ are in $$$s^q$$$. Thus $$$s^q=100$$$. We are done as $$$s^p=s^q$$$.In fourth test case, it can be proved that it is not possible to partition the string after performing any operation.",
    "prob_desc_description": "Everool has a binary string $$$s$$$ of length $$$2n$$$. Note that a binary string is a string consisting of only characters $$$0$$$ and $$$1$$$. He wants to partition $$$s$$$ into two disjoint equal subsequences. He needs your help to do it.You are allowed to do the following operation exactly once.   You can choose any subsequence (possibly empty) of $$$s$$$ and rotate it right by one position. In other words, you can select a sequence of indices $$$b_1, b_2, \\ldots, b_m$$$, where $$$1 \\le b_1 &lt; b_2 &lt; \\ldots &lt; b_m \\le 2n$$$. After that you simultaneously set $$$$$$s_{b_1} := s_{b_m},$$$$$$ $$$$$$s_{b_2} := s_{b_1},$$$$$$ $$$$$$\\ldots,$$$$$$ $$$$$$s_{b_m} := s_{b_{m-1}}.$$$$$$Can you partition $$$s$$$ into two disjoint equal subsequences after performing the allowed operation exactly once?A partition of $$$s$$$ into two disjoint equal subsequences $$$s^p$$$ and $$$s^q$$$ is two increasing arrays of indices $$$p_1, p_2, \\ldots, p_n$$$ and $$$q_1, q_2, \\ldots, q_n$$$, such that each integer from $$$1$$$ to $$$2n$$$ is encountered in either $$$p$$$ or $$$q$$$ exactly once, $$$s^p = s_{p_1} s_{p_2} \\ldots s_{p_n}$$$, $$$s^q = s_{q_1} s_{q_2} \\ldots s_{q_n}$$$, and $$$s^p = s^q$$$.If it is not possible to partition after performing any kind of operation, report $$$-1$$$. If it is possible to do the operation and partition $$$s$$$ into two disjoint subsequences $$$s^p$$$ and $$$s^q$$$, such that $$$s^p = s^q$$$, print elements of $$$b$$$ and indices of $$$s^p$$$, i.Â e. the values $$$p_1, p_2, \\ldots, p_n$$$.",
    "prob_desc_output_spec": "For each test case, follow the following output format. If there is no solution, print $$$-1$$$.  Otherwise,   In the first line, print an integer $$$m$$$ ($$$0 \\leq m \\leq 2n$$$), followed by $$$m$$$ distinct indices $$$b_1$$$, $$$b_2$$$, ..., $$$b_m$$$(in increasing order).  In the second line, print $$$n$$$ distinct indices $$$p_1$$$, $$$p_2$$$, ..., $$$p_n$$$ (in increasing order).  If there are multiple solutions, print any.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^5$$$). Description of the test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$), where $$$2n$$$ is the length of the binary string. The second line of each test case contains the binary string $$$s$$$ of length $$$2n$$$. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_103.jsonl",
    "code_uid": "be6c1a1808a62a937b0204125c30db6c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n2\\n1010\\n3\\n100010\\n2\\n1111\\n2\\n1110\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\nimport copy\r\ninput = sys.stdin.readline\r\nprint = sys.stdout.write\r\nfor i in range(int(input())):\r\n    a = int(input())\r\n    b = list(input().strip())\r\n    stat = 0\r\n    for i in range(len(b)):\r\n        if b[i] == \"1\":\r\n            stat+=1\r\n    if stat%2 == 1:\r\n        print(\"-1\\n\")\r\n        continue\r\n    tb = copy.deepcopy(b)\r\n    curans1 = 0\r\n    ans1 = []\r\n    ans2 = []\r\n    currentused = []\r\n    stat = (-1,-1)\r\n    count0 = 0\r\n    count1 = 0\r\n    for i in range(0,len(b),2):\r\n        ans1.append(str(i+1))\r\n        if b[i] == b[i+1]:\r\n            continue\r\n        if stat[0] == -1:\r\n            stat = (i,i+1)\r\n        else:\r\n            if b[stat[0]] == '0':\r\n                cur1 = stat[0]\r\n            else:\r\n                cur1 = stat[1]\r\n            if b[i] == '1':\r\n                cur2 = i\r\n            else:\r\n                cur2 = i+1\r\n            currentused.append(str(cur1+1))\r\n            currentused.append(str(cur2+1))\r\n            b[cur1] = \"1\"\r\n            b[cur2] = \"0\"\r\n            stat = (-1,-1)\r\n    if len(currentused) == 0:\r\n        print(\"0\\n\")\r\n    else:\r\n        print(str(len(currentused))+\" \")\r\n        print(\" \".join(currentused)+'\\n')\r\n    print(\" \".join(ans1)+\"\\n\")\r\n",
    "prob_desc_created_at": "1665412500",
    "tags": [
        "constructive algorithms",
        "geometry",
        "greedy",
        "implementation",
        "strings"
    ],
    "hidden_unit_tests": ""
}