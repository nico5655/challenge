{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\\n4\\n2147483646\\n1073741825\"]",
    "src_uid": "0751386917a5750695312773005684ec",
    "prob_desc_notes": "NoteFor the first test case, we can set the bit $$$1$$$ ($$$2^1$$$) of the last $$$2$$$ elements using the $$$2$$$ operations, thus obtaining the array [$$$2$$$, $$$3$$$, $$$3$$$], which has $$$\\mathsf{AND}$$$ value equal to $$$2$$$.For the second test case, we can't perform any operations so the answer is just the $$$\\mathsf{AND}$$$ of the whole array which is $$$4$$$.",
    "prob_desc_description": "Let $$$\\mathsf{AND}$$$ denote the bitwise AND operation, and $$$\\mathsf{OR}$$$ denote the bitwise OR operation.You are given an array $$$a$$$ of length $$$n$$$ and a non-negative integer $$$k$$$. You can perform at most $$$k$$$ operations on the array of the following type:  Select an index $$$i$$$ ($$$1 \\leq i \\leq n$$$) and replace $$$a_i$$$ with $$$a_i$$$ $$$\\mathsf{OR}$$$ $$$2^j$$$ where $$$j$$$ is any integer between $$$0$$$ and $$$30$$$ inclusive. In other words, in an operation you can choose an index $$$i$$$ ($$$1 \\leq i \\leq n$$$) and set the $$$j$$$-th bit of $$$a_i$$$ to $$$1$$$ ($$$0 \\leq j \\leq 30$$$). Output the maximum possible value of $$$a_1$$$ $$$\\mathsf{AND}$$$ $$$a_2$$$ $$$\\mathsf{AND}$$$ $$$\\dots$$$ $$$\\mathsf{AND}$$$ $$$a_n$$$ after performing at most $$$k$$$ operations. ",
    "prob_desc_output_spec": "For each test case, output a single line containing the maximum possible $$$\\mathsf{AND}$$$ value of $$$a_1$$$ $$$\\mathsf{AND}$$$ $$$a_2$$$ $$$\\mathsf{AND}$$$ $$$\\dots$$$ $$$\\mathsf{AND}$$$ $$$a_n$$$ after performing at most $$$k$$$ operations.",
    "prob_desc_input_spec": "The first line of the input contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) â€” the number of test cases. The description of test cases follows. The first line of each test case contains the integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$, $$$0 \\le k \\le 10^9$$$). Then a single line follows, containing $$$n$$$ integers describing the arrays $$$a$$$ ($$$0 \\leq a_i &lt; 2^{31}$$$). It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1300,
    "file_name": "train_084.jsonl",
    "code_uid": "55af092334e82743c952d2ffce5e635c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n3 2\\n2 1 1\\n7 0\\n4 6 6 28 6 6 12\\n1 30\\n0\\n4 4\\n3 1 3 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "#https://codeforces.com/blog/entry/71884\r\nimport sys\r\ninput = sys.stdin.readline\r\nfrom math import inf, gcd, log, log2, floor, ceil, sqrt\r\nfrom collections import Counter, defaultdict, deque\r\nfrom heapq import heappush, heappop, heapify\r\nfrom functools import lru_cache\r\nfrom bisect import bisect_left, bisect_right\r\n\r\n############ ---- Input Functions ---- ############\r\ndef inp():\r\n    return(int(input()))\r\ndef inlt():\r\n    return(list(map(int,input().split())))\r\ndef insr():\r\n    s = input()\r\n    return(list(s[:len(s) - 1]))\r\ndef invr():\r\n    return(map(int,input().split()))\r\n\r\ndef solve(n,k,arr):\r\n    t = k\r\n    bits = [0]*31\r\n    for x in arr:\r\n        num = '{:031b}'.format(x)\r\n        for i in range(len(num)):\r\n            if num[i] == \"0\":\r\n                bits[len(num)-i-1] += 1\r\n    ans = 0\r\n    for i in range(len(bits)-1,-1,-1):\r\n        if k >= bits[i]:\r\n            k -= bits[i]\r\n            ans += pow(2,i)\r\n\r\n    return ans\r\n\r\n\r\n\r\n\r\n \r\nt = inp()\r\nfor k in range(t):\r\n    d = inlt()\r\n    n, k = d[0],d[1]\r\n    arr = inlt()\r\n    print(solve(n,k,arr))\r\n    \r\n",
    "prob_desc_created_at": "1650551700",
    "tags": [
        "bitmasks",
        "greedy",
        "math"
    ],
    "hidden_unit_tests": ""
}