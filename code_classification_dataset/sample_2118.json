{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\\n1\\n1 3 4\", \"NO\"]",
    "src_uid": "623f12b8c5a5c850c7edd9875af56f32",
    "prob_desc_notes": "NoteIn the first example, the array becomes $$$[4 \\oplus 1 \\oplus 7, 2, 4 \\oplus 1 \\oplus 7, 4 \\oplus 1 \\oplus 7, 2] = [2, 2, 2, 2, 2]$$$.",
    "prob_desc_description": "Ksenia has an array $$$a$$$ consisting of $$$n$$$ positive integers $$$a_1, a_2, \\ldots, a_n$$$. In one operation she can do the following:   choose three distinct indices $$$i$$$, $$$j$$$, $$$k$$$, and then  change all of $$$a_i, a_j, a_k$$$ to $$$a_i \\oplus a_j \\oplus a_k$$$ simultaneously, where $$$\\oplus$$$ denotes the bitwise XOR operation. She wants to make all $$$a_i$$$ equal in at most $$$n$$$ operations, or to determine that it is impossible to do so. She wouldn't ask for your help, but please, help her!",
    "prob_desc_output_spec": "Print YES or NO in the first line depending on whether it is possible to make all elements equal in at most $$$n$$$ operations. If it is possible, print an integer $$$m$$$ ($$$0 \\leq m \\leq n$$$), which denotes the number of operations you do. In each of the next $$$m$$$ lines, print three distinct integers $$$i, j, k$$$, representing one operation.  If there are many such operation sequences possible, print any. Note that you do not have to minimize the number of operations.",
    "prob_desc_input_spec": "The first line contains one integer $$$n$$$ ($$$3 \\leq n \\leq 10^5$$$) — the length of $$$a$$$. The second line contains $$$n$$$ integers, $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — elements of $$$a$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_017.jsonl",
    "code_uid": "6e8680c9864ea16650dbcd69703e50a4",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n4 2 1 7 2\", \"4\\n10 4 49 22\"]",
    "exec_outcome": "PASSED",
    "source_code": "# abc means a xor b xor c\n#\n# a b c -> abc abc abc\n#\n#\n# a b c d -> abc abc abc d\n#         -> abc d   d   d    only YES if abc=d (abcd=0)\n#\n#\n# a b c d e -> abc abc abc d e\n#           -> abc abc abcde abcde abcde\n#              ^   ^   ^\n#           -> abcde abcde abcde abcde abcde\n#\n#\n# a b c d e f -> abc abc abc d e f\n#             -> abc abc abc def def def   odd number of abc\n#                                          only YES if abc=def (abcdef=0)\n#\n# a b c d e f g -> abc abc abc d e f g\n#               -> abc abc abc def def def g\n#                  ^           ^           ^\n#               -> abcdefg abc abc abcdefg def def abcdefg\n#                  ^       ^   ^\n#               -> abcdefg abcdefg abcdefg abcdefg def def abcdefg\n#               -> abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg\n#\n#\n# a b c d e f g\n# abc abc abc d e f g\n# abc abc abcde abcde abcde f g\n# abc abc abcde abcde abcdefg abcdefg abcdefg\n# abc abc abcdefg abcdefg abcdefg abcdefg abcdefg\n# abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg\n#\n# induction: assume true for n-2 and can be done in n-4 steps.\n# for n:\n#     a1 a2 a3 ... an\n#     (1 step, position 012)\n#     a1a2a3 a1a2a3 a1a2a3 a4 a5 ... an\n#                  [         n-2        ]\n#                   (n-4 steps)\n#                   234\n#                   456\n#                   678 ...\n#                   456\n#                   234\n#\n#     a1a2a3 a1a2a3 [a1a2...an   a1a2...an   a1a2...an]\n#     ^      ^       ^\n#     (1 step)\n#     012\n#\n#     Total n-2 steps. induction is correct\n\nn = int(input())\na = list(map(int,input().split()))\nif n % 2 != 0:\n    print('YES')\n    print(n-2)\n    for i in range(n):\n        print(i*2+1,i*2+2,i*2+3) # 123,345,567,...,n-2 n-1 n\n        if i*2+3 == n:\n            break\n    for i in range(2,n):\n        if n-i*2+2 < 3:\n            break\n        print(n-i*2,n-i*2+1,n-i*2+2)\n        # n-4 n-3 n-2, n-6 n-5 n-4, ... , 123\n\n\nelse:\n    xor = 0\n    for num in a:\n        xor = xor ^ num\n    if xor != 0:\n        print('NO')\n    else:\n        n -= 1\n        print('YES')\n        print(n-2)\n        for i in range(n):\n            print(i*2+1,i*2+2,i*2+3) # 123,345,567,...,n-2 n-1 n\n            if i*2+3 == n:\n                break\n        for i in range(2,n):\n            if n-i*2+2 < 3:\n                break\n            print(n-i*2,n-i*2+1,n-i*2+2)\n            # n-4 n-3 n-2, n-6 n-5 n-4, ... , 123\n",
    "prob_desc_created_at": "1605278100",
    "tags": [
        "constructive algorithms",
        "bitmasks",
        "math"
    ],
    "hidden_unit_tests": ""
}