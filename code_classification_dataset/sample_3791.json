{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"0 1\\n2 0 1\\n3 2 1 0 4\\n4 6 3 2 0 8 9 1 7 5\"]",
    "src_uid": "b6e758c75d0e3037a1500bbe652f6126",
    "prob_desc_notes": "NoteFor $$$n = 2$$$ there are $$$2$$$ sequences of pillar heights:   $$$[0, 1]$$$ — cost of construction is $$$0 \\oplus 1 = 1$$$.  $$$[1, 0]$$$ — cost of construction is $$$1 \\oplus 0 = 1$$$. For $$$n = 3$$$ there are $$$6$$$ sequences of pillar heights:   $$$[0, 1, 2]$$$ — cost of construction is $$$\\max(0 \\oplus 1, 1 \\oplus 2) = \\max(1, 3) = 3$$$.  $$$[0, 2, 1]$$$ — cost of construction is $$$\\max(0 \\oplus 2, 2 \\oplus 1) = \\max(2, 3) = 3$$$.  $$$[1, 0, 2]$$$ — cost of construction is $$$\\max(1 \\oplus 0, 0 \\oplus 2) = \\max(1, 2) = 2$$$.  $$$[1, 2, 0]$$$ — cost of construction is $$$\\max(1 \\oplus 2, 2 \\oplus 0) = \\max(3, 2) = 3$$$.  $$$[2, 0, 1]$$$ — cost of construction is $$$\\max(2 \\oplus 0, 0 \\oplus 1) = \\max(2, 1) = 2$$$.  $$$[2, 1, 0]$$$ — cost of construction is $$$\\max(2 \\oplus 1, 1 \\oplus 0) = \\max(3, 1) = 3$$$. ",
    "prob_desc_description": "It has finally been decided to build a roof over the football field in School 179. Its construction will require placing $$$n$$$ consecutive vertical pillars. Furthermore, the headmaster wants the heights of all the pillars to form a permutation $$$p$$$ of integers from $$$0$$$ to $$$n - 1$$$, where $$$p_i$$$ is the height of the $$$i$$$-th pillar from the left $$$(1 \\le i \\le n)$$$.As the chief, you know that the cost of construction of consecutive pillars is equal to the maximum value of the bitwise XOR of heights of all pairs of adjacent pillars. In other words, the cost of construction is equal to $$$\\max\\limits_{1 \\le i \\le n - 1}{p_i \\oplus p_{i + 1}}$$$, where $$$\\oplus$$$ denotes the bitwise XOR operation.Find any sequence of pillar heights $$$p$$$ of length $$$n$$$ with the smallest construction cost.In this problem, a permutation is an array consisting of $$$n$$$ distinct integers from $$$0$$$ to $$$n - 1$$$ in arbitrary order. For example, $$$[2,3,1,0,4]$$$ is a permutation, but $$$[1,0,1]$$$ is not a permutation ($$$1$$$ appears twice in the array) and $$$[1,0,3]$$$ is also not a permutation ($$$n=3$$$, but $$$3$$$ is in the array).",
    "prob_desc_output_spec": "For each test case print $$$n$$$ integers $$$p_1$$$, $$$p_2$$$, $$$\\ldots$$$, $$$p_n$$$ — the sequence of pillar heights with the smallest construction cost. If there are multiple answers, print any of them.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^4$$$). Description of the test cases follows. The only line for each test case contains a single integer $$$n$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$) — the number of pillars for the construction of the roof. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1000,
    "file_name": "train_084.jsonl",
    "code_uid": "8d3efa9d7ccfaef4dce78ac852851dd3",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n2\\n3\\n5\\n10\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\nimport math\r\n \r\n#lista=list(map(int,input().split()))\r\n#x=lista[0]\r\n#n=lista[0]\r\n \r\n#import sys\r\n#from collections import deque\r\n#from sys import stdin, stdout\r\nfrom decimal import *\r\n \r\n#lista=list(map(int,input().split()))\r\n#x=lista[0]\r\n#n=lista[0]\r\n \r\n \r\n#my_set=set()\r\n#for x in range(1, 100000):\r\n #my_set.add(2*x*x)\r\n #my_set.add(4*x*x)\r\n \r\n#vector_prime=[-1]*501\r\n#vector_rasp=[0]*501\r\n \r\n#vector_prime[1]=1\r\n \r\n#vector_rasp[1]=1\r\n#primes sieve \r\ncontor=2\r\n\r\n#for i in range(2,501):\r\n# if vector_prime[i]==-1:\r\n # vector_prime[i]=1\r\n # vector_rasp[contor]=i\r\n # contor=contor+1\r\n # for j in range(i+i,501,i):\r\n #  if vector_prime[j]==-1:\r\n #   vector_prime[j]=i\r\n   #print(i,j)\r\n   \r\n#res = list(map(int, str(num))) \r\nrasp_final=\"\"  \r\n\r\ndef transformare_baza(numar,baza):\r\n \r\n transformare=\"\"\r\n while numar>=baza:\r\n  rest=numar%baza\r\n  numar=numar//baza\r\n  transformare+=str(rest)\r\n \r\n transformare+=str(numar)\r\n noua_baza=transformare[::-1]\r\n return noua_baza\r\n \r\n \r\ndef bitwise_xor(a,b):\r\n stringul_1=transformare_baza(a,2)\r\n stringul_2=transformare_baza(b,2)\r\n \r\n lungime=max(len(stringul_1), len(stringul_2))\r\n raspunsul=0\r\n #print(stringul_1,stringul_2)\r\n \r\n str_answ=[0]*lungime\r\n# print('lungime=', lungime)\r\n \r\n #print(str_answ)\r\n \r\n for i in range(0,lungime):\r\n # print(i,str_answ)\r\n  j=lungime-1-i\r\n  if len(stringul_1)>i and len(stringul_2)>i:\r\n   if stringul_1[len(stringul_1)-1-i]!= stringul_2[len(stringul_2)-1-i]:\r\n    raspunsul+=2**(i)\r\n    str_answ[i]='1'\r\n  elif len(stringul_1)>i and stringul_1[len(stringul_1)-1-i]=='1':\r\n   raspunsul+=2**(i)\r\n   str_answ[i]='1'\r\n  elif len(stringul_2)>i and stringul_2[len(stringul_2)-1-i]=='1':\r\n   raspunsul+=2**(i)\r\n   str_answ[i]='1'\r\n   \r\n #print(str_answ)\r\n \r\n return raspunsul\r\n\r\n\r\ndef bitwise_or(a,b):\r\n stringul_1=transformare_baza(a,2)\r\n stringul_2=transformare_baza(b,2)\r\n \r\n lungime=max(len(stringul_1), len(stringul_2))\r\n raspunsul=0\r\n #print(stringul_1,stringul_2)\r\n \r\n str_answ=[0]*lungime\r\n# print('lungime=', lungime)\r\n \r\n #print(str_answ)\r\n \r\n for i in range(0,lungime):\r\n # print(i,str_answ)\r\n  j=lungime-1-i\r\n  if len(stringul_1)>i and len(stringul_2)>i:\r\n   if stringul_1[len(stringul_1)-1-i]=='1' or  stringul_2[len(stringul_2)-1-i]=='1':\r\n    raspunsul+=2**(i)\r\n    str_answ[i]='1'\r\n  elif len(stringul_1)>i and stringul_1[len(stringul_1)-1-i]=='1':\r\n   raspunsul+=2**(i)\r\n   str_answ[i]='1'\r\n  elif len(stringul_2)>i and stringul_2[len(stringul_2)-1-i]=='1':\r\n   raspunsul+=2**(i)\r\n   str_answ[i]='1'\r\n   \r\n #print(str_answ)\r\n \r\n return raspunsul\r\n \r\n \r\ndef cmmdc(x,y):\r\n maximul=max(x,y)\r\n minimul=min(x,y)\r\n while maximul!=minimul and minimul!=0:\r\n  \r\n  dif=maximul-minimul\r\n  raport=dif//minimul\r\n \r\n  \r\n  \r\n  maximul-=minimul*(raport+1)\r\n  \r\n  a=max(minimul,maximul)\r\n  b=min(minimul, maximul)\r\n  \r\n  maximul=a\r\n  minimul=b\r\n \r\n return (maximul)\r\n \r\n \r\ndict = {}  \r\n#suma=0\r\n#vector=list(map(int,input().split()))\r\n#for i in vector:\r\n #suma=suma+i\r\n#luni = {'January':1, 'February':2, 'March':3, 'April':4, 'May':5, 'June':6, 'July':7, 'August':8, 'September':9, 'October':10, 'November':11, 'December':0}\r\n#luni_reverse = {1:'January', 2:'February', 3:'March', 4:'April', 5:'May', 6:'June', 7:'July', 8:'August', 9:'September', 10:'October', 11:'November', 0:'December'} \r\n#alfabet = {'a': 1, 'b': 2,'c': 3,'d': 4,'e': 5,'f': 6,'g': 7,'h': 8,'i': 9,'j': 10,'k': 11,'l': 12,'m': 13,'n': 14,'o': 15,'p': 16,'q': 17,'r': 18,'s': 19,'t': 20,'u': 21,'v': 22,'w': 23,'x': 24,'y': 25,'z': 26}\r\n#alfabet_2={'1':\"a\", '2':\"b\", '3':\"c\", '4':\"d\", '5':\"e\", '6':\"f\", '7':\"g\", '8':\"h\", '9':\"i\", '10':\"j\", '11':\"k\", '12':\"l\", '13':\"m\", '14':\"n\", '15':\"o\", '16':\"p\", '17':\"q\", '18':\"r\", '19':\"s\", '20':\"t\", '21':\"u\", '22':\"v\", '23':\"w\", '24':\"x\", '25':\"y\", '26':\"z\"}\r\n \r\ncontor=0\r\nk=int(input())\r\n#k=1\r\nwhile k>0:\r\n#contor+=1\r\n \r\n n=int(input())\r\n #print('n=',n)\r\n \r\n \r\n\r\n #l,r,a=[int(i) for i in sys.stdin.readline().split()]\r\n  #print(l,r,a)\r\n#lista=[int(i) for i in sys.stdin.readline().split()]\r\n #lista.sort()\r\n if n==2:\r\n  print(1,0)\r\n elif n>2: \r\n  adev=0\r\n  p=n-1\r\n  \r\n  while adev==0:\r\n   \r\n   print(p,end=' ')\r\n   \r\n   \r\n   logul=int(math.log(p, 2))\r\n   \r\n   if Decimal(2**logul)==Decimal(p):\r\n    rasp=2**logul\r\n    #print('rasp=', rasp)\r\n    adev=1\r\n    print(0, end= ' ')\r\n    #print(\"p log \",p, logul)\r\n   p-=1\r\n  \r\n  for i in range(p,0,-1):\r\n   print(i, end=\" \")\r\n  print() \r\n  \r\n  \r\n  \r\n #print(math.log(199994, 2))\r\n #print (bitwise_xor(199994,0))  \r\n  \r\n \r\n  \r\n \r\n \r\n k-=1\r\n#print(rasp_final)",
    "prob_desc_created_at": "1643553300",
    "tags": [
        "bitmasks",
        "constructive algorithms"
    ],
    "hidden_unit_tests": ""
}