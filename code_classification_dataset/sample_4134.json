{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1.532000000000\\n1.860000000000\\n5.005050776521\\n4.260163673896\"]",
    "src_uid": "738939f55bcc636c0340838818381d2f",
    "prob_desc_notes": "NoteFor the first test case, the possible drawing sequences are:   P with a probability of $$$0.6$$$;  CP with a probability of $$$0.2\\cdot 0.7 = 0.14$$$;  CMP with a probability of $$$0.2\\cdot 0.3\\cdot 0.9 = 0.054$$$;  CMMP with a probability of $$$0.2\\cdot 0.3\\cdot 0.1\\cdot 1 = 0.006$$$;  MP with a probability of $$$0.2\\cdot 0.7 = 0.14$$$;  MCP with a probability of $$$0.2\\cdot 0.3\\cdot 0.9 = 0.054$$$;  MCCP with a probability of $$$0.2\\cdot 0.3\\cdot 0.1\\cdot 1 = 0.006$$$.  So, the expected number of races is equal to $$$1\\cdot 0.6 + 2\\cdot 0.14 + 3\\cdot 0.054 + 4\\cdot 0.006 + 2\\cdot 0.14 + 3\\cdot 0.054 + 4\\cdot 0.006 = 1.532$$$.For the second test case, the possible drawing sequences are:   P with a probability of $$$0.4$$$;  CP with a probability of $$$0.4\\cdot 0.6 = 0.24$$$;  CMP with a probability of $$$0.4\\cdot 0.4\\cdot 1 = 0.16$$$;  MP with a probability of $$$0.2\\cdot 0.5 = 0.1$$$;  MCP with a probability of $$$0.2\\cdot 0.5\\cdot 1 = 0.1$$$. So, the expected number of races is equal to $$$1\\cdot 0.4 + 2\\cdot 0.24 + 3\\cdot 0.16 + 2\\cdot 0.1 + 3\\cdot 0.1 = 1.86$$$.",
    "prob_desc_description": "After defeating a Blacklist Rival, you get a chance to draw $$$1$$$ reward slip out of $$$x$$$ hidden valid slips. Initially, $$$x=3$$$ and these hidden valid slips are Cash Slip, Impound Strike Release Marker and Pink Slip of Rival's Car. Initially, the probability of drawing these in a random guess are $$$c$$$, $$$m$$$, and $$$p$$$, respectively. There is also a volatility factor $$$v$$$. You can play any number of Rival Races as long as you don't draw a Pink Slip. Assume that you win each race and get a chance to draw a reward slip. In each draw, you draw one of the $$$x$$$ valid items with their respective probabilities. Suppose you draw a particular item and its probability of drawing before the draw was $$$a$$$. Then,  If the item was a Pink Slip, the quest is over, and you will not play any more races.  Otherwise,   If $$$a\\leq v$$$, the probability of the item drawn becomes $$$0$$$ and the item is no longer a valid item for all the further draws, reducing $$$x$$$ by $$$1$$$. Moreover, the reduced probability $$$a$$$ is distributed equally among the other remaining valid items.  If $$$a &gt; v$$$, the probability of the item drawn reduces by $$$v$$$ and the reduced probability is distributed equally among the other valid items.  For example,  If $$$(c,m,p)=(0.2,0.1,0.7)$$$ and $$$v=0.1$$$, after drawing Cash, the new probabilities will be $$$(0.1,0.15,0.75)$$$.  If $$$(c,m,p)=(0.1,0.2,0.7)$$$ and $$$v=0.2$$$, after drawing Cash, the new probabilities will be $$$(Invalid,0.25,0.75)$$$.  If $$$(c,m,p)=(0.2,Invalid,0.8)$$$ and $$$v=0.1$$$, after drawing Cash, the new probabilities will be $$$(0.1,Invalid,0.9)$$$.  If $$$(c,m,p)=(0.1,Invalid,0.9)$$$ and $$$v=0.2$$$, after drawing Cash, the new probabilities will be $$$(Invalid,Invalid,1.0)$$$. You need the cars of Rivals. So, you need to find the expected number of races that you must play in order to draw a pink slip.",
    "prob_desc_output_spec": "For each test case, output a single line containing a single real number — the expected number of races that you must play in order to draw a Pink Slip. Your answer is considered correct if its absolute or relative error does not exceed $$$10^{-6}$$$. Formally, let your answer be $$$a$$$, and the jury's answer be $$$b$$$. Your answer is accepted if and only if $$$\\frac{|a - b|}{\\max{(1, |b|)}} \\le 10^{-6}$$$.",
    "prob_desc_input_spec": "The first line of input contains a single integer $$$t$$$ ($$$1\\leq t\\leq 10$$$)  — the number of test cases. The first and the only line of each test case contains four real numbers $$$c$$$, $$$m$$$, $$$p$$$ and $$$v$$$ ($$$0 &lt; c,m,p &lt; 1$$$, $$$c+m+p=1$$$, $$$0.1\\leq v\\leq 0.9$$$). Additionally, it is guaranteed that each of $$$c$$$, $$$m$$$, $$$p$$$ and $$$v$$$ have at most $$$4$$$ decimal places.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_091.jsonl",
    "code_uid": "3903a36a38cfb3339b7c5038928ef924",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n0.2 0.2 0.6 0.2\\n0.4 0.2 0.4 0.8\\n0.4998 0.4998 0.0004 0.1666\\n0.3125 0.6561 0.0314 0.2048\"]",
    "exec_outcome": "PASSED",
    "source_code": "from decimal import Decimal\nimport datetime\nfrom functools import cache\nclass Solution:\n    @cache\n    def compute_ev(self, c, m, p, v) -> int:\n        ans = 1\n        #only compute probability from c if c > 0...else no need to compute\n        if c > 0:\n            if c > v:\n                red_c = v\n            else:\n                red_c = c\n\n            if m != 0 and p != 0:\n                new_c, new_m, new_p = max(0, c - v), m + red_c / 2, p + red_c / 2\n            elif m != 0:\n                new_c, new_m, new_p = max(0, c - v), m + red_c, p\n            elif p != 0:\n                new_c, new_m, new_p = max(0, c - v), m, p + red_c\n\n            ans += c * self.compute_ev(new_c, new_m, new_p, v)\n\n\n        #mirror case below to the above\n        if m > 0:\n            if m > v:\n                red_m = v\n            else:\n                red_m = m\n\n            if c != 0 and p != 0:\n                new_c, new_m, new_p = c + red_m / 2, max(0, m - v), p + red_m / 2\n            elif c != 0:\n                new_c, new_m, new_p = c + red_m, max(0, m - v), p\n            elif p != 0:\n                new_c, new_m, new_p = c, max(0, m - v), p + red_m\n\n            ans += m * self.compute_ev(new_c, new_m, new_p, v)\n\n        return ans\n\n# t1 = datetime.datetime.now()\nsolution_obj = Solution()\nfor case in range(int(input())):\n    c, m, p, v = [Decimal(x) for x in input().split()]\n    \n    print(solution_obj.compute_ev(c, m, p, v))\n\n# t2 = datetime.datetime.now()\n# print(t2 - t1)\n\n\n\n\n    \n\n",
    "prob_desc_created_at": "1625668500",
    "tags": [
        "bitmasks",
        "brute force",
        "dfs and similar",
        "implementation",
        "math",
        "probabilities"
    ],
    "hidden_unit_tests": ""
}