{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"+-        -++- -+\\n|+- -++- -+||   |\\n||   ||   |||   |\\n|+- -++- -+||   |\\n+-        -++- -+\", \"+-     -+\\n|+-   -+|\\n||+- -+||\\n|||   |||\\n||+- -+||\\n|+-   -+|\\n+-     -+\", \"+-        -+\\n|+- -++- -+|\\n||   ||   ||\\n|+- -++- -+|\\n+-        -+\", \"+- -+\\n|   |\\n+- -+\", \"+- -++- -+\\n|   ||   |\\n+- -++- -+\"]",
    "src_uid": "7d9fb64a0a324a51432fbb01b4cc2c0e",
    "prob_desc_notes": null,
    "prob_desc_description": "A sequence of square brackets is regular if by inserting symbols \"+\" and \"1\" into it, you can get a regular mathematical expression from it. For example, sequences \"[[]][]\", \"[]\" and \"[[][[]]]\" — are regular, at the same time \"][\", \"[[]\" and \"[[]]][\" — are irregular. Draw the given sequence using a minimalistic pseudographics in the strip of the lowest possible height — use symbols '+', '-' and '|'. For example, the sequence \"[[][]][]\" should be represented as: +-        -++- -+    |+- -++- -+||   |||   ||   |||   ||+- -++- -+||   |+-        -++- -+Each bracket should be represented with the hepl of one or more symbols '|' (the vertical part) and symbols '+' and '-' as on the example which is given above.Brackets should be drawn without spaces one by one, only dividing pairs of consecutive pairwise brackets with a single-space bar (so that the two brackets do not visually merge into one symbol). The image should have the minimum possible height. The enclosed bracket is always smaller than the surrounding bracket, but each bracket separately strives to maximize the height of the image. So the pair of final brackets in the example above occupies the entire height of the image.Study carefully the examples below, they adequately explain the condition of the problem. Pay attention that in this problem the answer (the image) is unique. ",
    "prob_desc_output_spec": "Print the drawn bracket sequence in the format which is given in the condition. Don't print extra (unnecessary) spaces. ",
    "prob_desc_input_spec": "The first line contains an even integer n (2 ≤ n ≤ 100) — the length of the sequence of brackets. The second line contains the sequence of brackets — these are n symbols \"[\" and \"]\". It is guaranteed that the given sequence of brackets is regular. ",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_018.jsonl",
    "code_uid": "880944fa73bfb1caf30bac9e25ebfb7d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"8\\n[[][]][]\", \"6\\n[[[]]]\", \"6\\n[[][]]\", \"2\\n[]\", \"4\\n[][]\"]",
    "exec_outcome": "PASSED",
    "source_code": "length = int(input())\nbrackets = input()\n\nOPEN = '['\nCLOSE = ']'\n\nPLUS = '+'\nPIPE = '|'\nMINUS = '-'\n\n\nwidth = 0\nheight = 0\ndepth = 0\nprevious_open = False\nfor bracket in brackets:\n    if bracket == OPEN:\n        depth += 1\n        width += 2\n        height = max(height, depth)\n        previous_open = True\n    elif bracket == CLOSE:\n        depth -= 1\n        if previous_open:\n            width += 3\n        previous_open = False\n\nheight = height * 2 + 1\n\n\nresult = [[' '] * width for i in range(height)]\n\n\ndef draw(d, pos, s):\n    h1 = d\n    h2 = height - d - 1\n    result[h1][pos] = PLUS\n    result[h2][pos] = PLUS\n    for i in range(h1+1, h2):\n        result[i][x] = PIPE\n    result[h1][pos+s] = MINUS\n    result[h2][pos+s] = MINUS\n\nx = 0\ndepth = 0\nfor bracket in brackets:\n    if bracket == OPEN:\n        draw(depth, x, 1)\n        depth += 1\n        previous_open = True\n    elif bracket == CLOSE:\n        if previous_open:\n            x += 3\n        depth -= 1\n        draw(depth, x, -1)\n        previous_open = False\n    x += 1\n\n\nfor row in result:\n    print(''.join(row))\n",
    "prob_desc_created_at": "1489233600",
    "tags": [
        "implementation",
        "*special"
    ],
    "hidden_unit_tests": ""
}