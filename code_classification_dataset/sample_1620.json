{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"6\\n1 26\\n2 9\\n3 5\\n5 3\\n9 2\\n26 1\", \"2\\n1 2\\n2 1\", \"4\\n1 8\\n2 3\\n3 2\\n8 1\"]",
    "src_uid": "5891432c43cfee35a212ad92d7da2a64",
    "prob_desc_notes": "NoteIn a 1 × 2 table there are 2 1 × 1 squares. So, 2 distinct squares in total.  In a 2 × 3 table there are 6 1 × 1 squares and 2 2 × 2 squares. That is equal to 8 squares in total.  ",
    "prob_desc_description": "Spongebob is already tired trying to reason his weird actions and calculations, so he simply asked you to find all pairs of n and m, such that there are exactly x distinct squares in the table consisting of n rows and m columns. For example, in a 3 × 5 table there are 15 squares with side one, 8 squares with side two and 3 squares with side three. The total number of distinct squares in a 3 × 5 table is 15 + 8 + 3 = 26.",
    "prob_desc_output_spec": "First print a single integer k — the number of tables with exactly x distinct squares inside. Then print k pairs of integers describing the tables. Print the pairs in the order of increasing n, and in case of equality — in the order of increasing m.",
    "prob_desc_input_spec": "The first line of the input contains a single integer x (1 ≤ x ≤ 1018) — the number of squares inside the tables Spongebob is interested in.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_011.jsonl",
    "code_uid": "921af2e86c2e54566cb6718485fdcf08",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"26\", \"2\", \"8\"]",
    "exec_outcome": "PASSED",
    "source_code": "x = 6*int(input())\nr = []\n\nfor m in range(1,10**7):\n    d = m*(m+1)\n    if d*m > x:\n        break\n    if x%d != 0:\n        continue\n\n    mx = x//d+m-1\n    if mx%3 != 0:\n        continue\n\n    nx = mx//3\n    if nx > m:\n        r.append((m,nx))   \n        r.append((nx,m))\n    elif nx == m:\n        r.append((m,nx))\n\nprint(len(r))\nfor sol in sorted(r):\n    print(str(sol[0]) + \" \" + str(sol[1]))\n\n\n",
    "prob_desc_created_at": "1448037300",
    "tags": [
        "brute force",
        "math"
    ],
    "hidden_unit_tests": ""
}