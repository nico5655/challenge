{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1000100010\", \"1001101000\", \"No\"]",
    "src_uid": "61a067dc6b8e04bfc661b7fa9ecb4eda",
    "prob_desc_notes": "NoteIn the first example, $$$7$$$ is not a period of the resulting string because the $$$1$$$-st and $$$8$$$-th characters of it are different.In the second example, $$$6$$$ is not a period of the resulting string because the $$$4$$$-th and $$$10$$$-th characters of it are different.In the third example, $$$9$$$ is always a period because the only constraint that the first and last characters are the same is already satisfied.Note that there are multiple acceptable answers for the first two examples, you can print any of them.",
    "prob_desc_description": " Walking along a riverside, Mino silently takes a note of something.\"Time,\" Mino thinks aloud.\"What?\"\"Time and tide wait for no man,\" explains Mino. \"My name, taken from the river, always reminds me of this.\"\"And what are you recording?\"\"You see it, tide. Everything has its own period, and I think I've figured out this one,\" says Mino with confidence.Doubtfully, Kanno peeks at Mino's records. The records are expressed as a string $$$s$$$ of characters '0', '1' and '.', where '0' denotes a low tide, '1' denotes a high tide, and '.' denotes an unknown one (either high or low).You are to help Mino determine whether it's possible that after replacing each '.' independently with '0' or '1', a given integer $$$p$$$ is not a period of the resulting string. In case the answer is yes, please also show such a replacement to Mino.In this problem, a positive integer $$$p$$$ is considered a period of string $$$s$$$, if for all $$$1 \\leq i \\leq \\lvert s \\rvert - p$$$, the $$$i$$$-th and $$$(i + p)$$$-th characters of $$$s$$$ are the same. Here $$$\\lvert s \\rvert$$$ is the length of $$$s$$$.",
    "prob_desc_output_spec": "Output one line — if it's possible that $$$p$$$ is not a period of the resulting string, output any one of such strings; otherwise output \"No\" (without quotes, you can print letters in any case (upper or lower)).",
    "prob_desc_input_spec": "The first line contains two space-separated integers $$$n$$$ and $$$p$$$ ($$$1 \\leq p \\leq n \\leq 2000$$$) — the length of the given string and the supposed period, respectively. The second line contains a string $$$s$$$ of $$$n$$$ characters — Mino's records. $$$s$$$ only contains characters '0', '1' and '.', and contains at least one '.' character.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1200,
    "file_name": "train_013.jsonl",
    "code_uid": "73fdf29e6f43bb412031c11c7f8b9741",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"10 7\\n1.0.1.0.1.\", \"10 6\\n1.0.1.1000\", \"10 9\\n1........1\"]",
    "exec_outcome": "PASSED",
    "source_code": "entrada = raw_input().split()\np = int(entrada[1])\n\nabc = raw_input()\ns = list(abc)\nans = True\n#print s\n\nfor i in xrange(len(s)):\n\tif i + p >= len(s):\n\t\tbreak\n\n\t#print s[i], s[i + p]\n\tif s[i] == \".\" and s[i + p] == \".\":\n\t\ts[i] = \"0\"\n\t\ts[i + p] = \"1\"\n\t\tans = False\n\telif s[i] != s[i + p]:\n\t\tif s[i] == \"1\":\n\t\t\ts[i + p] == \"0\"\n\t\tif s[i] == \"0\":\n\t\t\ts[i + p] == \"1\"\n\t\tif s[i] == \".\":\n\t\t\tif s[i + p] == \"0\":\n\t\t\t\ts[i] == \"1\"\n\t\t\telse:\n\t\t\t\ts[i] == \"0\"\n\t\tans = False\nif ans:\n\tprint \"No\"\nelse:\n\tans = \"\"\t\n\tfor i in xrange(len(s)):\n\t\tif s[i] == \".\":\n\t\t\tif i - p >= 0:\n\t\t\t\tif s[i - p] == \"1\":\n\t\t\t\t\ts[i] = \"0\"\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\ts[i] = \"1\"\n\t\t\t\t\tbreak\n\n\tfor i in xrange(len(s)):\n\t\tif s[i] == \".\":\n\t\t\tif i + p >= len(s):\n\t\t\t\ts[i] = \"1\"\n\t\t\telif s[i + p] == \".\":\n\t\t\t\ts[i] = \"0\"\n\t\t\t\ts[i + p] = \"1\"\n\t\t\telif s[i + p] == \"0\":\n\t\t\t\ts[i] = \"1\"\n\t\t\telse:\n\t\t\t\ts[i] = \"0\" \n\t\tans+=s[i]\n\tprint ans",
    "prob_desc_created_at": "1528724100",
    "tags": [
        "constructive algorithms",
        "strings"
    ],
    "hidden_unit_tests": ""
}