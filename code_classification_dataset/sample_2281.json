{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"6\", \"33\"]",
    "src_uid": "5db9c5673a04256c52f180dbfca2a52f",
    "prob_desc_notes": "NoteThe first sample is (r12 = 5, r22 = 1):  The second sample is (r12 = 1, r22 = 32): ",
    "prob_desc_description": "A flowerbed has many flowers and two fountains.You can adjust the water pressure and set any values r1(r1 ≥ 0) and r2(r2 ≥ 0), giving the distances at which the water is spread from the first and second fountain respectively. You have to set such r1 and r2 that all the flowers are watered, that is, for each flower, the distance between the flower and the first fountain doesn't exceed r1, or the distance to the second fountain doesn't exceed r2. It's OK if some flowers are watered by both fountains.You need to decrease the amount of water you need, that is set such r1 and r2 that all the flowers are watered and the r12 + r22 is minimum possible. Find this minimum value.",
    "prob_desc_output_spec": "Print the minimum possible value r12 + r22. Note, that in this problem optimal answer is always integer.",
    "prob_desc_input_spec": "The first line of the input contains integers n, x1, y1, x2, y2 (1 ≤ n ≤ 2000,  - 107 ≤ x1, y1, x2, y2 ≤ 107) — the number of flowers, the coordinates of the first and the second fountain. Next follow n lines. The i-th of these lines contains integers xi and yi ( - 107 ≤ xi, yi ≤ 107) — the coordinates of the i-th flower. It is guaranteed that all n + 2 points in the input are distinct.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_019.jsonl",
    "code_uid": "5ba930ee80151a3852426e904d9458b4",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2 -1 0 5 3\\n0 2\\n5 2\", \"4 0 0 5 0\\n9 4\\n8 3\\n-1 0\\n1 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "def dist(a, b):\n    return (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2\n\nn, x1, y1, x2, y2 = map(int, input().split())\ncoor = [list(map(int, input().split())) for _ in range(n)]\ndist1 = [0] + list(map(lambda x: dist((x1, y1), x), coor))\ndist2 = [0] + list(map(lambda x: dist((x2, y2), x), coor))\ncovered = [False for _ in dist1]\nret = 1e20\nfor i in range(n+1):\n    max_dist2 = 0\n    for j in range(n+1):\n        if dist1[j] > dist1[i]:\n            max_dist2 = max(max_dist2, dist2[j])\n    ret = min(ret, dist1[i] + max_dist2)\nprint(ret)\n",
    "prob_desc_created_at": "1453563300",
    "tags": [
        "implementation"
    ],
    "hidden_unit_tests": ""
}