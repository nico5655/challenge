{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"5.666666667\\n5.666666667\\n5.666666667\\n7.000000000\", \"7.000000000\\n8.000000000\\n8.000000000\\n10.000000000\\n12.000000000\", \"3.000000000\\n5.000000000\\n5.000000000\\n5.000000000\\n5.000000000\\n5.000000000\\n5.000000000\\n5.000000000\\n7.500000000\\n7.500000000\"]",
    "src_uid": "3b5b8c54dc9956e7060c7f154eebd063",
    "prob_desc_notes": "NoteIn the first sample, you can get the sequence by applying the operation for subsegment $$$[1, 3]$$$.In the second sample, you can't get any lexicographically smaller sequence.",
    "prob_desc_description": "There are $$$n$$$ water tanks in a row, $$$i$$$-th of them contains $$$a_i$$$ liters of water. The tanks are numbered from $$$1$$$ to $$$n$$$ from left to right.You can perform the following operation: choose some subsegment $$$[l, r]$$$ ($$$1\\le l \\le r \\le n$$$), and redistribute water in tanks $$$l, l+1, \\dots, r$$$ evenly. In other words, replace each of $$$a_l, a_{l+1}, \\dots, a_r$$$ by $$$\\frac{a_l + a_{l+1} + \\dots + a_r}{r-l+1}$$$. For example, if for volumes $$$[1, 3, 6, 7]$$$ you choose $$$l = 2, r = 3$$$, new volumes of water will be $$$[1, 4.5, 4.5, 7]$$$. You can perform this operation any number of times.What is the lexicographically smallest sequence of volumes of water that you can achieve?As a reminder:A sequence $$$a$$$ is lexicographically smaller than a sequence $$$b$$$ of the same length if and only if the following holds: in the first (leftmost) position where $$$a$$$ and $$$b$$$ differ, the sequence $$$a$$$ has a smaller element than the corresponding element in $$$b$$$.",
    "prob_desc_output_spec": "Print the lexicographically smallest sequence you can get. In the $$$i$$$-th line print the final volume of water in the $$$i$$$-th tank. Your answer is considered correct if the absolute or relative error of each $$$a_i$$$ does not exceed $$$10^{-9}$$$. Formally, let your answer be $$$a_1, a_2, \\dots, a_n$$$, and the jury's answer be $$$b_1, b_2, \\dots, b_n$$$. Your answer is accepted if and only if $$$\\frac{|a_i - b_i|}{\\max{(1, |b_i|)}} \\le 10^{-9}$$$ for each $$$i$$$.",
    "prob_desc_input_spec": "The first line contains an integer $$$n$$$ ($$$1 \\le n \\le 10^6$$$) — the number of water tanks. The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^6$$$) — initial volumes of water in the water tanks, in liters. Because of large input, reading input as doubles is not recommended.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_004.jsonl",
    "code_uid": "da5ae2cbcdd515f2411ac01996a3b848",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n7 5 5 7\", \"5\\n7 8 8 10 12\", \"10\\n3 9 5 5 1 7 5 3 8 7\"]",
    "exec_outcome": "PASSED",
    "source_code": "from __future__ import division\nimport sys\ndef main():\n    n, A = sys.stdin.readlines()\n    n = int(n)\n    A = list(map(int, A.split()))\n\n    stack = []\n    for i in range(n):\n        cur = [A[i], 1]\n        while stack and stack[-1][0] * cur[1] > cur[0] * stack[-1][1]:\n            cur[0] += stack[-1][0]\n            cur[1] += stack[-1][1]\n            stack.pop()\n        stack.append(cur)\n\n    output = []\n    for i in stack:\n        for j in range(i[1]):\n            output.append(str(i[0]/i[1]))\n\n    print(\"\\n\".join(output))\n\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "prob_desc_created_at": "1581257100",
    "tags": [
        "data structures",
        "geometry",
        "greedy"
    ],
    "hidden_unit_tests": ""
}