{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1 3 2\", \"4 1 2 3\", \"3 1 2 4 5\"]",
    "src_uid": "e29742df22068606228db4dda8a40df5",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given a directed acyclic graph with n vertices and m edges. There are no self-loops or multiple edges between any pair of vertices. Graph can be disconnected.You should assign labels to all vertices in such a way that:  Labels form a valid permutation of length n — an integer sequence such that each integer from 1 to n appears exactly once in it.  If there exists an edge from vertex v to vertex u then labelv should be smaller than labelu.  Permutation should be lexicographically smallest among all suitable. Find such sequence of labels to satisfy all the conditions.",
    "prob_desc_output_spec": "Print n numbers — lexicographically smallest correct permutation of labels of vertices.",
    "prob_desc_input_spec": "The first line contains two integer numbers n, m (2 ≤ n ≤ 105, 1 ≤ m ≤ 105). Next m lines contain two integer numbers v and u (1 ≤ v, u ≤ n, v ≠ u) — edges of the graph. Edges are directed, graph doesn't contain loops or multiple edges.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_011.jsonl",
    "code_uid": "64f42ac1dda18e3277357e596e642c32",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 3\\n1 2\\n1 3\\n3 2\", \"4 5\\n3 1\\n4 1\\n2 3\\n3 4\\n2 4\", \"5 4\\n3 1\\n2 1\\n2 3\\n4 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "from queue import Queue\nimport heapq\n\nn, m = input().split()\nn = int(n)\nm = int(m)\n\nf = [0] * (n + 1)\nsol = [0] * (n + 1)\nadya = [[] for _ in range(n + 1)]\n\nfor i in range(m):\n    n1, n2 = input().split()\n    n1 = int(n1)\n    n2 = int(n2)\n    adya[n2].append(n1)\n    f[n1] += 1\n\ncola = []\ncnt = 0\n\nfor i in range(1, n + 1):\n    if(f[i] == 0):\n        heapq.heappush(cola, -1 * i)\n        cnt += 1\nnum = int(n)\nwhile(cnt > 0):\n    v = heapq.heappop(cola)\n    v *= -1\n    sol[v] = num\n    cnt -= 1\n    num -= 1\n    for to in adya[v]:\n        f[to] -= 1\n        if(f[to] == 0):\n            heapq.heappush(cola, -1 * to)\n            cnt += 1\n\nstringOut = \"\"\nfor i in range(1, n + 1):\n    stringOut += str(sol[i])\n    if(i != n):\n        stringOut += ' '\n        \nprint(stringOut)",
    "prob_desc_created_at": "1500217500",
    "tags": [
        "data structures",
        "dfs and similar",
        "greedy",
        "graphs"
    ],
    "hidden_unit_tests": ""
}