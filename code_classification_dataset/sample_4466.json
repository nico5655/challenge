{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"0 720\", \"499833345 1\", \"339854850 882811119\"]",
    "src_uid": "5aa2dd625eee9679ef9ad03d25d848ac",
    "prob_desc_notes": "NoteIn the first example, all possible arrays $$$a$$$ are permutations of $$$[1, 2, 3, 4, 5, 6]$$$. Since each array $$$a$$$ will have $$$f(a) = 0$$$, so maximum value is $$$f(a) = 0$$$ and there are $$$6! = 720$$$ such arrays.In the second example, the only possible array consists of $$$10^6$$$ ones and its $$$f(a) = \\sum\\limits_{1 \\le i &lt; j \\le 10^6}{j - i} = 166\\,666\\,666\\,666\\,500\\,000$$$ and $$$166\\,666\\,666\\,666\\,500\\,000 \\bmod{10^9 + 7} = 499\\,833\\,345$$$.",
    "prob_desc_description": "You are given an array $$$c = [c_1, c_2, \\dots, c_m]$$$. An array $$$a = [a_1, a_2, \\dots, a_n]$$$ is constructed in such a way that it consists of integers $$$1, 2, \\dots, m$$$, and for each $$$i \\in [1,m]$$$, there are exactly $$$c_i$$$ occurrences of integer $$$i$$$ in $$$a$$$. So, the number of elements in $$$a$$$ is exactly $$$\\sum\\limits_{i=1}^{m} c_i$$$.Let's define for such array $$$a$$$ the value $$$f(a)$$$ as $$$$$$f(a) = \\sum_{\\substack{1 \\le i &lt; j \\le n\\\\ a_i = a_j}}{j - i}.$$$$$$In other words, $$$f(a)$$$ is the total sum of distances between all pairs of equal elements.Your task is to calculate the maximum possible value of $$$f(a)$$$ and the number of arrays yielding the maximum possible value of $$$f(a)$$$. Two arrays are considered different, if elements at some position differ.",
    "prob_desc_output_spec": "Print two integers — the maximum possible value of $$$f(a)$$$ and the number of arrays $$$a$$$ with such value. Since both answers may be too large, print them modulo $$$10^9 + 7$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$m$$$ ($$$1 \\le m \\le 5 \\cdot 10^5$$$) — the size of the array $$$c$$$. The second line contains $$$m$$$ integers $$$c_1, c_2, \\dots, c_m$$$ ($$$1 \\le c_i \\le 10^6$$$) — the array $$$c$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2500,
    "file_name": "train_098.jsonl",
    "code_uid": "7d79de0b5ebbe11416e955eb7cffa9ff",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n1 1 1 1 1 1\", \"1\\n1000000\", \"7\\n123 451 234 512 345 123 451\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\ninput = sys.stdin.readline\r\n\r\n\r\nMD = 10 ** 9 + 7\r\nm = int(input())\r\nc = list(map(int, input().split()))\r\n\r\n# 1 - cnt, 3 - cnt, ... , cnt - 1\r\n# dic[cnt] += 2\r\n# p1, p1, p1 ... p2, p2, p2\r\n# ans = \\sum cnt(pi) * pi\r\n\r\nmc = max(c)\r\ndp = [0] * (2 * mc + 2)\r\nfor cnt in c:\r\n    dp[cnt - 1] += 1\r\n    \r\nfor i in range(mc - 3, -mc, -1):\r\n    dp[i] = (dp[i] + dp[i + 2]) % MD if i >= 0 else dp[-i]\r\n    \r\nfact = [1] * (max(dp) + 1)\r\nfor i in range(1, len(fact)):\r\n    fact[i] = (fact[i - 1] * i) % MD \r\n    \r\nans, num, p = 0, 1, sum(c) \r\nfor i in range(mc - 1, -mc, -1):\r\n    ans = (ans + i * (p + p - dp[i] + 1) * dp[i] // 2) % MD\r\n    num = (num * fact[dp[i]]) % MD  \r\n    p -= dp[i]\r\n    \r\nprint(ans, num)\r\n",
    "prob_desc_created_at": "1637573700",
    "tags": [
        "combinatorics",
        "constructive algorithms",
        "greedy",
        "sortings"
    ],
    "hidden_unit_tests": ""
}