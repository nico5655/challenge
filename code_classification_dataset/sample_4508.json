{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"? 2 4 1 3\\n\\n? 1 2 4 2\\n\\n! 3 1 4 2\\n\\n? 2 3 4 2\\n\\n! 2 5 3 4 1\"]",
    "src_uid": "9877f4773f34041ea60f9052a36af5a8",
    "prob_desc_notes": "NoteConsider the first test case.The hidden permutation is $$$[3, 1, 4, 2]$$$.We print: \"? $$$2$$$ $$$4$$$ $$$1$$$ $$$3$$$\" and get back $$$\\min{(\\max{(3, p_4}), \\max{(4, p_1)})} = 3$$$.We print: \"? $$$1$$$ $$$2$$$ $$$4$$$ $$$2$$$\" and get back $$$\\max{(\\min{(2, p_2)}, \\min{(3, p_4)})} = 2$$$.Consider the second test case.The hidden permutation is $$$[2, 5, 3, 4, 1]$$$.We print: \"? $$$2$$$ $$$3$$$ $$$4$$$ $$$2$$$\" and get back $$$\\min{(\\max{(2, p_3}), \\max{(3, p_4)})} = 3$$$.",
    "prob_desc_description": "This is an interactive problem!Nastia has a hidden permutation $$$p$$$ of length $$$n$$$ consisting of integers from $$$1$$$ to $$$n$$$. You, for some reason, want to figure out the permutation. To do that, you can give her an integer $$$t$$$ ($$$1 \\le t \\le 2$$$), two different indices $$$i$$$ and $$$j$$$ ($$$1 \\le i, j \\le n$$$, $$$i \\neq j$$$), and an integer $$$x$$$ ($$$1 \\le x \\le n - 1$$$). Depending on $$$t$$$, she will answer:   $$$t = 1$$$: $$$\\max{(\\min{(x, p_i)}, \\min{(x + 1, p_j)})}$$$;  $$$t = 2$$$: $$$\\min{(\\max{(x, p_i)}, \\max{(x + 1, p_j)})}$$$. You can ask Nastia at most $$$\\lfloor \\frac {3 \\cdot n} { 2} \\rfloor + 30$$$ times. It is guaranteed that she will not change her permutation depending on your queries. Can you guess the permutation?",
    "prob_desc_output_spec": null,
    "prob_desc_input_spec": "The input consists of several test cases. In the beginning, you receive the integer $$$T$$$ ($$$1 \\le T \\le 10\\,000$$$) — the number of test cases. At the beginning of each test case, you receive an integer $$$n$$$ ($$$3 \\le n \\le 10^4$$$) — the length of the permutation $$$p$$$. It's guaranteed that the permutation is fixed beforehand and that the sum of $$$n$$$ in one test doesn't exceed $$$2 \\cdot 10^4$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_099.jsonl",
    "code_uid": "b133f996085d1efb11b13b3724849b31",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n4\\n\\n3\\n\\n2\\n\\n5\\n\\n3\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\n\r\n\r\ndef ask(q):\r\n    print(q, flush=True)\r\n    ret = int(input())\r\n    assert ret != -1\r\n    return ret\r\n\r\n\r\ninput = lambda: sys.stdin.buffer.readline().decode().strip()\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    ans, ix = [0] * n, n\r\n\r\n    for i in range(2, n + 1, 2):\r\n        pos = ask(f'? 1 {i - 1} {i} {n - 1}')\r\n        if pos == n:\r\n            ix = i\r\n            break\r\n        if pos == n - 1:\r\n            if ask(f'? 1 {i} {i - 1} {n - 1}') == n:\r\n                ix = i - 1\r\n                break\r\n                \r\n    ans[ix - 1] = n\r\n    for i in range(1, n + 1):\r\n        if i != ix:\r\n            ans[i - 1] = ask(f'? 2 {i} {ix} 1')\r\n\r\n    print('!', *ans, flush=True)\r\n",
    "prob_desc_created_at": "1620398100",
    "tags": [
        "constructive algorithms",
        "interactive"
    ],
    "hidden_unit_tests": ""
}