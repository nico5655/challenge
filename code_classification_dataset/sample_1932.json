{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\\n1\\n1 4\\n1 2 4\\n1 2 3 4\", \"NO\", \"YES\\n1 2 3\\n1 3\\n1 2 3 4\\n1 3 4\\n1 1 2 3 4\"]",
    "src_uid": "e512285d15340343e34f596de2be82eb",
    "prob_desc_notes": null,
    "prob_desc_description": "There are n piles of pebbles on the table, the i-th pile contains ai pebbles. Your task is to paint each pebble using one of the k given colors so that for each color c and any two piles i and j the difference between the number of pebbles of color c in pile i and number of pebbles of color c in pile j is at most one.In other words, let's say that bi, c is the number of pebbles of color c in the i-th pile. Then for any 1 ≤ c ≤ k, 1 ≤ i, j ≤ n the following condition must be satisfied |bi, c - bj, c| ≤ 1. It isn't necessary to use all k colors: if color c hasn't been used in pile i, then bi, c is considered to be zero.",
    "prob_desc_output_spec": "If there is no way to paint the pebbles satisfying the given condition, output \"NO\" (without quotes) . Otherwise in the first line output \"YES\" (without quotes). Then n lines should follow, the i-th of them should contain ai space-separated integers. j-th (1 ≤ j ≤ ai) of these integers should be equal to the color of the j-th pebble in the i-th pile. If there are several possible answers, you may output any of them.",
    "prob_desc_input_spec": "The first line of the input contains positive integers n and k (1 ≤ n, k ≤ 100), separated by a space — the number of piles and the number of colors respectively. The second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 100) denoting number of pebbles in each of the piles.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1300,
    "file_name": "train_014.jsonl",
    "code_uid": "78218e856b1f01955e6a98fed326a9ce",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 4\\n1 2 3 4\", \"5 2\\n3 2 4 1 3\", \"5 4\\n3 2 4 3 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "R = lambda:list(map(int,input().split()))\nn,k = R()\na = R()\nr = [[] for _ in range(n)]\nx = min(a)\nm = 1\nfor i in range(n):\n    for j in range(x):\n        r[i].append(m)\n        a[i] -= 1\n\nflg = True\nxfl = True\n\nwhile max(a) > 0:\n    m += 1\n    if m > k:\n        flg = False\n        break\n    mk = m\n    if xfl and (1 in a):\n        mk = 1\n        m -= 1\n        xfl = False\n    for i in range(n):\n        if a[i] > 0:\n            r[i].append(mk)\n            a[i] -= 1\n\n    \n\nprint('YES' if flg else 'NO')\nif flg:\n    for i in range(n):\n        print( \" \".join([str(u) for u in r[i]]) )",
    "prob_desc_created_at": "1422705600",
    "tags": [
        "constructive algorithms",
        "implementation",
        "greedy"
    ],
    "hidden_unit_tests": ""
}