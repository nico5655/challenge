{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"7\\n74\"]",
    "src_uid": "529d4ab0bdbb29d8b7f3d3eed19eca63",
    "prob_desc_notes": "NoteFor the first testcase, there are $$$7$$$ ways to partition $$$5$$$ as a sum of positive palindromic integers:   $$$5=1+1+1+1+1$$$  $$$5=1+1+1+2$$$  $$$5=1+2+2$$$  $$$5=1+1+3$$$  $$$5=2+3$$$  $$$5=1+4$$$  $$$5=5$$$ For the second testcase, there are total $$$77$$$ ways to partition $$$12$$$ as a sum of positive integers but among them, the partitions $$$12=2+10$$$, $$$12=1+1+10$$$ and $$$12=12$$$ are not valid partitions of $$$12$$$ as a sum of positive palindromic integers because $$$10$$$ and $$$12$$$ are not palindromic. So, there are $$$74$$$ ways to partition $$$12$$$ as a sum of positive palindromic integers.",
    "prob_desc_description": "You are given a positive integer $$$n$$$. Let's call some positive integer $$$a$$$ without leading zeroes palindromic if it remains the same after reversing the order of its digits. Find the number of distinct ways to express $$$n$$$ as a sum of positive palindromic integers. Two ways are considered different if the frequency of at least one palindromic integer is different in them. For example, $$$5=4+1$$$ and $$$5=3+1+1$$$ are considered different but $$$5=3+1+1$$$ and $$$5=1+3+1$$$ are considered the same. Formally, you need to find the number of distinct multisets of positive palindromic integers the sum of which is equal to $$$n$$$.Since the answer can be quite large, print it modulo $$$10^9+7$$$.",
    "prob_desc_output_spec": "For each testcase, print a single integer denoting the required answer modulo $$$10^9+7$$$.",
    "prob_desc_input_spec": "The first line of input contains a single integer $$$t$$$ ($$$1\\leq t\\leq 10^4$$$) denoting the number of testcases. Each testcase contains a single line of input containing a single integer $$$n$$$ ($$$1\\leq n\\leq 4\\cdot 10^4$$$) — the required sum of palindromic integers.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_096.jsonl",
    "code_uid": "deb451850d9670a8af7ca4b0b17ccc9d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n5\\n12\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin\r\n\r\ndef readint():\r\n  return int(stdin.readline())\r\n\r\ndef readarray(typ):\r\n  return list(map(typ, stdin.readline().split()))\r\n\r\nMOD = int(1e9) + 7\r\n\r\nps = []\r\nN = 40000\r\nfor i in range(1, N+1):\r\n  # print(str(i), ''.join(reversed(str(i)))\r\n  if str(i) == (str(i)[::-1]):\r\n    ps.append(i)\r\nm = len(ps)\r\ndp = [[0] * m for _ in range(N+1)]\r\n\r\nfor i in range(1, N+1):\r\n  for j in range(m):\r\n    dp[i][j] += int(i == ps[j])  \r\n    dp[i][j] += dp[i][j-1] if j >= 1 else 0\r\n    if i > ps[j]:\r\n      dp[i][j] += dp[i-ps[j]][j]\r\n    dp[i][j] %= MOD\r\nt = readint()\r\nfor _ in range(t):\r\n  n = readint()\r\n  print(dp[n][-1])",
    "prob_desc_created_at": "1651329300",
    "tags": [
        "brute force",
        "dp",
        "math",
        "number theory"
    ],
    "hidden_unit_tests": ""
}