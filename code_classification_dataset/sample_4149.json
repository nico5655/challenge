{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"7\", \"76\", \"129\"]",
    "src_uid": "ef0ad7b228351a268c3f6bfac68b1002",
    "prob_desc_notes": "NoteIn the first sample there are three pairs of cells of same color: in cells $$$(1, 1)$$$ and $$$(2, 3)$$$, in cells $$$(1, 2)$$$ and $$$(2, 2)$$$, in cells $$$(1, 3)$$$ and $$$(2, 1)$$$. The manhattan distances between them are $$$3$$$, $$$1$$$ and $$$3$$$, the sum is $$$7$$$.",
    "prob_desc_description": "Egor has a table of size $$$n \\times m$$$, with lines numbered from $$$1$$$ to $$$n$$$ and columns numbered from $$$1$$$ to $$$m$$$. Each cell has a color that can be presented as an integer from $$$1$$$ to $$$10^5$$$.Let us denote the cell that lies in the intersection of the $$$r$$$-th row and the $$$c$$$-th column as $$$(r, c)$$$. We define the manhattan distance between two cells $$$(r_1, c_1)$$$ and $$$(r_2, c_2)$$$ as the length of a shortest path between them where each consecutive cells in the path must have a common side. The path can go through cells of any color. For example, in the table $$$3 \\times 4$$$ the manhattan distance between $$$(1, 2)$$$ and $$$(3, 3)$$$ is $$$3$$$, one of the shortest paths is the following: $$$(1, 2) \\to (2, 2) \\to (2, 3) \\to (3, 3)$$$. Egor decided to calculate the sum of manhattan distances between each pair of cells of the same color. Help him to calculate this sum.",
    "prob_desc_output_spec": "Print one integer — the the sum of manhattan distances between each pair of cells of the same color.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n \\le m$$$, $$$n \\cdot m \\leq 100\\,000$$$) — number of rows and columns in the table. Each of next $$$n$$$ lines describes a row of the table. The $$$i$$$-th line contains $$$m$$$ integers $$$c_{i1}, c_{i2}, \\ldots, c_{im}$$$ ($$$1 \\le c_{ij} \\le 100\\,000$$$) — colors of cells in the $$$i$$$-th row.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_091.jsonl",
    "code_uid": "16c7f3582cfab9ccb46038e0fbb1af7f",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2 3\\n1 2 3\\n3 2 1\", \"3 4\\n1 1 2 2\\n2 1 1 2\\n2 2 1 1\", \"4 4\\n1 1 2 3\\n2 1 1 2\\n3 1 2 1\\n1 1 2 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "tiles = input()\r\ntiles = tiles.split(\" \")\r\nn = int(tiles[0])\r\nm = int(tiles[1])\r\n\r\ndef arr_man(arr):\r\n    arr = sorted(arr)\r\n\r\n    res = 0\r\n    sum = 0\r\n    for i, e in enumerate(arr):\r\n        res += (e * i - sum)\r\n        sum += e\r\n\r\n    return res\r\n\r\n\r\ncoords = {}\r\nfinal_sum = 0\r\n\r\nfor i in range(n):\r\n    row = input()\r\n    row = row.split(\" \")\r\n    for j, c in enumerate(row):\r\n        if c in coords:\r\n            coords[c][0].append(i)\r\n            coords[c][1].append(j)\r\n        else:\r\n            coords[c] = ([i], [j])\r\n\r\n\r\nfinal_sum = sum([arr_man(x) + arr_man(y) for x, y in coords.values()])\r\nprint(final_sum)\r\n",
    "prob_desc_created_at": "1646560500",
    "tags": [
        "brute force",
        "implementation",
        "math",
        "matrices"
    ],
    "hidden_unit_tests": ""
}