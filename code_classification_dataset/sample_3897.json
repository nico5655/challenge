{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2 1 1 \\n9 0 \\n0 4 9 6 9\"]",
    "src_uid": "fd47f1eb701077abc5ec67163ad4fcc5",
    "prob_desc_notes": "NoteIn the first test case, we can prove that initial sequence was $$$[2,1,1]$$$. In that case, the following moves were performed:   On the first wheel: $$$2 \\xrightarrow[\\texttt{D}]{} 1 \\xrightarrow[\\texttt{D}]{} 0 \\xrightarrow[\\texttt{D}]{} 9$$$.  On the second wheel: $$$1 \\xrightarrow[\\texttt{U}]{} 2 \\xrightarrow[\\texttt{D}]{} 1 \\xrightarrow[\\texttt{U}]{} 2 \\xrightarrow[\\texttt{U}]{} 3$$$.  On the third wheel: $$$1 \\xrightarrow[\\texttt{D}]{} 0 \\xrightarrow[\\texttt{U}]{} 1$$$.  The final sequence was $$$[9,3,1]$$$, which matches the input.",
    "prob_desc_description": "Luca has a cypher made up of a sequence of $$$n$$$ wheels, each with a digit $$$a_i$$$ written on it. On the $$$i$$$-th wheel, he made $$$b_i$$$ moves. Each move is one of two types:   up move (denoted by $$$\\texttt{U}$$$): it increases the $$$i$$$-th digit by $$$1$$$. After applying the up move on $$$9$$$, it becomes $$$0$$$.  down move (denoted by $$$\\texttt{D}$$$): it decreases the $$$i$$$-th digit by $$$1$$$. After applying the down move on $$$0$$$, it becomes $$$9$$$.     Example for $$$n=4$$$. The current sequence is 0 0 0 0. Luca knows the final sequence of wheels and the moves for each wheel. Help him find the original sequence and crack the cypher.",
    "prob_desc_output_spec": "For each test case, output $$$n$$$ space-separated digits  — the initial sequence of the cypher.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 100$$$) — the number of wheels. The second line contains $$$n$$$ integers $$$a_i$$$ ($$$0 \\leq a_i \\leq 9$$$) — the digit shown on the $$$i$$$-th wheel after all moves have been performed. Then $$$n$$$ lines follow, the $$$i$$$-th of which contains the integer $$$b_i$$$ ($$$1 \\leq b_i \\leq 10$$$) and $$$b_i$$$ characters that are either $$$\\texttt{U}$$$ or $$$\\texttt{D}$$$ — the number of moves performed on the $$$i$$$-th wheel, and the moves performed. $$$\\texttt{U}$$$ and $$$\\texttt{D}$$$ represent an up move and a down move respectively.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_086.jsonl",
    "code_uid": "57311e8ef789ed2bee89cb84f7f07670",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n\\n3\\n\\n9 3 1\\n\\n3 DDD\\n\\n4 UDUU\\n\\n2 DU\\n\\n2\\n\\n0 9\\n\\n9 DDDDDDDDD\\n\\n9 UUUUUUUUU\\n\\n5\\n\\n0 5 9 8 3\\n\\n10 UUUUUUUUUU\\n\\n3 UUD\\n\\n8 UUDUUDDD\\n\\n10 UUDUUDUDDU\\n\\n4 UUUU\"]",
    "exec_outcome": "PASSED",
    "source_code": "t = int(input())\r\n\r\nwhile t:\r\n    n = int(input())\r\n    s1 = list(input().split(\" \"))\r\n    swaps = []\r\n\r\n    while n:\r\n        sw = input()\r\n        total_swap = 0\r\n        for i in sw:\r\n            if i == \"U\":\r\n                total_swap += 1\r\n            elif i == \"D\":\r\n                total_swap -= 1\r\n        swaps.append(total_swap)\r\n        n -= 1\r\n\r\n    for j in range(len(s1)):\r\n        s1[j] = int(s1[j]) - swaps[j]\r\n        if s1[j] < 0:\r\n            s1[j] %= -10\r\n            s1[j] = 10 + s1[j]\r\n        if s1[j] >= 10:\r\n            s1[j] %= 10\r\n\r\n    print(*s1)\r\n    t -= 1",
    "prob_desc_created_at": "1657636500",
    "tags": [
        "brute force",
        "implementation",
        "strings"
    ],
    "hidden_unit_tests": ""
}