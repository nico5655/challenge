{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1 0 0 1 1 0 \\n1 0 0\"]",
    "src_uid": "6458ad752e019ffb87573c8bfb712c18",
    "prob_desc_notes": null,
    "prob_desc_description": "RedDreamer has an array $$$a$$$ consisting of $$$n$$$ non-negative integers, and an unlucky integer $$$T$$$.Let's denote the misfortune of array $$$b$$$ having length $$$m$$$ as $$$f(b)$$$ — the number of pairs of integers $$$(i, j)$$$ such that $$$1 \\le i &lt; j \\le m$$$ and $$$b_i + b_j = T$$$. RedDreamer has to paint each element of $$$a$$$ into one of two colors, white and black (for each element, the color is chosen independently), and then create two arrays $$$c$$$ and $$$d$$$ so that all white elements belong to $$$c$$$, and all black elements belong to $$$d$$$ (it is possible that one of these two arrays becomes empty). RedDreamer wants to paint the elements in such a way that $$$f(c) + f(d)$$$ is minimum possible.For example:  if $$$n = 6$$$, $$$T = 7$$$ and $$$a = [1, 2, 3, 4, 5, 6]$$$, it is possible to paint the $$$1$$$-st, the $$$4$$$-th and the $$$5$$$-th elements white, and all other elements black. So $$$c = [1, 4, 5]$$$, $$$d = [2, 3, 6]$$$, and $$$f(c) + f(d) = 0 + 0 = 0$$$;  if $$$n = 3$$$, $$$T = 6$$$ and $$$a = [3, 3, 3]$$$, it is possible to paint the $$$1$$$-st element white, and all other elements black. So $$$c = [3]$$$, $$$d = [3, 3]$$$, and $$$f(c) + f(d) = 0 + 1 = 1$$$. Help RedDreamer to paint the array optimally!",
    "prob_desc_output_spec": "For each test case print $$$n$$$ integers: $$$p_1$$$, $$$p_2$$$, ..., $$$p_n$$$ (each $$$p_i$$$ is either $$$0$$$ or $$$1$$$) denoting the colors. If $$$p_i$$$ is $$$0$$$, then $$$a_i$$$ is white and belongs to the array $$$c$$$, otherwise it is black and belongs to the array $$$d$$$. If there are multiple answers that minimize the value of $$$f(c) + f(d)$$$, print any of them.",
    "prob_desc_input_spec": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases. Then $$$t$$$ test cases follow. The first line of each test case contains two integers $$$n$$$ and $$$T$$$ ($$$1 \\le n \\le 10^5$$$, $$$0 \\le T \\le 10^9$$$) — the number of elements in the array and the unlucky integer, respectively.  The second line contains $$$n$$$ integers $$$a_1$$$, $$$a_2$$$, ..., $$$a_n$$$ ($$$0 \\le a_i \\le 10^9$$$) — the elements of the array.  The sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_001.jsonl",
    "code_uid": "ef5693f9ee6068c993c3c4ee1916ad0d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n6 7\\n1 2 3 4 5 6\\n3 6\\n3 3 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin, stdout\nimport math,sys\nfrom itertools import permutations, combinations\nfrom collections import defaultdict,deque,OrderedDict,Counter\nfrom os import path\nfrom bisect import bisect_left \nimport heapq \nmod=10**9+7\ndef yes():print('YES')\ndef no():print('NO')\nif (path.exists('input.txt')): \n    #------------------Sublime--------------------------------------#\n    sys.stdin=open('input.txt','r');sys.stdout=open('output.txt','w');\n    def inp():return (int(input()))\n    def minp():return(map(int,input().split()))\nelse:\n    #------------------PYPY FAst I/o--------------------------------#\n    def inp():return (int(stdin.readline()))\n    def minp():return(map(int,stdin.readline().split()))\n    \n####### ---- Start Your Program From Here ---- #######\nfor _ in range(inp()):\n    n,t=minp()\n    a=list(minp())\n    for i in range(n):\n        if a[i]>t/2:\n            a[i]=0\n        elif a[i]<t/2:\n            a[i]=1\n        else:\n            a[i]=2\n    equal=a.count(2)\n    for i in range(n):\n        if a[i]==2:\n            if equal&1:\n                a[i]=0\n            else:\n                a[i]=1\n            equal-=1\n    print(*a)",
    "prob_desc_created_at": "1601219100",
    "tags": [
        "sortings",
        "greedy",
        "math"
    ],
    "hidden_unit_tests": ""
}