{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\\n1\\n2 2\\nNO\\nNO\\nYES\\n2\\n1 2\\n2 2\\nYES\\n2\\n1 1\\n2 3\"]",
    "src_uid": "cc9abcff3224118b533881335e4c582b",
    "prob_desc_notes": "NoteIn the first test case, we can perform one operation with $$$l = 2$$$ and $$$r = 2$$$. So $$$a_2 := 1 - 1 = 0$$$ and string $$$a$$$ became equal to 000. $$$b_1 := 1 - 1 = 0$$$, $$$b_3 := 1 - 1 = 0$$$ and string $$$b$$$ became equal to 000.In the second and in the third test cases, it can be proven that it's impossible to make all elements of both strings equal to $$$0$$$.In the fourth test case, we can perform an operation with $$$l = 1$$$ and $$$r = 2$$$, then string $$$a$$$ became equal to 01, and string $$$b$$$ doesn't change. Then we perform an operation with $$$l = 2$$$ and $$$r = 2$$$, then $$$a_2 := 1 - 1 = 0$$$ and $$$b_1 = 1 - 1 = 0$$$. So both of string $$$a$$$ and $$$b$$$ became equal to 00.In the fifth test case, we can perform an operation with $$$l = 1$$$ and $$$r = 1$$$. Then string $$$a$$$ became equal to 011 and string $$$b$$$ became equal to 100. Then we can perform an operation with $$$l = 2$$$ and $$$r = 3$$$, so both of string $$$a$$$ and $$$b$$$ became equal to 000.",
    "prob_desc_description": "You have two binary strings $$$a$$$ and $$$b$$$ of length $$$n$$$. You would like to make all the elements of both strings equal to $$$0$$$. Unfortunately, you can modify the contents of these strings using only the following operation:  You choose two indices $$$l$$$ and $$$r$$$ ($$$1 \\le l \\le r \\le n$$$);  For every $$$i$$$ that respects $$$l \\le i \\le r$$$, change $$$a_i$$$ to the opposite. That is, $$$a_i := 1 - a_i$$$;  For every $$$i$$$ that respects either $$$1 \\le i &lt; l$$$ or $$$r &lt; i \\le n$$$, change $$$b_i$$$ to the opposite. That is, $$$b_i := 1 - b_i$$$. Your task is to determine if this is possible, and if it is, to find such an appropriate chain of operations. The number of operations should not exceed $$$n + 5$$$. It can be proven that if such chain of operations exists, one exists with at most $$$n + 5$$$ operations. ",
    "prob_desc_output_spec": "For each testcase, print first \"YES\" if it's possible to make all the elements of both strings equal to $$$0$$$. Otherwise, print \"NO\". If the answer is \"YES\", on the next line print a single integer $$$k$$$ ($$$0 \\le k \\le n + 5$$$) — the number of operations. Then $$$k$$$ lines follows, each contains two integers $$$l$$$ and $$$r$$$ ($$$1 \\le l \\le r \\le n$$$) — the description of the operation. If there are several correct answers, print any of them.",
    "prob_desc_input_spec": "Each test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^5$$$) — the number of test cases. The description of test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$) — the length of the strings. The second line of each test case contains a binary string $$$a$$$, consisting only of characters 0 and 1, of length $$$n$$$. The third line of each test case contains a binary string $$$b$$$, consisting only of characters 0 and 1, of length $$$n$$$. It is guaranteed that sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_101.jsonl",
    "code_uid": "6b97b9cc8a5bd03c000b37a050d15bdd",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n\\n3\\n\\n010\\n\\n101\\n\\n2\\n\\n11\\n\\n10\\n\\n4\\n\\n1000\\n\\n0011\\n\\n2\\n\\n10\\n\\n10\\n\\n3\\n\\n111\\n\\n111\"]",
    "exec_outcome": "PASSED",
    "source_code": "f=open(0)\nI=lambda:next(f,'0 ')[:-1]\nI()\nwhile n:=int(I()):i=int(a:=I(),2)^int(I(),2);c=[f'{i} {i}'for i,x in\nenumerate(a,1)if'0'<x];c+=(len(c)+i)%2*['1 1',f'1 {n}',f'2 {n}'];print(*(['YES',len(c)]+c,['NO'])[1<i+1<1<<n])",
    "prob_desc_created_at": "1667745300",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "hidden_unit_tests": ""
}