{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\\n2\\n5\\n2\\n0\", \"8\\n2\\n9\\n8\"]",
    "src_uid": "7e03c9e316f36c1d9487286237e24c6f",
    "prob_desc_notes": "NoteAnswers on queries from the first example are described in the problem statement.",
    "prob_desc_description": "The only difference between the easy and the hard versions is the maximum value of $$$k$$$.You are given an infinite sequence of form \"112123123412345$$$\\dots$$$\" which consist of blocks of all consecutive positive integers written one after another. The first block consists of all numbers from $$$1$$$ to $$$1$$$, the second one — from $$$1$$$ to $$$2$$$, the third one — from $$$1$$$ to $$$3$$$, $$$\\dots$$$, the $$$i$$$-th block consists of all numbers from $$$1$$$ to $$$i$$$. So the first $$$56$$$ elements of the sequence are \"11212312341234512345612345671234567812345678912345678910\". Elements of the sequence are numbered from one. For example, the $$$1$$$-st element of the sequence is $$$1$$$, the $$$3$$$-rd element of the sequence is $$$2$$$, the $$$20$$$-th element of the sequence is $$$5$$$, the $$$38$$$-th element is $$$2$$$, the $$$56$$$-th element of the sequence is $$$0$$$.Your task is to answer $$$q$$$ independent queries. In the $$$i$$$-th query you are given one integer $$$k_i$$$. Calculate the digit at the position $$$k_i$$$ of the sequence.",
    "prob_desc_output_spec": "Print $$$q$$$ lines. In the $$$i$$$-th line print one digit $$$x_i$$$ $$$(0 \\le x_i \\le 9)$$$ — the answer to the query $$$i$$$, i.e. $$$x_i$$$ should be equal to the element at the position $$$k_i$$$ of the sequence.",
    "prob_desc_input_spec": "The first line of the input contains one integer $$$q$$$ ($$$1 \\le q \\le 500$$$) — the number of queries. The $$$i$$$-th of the following $$$q$$$ lines contains one integer $$$k_i$$$ $$$(1 \\le k_i \\le 10^9)$$$ — the description of the corresponding query.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_032.jsonl",
    "code_uid": "e1aefc351f762be9d78167f3fac6bb43",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n1\\n3\\n20\\n38\\n56\", \"4\\n2132\\n506\\n999999999\\n1000000000\"]",
    "exec_outcome": "PASSED",
    "source_code": "word = ''\narr = [0]\nfor i in range(1,22000):\n    word = word + str(i)\n    arr.append(arr[-1] + len(word))\n    \ndef sol(k):\n    d = 0\n    for i in range(1,22000):\n        if arr[i] > k:\n            d = i - 1\n            break\n    \n    k = k - arr[d]\n    if k == 0:\n        return str(d)[-1]\n    else:\n        return word[k - 1]\n    \nfor i in range(int(input())):\n    print(sol(int(input())))",
    "prob_desc_created_at": "1569049500",
    "tags": [
        "binary search",
        "brute force",
        "math"
    ],
    "hidden_unit_tests": ""
}