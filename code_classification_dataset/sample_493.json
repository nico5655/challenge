{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"WIN\", \"WIN\", \"LOSE\"]",
    "src_uid": "d66c7774acb7e4b1f5da105dfa5c1d36",
    "prob_desc_notes": "NoteIn the first example, there are 3 possible cells for the first city to reclaim: (2, 1), (3, 1), or (3, 2). The first two possibilities both lose, as they leave exactly one cell for the other city.  However, reclaiming the cell at (3, 2) leaves no more cells that can be reclaimed, and therefore the first city wins.  In the third example, there are no cells that can be reclaimed.",
    "prob_desc_description": "In a far away land, there are two cities near a river. One day, the cities decide that they have too little space and would like to reclaim some of the river area into land.The river area can be represented by a grid with r rows and exactly two columns — each cell represents a rectangular area. The rows are numbered 1 through r from top to bottom, while the columns are numbered 1 and 2.Initially, all of the cells are occupied by the river. The plan is to turn some of those cells into land one by one, with the cities alternately choosing a cell to reclaim, and continuing until no more cells can be reclaimed.However, the river is also used as a major trade route. The cities need to make sure that ships will still be able to sail from one end of the river to the other. More formally, if a cell (r, c) has been reclaimed, it is not allowed to reclaim any of the cells (r - 1, 3 - c), (r, 3 - c), or (r + 1, 3 - c).The cities are not on friendly terms, and each city wants to be the last city to reclaim a cell (they don't care about how many cells they reclaim, just who reclaims a cell last). The cities have already reclaimed n cells. Your job is to determine which city will be the last to reclaim a cell, assuming both choose cells optimally from current moment.",
    "prob_desc_output_spec": "Output \"WIN\" if the city whose turn it is to choose a cell can guarantee that they will be the last to choose a cell. Otherwise print \"LOSE\".",
    "prob_desc_input_spec": "The first line consists of two integers r and n (1 ≤ r ≤ 100, 0 ≤ n ≤ r). Then n lines follow, describing the cells that were already reclaimed. Each line consists of two integers: ri and ci (1 ≤ ri ≤ r, 1 ≤ ci ≤ 2), which represent the cell located at row ri and column ci. All of the lines describing the cells will be distinct, and the reclaimed cells will not violate the constraints above.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_002.jsonl",
    "code_uid": "9fd1ed24d0de81efd4964e6f88630e77",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 1\\n1 1\", \"12 2\\n4 1\\n8 1\", \"1 1\\n1 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "r,n = [int(x) for x in input().split()]\ncells = [[int(x) for x in input().split()] for i in range(n)]\ncells.sort()\n#print(cells)\nout = False\n\nres = {True:\"WIN\",False:\"LOSE\"}\n\nif len(cells) == 0: print(res[r%2 == 1])\nelse:\n    out = False\n    #print(cells[0][0] > 1)\n    #print(cells[-1][0] < r)\n    for i in range(1,n):\n        out ^= ((cells[i][0]-cells[i-1][0]-1)%2) ^ (cells[i][1] != cells[i-1][1])\n    dif = abs((cells[0][0]-1)-(r-cells[-1][0]))\n    #print(out,dif)\n    hi,lo = max(cells[0][0]-1,r-cells[-1][0]),min(cells[0][0]-1,r-cells[-1][0])\n    #print(out,dif,lo,hi)\n    if lo > 1:\n        if dif == 0:\n            print(res[out])\n        elif dif == 1 and lo % 2 == 0:\n            print(res[not out])\n        else:\n            print(res[True])\n    elif lo == 0:\n        if hi == 0: print(res[out])\n        elif hi == 1:\n            print(res[not out])\n        else:\n            print(res[True])\n    elif lo == 1:\n        if hi == 1:\n            print(res[out])\n        else:\n            print(res[True])\n",
    "prob_desc_created_at": "1375549200",
    "tags": [
        "games"
    ],
    "hidden_unit_tests": ""
}