{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\", \"1\", \"2\"]",
    "src_uid": "a6ee741df426fd2d06fdfda4ca369397",
    "prob_desc_notes": "NoteIn the first and the second samples, Arya will beat all present opponents each of the d days.In the third sample, Arya will beat his opponents on days 1, 3 and 4 and his opponents will beat him on days 2 and 5. Thus, the maximum number of consecutive winning days is 2, which happens on days 3 and 4.",
    "prob_desc_description": "Arya has n opponents in the school. Each day he will fight with all opponents who are present this day. His opponents have some fighting plan that guarantees they will win, but implementing this plan requires presence of them all. That means if one day at least one of Arya's opponents is absent at the school, then Arya will beat all present opponents. Otherwise, if all opponents are present, then they will beat Arya.For each opponent Arya knows his schedule — whether or not he is going to present on each particular day. Tell him the maximum number of consecutive days that he will beat all present opponents.Note, that if some day there are no opponents present, Arya still considers he beats all the present opponents.",
    "prob_desc_output_spec": "Print the only integer — the maximum number of consecutive days that Arya will beat all present opponents.",
    "prob_desc_input_spec": "The first line of the input contains two integers n and d (1 ≤ n, d ≤ 100) — the number of opponents and the number of days, respectively. The i-th of the following d lines contains a string of length n consisting of characters '0' and '1'. The j-th character of this string is '0' if the j-th opponent is going to be absent on the i-th day.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_006.jsonl",
    "code_uid": "279cb0805d960c77df990b165ef1c584",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2 2\\n10\\n00\", \"4 1\\n0100\", \"4 5\\n1101\\n1111\\n0110\\n1011\\n1111\"]",
    "exec_outcome": "PASSED",
    "source_code": "import bisect\nfrom collections import defaultdict\nfrom collections import deque\nimport math\nimport re\nimport sys\n\ndef ni():\n    return int(raw_input())\n\ndef nis():\n    return map(int, raw_input().split())\n\ndef si():\n    return raw_input()\n\ndef sis():\n    return raw_input().split()\n\ndef spaced(a):\n    return ' '.join(map(str, a))\n\nn, d = nis()\n\nrunning = 0\nmax_running = 0\nfor _ in range(d):\n    s = si()\n    if '0' in s:\n        running += 1\n        if running > max_running:\n            max_running = running\n    else:\n        running = 0\n\nprint max_running\n",
    "prob_desc_created_at": "1467219900",
    "tags": [
        "implementation"
    ],
    "hidden_unit_tests": ""
}