{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"a\", \"aab\", \"aaabb\"]",
    "src_uid": "2924053ee058c531254d690f0b12d324",
    "prob_desc_notes": "NoteIn the first sample, one can choose the subsequence {3} and form a string \"a\".In the second sample, one can choose the subsequence {1, 2, 4} (symbols on this positions are 'a', 'b' and 'a') and rearrange the chosen symbols to form a string \"aab\".",
    "prob_desc_description": "You are given a string s, consisting of lowercase English letters, and the integer m.One should choose some symbols from the given string so that any contiguous subsegment of length m has at least one selected symbol. Note that here we choose positions of symbols, not the symbols themselves.Then one uses the chosen symbols to form a new string. All symbols from the chosen position should be used, but we are allowed to rearrange them in any order.Formally, we choose a subsequence of indices 1 ≤ i1 &lt; i2 &lt; ... &lt; it ≤ |s|. The selected sequence must meet the following condition: for every j such that 1 ≤ j ≤ |s| - m + 1, there must be at least one selected index that belongs to the segment [j,  j + m - 1], i.e. there should exist a k from 1 to t, such that j ≤ ik ≤ j + m - 1.Then we take any permutation p of the selected indices and form a new string sip1sip2... sipt.Find the lexicographically smallest string, that can be obtained using this procedure.",
    "prob_desc_output_spec": "Print the single line containing the lexicographically smallest string, that can be obtained using the procedure described above.",
    "prob_desc_input_spec": "The first line of the input contains a single integer m (1 ≤ m ≤ 100 000). The second line contains the string s consisting of lowercase English letters. It is guaranteed that this string is non-empty and its length doesn't exceed 100 000. It is also guaranteed that the number m doesn't exceed the length of the string s.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_043.jsonl",
    "code_uid": "a521e9d5f408133937bca461e491d22d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\ncbabc\", \"2\\nabcab\", \"3\\nbcabcbaccba\"]",
    "exec_outcome": "PASSED",
    "source_code": "m = int(input())\ns = input()\nans = []\nmark = [True for _ in range(len(s))]\nz = 'a'\ni = 0\nwhile i <= len(s) - m:\n    k = i\n    for j in range(i, i + m):\n        if s[j] <= s[k]:\n            k = j\n    ans.append(s[k])\n    z = max(z, s[k])\n    mark[k] = False\n    i = k\n    i += 1\nfor i in range(len(s)):\n    if s[i] < z and mark[i]:\n        ans.append(s[i])\nprint(''.join(str(i) for i in sorted(ans)))",
    "prob_desc_created_at": "1475928900",
    "tags": [
        "data structures",
        "greedy",
        "strings"
    ],
    "hidden_unit_tests": ""
}