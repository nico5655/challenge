{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"A\\nD\", \"a\"]",
    "src_uid": "472c0cb256c062b9806bf93b13b453a2",
    "prob_desc_notes": null,
    "prob_desc_description": "Everyone knows that 2010 FIFA World Cup is being held in South Africa now. By the decision of BFA (Berland's Football Association) next World Cup will be held in Berland. BFA took the decision to change some World Cup regulations:  the final tournament features n teams (n is always even)  the first n / 2 teams (according to the standings) come through to the knockout stage  the standings are made on the following principle: for a victory a team gets 3 points, for a draw — 1 point, for a defeat — 0 points. In the first place, teams are ordered in the standings in decreasing order of their points; in the second place — in decreasing order of the difference between scored and missed goals; in the third place — in the decreasing order of scored goals  it's written in Berland's Constitution that the previous regulation helps to order the teams without ambiguity. You are asked to write a program that, by the given list of the competing teams and the results of all the matches, will find the list of teams that managed to get through to the knockout stage.",
    "prob_desc_output_spec": "Output n / 2 lines — names of the teams, which managed to get through to the knockout stage in lexicographical order. Output each name in a separate line. No odd characters (including spaces) are allowed. It's guaranteed that the described regulations help to order the teams without ambiguity.",
    "prob_desc_input_spec": "The first input line contains the only integer n (1 ≤ n ≤ 50) — amount of the teams, taking part in the final tournament of World Cup. The following n lines contain the names of these teams, a name is a string of lower-case and upper-case Latin letters, its length doesn't exceed 30 characters. The following n·(n - 1) / 2 lines describe the held matches in the format name1-name2 num1:num2, where name1, name2 — names of the teams; num1, num2 (0 ≤ num1, num2 ≤ 100) — amount of the goals, scored by the corresponding teams. Accuracy of the descriptions is guaranteed: there are no two team names coinciding accurate to the letters' case; there is no match, where a team plays with itself; each match is met in the descriptions only once.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_039.jsonl",
    "code_uid": "c5f0416ac11e5607a57787a717362572",
    "prob_desc_memory_limit": "64 megabytes",
    "prob_desc_sample_inputs": "[\"4\\nA\\nB\\nC\\nD\\nA-B 1:1\\nA-C 2:2\\nA-D 1:0\\nB-C 1:0\\nB-D 0:3\\nC-D 0:3\", \"2\\na\\nA\\na-A 2:1\"]",
    "exec_outcome": "PASSED",
    "source_code": "#!/usr/bin/env python2\n# -*- coding: utf-8 -*-\nimport sys\nifs = sys.stdin\nofs = sys.stdout\n\nfrom operator import attrgetter\nfrom functools import total_ordering\n\n@total_ordering\nclass TeamResult:\n    \n    def __init__(self,name):\n        self.name = name\n        self.points = 0\n        self.scored = 0\n        self.missed = 0\n        \n    def update(self,scored,missed):\n        self.scored += scored\n        self.missed += missed\n        if scored > missed:\n            self.points += 3\n        elif scored == missed:\n            self.points += 1\n \n    def __eq__(self, other):\n        return self.to_tuple() == other.to_tuple()\n    \n    def __lt__(self, other):\n        return self.to_tuple() < other.to_tuple()\n        \n        if self.points != other.points:\n            return self.points < other.points\n        \n        self_d = self.scored - self.missed\n        other_d = other.scored - other.missed\n        if self_d != other_d:\n            return self_d < other_d\n\n        return self.scored < other.scored\n    \n    def to_tuple(self):\n        return (self.points, self.scored-self.missed, self.scored)\n    \n\ndef solve(teams,matches):\n    \n    for m in matches:\n        tr1,tr2 = m\n        name1,goals1 = tr1\n        name2,goals2 = tr2\n        teams[name1].update(goals1,goals2)\n        teams[name2].update(goals2,goals1)\n    \n#    #T = [(name,tr) for name,tr in teams.iteritems()]\n#    T = teams.items()\n#    #T = teams.keys()\n#    T = sorted(T, key=lambda t: t[1].to_tuple(), reverse=True)\n    \n    T = sorted(teams.values(), reverse=True)\n    \n    #T = sorted(T, key=attrgetter('points','difference','scored'), reverse=True)\n    #print T\n\n    n = len(T)\n    T_names = [t.name for t in T[:(n/2)] ]\n    return sorted(T_names)\n    #return sorted(T_names, key=lambda s: (s.lower(),s))\n\n\ndef numbers_from_line(d=' '):\n    return [int(s) for s in ifs.readline().strip().split(d) if len(s.strip())>0]\n\n\nn = int(ifs.readline())\n\nteams = {}\nfor _ in range(n):\n    name = ifs.readline().strip()\n    teams[name] = TeamResult(name)\n\nmatches = []\nfor _ in range(n*(n-1)/2):\n    marks,goals = ifs.readline().strip().split(' ')\n    t1,t2 = marks.split('-')\n    g1,g2 = goals.split(':')\n    matches.append( ((t1,int(g1)), (t2,int(g2))) )\n\nwinners = solve(teams,matches)\n\nfor name in winners:\n    ofs.write('%s\\n' % name)\n",
    "prob_desc_created_at": "1277391600",
    "tags": [
        "implementation"
    ],
    "hidden_unit_tests": ""
}