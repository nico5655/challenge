{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\\n4\\n4\\n165\"]",
    "src_uid": "35bf06fffc81e8b9e0ad87c7f47d3a7d",
    "prob_desc_notes": "NoteIn the first test case, rectangular parallelepiped $$$(1, 1, 1)$$$ can be only divided into rectangular parallelepiped with sizes $$$(1, 1, 1)$$$.In the second test case, rectangular parallelepiped $$$(1, 6, 1)$$$ can be divided into rectangular parallelepipeds with sizes $$$(1, 1, 1)$$$, $$$(1, 1, 2)$$$, $$$(1, 1, 3)$$$ and $$$(1, 1, 6)$$$.In the third test case, rectangular parallelepiped $$$(2, 2, 2)$$$ can be divided into rectangular parallelepipeds with sizes $$$(1, 1, 1)$$$, $$$(1, 1, 2)$$$, $$$(1, 2, 2)$$$ and $$$(2, 2, 2)$$$. ",
    "prob_desc_description": "You are given a rectangular parallelepiped with sides of positive integer lengths $$$A$$$, $$$B$$$ and $$$C$$$. Find the number of different groups of three integers ($$$a$$$, $$$b$$$, $$$c$$$) such that $$$1\\leq a\\leq b\\leq c$$$ and parallelepiped $$$A\\times B\\times C$$$ can be paved with parallelepipeds $$$a\\times b\\times c$$$. Note, that all small parallelepipeds have to be rotated in the same direction.For example, parallelepiped $$$1\\times 5\\times 6$$$ can be divided into parallelepipeds $$$1\\times 3\\times 5$$$, but can not be divided into parallelepipeds $$$1\\times 2\\times 3$$$.",
    "prob_desc_output_spec": "For each test case, print the number of different groups of three points that satisfy all given conditions.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^5$$$) — the number of test cases. Each of the next $$$t$$$ lines contains three integers $$$A$$$, $$$B$$$ and $$$C$$$ ($$$1 \\leq A, B, C \\leq 10^5$$$) — the sizes of the parallelepiped.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_014.jsonl",
    "code_uid": "0f95f6dbf6eceec9f8bbf3308f9c5d6c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n1 1 1\\n1 6 1\\n2 2 2\\n100 100 100\"]",
    "exec_outcome": "PASSED",
    "source_code": "from math import gcd\n\nN = 100001\nd = [0 for i in range(N)]\nfor i in range(1, N):\n    for j in range(i, N, i):\n        d[j] += 1\n\nn = int(input())\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    A, B, C = d[a], d[b], d[c]\n    AB, BC, CA = d[gcd(a, b)], d[gcd(b, c)], d[gcd(c, a)]\n    ABC = d[gcd(gcd(a, b), c)]\n    print(A * B * C - AB * BC * CA + ABC * (AB * BC + BC * CA + CA * AB)\n          - A * BC * (BC - 1) // 2 - B * CA * (CA - 1) // 2 - C * AB * (AB - 1) // 2\n          - ABC * (ABC + 1) * (AB + BC + CA) // 2 + ABC * (ABC + 1) * (ABC + 2) // 6)\n",
    "prob_desc_created_at": "1531492500",
    "tags": [
        "number theory",
        "math"
    ],
    "hidden_unit_tests": ""
}