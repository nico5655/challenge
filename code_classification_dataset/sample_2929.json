{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\", \"2\"]",
    "src_uid": "c5bac81b91aee54b6f3f4554f4eb9d76",
    "prob_desc_notes": "NoteIn the first sample you can get only one sequence: (1, 1), (2, 1). In the second sample you can get such sequences : (1, 1), (2, 2), (2, 1), (3, 2); (1, 1), (2, 1), (2, 2), (3, 2). Thus, the answer is 2.",
    "prob_desc_description": "Little Dima has two sequences of points with integer coordinates: sequence (a1, 1), (a2, 2), ..., (an, n) and sequence (b1, 1), (b2, 2), ..., (bn, n).Now Dima wants to count the number of distinct sequences of points of length 2·n that can be assembled from these sequences, such that the x-coordinates of points in the assembled sequence will not decrease. Help him with that. Note that each element of the initial sequences should be used exactly once in the assembled sequence.Dima considers two assembled sequences (p1, q1), (p2, q2), ..., (p2·n, q2·n) and (x1, y1), (x2, y2), ..., (x2·n, y2·n) distinct, if there is such i (1 ≤ i ≤ 2·n), that (pi, qi) ≠ (xi, yi).As the answer can be rather large, print the remainder from dividing the answer by number m.",
    "prob_desc_output_spec": "In the single line print the remainder after dividing the answer to the problem by number m. ",
    "prob_desc_input_spec": "The first line contains integer n (1 ≤ n ≤ 105). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109). The third line contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 109). The numbers in the lines are separated by spaces. The last line contains integer m (2 ≤ m ≤ 109 + 7).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_035.jsonl",
    "code_uid": "7de545839d28ce51469f4747a410f2e6",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1\\n1\\n2\\n7\", \"2\\n1 2\\n2 3\\n11\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin\nn = int(stdin.readline())\na = map(int, stdin.readline().split())\nb = map(int, stdin.readline().split())\nf = {}\nfor x in a:\n    f[x] = f[x] + 1 if f.has_key(x) else 1\nfor x in b:\n    f[x] = f[x] + 1 if f.has_key(x) else 1\nsame = 0\nfor i in range(len(a)):\n    if a[i] == b[i]: same+=1\nm = int(stdin.readline())\nr=1\nfor x in f.values():\n    for i in range(2, x+1):\n        k = i\n        while same > 0 and k%2==0:\n            same-=1\n            k /= 2\n        r=(r*k)%m\nprint(r)\n",
    "prob_desc_created_at": "1360769400",
    "tags": [
        "combinatorics"
    ],
    "hidden_unit_tests": ""
}