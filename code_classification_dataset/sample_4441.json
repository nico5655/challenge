{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\\n1 2\\n3\\n2 1 3\"]",
    "src_uid": "3b9380ca571dbf3e24fc1b1c8b91790b",
    "prob_desc_notes": null,
    "prob_desc_description": "Recall that a permutation of length $$$n$$$ is an array where each element from $$$1$$$ to $$$n$$$ occurs exactly once.For a fixed positive integer $$$d$$$, let's define the cost of the permutation $$$p$$$ of length $$$n$$$ as the number of indices $$$i$$$ $$$(1 \\le i &lt; n)$$$ such that $$$p_i \\cdot d = p_{i + 1}$$$.For example, if $$$d = 3$$$ and $$$p = [5, 2, 6, 7, 1, 3, 4]$$$, then the cost of such a permutation is $$$2$$$, because $$$p_2 \\cdot 3 = p_3$$$ and $$$p_5 \\cdot 3 = p_6$$$.Your task is the following one: for a given value $$$n$$$, find the permutation of length $$$n$$$ and the value $$$d$$$ with maximum possible cost (over all ways to choose the permutation and $$$d$$$). If there are multiple answers, then print any of them.",
    "prob_desc_output_spec": "For each test case, print the value $$$d$$$ in the first line, and $$$n$$$ integers in the second line — the permutation itself. If there are multiple answers, then print any of them.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 500$$$) — the number of test cases. The single line of each test case contains a single integer $$$n$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$). The sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_097.jsonl",
    "code_uid": "6139fe3233862c6ee046530cbf9f94f8",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n\\n2\\n\\n3\"]",
    "exec_outcome": "PASSED",
    "source_code": "for _ in range (int(input ())):\n    n = int(input ())\n    print (2)\n    r3 = []\n    for i in range (1,n+1):\n        if i % 2 != 0:\n            r3.append(i)\n        while r3[-1]*2 <= n:\n            r3.append(r3[-1]*2)\n    print (*r3)",
    "prob_desc_created_at": "1657290900",
    "tags": [
        "greedy"
    ],
    "hidden_unit_tests": ""
}