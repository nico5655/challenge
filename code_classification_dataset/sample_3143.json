{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\", \"9\"]",
    "src_uid": "422fda519243f084f82fac5488ee4faa",
    "prob_desc_notes": "NoteIn the first test case, we can obtain $$$4$$$ bracket sequences by replacing all characters '?' with either '(' or ')':  \"((\". Its depth is $$$0$$$;  \"))\". Its depth is $$$0$$$;  \")(\". Its depth is $$$0$$$;  \"()\". Its depth is $$$1$$$. So, the answer is $$$1 = 0 + 0 + 0 + 1$$$.In the second test case, we can obtain $$$4$$$ bracket sequences by replacing all characters '?' with either '(' or ')':  \"(((())\". Its depth is $$$2$$$;  \"()()))\". Its depth is $$$2$$$;  \"((()))\". Its depth is $$$3$$$;  \"()(())\". Its depth is $$$2$$$. So, the answer is $$$9 = 2 + 2 + 3 + 2$$$.",
    "prob_desc_description": "This is the hard version of this problem. The only difference is the limit of $$$n$$$ - the length of the input string. In this version, $$$1 \\leq n \\leq 10^6$$$.Let's define a correct bracket sequence and its depth as follow:  An empty string is a correct bracket sequence with depth $$$0$$$.  If \"s\" is a correct bracket sequence with depth $$$d$$$ then \"(s)\" is a correct bracket sequence with depth $$$d + 1$$$.  If \"s\" and \"t\" are both correct bracket sequences then their concatenation \"st\" is a correct bracket sequence with depth equal to the maximum depth of $$$s$$$ and $$$t$$$. For a (not necessarily correct) bracket sequence $$$s$$$, we define its depth as the maximum depth of any correct bracket sequence induced by removing some characters from $$$s$$$ (possibly zero). For example: the bracket sequence $$$s = $$$\"())(())\" has depth $$$2$$$, because by removing the third character we obtain a correct bracket sequence \"()(())\" with depth $$$2$$$.Given a string $$$a$$$ consists of only characters '(', ')' and '?'. Consider all (not necessarily correct) bracket sequences obtained by replacing all characters '?' in $$$a$$$ by either '(' or ')'. Calculate the sum of all the depths of all these bracket sequences. As this number can be large, find it modulo $$$998244353$$$.Hacks in this problem can be done only if easy and hard versions of this problem was solved.",
    "prob_desc_output_spec": "Print the answer modulo $$$998244353$$$ in a single line.",
    "prob_desc_input_spec": "The only line contains a non-empty string consist of only '(', ')' and '?'. The length of the string is at most $$$10^6$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2900,
    "file_name": "train_043.jsonl",
    "code_uid": "61a766ba24d96451eb38ef7ceb8634b6",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"??\", \"(?(?))\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nrange = xrange\ninput = raw_input\n\nimport __pypy__\nmulmod = __pypy__.intop.int_mulmod\n\nMOD = 998244353  \nhalf = pow(2, MOD - 2, MOD)\n\nS = input()\nn = len(S)\nA = []\nfor c in S:\n    if c == '?':\n        A.append(0)\n    elif c == '(':\n        A.append(1)\n    else:\n        A.append(2)\n\n\nbig = 10**6 + 10\nmodinv = [1]*big\nfor i in range(2,big):\n    modinv[i] = mulmod(-(MOD//i), modinv[MOD%i], MOD)\n\nfac = [1]\nfor i in range(1,big):\n    fac.append(mulmod(fac[-1], i, MOD))\n\ninvfac = [1]\nfor i in range(1,big):\n    invfac.append(mulmod(invfac[-1], modinv[i], MOD))\n\ndef choose(n,k):\n    if k > n:\n        return 0\n    return mulmod(mulmod(fac[n], invfac[k], MOD), invfac[n-k], MOD)\n\ncount = sum(1 for a in A if a == 0)\n\ncumsum0 = [0]\nfor k in range(n + 1):\n    cumsum0.append((cumsum0[-1] + choose(count - 1, k)) % MOD)\n\ncumsum1 = [0]\nfor k in range(n + 1):\n    cumsum1.append((cumsum1[-1] + choose(count, k)) % MOD)\n\nans = 0\nm = sum(1 for a in A if a != 1)\nfor i in range(n):\n    m -= A[i] != 1\n    if A[i] == 0 and m >= 0:\n        ans = (ans + cumsum0[m]) % MOD\n    elif A[i] == 1 and m >= 0:\n        ans = (ans + cumsum1[m]) % MOD\n    m -= A[i] == 1\nprint ans\n",
    "prob_desc_created_at": "1575556500",
    "tags": [
        "combinatorics",
        "probabilities"
    ],
    "hidden_unit_tests": ""
}