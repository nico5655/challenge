{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"17\\n82\\n23\\n210\", \"2\\n0\\n22\\n59\\n16\\n8\"]",
    "src_uid": "e02938670cb1d586d065ca9750688404",
    "prob_desc_notes": "NoteIn the first query of the first sample, the Lipschitz constants of subarrays of  with length at least 2 are:       The answer to the query is their sum.",
    "prob_desc_description": "A function  is called Lipschitz continuous if there is a real constant K such that the inequality |f(x) - f(y)| ≤ K·|x - y| holds for all . We'll deal with a more... discrete version of this term.For an array , we define it's Lipschitz constant  as follows:  if n &lt; 2,   if n ≥ 2,  over all 1 ≤ i &lt; j ≤ n In other words,  is the smallest non-negative integer such that |h[i] - h[j]| ≤ L·|i - j| holds for all 1 ≤ i, j ≤ n.You are given an array  of size n and q queries of the form [l, r]. For each query, consider the subarray ; determine the sum of Lipschitz constants of all subarrays of .",
    "prob_desc_output_spec": "Print the answers to all queries in the order in which they are given in the input. For the i-th query, print one line containing a single integer — the sum of Lipschitz constants of all subarrays of .",
    "prob_desc_input_spec": "The first line of the input contains two space-separated integers n and q (2 ≤ n ≤ 100 000 and 1 ≤ q ≤ 100) — the number of elements in array  and the number of queries respectively. The second line contains n space-separated integers  (). The following q lines describe queries. The i-th of those lines contains two space-separated integers li and ri (1 ≤ li &lt; ri ≤ n).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_024.jsonl",
    "code_uid": "ca65e3064d0735787897814f0f5ccb24",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"10 4\\n1 5 2 9 1 3 4 2 1 7\\n2 4\\n3 8\\n7 10\\n1 9\", \"7 6\\n5 7 7 4 6 6 2\\n1 2\\n2 3\\n2 6\\n1 7\\n4 7\\n3 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "f = lambda: map(int, input().split())\nn, m = f()\nt = list(f())\np = [1e9] + [abs(b - a) for a, b in zip(t, t[1:])] + [1e9]\nL, R = [0] * n, [0] * n\nfor i in range(1, n):\n    j = n - i\n    x, y = i - 1, j + 1\n    a, b = p[i], p[j]\n    while a > p[x]: x = L[x]\n    while b >= p[y]: y = R[y]\n    L[i], R[j] = x, y\nfor k in range(m):\n    l, r = f()\n    print(sum((i - max(l - 1, L[i])) * (min(r, R[i]) - i) * p[i] for i in range(l, r)))\n",
    "prob_desc_created_at": "1448382900",
    "tags": [
        "data structures",
        "math"
    ],
    "hidden_unit_tests": ""
}