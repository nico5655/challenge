{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"abb\\nabba\\nbabbbbbbbbb\"]",
    "src_uid": "32ed4995e557cfdcbef375e2b9edb1a6",
    "prob_desc_notes": "NoteIn the first testcase of the example, BA-strings ordered lexicographically are:   a  ab  abb  abbb  abbbb In the second testcase of the example, BA-strings ordered lexicographically are:   aa  aba  abba Note that string \"aba\" is only counted once, even though there are two ways to replace asterisks with characters 'b' to get it.",
    "prob_desc_description": "You are given an integer $$$k$$$ and a string $$$s$$$ that consists only of characters 'a' (a lowercase Latin letter) and '*' (an asterisk).Each asterisk should be replaced with several (from $$$0$$$ to $$$k$$$ inclusive) lowercase Latin letters 'b'. Different asterisk can be replaced with different counts of letter 'b'.The result of the replacement is called a BA-string.Two strings $$$a$$$ and $$$b$$$ are different if they either have different lengths or there exists such a position $$$i$$$ that $$$a_i \\neq b_i$$$.A string $$$a$$$ is lexicographically smaller than a string $$$b$$$ if and only if one of the following holds:   $$$a$$$ is a prefix of $$$b$$$, but $$$a \\ne b$$$;  in the first position where $$$a$$$ and $$$b$$$ differ, the string $$$a$$$ has a letter that appears earlier in the alphabet than the corresponding letter in $$$b$$$. Now consider all different BA-strings and find the $$$x$$$-th lexicographically smallest of them.",
    "prob_desc_output_spec": "For each testcase, print a single string, consisting only of characters 'b' and 'a' (lowercase Latin letters) — the $$$x$$$-th lexicographically smallest BA-string.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 2000$$$) — the number of testcases. The first line of each testcase contains three integers $$$n$$$, $$$k$$$ and $$$x$$$ ($$$1 \\le n \\le 2000$$$; $$$0 \\le k \\le 2000$$$; $$$1 \\le x \\le 10^{18}$$$). $$$n$$$ is the length of string $$$s$$$. The second line of each testcase is a string $$$s$$$. It consists of $$$n$$$ characters, each of them is either 'a' (a lowercase Latin letter) or '*' (an asterisk). The sum of $$$n$$$ over all testcases doesn't exceed $$$2000$$$. For each testcase $$$x$$$ doesn't exceed the total number of different BA-strings. String $$$s$$$ contains at least one character 'a'.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_095.jsonl",
    "code_uid": "6274ea86b85cdf10955bfdf823ddd7d3",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n2 4 3\\na*\\n4 1 3\\na**a\\n6 3 20\\n**a***\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys, re\r\n\r\n\r\ndef solve(ix, cur, x):\r\n    for i in range(ix, n):\r\n        if c[i]:\r\n            cur //= (k * c[i] + 1)\r\n            mem[i] = x // cur\r\n            x %= cur\r\n\r\n\r\ninput = lambda: sys.stdin.buffer.readline().decode().strip()\r\nfor _ in range(int(input())):\r\n    n, k, x = map(int, input().split())\r\n    s, mem, c, x = input(), [0] * n, [0] * n, x - 1\r\n\r\n    for i in re.finditer('\\*+', s):\r\n        l, r = i.span()\r\n        c[l] = r - l\r\n\r\n    cur = 1\r\n    for i in reversed(range(n)):\r\n        cur *= (k * c[i] + 1)\r\n        if cur >= x + 1:\r\n            solve(i, cur, x)\r\n            break\r\n\r\n    ans = []\r\n    for i in range(n):\r\n        if s[i] == 'a':\r\n            ans.append(s[i])\r\n        elif c[i]:\r\n            ans.extend(['b'] * mem[i])\r\n\r\n    print(''.join(ans))\r\n",
    "prob_desc_created_at": "1639841700",
    "tags": [
        "brute force",
        "dp",
        "greedy",
        "implementation",
        "math"
    ],
    "hidden_unit_tests": ""
}