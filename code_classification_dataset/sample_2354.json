{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\", \"19\", \"0\"]",
    "src_uid": "40ab9115d709cabf1273b29d257e16c4",
    "prob_desc_notes": null,
    "prob_desc_description": "There are $$$n$$$ points on a coordinate axis $$$OX$$$. The $$$i$$$-th point is located at the integer point $$$x_i$$$ and has a speed $$$v_i$$$. It is guaranteed that no two points occupy the same coordinate. All $$$n$$$ points move with the constant speed, the coordinate of the $$$i$$$-th point at the moment $$$t$$$ ($$$t$$$ can be non-integer) is calculated as $$$x_i + t \\cdot v_i$$$.Consider two points $$$i$$$ and $$$j$$$. Let $$$d(i, j)$$$ be the minimum possible distance between these two points over any possible moments of time (even non-integer). It means that if two points $$$i$$$ and $$$j$$$ coincide at some moment, the value $$$d(i, j)$$$ will be $$$0$$$.Your task is to calculate the value $$$\\sum\\limits_{1 \\le i &lt; j \\le n}$$$ $$$d(i, j)$$$ (the sum of minimum distances over all pairs of points).",
    "prob_desc_output_spec": "Print one integer — the value $$$\\sum\\limits_{1 \\le i &lt; j \\le n}$$$ $$$d(i, j)$$$ (the sum of minimum distances over all pairs of points).",
    "prob_desc_input_spec": "The first line of the input contains one integer $$$n$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$) — the number of points. The second line of the input contains $$$n$$$ integers $$$x_1, x_2, \\dots, x_n$$$ ($$$1 \\le x_i \\le 10^8$$$), where $$$x_i$$$ is the initial coordinate of the $$$i$$$-th point. It is guaranteed that all $$$x_i$$$ are distinct. The third line of the input contains $$$n$$$ integers $$$v_1, v_2, \\dots, v_n$$$ ($$$-10^8 \\le v_i \\le 10^8$$$), where $$$v_i$$$ is the speed of the $$$i$$$-th point.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_021.jsonl",
    "code_uid": "fd49552016ddfd17f6f1e5d9f0e637c6",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n1 3 2\\n-100 2 3\", \"5\\n2 1 4 3 5\\n2 2 2 3 4\", \"2\\n2 1\\n-3 0\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin\nfrom collections import *\n\n\ndef fast2():\n    import os, sys, atexit\n    from cStringIO import StringIO as BytesIO\n    # range = xrange\n    sys.stdout = BytesIO()\n    atexit.register(lambda: os.write(1, sys.stdout.getvalue()))\n    return BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\n\nclass order_tree:\n    def __init__(self, arr):\n        self.n = len(arr)\n        self.tree = [[0, 0] for _ in range(self.n * 2)]\n        self.order = defaultdict(int, {arr[i]: i for i in range(self.n)})\n\n    # get interval[l,r)\n    def query(self, l):\n        res, coun = 0, 0\n        l = self.order[l] + self.n\n        r = self.n * 2\n\n        while l < r:\n            if l & 1:\n                res += self.tree[l][0]\n                coun += self.tree[l][1]\n                l += 1\n\n            if r & 1:\n                r -= 1\n                res += self.tree[r][0]\n                coun += self.tree[r][1]\n\n            l >>= 1\n            r >>= 1\n\n        return res, coun\n\n    def update(self, ix, val):\n        ix = self.n + self.order[ix]\n\n        # set new value\n        self.tree[ix][0] += val\n        self.tree[ix][1] += 1\n\n        # move up\n        while ix > 1:\n            self.tree[ix >> 1][0] = self.tree[ix][0] + self.tree[ix ^ 1][0]\n            self.tree[ix >> 1][1] = self.tree[ix][1] + self.tree[ix ^ 1][1]\n            ix >>= 1\n\n\ninput = fast2()\nrints = lambda: [int(x) for x in input().split()]\nn, a = int(input()), sorted(map(lambda x, y: [x, y], rints(), rints()))\ndis = sorted(set([x[1] for x in a]))\ntree, ans = order_tree(dis), 0\n\nfor i in range(n - 1, -1, -1):\n    su, coun = tree.query(a[i][1])\n    ans += su - coun * a[i][0]\n    tree.update(a[i][1], a[i][0])\n\nprint(ans)\n",
    "prob_desc_created_at": "1582554900",
    "tags": [
        "data structures",
        "implementation",
        "sortings",
        "divide and conquer"
    ],
    "hidden_unit_tests": ""
}