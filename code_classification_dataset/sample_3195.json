{
    "prob_desc_time_limit": "4 seconds",
    "prob_desc_sample_outputs": "[\"1 3 4 3 3\", \"1 4 1 1 2 4 2\"]",
    "src_uid": "c412a489a0bd2327a46f1e47a78fd03f",
    "prob_desc_notes": "NoteIn the first sample case, the following paths are palindromic:2 - 3 - 42 - 3 - 54 - 3 - 5Additionally, all paths containing only one vertex are palindromic. Listed below are a few paths in the first sample that are not palindromic:1 - 2 - 31 - 2 - 3 - 41 - 2 - 3 - 5",
    "prob_desc_description": "You are given a tree (a connected acyclic undirected graph) of n vertices. Vertices are numbered from 1 to n and each vertex is assigned a character from a to t.A path in the tree is said to be palindromic if at least one permutation of the labels in the path is a palindrome.For each vertex, output the number of palindromic paths passing through it. Note: The path from vertex u to vertex v is considered to be the same as the path from vertex v to vertex u, and this path will be counted only once for each of the vertices it passes through.",
    "prob_desc_output_spec": "Print n integers in a single line, the i-th of which is the number of palindromic paths passing through vertex i in the tree.",
    "prob_desc_input_spec": "The first line contains an integer n (2 ≤ n ≤ 2·105)  — the number of vertices in the tree. The next n - 1 lines each contain two integers u and v (1  ≤  u, v  ≤  n, u ≠ v) denoting an edge connecting vertex u and vertex v. It is guaranteed that the given graph is a tree. The next line contains a string consisting of n lowercase characters from a to t where the i-th (1 ≤ i ≤ n) character is the label of vertex i in the tree.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_046.jsonl",
    "code_uid": "ab65d0f5f4b80c415ac227c484f30272",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n1 2\\n2 3\\n3 4\\n3 5\\nabcbb\", \"7\\n6 2\\n4 3\\n3 7\\n5 2\\n7 2\\n1 4\\nafefdfs\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nrange = xrange\ninput = raw_input\n \ndef centroid_decomp(coupl):\n    n = len(coupl)\n    \n    bfs = [n - 1]\n    for node in bfs:\n        bfs += coupl[node]\n        for nei in coupl[node]:\n            coupl[nei].remove(node)\n    \n    size = [0] * n\n    for node in reversed(bfs):\n        size[node] = 1 + sum(size[child] for child in coupl[node])\n \n    def centroid_reroot(root):\n        N = size[root]\n        while True:\n            for child in coupl[root]:\n                if size[child] > N // 2:\n                    size[root] = N - size[child]\n                    coupl[root].remove(child)\n                    coupl[child].append(root)\n                    root = child\n                    break\n            else:\n                return root\n        \n    bfs = [n - 1]\n    for node in bfs:\n        centroid = centroid_reroot(node)\n        bfs += coupl[centroid]\n        yield centroid\n \ninp = sys.stdin.read().split(); ii = 0\n \nn = int(inp[ii]); ii += 1\ncoupl = [[] for _ in range(n)]\nfor _ in range(n - 1):\n    u = int(inp[ii]) - 1; ii += 1\n    v = int(inp[ii]) - 1; ii += 1\n    \n    coupl[u].append(v)\n    coupl[v].append(u)\n \nA = [1 << ord(c) - ord('a') for c in inp[ii]]; ii += 1\npalistates = [0] + [1 << i for i in range(20)]\n \nans = [0.0] * n\ndp = [0.0] * n\nval = [0] * n\ncounter = [0] * (1 << 20)\n \nfor centroid in centroid_decomp(coupl):\n    bfss = []\n    for root in coupl[centroid]:\n        bfs = [root]\n        for node in bfs:\n            bfs += coupl[node]\n        bfss.append(bfs)\n        \n        for node in bfs:\n            val[node] ^= A[node]\n            for child in coupl[node]:\n                val[child] = val[node]\n    \n    entire_bfs = [centroid]\n    for bfs in bfss:\n        entire_bfs += bfs\n \n    for node in entire_bfs:\n        val[node] ^= A[centroid]\n        counter[val[node]] += 1\n \n    for bfs in bfss:\n        for node in bfs:\n            counter[val[node]] -= 1\n \n        for node in bfs:\n            v = val[node] ^ A[centroid]\n            for p in palistates:\n                dp[node] += counter[v ^ p]\n \n        for node in bfs:\n            counter[val[node]] += 1\n \n    for node in reversed(entire_bfs):\n        dp[node] += sum(dp[child] for child in coupl[node])\n \n    dp[centroid] += 1\n    for p in palistates:\n        dp[centroid] += counter[p]\n    dp[centroid] //= 2\n \n    for node in entire_bfs:\n        ans[node] += dp[node]\n        counter[val[node]] = val[node] = 0\n        dp[node] = 0.0\n    \nprint ' '.join(str(int(x)) for x in ans)\n",
    "prob_desc_created_at": "1516462500",
    "tags": [
        "data structures",
        "bitmasks",
        "trees",
        "divide and conquer"
    ],
    "hidden_unit_tests": ""
}