{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\", \"3\"]",
    "src_uid": "40a965a28e38bad3aff9c58bdeeeb8f6",
    "prob_desc_notes": null,
    "prob_desc_description": "Further research on zombie thought processes yielded interesting results. As we know from the previous problem, the nervous system of a zombie consists of n brains and m brain connectors joining some pairs of brains together. It was observed that the intellectual abilities of a zombie depend mainly on the topology of its nervous system. More precisely, we define the distance between two brains u and v (1 ≤ u, v ≤ n) as the minimum number of brain connectors used when transmitting a thought between these two brains. The brain latency of a zombie is defined to be the maximum distance between any two of its brains. Researchers conjecture that the brain latency is the crucial parameter which determines how smart a given zombie is. Help them test this conjecture by writing a program to compute brain latencies of nervous systems.In this problem you may assume that any nervous system given in the input is valid, i.e., it satisfies conditions (1) and (2) from the easy version.",
    "prob_desc_output_spec": "Print one number – the brain latency.",
    "prob_desc_input_spec": "The first line of the input contains two space-separated integers n and m (1 ≤ n, m ≤ 100000) denoting the number of brains (which are conveniently numbered from 1 to n) and the number of brain connectors in the nervous system, respectively. In the next m lines, descriptions of brain connectors follow. Every connector is given as a pair of brains a b it connects (1 ≤ a, b ≤ n and a ≠ b).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_004.jsonl",
    "code_uid": "5000894a71456b418e95fea3047708d8",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 3\\n1 2\\n1 3\\n1 4\", \"5 4\\n1 2\\n2 3\\n3 4\\n3 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "# itne me hi thakk gaye?\ndef bfs(x, g):\n    n, q = len(g), [x]\n    dist = [0 if y == x else -1 for y in range(n)]\n    i = 0\n    while i < len(q):\n        v = q[i]\n        i += 1\n        for to in g[v]:\n            if dist[to] < 0:\n                dist[to] = dist[v] + 1\n                q.append(to)\n    return (q[-1], dist[q[-1]])\n \nn, m = map(int, input().split())\ng = [[] for _ in range(n)]\n \nfor _ in range(m):\n    a, b = map(lambda x: int(x) - 1, input().split())\n    g[a].append(b)\n    g[b].append(a)\n \nprint(bfs(bfs(0, g)[0], g)[1])",
    "prob_desc_created_at": "1468137600",
    "tags": [
        "dfs and similar",
        "trees",
        "graphs"
    ],
    "hidden_unit_tests": ""
}