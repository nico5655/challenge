{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"13\\n0\\n68\\n0\\n74\"]",
    "src_uid": "7f9853be7ac857bb3c4eb17e554ad3f1",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given a keyboard that consists of $$$26$$$ keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.You have to type the word $$$s$$$ on this keyboard. It also consists only of lowercase Latin letters.To type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.Moving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.For example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions $$$8$$$, $$$5$$$, $$$12$$$ and $$$15$$$, respectively. Therefore, it will take $$$|5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13$$$ units of time to type the word \"hello\". Determine how long it will take to print the word $$$s$$$.",
    "prob_desc_output_spec": "Print $$$t$$$ lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word $$$s$$$ on the given keyboard.",
    "prob_desc_input_spec": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases. The next $$$2t$$$ lines contain descriptions of the test cases. The first line of a description contains a keyboard — a string of length $$$26$$$, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard. The second line of the description contains the word $$$s$$$. The word has a length from $$$1$$$ to $$$50$$$ letters inclusive and consists of lowercase Latin letters.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_108.jsonl",
    "code_uid": "836b9894e221f19e58fa751c335a7986",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\nabcdefghijklmnopqrstuvwxyz\\nhello\\nabcdefghijklmnopqrstuvwxyz\\ni\\nabcdefghijklmnopqrstuvwxyz\\ncodeforces\\nqwertyuiopasdfghjklzxcvbnm\\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\\nqwertyuiopasdfghjklzxcvbnm\\nabacaba\"]",
    "exec_outcome": "PASSED",
    "source_code": "t = int(input())\r\nfor j in range(t):\r\n    letters = str(input())\r\n    s = str(input())\r\n    dictiony = {}\r\n    calculating = []\r\n    word = []\r\n    sum = 0\r\n    for m in s:\r\n        word.append(m)\r\n    for i in letters:\r\n        dictiony[i] = letters.index(i)\r\n    for k in word:\r\n        calculating.append(dictiony.get(k))\r\n    n = 0\r\n    while n != (len(word)-1) and len(s) > 0:\r\n        calc = abs(calculating[n + 1] - calculating[n])\r\n        sum += calc\r\n        n += 1\r\n    print(sum)\r\n\r\n",
    "prob_desc_created_at": "1635863700",
    "tags": [
        "implementation",
        "strings"
    ],
    "hidden_unit_tests": ""
}