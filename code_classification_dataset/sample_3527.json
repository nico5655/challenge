{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\\n1\\n18\\n19\", \"NO\", \"YES\\n12224\\n12225\\n12226\\n20000\\n100000\"]",
    "src_uid": "7e0ba313c557cb6b61ba57559e73a2bb",
    "prob_desc_notes": null,
    "prob_desc_description": "Peter wrote on the board a strictly increasing sequence of positive integers a1, a2, ..., an. Then Vasil replaced some digits in the numbers of this sequence by question marks. Thus, each question mark corresponds to exactly one lost digit.Restore the the original sequence knowing digits remaining on the board.",
    "prob_desc_output_spec": "If the answer exists, print in the first line \"YES\" (without the quotes). Next n lines must contain the sequence of positive integers — a possible variant of Peter's sequence. The found sequence must be strictly increasing, it must be transformed from the given one by replacing each question mark by a single digit. All numbers on the resulting sequence must be written without leading zeroes. If there are multiple solutions, print any of them. If there is no answer, print a single line \"NO\" (without the quotes).",
    "prob_desc_input_spec": "The first line of the input contains integer n (1 ≤ n ≤ 105) — the length of the sequence. Next n lines contain one element of the sequence each. Each element consists only of digits and question marks. No element starts from digit 0. Each element has length from 1 to 8 characters, inclusive.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_066.jsonl",
    "code_uid": "b231443ec626de2fb27d81a10646d917",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n?\\n18\\n1?\", \"2\\n??\\n?\", \"5\\n12224\\n12??5\\n12226\\n?0000\\n?00000\"]",
    "exec_outcome": "PASSED",
    "source_code": "def solve(s, t, i, l):\n    if i == l:\n        return False\n    if s[i] == \"?\":\n        if solve(s, t, i + 1, l):\n            s[i] = t[i]\n            return True\n        elif t[i] == \"9\":\n            return False\n        s[i] = nxt[t[i]]\n        for j in range(i, l):\n            if s[j] == \"?\":\n                s[j] = \"0\"\n        return True\n    elif s[i] > t[i]:\n        for j in range(i, l):\n            if s[j] == \"?\":\n                s[j] = \"0\"\n        return True\n    elif s[i] < t[i]:\n        return False\n    else:\n        return solve(s, t, i + 1, l)\n\n\nn = int(input())\na = [list(input()) for _ in range(n)]\np = [\"0\"]\nnxt = {str(x): str(x + 1) for x in range(9)}\n\nfor i, ai in enumerate(a):\n    if len(p) > len(ai):\n        print(\"NO\")\n        break\n    if len(p) < len(ai):\n        if a[i][0] == \"?\":\n            a[i][0] = \"1\"\n        for j in range(len(ai)):\n            if a[i][j] == \"?\":\n                a[i][j] = \"0\"\n    elif not solve(a[i], p, 0, len(ai)):\n        print(\"NO\")\n        break\n    p = a[i]\nelse:\n    print(\"YES\")\n    print(\"\\n\".join(\"\".join(line) for line in a))",
    "prob_desc_created_at": "1416733800",
    "tags": [
        "binary search",
        "implementation",
        "greedy",
        "brute force"
    ],
    "hidden_unit_tests": ""
}