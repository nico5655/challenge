{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"2\", \"3\"]",
    "src_uid": "e9f4582601a4296a53b77678589d09ef",
    "prob_desc_notes": "NoteIn the first sample, one of the optimal p is [4, 3, 2, 1].",
    "prob_desc_description": "DZY loves planting, and he enjoys solving tree problems.DZY has a weighted tree (connected undirected graph without cycles) containing n nodes (they are numbered from 1 to n). He defines the function g(x, y) (1 ≤ x, y ≤ n) as the longest edge in the shortest path between nodes x and y. Specially g(z, z) = 0 for every z.For every integer sequence p1, p2, ..., pn (1 ≤ pi ≤ n), DZY defines f(p) as . DZY wants to find such a sequence p that f(p) has maximum possible value. But there is one more restriction: the element j can appear in p at most xj times.Please, find the maximum possible f(p) under the described restrictions.",
    "prob_desc_output_spec": "Print a single integer representing the answer.",
    "prob_desc_input_spec": "The first line contains an integer n (1 ≤ n ≤ 3000). Each of the next n - 1 lines contains three integers ai, bi, ci (1 ≤ ai, bi ≤ n; 1 ≤ ci ≤ 10000), denoting an edge between ai and bi with length ci. It is guaranteed that these edges form a tree. Each of the next n lines describes an element of sequence x. The j-th line contains an integer xj (1 ≤ xj ≤ n).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2700,
    "file_name": "train_038.jsonl",
    "code_uid": "6ad40aae202ef155985c57e52078c11c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n1 2 1\\n2 3 2\\n3 4 3\\n1\\n1\\n1\\n1\", \"4\\n1 2 1\\n2 3 2\\n3 4 3\\n4\\n4\\n4\\n4\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input())\nedges = [[int(x) for x in input().split()] for i in range(n-1)]\nedges = sorted(edges)\nuse_count = [0]+[int(input()) for i in range(n)]\nlo,hi = 0,10000\ndef getpar(par,u):\n    if par[par[u]] == par[u]:\n        return par[u]\n    par[u] = getpar(par,par[u])\n    return par[u]\ndef unite(par,sz,use,u,v):\n    u = getpar(par,u)\n    v = getpar(par,v)\n    par[u] = v\n    sz[v] += sz[u]\n    use[v] += use[u]\ndef solve(fp):\n    par = [i for i in range(n+1)]\n    sz = [1 for i in range(n+1)]\n    use = [use_count[i] for i in range(n+1)]\n    for edge in edges:\n        if edge[2] < fp:\n            unite(par,sz,use,edge[0],edge[1])\n    total_use = sum(use_count)\n    for i in range(n+1):\n        p = getpar(par,i)\n        if(p == i):\n            if(total_use - use[p] < sz[p]):\n                return False\n    return True\nwhile lo < hi:\n    mid = (lo+hi+1)//2\n    if solve(mid):\n        lo = mid\n    else:\n        hi = mid-1\nprint(lo)\n",
    "prob_desc_created_at": "1404651900",
    "tags": [
        "dsu",
        "binary search",
        "trees"
    ],
    "hidden_unit_tests": ""
}