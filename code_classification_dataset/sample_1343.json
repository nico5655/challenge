{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\\n0\\n4\\n-1\\n599998\\n99999999999\\n7997\"]",
    "src_uid": "ab6b790554ae6f7b83c7a0d10959890d",
    "prob_desc_notes": null,
    "prob_desc_description": "Let $$$f(x)$$$ be the sum of digits of a decimal number $$$x$$$.Find the smallest non-negative integer $$$x$$$ such that $$$f(x) + f(x + 1) + \\dots + f(x + k) = n$$$.",
    "prob_desc_output_spec": "For each test case, print one integer without leading zeroes. If there is no such $$$x$$$ that $$$f(x) + f(x + 1) + \\dots + f(x + k) = n$$$, print $$$-1$$$; otherwise, print the minimum $$$x$$$ meeting that constraint.",
    "prob_desc_input_spec": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 150$$$) â€” the number of test cases. Each test case consists of one line containing two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 150$$$, $$$0 \\le k \\le 9$$$). ",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_008.jsonl",
    "code_uid": "93bad09dd2919d7ca18bcda77b1d8134",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"7\\n1 0\\n1 1\\n42 7\\n13 7\\n99 1\\n99 0\\n99 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "def sumDigits(x):\n    if (x == 0):\n        return 0 \n    return x % 10 + sumDigits(x // 10)\n\ndef create(x):\n    ans = \"\"\n    while (x >= 9):\n        ans = \"9\" + ans \n        x -= 9 \n    ans = str(x) + ans \n    return int(ans)\n\ndef create_ex(x, y):\n    track = -1\n    for i in range(9, x + 1, 9):\n        r = x - i \n        if (r + 1 == y):\n            track = i \n    if (track == -1):\n        return -1 \n    r = x - track\n    ans = 0  \n    if (r < 9):\n        ans = r \n    else: \n        ans = create(r - 8) * 10 + 8 \n    ans *= (10 ** (track // 9))\n    ans += create(track)\n    return ans \n\npreResult = {} \nfor i in range(100):\n    s = 0\n    for k in range(10):\n        s += sumDigits(i + k)\n        if (s <= 150 and (s, k) not in preResult):\n            preResult[(s, k)] = i \n\n\npre = [[-1 for i in range(152)] for j in range(152)]\n\nfor x in range(1, 151):\n    pre[x][x] = create(x) \n    if (x != 150):\n        if (x < 9):\n            pre[x][x + 1] = x \n        else:\n            pre[x][x + 1] = create(x - 8) * 10 + 8 \n    for y in range(1, x):\n        pre[x][y] = create_ex(x, y)\n\n\ndef update(x, maybe):\n    if (x == -1):\n        return maybe \n    if (x > maybe):\n        return maybe \n    return x \ndef solve():\n    n, k = input().strip().split(' ')\n    n = int(n)\n    k = int(k)\n    if ((n, k) in preResult):\n        return preResult[(n, k)]\n    \n    ans = -1 \n    for st in range(10):\n        rem = n \n        flag = False \n        p1 = 0\n        p2 = 0\n        for i in range(k + 1):\n            flag = flag | (st + i > 9)\n            rem -= (st + i) % 10 \n            p1 += (st + i <= 9)\n            p2 += (st + i > 9)\n        if (rem <= 0):\n            continue \n        if (flag):\n            for x in range(1, 151):\n                if (rem - x * p1 <= 0):\n                    break \n                r = rem - x * p1 \n                if (r % p2 != 0):\n                    continue \n                r //= p2 \n                if (pre[x][r] == -1):\n                    continue    \n                if (x == r):\n                    continue\n                ans = update(ans, pre[x][r] * 10 + st)\n           #     print(\"have flag\", ans)\n        else:\n            if (rem % (k + 1) != 0):\n                continue \n            r = rem // (k + 1)\n            if (pre[r][r] == -1):\n                continue \n            ans = update(ans, pre[r][r] * 10 + st)\n        #    print(\"no flag\", ans) \n    return ans \n\nt = int(input())\n\nfor iter in range(t):\n    ans = solve()\n    print(ans)\n\n\n",
    "prob_desc_created_at": "1593095700",
    "tags": [
        "dp",
        "constructive algorithms",
        "greedy",
        "brute force"
    ],
    "hidden_unit_tests": ""
}