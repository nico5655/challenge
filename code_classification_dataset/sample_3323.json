{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"16\\n4\\n4\\n4\\n0\", \"36\\n4\\n16\\n16\\n16\", \"64\\n0\\n16\\n4\\n16\\n4\\n36\\n0\"]",
    "src_uid": "d23962d9bd6f3153e515f31370d0d774",
    "prob_desc_notes": "NotePicture for the first test:The pictures from the left to the right corresponds to the options. The border of the sub-rectangle in the option is marked with black, the border of the sub-square with the maximal possible size, that can be cut is marked with gray.",
    "prob_desc_description": "Warawreh created a great company called Nanosoft. The only thing that Warawreh still has to do is to place a large picture containing its logo on top of the company's building.The logo of Nanosoft can be described as four squares of the same size merged together into one large square. The top left square is colored with red, the top right square is colored with green, the bottom left square is colored with yellow and the bottom right square is colored with blue.An Example of some correct logos:An Example of some incorrect logos:Warawreh went to Adhami's store in order to buy the needed picture. Although Adhami's store is very large he has only one picture that can be described as a grid of $$$n$$$ rows and $$$m$$$ columns. The color of every cell in the picture will be green (the symbol 'G'), red (the symbol 'R'), yellow (the symbol 'Y') or blue (the symbol 'B').Adhami gave Warawreh $$$q$$$ options, in every option he gave him a sub-rectangle from that picture and told him that he can cut that sub-rectangle for him. To choose the best option, Warawreh needs to know for every option the maximum area of sub-square inside the given sub-rectangle that can be a Nanosoft logo. If there are no such sub-squares, the answer is $$$0$$$.Warawreh couldn't find the best option himself so he asked you for help, can you help him?",
    "prob_desc_output_spec": "For every option print the maximum area of sub-square inside the given sub-rectangle, which can be a NanoSoft Logo. If there are no such sub-squares, print $$$0$$$.",
    "prob_desc_input_spec": "The first line of input contains three integers $$$n$$$, $$$m$$$ and $$$q$$$ $$$(1 \\leq n , m \\leq 500, 1 \\leq q \\leq 3 \\cdot 10^{5})$$$  — the number of row, the number columns and the number of options. For the next $$$n$$$ lines, every line will contain $$$m$$$ characters. In the $$$i$$$-th line the $$$j$$$-th character will contain the color of the cell at the $$$i$$$-th row and $$$j$$$-th column of the Adhami's picture. The color of every cell will be one of these: {'G','Y','R','B'}. For the next $$$q$$$ lines, the input will contain four integers $$$r_1$$$, $$$c_1$$$, $$$r_2$$$ and $$$c_2$$$ $$$(1 \\leq r_1 \\leq r_2 \\leq n, 1 \\leq c_1 \\leq c_2 \\leq m)$$$. In that option, Adhami gave to Warawreh a sub-rectangle of the picture with the upper-left corner in the cell $$$(r_1, c_1)$$$ and with the bottom-right corner in the cell $$$(r_2, c_2)$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2500,
    "file_name": "train_053.jsonl",
    "code_uid": "d916be36aafea684d86a2063cad59bbc",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"5 5 5\\nRRGGB\\nRRGGY\\nYYBBG\\nYYBBR\\nRBBRG\\n1 1 5 5\\n2 2 5 5\\n2 2 3 3\\n1 1 3 5\\n4 4 5 5\", \"6 10 5\\nRRRGGGRRGG\\nRRRGGGRRGG\\nRRRGGGYYBB\\nYYYBBBYYBB\\nYYYBBBRGRG\\nYYYBBBYBYB\\n1 1 6 10\\n1 3 3 10\\n2 2 6 6\\n1 7 6 10\\n2 1 5 10\", \"8 8 8\\nRRRRGGGG\\nRRRRGGGG\\nRRRRGGGG\\nRRRRGGGG\\nYYYYBBBB\\nYYYYBBBB\\nYYYYBBBB\\nYYYYBBBB\\n1 1 8 8\\n5 2 5 7\\n3 1 8 6\\n2 3 5 8\\n1 2 6 8\\n2 1 5 5\\n2 1 7 7\\n6 5 7 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nreadline = sys.stdin.readline\n\ndef accumulate2d(X):\n    N = len(X)\n    M = len(X[0])\n    \n    for i in range(0, N):\n        for j in range(1, M):\n            X[i][j] += X[i][j-1]\n    \n    for j in range(0, M):\n        for i in range(1, N):\n            X[i][j] += X[i-1][j]\n    \n    return X\n\nN, M, Q = map(int, readline().split())\ntable = [None]*100\ntable[ord('R')] = 0\ntable[ord('G')] = 1\ntable[ord('B')] = 2\ntable[ord('Y')] = 3\n\nINF = 10**3\nD = [[table[ord(s)] for s in readline().strip()] for _ in range(N)]\nG = [[0]*M for _ in range(N)]\n\nBS = 25\ncandi = []\ngeta = M\nfor i in range(N-1):\n    for j in range(M-1):\n        if D[i][j] == 0 and D[i][j+1] == 1 and D[i+1][j+1] == 2 and D[i+1][j] == 3:\n            G[i][j] = 1\n            nh, nw = i, j\n            while True:\n                k = G[nh][nw]\n                fh, fw = nh-k, nw-k\n                k2 = 2*(k+1)\n                kh = k+1\n                if fh < 0 or fw < 0 or N < fh+k2-1 or M < fw+k2-1:\n                    break\n                if any(D[fh][j] != 0 for j in range(fw, fw+kh)) or\\\n                any(D[j][fw] != 0 for j in range(fh, fh+kh)) or\\\n                any(D[fh][j] != 1 for j in range(fw+kh, fw+k2)) or\\\n                any(D[j][fw+k2-1] != 1 for j in range(fh, fh+kh)) or\\\n                any(D[j][fw+k2-1] != 2 for j in range(fh+kh, fh+k2)) or\\\n                any(D[fh+k2-1][j] != 2 for j in range(fw+kh, fw+k2)) or\\\n                any(D[fh+k2-1][j] != 3 for j in range(fw, fw+kh)) or\\\n                any(D[j][fw] != 3 for j in range(fh+kh, fh+k2)):\n                    break\n                G[nh][nw] += 1\n            if G[nh][nw] > BS:\n                candi.append((nh, nw))\n\n \nGnum = [None] + [[[0]*M for _ in range(N)] for _ in range(BS)]\nfor h in range(N):\n    for w in range(M):\n        if G[h][w] > 0:\n            for k in range(1, min(BS, G[h][w])+1):\n                Gnum[k][h][w] = 1\n\nGnum = [None] + [accumulate2d(g) for g in Gnum[1:]]\n\n\nAns = [None]*Q\nfor qu in range(Q):\n    h1, w1, h2, w2 = map(lambda x: int(x)-1, readline().split())\n    res = 0\n    for k in range(min(BS, h2-h1+1, w2-w1+1), 0, -1):\n        hs, ws = h1+k-1, w1+k-1\n        he, we = h2-k, w2-k\n        if hs <= he and ws <= we:\n            cnt = Gnum[k][he][we]\n            if hs:\n                cnt -= Gnum[k][hs-1][we]\n            if ws:\n                cnt -= Gnum[k][he][ws-1]\n            if hs and ws:\n                cnt += Gnum[k][hs-1][ws-1]\n            if cnt:\n                res = k\n                break\n    \n    for nh, nw in candi:\n        if h1 <= nh <= h2 and w1 <= nw <= w2:\n            res = max(res, min(nh-h1+1, h2-nh, nw-w1+1, w2-nw, G[nh][nw]))\n    Ans[qu] = 4*res**2\nprint('\\n'.join(map(str, Ans)))",
    "prob_desc_created_at": "1581604500",
    "tags": [
        "dp",
        "binary search",
        "implementation",
        "data structures"
    ],
    "hidden_unit_tests": ""
}