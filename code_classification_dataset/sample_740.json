{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\", \"NO\"]",
    "src_uid": "7db0b870177e7d7b01da083e21ba35f5",
    "prob_desc_notes": null,
    "prob_desc_description": "According to rules of the Berland fashion, a jacket should be fastened by all the buttons except only one, but not necessarily it should be the last one. Also if the jacket has only one button, it should be fastened, so the jacket will not swinging open.You are given a jacket with n buttons. Determine if it is fastened in a right way.",
    "prob_desc_output_spec": "In the only line print the word \"YES\" if the jacket is fastened in a right way. Otherwise print the word \"NO\".",
    "prob_desc_input_spec": "The first line contains integer n (1 ≤ n ≤ 1000) — the number of buttons on the jacket. The second line contains n integers ai (0 ≤ ai ≤ 1). The number ai = 0 if the i-th button is not fastened. Otherwise ai = 1.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1000,
    "file_name": "train_003.jsonl",
    "code_uid": "e9a3c399f7819d8747ac74e296db6354",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n1 0 1\", \"3\\n1 0 0\"]",
    "exec_outcome": "PASSED",
    "source_code": "#!/usr/bin/env python\n#-*- coding:utf-8 -*-\n\nimport sys, math, random, operator\nfrom string import ascii_lowercase\nfrom string import ascii_uppercase\nfrom fractions import Fraction, gcd\nfrom decimal import Decimal, getcontext\nfrom itertools import product, permutations, combinations\nfrom Queue import Queue, PriorityQueue\nfrom collections import deque, defaultdict, Counter\ngetcontext().prec = 100\n\nMOD = 10**9 + 7\nINF = float(\"+inf\")\n\nif sys.subversion[0] != \"CPython\":  # PyPy?\n    raw_input = lambda: sys.stdin.readline().rstrip()\npr = lambda *args: sys.stdout.write(\" \".join(str(x) for x in args) + \"\\n\")\nepr = lambda *args: sys.stderr.write(\" \".join(str(x) for x in args) + \"\\n\")\ndie = lambda *args: pr(*args) ^ exit(0)\n\nread_str = raw_input\nread_strs = lambda: raw_input().split()\nread_int = lambda: int(raw_input())\nread_ints = lambda: map(int, raw_input().split())\nread_float = lambda: float(raw_input())\nread_floats = lambda: map(float, raw_input().split())\n\n\"---------------------------------------------------------------\"\n\n# abcdefghijklmnopqrstuvwxyz\n# ABCDEFGHIJKLMNOPQRSTUVWXYZ\n# pairs = \"bd\n# sym = \"AHIMOTUVWXYilmn\n\nn = read_int()\narr = read_ints()\nif arr == [1] or len(arr) > 1 and sum(arr) == len(arr) - 1:\n    print \"YES\"\nelse:\n    print \"NO\"\n\n",
    "prob_desc_created_at": "1468425600",
    "tags": [
        "implementation"
    ],
    "hidden_unit_tests": ""
}