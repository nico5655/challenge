{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"2 4 2 0\"]",
    "src_uid": "8543bcd08ec0bbbf9a0a3682468287f4",
    "prob_desc_notes": "NoteThe minimal possible total cost is $$$566 \\cdot 1+239 \\cdot 1+30 \\cdot 1+1 \\cdot 2+1 \\cdot 2=839$$$:  ",
    "prob_desc_description": "Julia's $$$n$$$ friends want to organize a startup in a new country they moved to. They assigned each other numbers from 1 to $$$n$$$ according to the jobs they have, from the most front-end tasks to the most back-end ones. They also estimated a matrix $$$c$$$, where $$$c_{ij} = c_{ji}$$$ is the average number of messages per month between people doing jobs $$$i$$$ and $$$j$$$.Now they want to make a hierarchy tree. It will be a binary tree with each node containing one member of the team. Some member will be selected as a leader of the team and will be contained in the root node. In order for the leader to be able to easily reach any subordinate, for each node $$$v$$$ of the tree, the following should apply: all members in its left subtree must have smaller numbers than $$$v$$$, and all members in its right subtree must have larger numbers than $$$v$$$.After the hierarchy tree is settled, people doing jobs $$$i$$$ and $$$j$$$ will be communicating via the shortest path in the tree between their nodes. Let's denote the length of this path as $$$d_{ij}$$$. Thus, the cost of their communication is $$$c_{ij} \\cdot d_{ij}$$$.Your task is to find a hierarchy tree that minimizes the total cost of communication over all pairs: $$$\\sum_{1 \\le i &lt; j \\le n} c_{ij} \\cdot d_{ij}$$$.",
    "prob_desc_output_spec": "Output a description of a hierarchy tree that minimizes the total cost of communication. To do so, for each team member from 1 to $$$n$$$ output the number of the member in its parent node, or 0 for the leader. If there are many optimal trees, output a description of any one of them.",
    "prob_desc_input_spec": "The first line contains an integer $$$n$$$ ($$$1 \\le n \\le 200$$$) – the number of team members organizing a startup. The next $$$n$$$ lines contain $$$n$$$ integers each, $$$j$$$-th number in $$$i$$$-th line is $$$c_{ij}$$$ — the estimated number of messages per month between team members $$$i$$$ and $$$j$$$ ($$$0 \\le c_{ij} \\le 10^9; c_{ij} = c_{ji}; c_{ii} = 0$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_091.jsonl",
    "code_uid": "649315f68598a26f2a9b26cc6dd8f7e1",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n0 566 1 0\\n566 0 239 30\\n1 239 0 1\\n0 30 1 0\"]",
    "exec_outcome": "PASSED",
    "source_code": "n=int(input())\r\nc=[]\r\nfor _ in range(n):\r\n    c.append(tuple(map(int,input().split())))\r\nprefix_sum=[[0]*(n+1) for _ in range(n+1)]\r\nfor i in range(1,n+1):\r\n    temp=0\r\n    for j in range(1,n+1):\r\n        temp+=c[i-1][j-1]\r\n        prefix_sum[i][j]+=prefix_sum[i-1][j]+temp\r\ndef get_rectangel_sum(x1,y1,x2,y2):\r\n    return prefix_sum[x2+1][y2+1]-prefix_sum[x1][y2+1]-prefix_sum[x2+1][y1]+prefix_sum[x1][y1]\r\ndef cost(x,y):\r\n    if x>y:\r\n        return 0\r\n    a=get_rectangel_sum(x,0,y,x-1) if x!=0 else 0\r\n    b=get_rectangel_sum(x,y+1,y,n-1) if y!=n-1 else 0\r\n    return a+b\r\ndp=[[float(\"INF\")]*n for _ in range(n)]\r\nbest_root_for_range=[[-1]*n for _ in range(n)]\r\nfor i in range(n):\r\n    dp[i][i]=0\r\n    best_root_for_range[i][i]=i\r\ndef get_dp_cost(x,y):\r\n    return dp[x][y] if x<=y else 0\r\nfor length in range(1,n):\r\n    # actual length is length+1\r\n    for i in range(n-length):\r\n        j=i+length\r\n        for root in range(i,j+1):\r\n            temp=cost(i,root-1)+cost(root+1,j)+get_dp_cost(i,root-1)+get_dp_cost(root+1,j)\r\n            if temp<dp[i][j]:\r\n                dp[i][j]=temp\r\n                best_root_for_range[i][j]=root\r\nans=[-1]*n\r\ndef assign_ans(ansecstor,x,y):\r\n    if x>y:\r\n        return\r\n    root=best_root_for_range[x][y]\r\n    ans[root]=ansecstor\r\n    assign_ans(root,x,root-1)\r\n    assign_ans(root,root+1,y)\r\nassign_ans(-1,0,n-1)\r\nprint(*[i+1 for i in ans])\r\n\r\n# 3\r\n# 0 1 2\r\n# 1 0 3\r\n# 2 3 0\r\n\r\n# 4\r\n# 0 1 2 3\r\n# 1 0 5 7\r\n# 2 5 0 4\r\n# 3 7 4 0\r\n\r\n# 6\r\n# 0 100 20 37 14 73\r\n# 100 0 17 13 20 2\r\n# 20 17 0 1093 900 1\r\n# 37 13 1093 0 2 4\r\n# 14 20 900 2 0 1\r\n# 73 2 1 4 1 0",
    "prob_desc_created_at": "1649837100",
    "tags": [
        "constructive algorithms",
        "dp",
        "shortest paths",
        "trees"
    ],
    "hidden_unit_tests": ""
}