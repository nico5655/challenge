{
    "prob_desc_time_limit": "1.5 seconds",
    "prob_desc_sample_outputs": "[\"9 18 17\", \"2\", \"5 18 31 20\"]",
    "src_uid": "c3120f96894c17957bd8acb968bf37cd",
    "prob_desc_notes": null,
    "prob_desc_description": "Greg has an array a = a1, a2, ..., an and m operations. Each operation looks as: li, ri, di, (1 ≤ li ≤ ri ≤ n). To apply operation i to the array means to increase all array elements with numbers li, li + 1, ..., ri by value di.Greg wrote down k queries on a piece of paper. Each query has the following form: xi, yi, (1 ≤ xi ≤ yi ≤ m). That means that one should apply operations with numbers xi, xi + 1, ..., yi to the array.Now Greg is wondering, what the array a will be after all the queries are executed. Help Greg.",
    "prob_desc_output_spec": "On a single line print n integers a1, a2, ..., an — the array after executing all the queries. Separate the printed numbers by spaces. Please, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams of the %I64d specifier.",
    "prob_desc_input_spec": "The first line contains integers n, m, k (1 ≤ n, m, k ≤ 105). The second line contains n integers: a1, a2, ..., an (0 ≤ ai ≤ 105) — the initial array. Next m lines contain operations, the operation number i is written as three integers: li, ri, di, (1 ≤ li ≤ ri ≤ n), (0 ≤ di ≤ 105). Next k lines contain the queries, the query number i is written as two integers: xi, yi, (1 ≤ xi ≤ yi ≤ m). The numbers in the lines are separated by single spaces.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_004.jsonl",
    "code_uid": "ba4830c0eb6170cab1e6bca94d2fc39e",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 3 3\\n1 2 3\\n1 2 1\\n1 3 2\\n2 3 4\\n1 2\\n1 3\\n2 3\", \"1 1 1\\n1\\n1 1 1\\n1 1\", \"4 3 6\\n1 2 3 4\\n1 2 1\\n2 3 2\\n3 4 4\\n1 2\\n1 3\\n2 3\\n1 2\\n1 3\\n2 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin, stdout\n\nn, m, k = map(int, stdin.readline().split())\nt = list(map(int, stdin.readline().split()))\np = [tuple(map(int, stdin.readline().split())) for i in range(m)]\n\nr, s = [0] * (m + 1), [0] * (n + 1)\nR, S = 0, 0\n\nfor i in range(k):\n    x, y = map(int, stdin.readline().split())\n    r[x - 1] += 1\n    r[y] -= 1\n\nfor i, (x, y, d) in enumerate(p):\n    R += r[i]\n    d = d * R\n    s[x - 1] += d\n    s[y] -= d\n\nfor i in range(n):\n    S += s[i]\n    t[i] = str(t[i] + S)\n\nstdout.write(' '.join(map(str, t)))",
    "prob_desc_created_at": "1365694200",
    "tags": [
        "data structures",
        "implementation"
    ],
    "hidden_unit_tests": ""
}