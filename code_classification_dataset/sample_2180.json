{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"18\", \"-1\", \"100\"]",
    "src_uid": "c1d48f546f79b0fd58539a1eb32917dd",
    "prob_desc_notes": null,
    "prob_desc_description": "The only difference between easy and hard versions is the constraints.Vova likes pictures with kittens. The news feed in the social network he uses can be represented as an array of $$$n$$$ consecutive pictures (with kittens, of course). Vova likes all these pictures, but some are more beautiful than the others: the $$$i$$$-th picture has beauty $$$a_i$$$.Vova wants to repost exactly $$$x$$$ pictures in such a way that:   each segment of the news feed of at least $$$k$$$ consecutive pictures has at least one picture reposted by Vova;  the sum of beauty values of reposted pictures is maximum possible. For example, if $$$k=1$$$ then Vova has to repost all the pictures in the news feed. If $$$k=2$$$ then Vova can skip some pictures, but between every pair of consecutive pictures Vova has to repost at least one of them.Your task is to calculate the maximum possible sum of values of reposted pictures if Vova follows conditions described above, or say that there is no way to satisfy all conditions.",
    "prob_desc_output_spec": "Print -1 if there is no way to repost some pictures to satisfy all the conditions in the problem statement. Otherwise print one integer — the maximum sum of values of reposted pictures if Vova follows conditions described in the problem statement.",
    "prob_desc_input_spec": "The first line of the input contains three integers $$$n, k$$$ and $$$x$$$ ($$$1 \\le k, x \\le n \\le 200$$$) — the number of pictures in the news feed, the minimum length of segment with at least one repost in it and the number of pictures Vova is ready to repost. The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$), where $$$a_i$$$ is the beauty of the $$$i$$$-th picture.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_018.jsonl",
    "code_uid": "8acc8b9297a5c98ab5256b7912244682",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 2 3\\n5 1 3 10 1\", \"6 1 5\\n10 30 30 70 10 10\", \"4 3 1\\n1 100 1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "#!/usr/bin/env python\n\"\"\"\nThis file is part of https://github.com/Cheran-Senthil/PyRival.\n\nCopyright 2018 Cheran Senthilkumar all rights reserved,\nCheran Senthilkumar <hello@cheran.io>\nPermission to use, modify, and distribute this software is given under the\nterms of the MIT License.\n\n\"\"\"\nfrom __future__ import division, print_function\n\nimport cmath\nimport itertools\nimport math\nimport operator as op\n# import random\nimport sys\nfrom atexit import register\nfrom bisect import bisect_left, bisect_right\n# from collections import Counter, MutableSequence, defaultdict, deque\n# from copy import deepcopy\n# from decimal import Decimal\n# from difflib import SequenceMatcher\n# from fractions import Fraction\n# from heapq import heappop, heappush\n\nif sys.version_info[0] < 3:\n    # from cPickle import dumps\n    from io import BytesIO as stream\n    # from Queue import PriorityQueue, Queue\nelse:\n    # from functools import reduce\n    from io import StringIO as stream\n    from math import gcd\n    # from pickle import dumps\n    # from queue import PriorityQueue, Queue\n\n\nif sys.version_info[0] < 3:\n    class dict(dict):\n        \"\"\"dict() -> new empty dictionary\"\"\"\n        def items(self):\n            \"\"\"D.items() -> a set-like object providing a view on D's items\"\"\"\n            return dict.iteritems(self)\n\n        def keys(self):\n            \"\"\"D.keys() -> a set-like object providing a view on D's keys\"\"\"\n            return dict.iterkeys(self)\n\n        def values(self):\n            \"\"\"D.values() -> an object providing a view on D's values\"\"\"\n            return dict.itervalues(self)\n\n    def gcd(x, y):\n        \"\"\"gcd(x, y) -> int\n        greatest common divisor of x and y\n        \"\"\"\n        while y:\n            x, y = y, x % y\n        return x\n\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\n\ndef sync_with_stdio(sync=True):\n    \"\"\"Set whether the standard Python streams are allowed to buffer their I/O.\n\n    Args:\n        sync (bool, optional): The new synchronization setting.\n\n    \"\"\"\n    global input, flush\n\n    if sync:\n        flush = sys.stdout.flush\n    else:\n        sys.stdin = stream(sys.stdin.read())\n        input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n        sys.stdout = stream()\n        register(lambda: sys.__stdout__.write(sys.stdout.getvalue()))\n\n\ndef main():\n    n, k, x = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n\n    memo = [[-1] * (x + 1) for _ in range(n)]\n\n    def dp(i, x):\n        if (i >= n) and (x == 0):\n            return 0\n        if (i >= n) or (x == 0):\n            return float('-inf')\n        if memo[i][x] == -1:\n            memo[i][x] = max(a[i] + dp(i + j, x - 1) for j in range(1, k + 1))\n\n        return memo[i][x]\n\n    ans = max(dp(i, x) for i in range(k))\n    if ans == float('-inf'):\n        print(-1)\n    else:\n        print(ans)\n\n\nif __name__ == '__main__':\n    sync_with_stdio()\n\n    if 'PyPy' in sys.version:\n        from _continuation import continulet\n\n        def bootstrap(c):\n            callable, arg = c.switch()\n            while True:\n                to = continulet(lambda _, f, x: f(x), callable, arg)\n                callable, arg = c.switch(to=to)\n\n        c = continulet(bootstrap)\n        c.switch()\n\n        main()\n\n    else:\n        import threading\n\n        sys.setrecursionlimit(2097152)\n        threading.stack_size(134217728)\n\n        main_thread = threading.Thread(target=main)\n        main_thread.start()\n        main_thread.join()\n",
    "prob_desc_created_at": "1542378900",
    "tags": [
        "dp"
    ],
    "hidden_unit_tests": ""
}