{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"8\"]",
    "src_uid": "c277a257b3621249098e67c1546a8bc4",
    "prob_desc_notes": "NoteIn the first query there is a good subtree of size $$$8$$$. The vertices belonging to this subtree are $$${9, 4, 10, 2, 5, 1, 6, 3}$$$.",
    "prob_desc_description": "Assume that you have $$$k$$$ one-dimensional segments $$$s_1, s_2, \\dots s_k$$$ (each segment is denoted by two integers — its endpoints). Then you can build the following graph on these segments. The graph consists of $$$k$$$ vertexes, and there is an edge between the $$$i$$$-th and the $$$j$$$-th vertexes ($$$i \\neq j$$$) if and only if the segments $$$s_i$$$ and $$$s_j$$$ intersect (there exists at least one point that belongs to both of them).For example, if $$$s_1 = [1, 6], s_2 = [8, 20], s_3 = [4, 10], s_4 = [2, 13], s_5 = [17, 18]$$$, then the resulting graph is the following:  A tree of size $$$m$$$ is good if it is possible to choose $$$m$$$ one-dimensional segments so that the graph built on these segments coincides with this tree.You are given a tree, you have to find its good subtree with maximum possible size. Recall that a subtree is a connected subgraph of a tree.Note that you have to answer $$$q$$$ independent queries.",
    "prob_desc_output_spec": "For each query print one integer — the maximum size of a good subtree of the given tree.",
    "prob_desc_input_spec": "The first line contains one integer $$$q$$$ ($$$1 \\le q \\le 15 \\cdot 10^4$$$) — the number of the queries.  The first line of each query contains one integer $$$n$$$ ($$$2 \\le n \\le 3 \\cdot 10^5$$$) — the number of vertices in the tree. Each of the next $$$n - 1$$$ lines contains two integers $$$x$$$ and $$$y$$$ ($$$1 \\le x, y \\le n$$$) denoting an edge between vertices $$$x$$$ and $$$y$$$. It is guaranteed that the given graph is a tree. It is guaranteed that the sum of all $$$n$$$ does not exceed $$$3 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_044.jsonl",
    "code_uid": "1f46dccdb4706b1b55e5b500e21c84cc",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1\\n10\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n3 8\\n4 9\\n4 10\"]",
    "exec_outcome": "PASSED",
    "source_code": "from __future__ import division,print_function\nimport sys\nle=sys.__stdin__.read().split(\"\\n\")[::-1]\naff=[]\n#basculer en non enraciné\ndef f():\n    n=int(le.pop())\n    ar=[[] for k in range(n)]\n    for k in range(n-1):\n        a,b=map(int,le.pop().split())\n        a-=1\n        b-=1\n        ar[a].append(b)\n        ar[b].append(a)\n    if n<5:\n        aff.append(n)\n        return None\n    pf=[0]*n\n    d=[len(k) for k in ar]\n    nd=d[:]\n    m=0\n    pi=[k for k in range(n) if d[k]==1]\n    for n2 in range(n):\n        v=pi.pop()\n        if d[v]==1:\n            w=ar[v][0]\n            if pf[w]:\n                m=max(m,1+pf[w])\n                pf[v]=1+pf[w]#pour leprincipe, normalement pas utiles\n            else:\n                pf[v]=1\n                nd[w]-=1\n                if nd[w]==1:\n                    pi.append(w)\n        else:\n            m1,m2=0,0\n            for k in ar[v]:\n                if pf[k]:\n                    if pf[k]>m2:\n                        m2,m1=pf[k],m2\n                    elif pf[k]>m1:\n                        m1=pf[k]\n                else:\n                    nd[k] -= 1\n                    if nd[k]==1:\n                        pi.append(k)\n            if n2!=n-1:\n                m=max(m1+m2+d[v]-1,m)\n            else:\n                m=max(m1+m2+d[v]-1,m)\n            pf[v]=m2+d[v]-1\n    aff.append(m)\ndef fm():\n    n=int(le.pop())\n    ar=[[] for k in range(n)]\n    for k in range(n-1):\n        a,b=map(int,le.pop().split())\n        a-=1\n        b-=1\n        ar[a].append(b)\n        ar[b].append(a)\n    p=[0]*n\n    pf=[0]*n\n    def parc(v,pere):\n        p[v]=pere\n        for k in ar[v]:\n            if k!=pere:\n                parc(k,v)\n    parc(0,0)\n    d=[len(k)-1 for k in ar]\n    d[0]+=1\n    nd=d[:]\n    m=0\n    pi=[k for k in range(n) if not(d[k])]\n    while pi:\n        v=pi.pop()\n        nd[p[v]]-=1\n        if not(nd[p[v]]):\n            pi.append(p[v])\n        te=sorted([pf[w] for w in ar[v]])\n        if d[v]:\n            pf[v]=te[-1]+d[v]\n        else:\n            pf[v]=1\n        if d[v]>1:\n            if v:\n                m=max(te[-1]+te[-2]+d[v],m)\n            else:\n                m=max(te[-1]+te[-2]+d[v]-1,m)\n        elif d[v]==1:\n            m=max(te[0]+1,m)\n    aff.append(m)\nfor q in range(int(le.pop())):\n    f()\nprint(\"\\n\".join(map(str,aff)))\n",
    "prob_desc_created_at": "1570545300",
    "tags": [
        "dp",
        "dfs and similar",
        "trees",
        "graphs"
    ],
    "hidden_unit_tests": ""
}