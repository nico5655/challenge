{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"4\", \"1\"]",
    "src_uid": "b100573dfd15cf99842996d91bf26f5f",
    "prob_desc_notes": "NoteMatrix from the first sample and the chosen subrectangle (of blue color):  Matrix from the second sample and the chosen subrectangle (of blue color):  ",
    "prob_desc_description": "You are given two arrays $$$a$$$ and $$$b$$$ of positive integers, with length $$$n$$$ and $$$m$$$ respectively. Let $$$c$$$ be an $$$n \\times m$$$ matrix, where $$$c_{i,j} = a_i \\cdot b_j$$$. You need to find a subrectangle of the matrix $$$c$$$ such that the sum of its elements is at most $$$x$$$, and its area (the total number of elements) is the largest possible.Formally, you need to find the largest number $$$s$$$ such that it is possible to choose integers $$$x_1, x_2, y_1, y_2$$$ subject to $$$1 \\leq x_1 \\leq x_2 \\leq n$$$, $$$1 \\leq y_1 \\leq y_2 \\leq m$$$, $$$(x_2 - x_1 + 1) \\times (y_2 - y_1 + 1) = s$$$, and $$$$$$\\sum_{i=x_1}^{x_2}{\\sum_{j=y_1}^{y_2}{c_{i,j}}} \\leq x.$$$$$$",
    "prob_desc_output_spec": "If it is possible to choose four integers $$$x_1, x_2, y_1, y_2$$$ such that $$$1 \\leq x_1 \\leq x_2 \\leq n$$$, $$$1 \\leq y_1 \\leq y_2 \\leq m$$$, and $$$\\sum_{i=x_1}^{x_2}{\\sum_{j=y_1}^{y_2}{c_{i,j}}} \\leq x$$$, output the largest value of $$$(x_2 - x_1 + 1) \\times (y_2 - y_1 + 1)$$$ among all such quadruplets, otherwise output $$$0$$$.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 2000$$$). The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 2000$$$). The third line contains $$$m$$$ integers $$$b_1, b_2, \\ldots, b_m$$$ ($$$1 \\leq b_i \\leq 2000$$$). The fourth line contains a single integer $$$x$$$ ($$$1 \\leq x \\leq 2 \\cdot 10^{9}$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_018.jsonl",
    "code_uid": "18b13a2f22454ba34baf9834c9c926a2",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"3 3\\n1 2 3\\n1 2 3\\n9\", \"5 1\\n5 4 2 4 5\\n2\\n5\"]",
    "exec_outcome": "PASSED",
    "source_code": "import bisect\nn,m=map(int,input().split())\nL1=list(map(int,input().split()))\nL2=list(map(int,input().split()))\nx=int(input())\nnewL1=[0]\nnewL2=[0]\nfor i in L1:newL1.append(newL1[-1]+i)\nfor i in L2:newL2.append(newL2[-1]+i)\nmin1=[]\nmin2=[]\nmx=9999999999999999999\nfor i in range(1,n+1):\n    m1=mx\n    for j in range(n-i+1):\n        if newL1[j+i]-newL1[j]<m1:m1=newL1[j+i]-newL1[j]\n    min1.append(m1)\nfor i in range(1,m+1):\n    m2=mx\n    for j in range(m-i+1):\n        if newL2[j+i]-newL2[j]<m2:m2=newL2[j+i]-newL2[j]\n    min2.append(m2)\narea=0\nfor i in range(n):\n    k=x//min1[i]\n    for j in range(m):\n        if min2[j]>k:break\n    if min2[-1]<=k:j+=1\n    if area<j*(i+1):area=j*(i+1)\nprint(area)\n",
    "prob_desc_created_at": "1538636700",
    "tags": [
        "two pointers",
        "binary search",
        "implementation"
    ],
    "hidden_unit_tests": ""
}