{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"499122177 0\", \"499122193 249561095 249561092 873463811 499122178 124780545 623902721 0\"]",
    "src_uid": "a3a14dbb486a26d015b69187f87c53d4",
    "prob_desc_notes": "NoteIn the first example the exact values of minimum expected values are: $$$\\frac 1 2$$$, $$$\\frac 0 2$$$.In the second example the exact values of minimum expected values are: $$$\\frac{132} 8$$$, $$$\\frac{54} 8$$$, $$$\\frac{30} 8$$$, $$$\\frac{17} 8$$$, $$$\\frac{12} 8$$$, $$$\\frac 7 8$$$, $$$\\frac 3 8$$$, $$$\\frac 0 8$$$.",
    "prob_desc_description": "You are creating a level for a video game. The level consists of $$$n$$$ rooms placed in a circle. The rooms are numbered $$$1$$$ through $$$n$$$. Each room contains exactly one exit: completing the $$$j$$$-th room allows you to go the $$$(j+1)$$$-th room (and completing the $$$n$$$-th room allows you to go the $$$1$$$-st room).You are given the description of the multiset of $$$n$$$ chests: the $$$i$$$-th chest has treasure value $$$c_i$$$.Each chest can be of one of two types:   regular chest — when a player enters a room with this chest, he grabs the treasure and proceeds to the next room;  mimic chest — when a player enters a room with this chest, the chest eats him alive, and he loses. The player starts in a random room with each room having an equal probability of being chosen. The players earnings is equal to the total value of treasure chests he'd collected before he lost.You are allowed to choose the order the chests go into the rooms. For each $$$k$$$ from $$$1$$$ to $$$n$$$ place the chests into the rooms in such a way that:  each room contains exactly one chest;  exactly $$$k$$$ chests are mimics;  the expected value of players earnings is minimum possible. Please note that for each $$$k$$$ the placement is chosen independently.It can be shown that it is in the form of $$$\\frac{P}{Q}$$$ where $$$P$$$ and $$$Q$$$ are non-negative integers and $$$Q \\ne 0$$$. Report the values of $$$P \\cdot Q^{-1} \\pmod {998244353}$$$.",
    "prob_desc_output_spec": "Print $$$n$$$ integers — the $$$k$$$ -th value should be equal to the minimum possible expected value of players earnings if the chests are placed into the rooms in some order and exactly $$$k$$$ of the chests are mimics. It can be shown that it is in the form of $$$\\frac{P}{Q}$$$ where $$$P$$$ and $$$Q$$$ are non-negative integers and $$$Q \\ne 0$$$. Report the values of $$$P \\cdot Q^{-1} \\pmod {998244353}$$$.",
    "prob_desc_input_spec": "The first contains a single integer $$$n$$$ ($$$2 \\le n \\le 3 \\cdot 10^5$$$) — the number of rooms and the number of chests. The second line contains $$$n$$$ integers $$$c_1, c_2, \\dots, c_n$$$ ($$$1 \\le c_i \\le 10^6$$$) — the treasure values of each chest.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2600,
    "file_name": "train_066.jsonl",
    "code_uid": "e36f04e429be1e796479b688dff526df",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n1 2\", \"8\\n10 4 3 6 5 10 7 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "#   Author: yumtam\n#   Created at: 2020-09-11 00:33\n\nfrom __future__ import division, print_function\n_interactive = False\n\ndef main():\n    n = int(input())\n    ar = [ModInt(int(c)) for c in input().split()]\n\n    ar.sort()\n    prfsum = [ModInt(0)]\n    for x in ar:\n        prfsum.append(prfsum[-1]+x)\n\n    def rsum(l, r):\n        return prfsum[r]-prfsum[l]\n\n    for d in range(1, n):\n        r = n-d\n        mult = ModInt(1)\n        ans = ModInt(0)\n        while True:\n            l = max(0, r-d)\n            ans = ans + mult*rsum(l, r)\n            r = l\n            mult += 1\n            if l == 0:\n                break\n\n        print(ans//n, end=' ')\n    print(0)\n\n\n# Constants\nINF = float('inf')\nMOD = 998244353\n\n# Python3 equivalent names\nimport os, sys, itertools\nif sys.version_info[0] < 3:\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\n# print-flush in interactive problems\nif _interactive:\n    flush = sys.stdout.flush\n    def printf(*args, **kwargs):\n        print(*args, **kwargs)\n        flush()\n\n# Debug print, only works on local machine\nLOCAL = \"LOCAL_\" in os.environ\ndebug_print = (print) if LOCAL else (lambda *x, **y: None)\n\n# Fast IO\nif (not LOCAL) and (not _interactive):\n    from io import BytesIO\n    from atexit import register\n    sys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\n    sys.stdout = BytesIO()\n    register(lambda: os.write(1, sys.stdout.getvalue()))\n    input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n# Some utility functions(Input, N-dimensional lists, ...)\ndef input_as_list():\n    return [int(x) for x in input().split()]\n\ndef input_with_offset(o):\n    return [int(x)+o for x in input().split()]\n\ndef input_as_matrix(n, m):\n    return [input_as_list() for _ in range(n)]\n\ndef array_of(f, *dim):\n    return [array_of(f, *dim[1:]) for _ in range(dim[0])] if dim else f()\n\n# Start of external code templates...\n# End of external code templates.\n\nfrom __pypy__.intop import *\nclass ModInt(int):\n    def __new__(cls, v): return int.__new__(cls, v%MOD)\n    def __add__(self, other): return ModInt(int_mod(int_add(self, other), MOD))\n    def __sub__(self, other): return ModInt(int_mod(int_sub(self, other), MOD))\n    def __mul__(self, other): return ModInt(int_mulmod(self, other, MOD))\n    def __div__(self, other): return ModInt(int_mulmod(self, pow(other, MOD-2, MOD), MOD))\n    __truediv__ = __floordiv__ = __div__\n    def __pow__(self, power, modulo=MOD): return ModInt(int.__pow__(self, power, modulo))\n\nmain()\n",
    "prob_desc_created_at": "1594565100",
    "tags": [
        "greedy",
        "probabilities",
        "math"
    ],
    "hidden_unit_tests": ""
}