{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\", \"YES\\n1 3 1\\n3 1 3\\n1 3 1\", \"NO\", \"YES\\n10\"]",
    "src_uid": "20928dd8e512bee2d86c6611c5e76390",
    "prob_desc_notes": "NoteNote that there exist multiple answers for the first two examples.",
    "prob_desc_description": "Let's call some square matrix with integer values in its cells palindromic if it doesn't change after the order of rows is reversed and it doesn't change after the order of columns is reversed.For example, the following matrices are palindromic:  The following matrices are not palindromic because they change after the order of rows is reversed:  The following matrices are not palindromic because they change after the order of columns is reversed:  You are given $$$n^2$$$ integers. Put them into a matrix of $$$n$$$ rows and $$$n$$$ columns so that each number is used exactly once, each cell contains exactly one number and the resulting matrix is palindromic. If there are multiple answers, print any. If there is no solution, print \"NO\".",
    "prob_desc_output_spec": "If it is possible to put all of the $$$n^2$$$ numbers into a matrix of $$$n$$$ rows and $$$n$$$ columns so that each number is used exactly once, each cell contains exactly one number and the resulting matrix is palindromic, then print \"YES\". Then print $$$n$$$ lines with $$$n$$$ space-separated numbers — the resulting matrix. If it's impossible to construct any matrix, then print \"NO\". You can print each letter in any case (upper or lower). For example, \"YeS\", \"no\" and \"yES\" are all acceptable.",
    "prob_desc_input_spec": "The first line contains one integer $$$n$$$ ($$$1 \\le n \\le 20$$$). The second line contains $$$n^2$$$ integers $$$a_1, a_2, \\dots, a_{n^2}$$$ ($$$1 \\le a_i \\le 1000$$$) — the numbers to put into a matrix of $$$n$$$ rows and $$$n$$$ columns.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_001.jsonl",
    "code_uid": "88cd610717d771950c2be49e6eb988ec",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\", \"3\\n1 1 1 1 1 3 3 3 3\", \"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\", \"1\\n10\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys  import stdin,stdout\nfrom collections  import *\nfrom math import gcd,floor,ceil\nst=lambda:list(stdin.readline().strip())\nli=lambda:list(map(int,stdin.readline().split()))\nmp=lambda:map(int,stdin.readline().split())\ninp=lambda:int(stdin.readline())\npr=lambda n: stdout.write(str(n)+\"\\n\")\n\nmod=1000000007\nINF=float('inf')\n\ndef solve():\n    \n    n=inp()\n    l=li()\n    d=Counter(l)\n    ele=-1\n    odd=0\n    v,o=[],[]\n    for i in d:\n        if d[i]&1:\n            if n%2==0:\n                pr('NO')\n                return \n            else:\n                odd+=1\n                ele=i\n                if odd>1:\n                    pr('NO')\n                    return \n        if d[i]%2 == 0:\n            v.append(i)\n            if d[i]%4==2:\n                o.append(i)\n    if (d[ele]-1)%2==0:\n        v.append(ele)\n        if (d[ele]-1)%4==2:\n            o.append(ele)\n    i=0\n    #print(d)\n    v.sort(key = lambda x:d[x],reverse=True)\n    ans=[[0 for i in range(n)] for j in range(n)]\n    if n&1:\n        ans[n//2][n//2]=ele\n        d[ele]-=1\n        j,k=n//2,0\n        i=0\n        while k<n//2 and i<len(o):\n            ans[j][k]=o[i]\n            ans[j][n-1-k]=o[i]\n            k+=1\n            d[o[i]]-=2\n            i+=1\n        j,k=0,n//2\n        while j<n//2 and i<len(o):\n            ans[j][k]=o[i]\n            ans[n-1-j][k]=o[i]\n            d[o[i]]-=2\n            i+=1\n            j+=1\n        i=0\n        j,k=n//2,0\n        while i<len(v) :\n            while k<n//2 and d[v[i]] >0:\n                if ans[j][k]==0:\n                    ans[j][k]=v[i]\n                    ans[j][n-1-k]=v[i]\n                    d[v[i]]-=2\n                k+=1\n                \n            i+=1\n        i=0\n        j,k=0,n//2\n        while i<len(v):\n            while j<n//2 and d[v[i]]>0:\n                if ans[j][k]==0:\n                    ans[j][k]=v[i]\n                    ans[n-1-j][k]=v[i]\n                    d[v[i]]-=2\n                j+=1\n                \n            i+=1 \n    #for i in ans:\n    #    print(*i)\n    #rint(d)\n    x=[[d[i],i] for i in d if d[i]]\n    #print(x)\n    p,q=0,0\n    i=0\n    while i<len(x):\n        a,b=x[i]\n        if a%4:\n            pr('NO')\n            return\n        if p<n//2:\n            while a>0:\n                ans[p][q]=b\n                ans[p][n-1-q]=b\n                ans[n-1-p][q]=b\n                ans[n-1-p][n-1-q]=b\n                a-=4\n                if a>0 and a%4==0:\n                    p+=1\n                    if p==n//2:\n                        p=0\n                        q+=1\n                    \n            p+=1\n            if p==n//2:\n                p=0\n                q+=1\n\n        i+=1\n    pr('YES')\n    for i in ans:\n        print(*i)\n\n\nsolve()\n\n'''\n5\n3 3 4 4 5 5 5 6 6 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2\n'''",
    "prob_desc_created_at": "1550586900",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "hidden_unit_tests": ""
}