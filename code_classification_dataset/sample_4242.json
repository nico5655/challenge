{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\\nNO\\nNO\\nYES\\nYES\\nNO\"]",
    "src_uid": "6d5aefc5a08194e35826764d60c8db3c",
    "prob_desc_notes": "NoteIn the first test case, an awesome subsequence of $$$s$$$ is $$$[ab, cc, ba]$$$",
    "prob_desc_description": "Mihai plans to watch a movie. He only likes palindromic movies, so he wants to skip some (possibly zero) scenes to make the remaining parts of the movie palindromic.You are given a list $$$s$$$ of $$$n$$$ non-empty strings of length at most $$$3$$$, representing the scenes of Mihai's movie.A subsequence of $$$s$$$ is called awesome if it is non-empty and the concatenation of the strings in the subsequence, in order, is a palindrome.Can you help Mihai check if there is at least one awesome subsequence of $$$s$$$?A palindrome is a string that reads the same backward as forward, for example strings \"z\", \"aaa\", \"aba\", \"abccba\" are palindromes, but strings \"codeforces\", \"reality\", \"ab\" are not.A sequence $$$a$$$ is a non-empty subsequence of a non-empty sequence $$$b$$$ if $$$a$$$ can be obtained from $$$b$$$ by deletion of several (possibly zero, but not all) elements.",
    "prob_desc_output_spec": "For each test case, print \"YES\" if there is an awesome subsequence of $$$s$$$, or \"NO\" otherwise (case insensitive).",
    "prob_desc_input_spec": "The first line of the input contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. The description of test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$) — the number of scenes in the movie. Then follows $$$n$$$ lines, the $$$i$$$-th of which containing a single non-empty string $$$s_i$$$ of length at most $$$3$$$, consisting of lowercase Latin letters. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_093.jsonl",
    "code_uid": "025f21716a3c704f5d6b0869b0a6f57c",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n\\n5\\n\\nzx\\n\\nab\\n\\ncc\\n\\nzx\\n\\nba\\n\\n2\\n\\nab\\n\\nbad\\n\\n4\\n\\nco\\n\\ndef\\n\\norc\\n\\nes\\n\\n3\\n\\na\\n\\nb\\n\\nc\\n\\n3\\n\\nab\\n\\ncd\\n\\ncba\\n\\n2\\n\\nab\\n\\nab\"]",
    "exec_outcome": "PASSED",
    "source_code": "import re\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    arr = []\r\n    for i in range(n):\r\n        arr.append(input())\r\n    tst = [[arr[0], set(), set(), set()]]\r\n    if arr[0] == arr[0][::-1]:\r\n        print(\"YES\")\r\n        continue\r\n    flag = False\r\n    for i in range(1, n):\r\n        tst.append([arr[i], tst[i-1][1], tst[i-1][2],tst[i-1][3]])\r\n        if len(arr[i-1]) == 2:\r\n            tst[-1][1].add(arr[i-1])\r\n        elif len(arr[i-1]) == 3:\r\n            tst[-1][2].add(arr[i - 1])\r\n            tst[-1][3].add(arr[i - 1][:-1])\r\n        else:\r\n            flag = True\r\n            break\r\n        item = arr[i]\r\n        if len(arr[i]) == 2:\r\n            item = arr[i]\r\n            twos = tst[i][1]\r\n            threes = tst[i][2]\r\n            tthree = tst[i][3]\r\n            temp = item[::-1]\r\n            if temp == item:\r\n                flag = True\r\n                break\r\n            if temp in twos:\r\n                flag = True\r\n                break\r\n            if temp in tthree:\r\n                flag = True\r\n                break\r\n        else:\r\n            item = arr[i]\r\n            twos = tst[i][1]\r\n            threes = tst[i][2]\r\n            tthree = tst[i][3]\r\n            temp = item[::-1]\r\n            if temp == item:\r\n                flag = True\r\n                break\r\n            if temp in threes:\r\n                flag = True\r\n                break\r\n            # tst 2 ba , cab , bac\r\n            tst2 = temp[:-1]\r\n            if tst2 in twos:\r\n                flag = True\r\n                break\r\n    if flag:\r\n        print(\"YES\")\r\n        continue\r\n    print(\"NO\")\r\n\r\n    # for item, twos, threes,tthree in tst:\r\n    #     if len(item) == 2:\r\n    #         temp = item[::-1]\r\n    #         if temp == item:\r\n    #             flag = True\r\n    #             break\r\n    #         if temp in twos:\r\n    #             flag = True\r\n    #             break\r\n    #         if temp in tthree:\r\n    #             flag = True\r\n    #             break\r\n    #     else:\r\n    #         temp = item[::-1]\r\n    #         if temp == item:\r\n    #             flag = True\r\n    #             break\r\n    #         if temp in threes:\r\n    #             flag = True\r\n    #             break\r\n    #         # tst 2 ba , cab , bac\r\n    #         tst2 = temp[:-1]\r\n    #         if tst2 in twos:\r\n    #             flag = True\r\n    #             break\r\n    # if flag:\r\n    #     print(\"YES\")\r\n    #     continue\r\n    # else:\r\n    #     print(\"NO\")\r\n    #\r\n",
    "prob_desc_created_at": "1642862100",
    "tags": [
        "greedy",
        "strings"
    ],
    "hidden_unit_tests": ""
}