{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"2\\n3\\n4\\n1\"]",
    "src_uid": "ff0b041d54755984df3706aae78d8ff2",
    "prob_desc_notes": "NoteIn the first test case, $$$7$$$ can be represented as $$$7=1+6$$$, where $$$1$$$ and $$$6$$$ are powerful numbers. Because $$$7$$$ is not a powerful number, we know that the minimum possible value of $$$k$$$ in this case is $$$k=2$$$.In the second test case, a possible way to represent $$$11$$$ as the sum of three powerful numbers is $$$11=1+4+6$$$. We can show that there is no way to represent $$$11$$$ as the sum of two or less powerful numbers. In the third test case, $$$240$$$ can be represented as $$$240=24+32+64+120$$$. Observe that $$$240=120+120$$$ is not a valid representation, because the powerful numbers have to be distinct. In the fourth test case, $$$17179869184=2^{34}$$$, so $$$17179869184$$$ is a powerful number and the minimum $$$k$$$ in this case is $$$k=1$$$.",
    "prob_desc_description": "A number is called powerful if it is a power of two or a factorial. In other words, the number $$$m$$$ is powerful if there exists a non-negative integer $$$d$$$ such that $$$m=2^d$$$ or $$$m=d!$$$, where $$$d!=1\\cdot 2\\cdot \\ldots \\cdot d$$$ (in particular, $$$0! = 1$$$). For example $$$1$$$, $$$4$$$, and $$$6$$$ are powerful numbers, because $$$1=1!$$$, $$$4=2^2$$$, and $$$6=3!$$$ but $$$7$$$, $$$10$$$, or $$$18$$$ are not.You are given a positive integer $$$n$$$. Find the minimum number $$$k$$$ such that $$$n$$$ can be represented as the sum of $$$k$$$ distinct powerful numbers, or say that there is no such $$$k$$$.",
    "prob_desc_output_spec": "For each test case print the answer on a separate line. If $$$n$$$ can not be represented as the sum of distinct powerful numbers, print $$$-1$$$. Otherwise, print a single positive integer  — the minimum possible value of $$$k$$$.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 100$$$). Description of the test cases follows. A test case consists of only one line, containing one integer $$$n$$$ ($$$1\\le n\\le 10^{12}$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_110.jsonl",
    "code_uid": "b4a412dd3d11f90220e9c676d2d67545",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n\\n7\\n\\n11\\n\\n240\\n\\n17179869184\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import deque\r\n\r\npowerful = [1]\r\nfor i in range(2, 16):\r\n    powerful.append( i * powerful[-1] )\r\n\r\npowerful.append(4)\r\nfor i in range(3, 41):\r\n    powerful.append( 2 * powerful[-1] )\r\n\r\npowerful.sort(reverse=True)\r\n\r\nfor tcase in range(int(input())):\r\n    q = deque()\r\n    n, k, i = int(input()), 0, 0\r\n    while n > 0:\r\n        while i < len(powerful) and powerful[i] > n: i += 1\r\n        while i < len(powerful) and n - powerful[i] < 2 * powerful[i]:\r\n            q.append((n - powerful[i], k+1, i+1))\r\n            i += 1\r\n        n, k, i = q.popleft()\r\n\r\n    print(k)\r\n",
    "prob_desc_created_at": "1646408100",
    "tags": [
        "bitmasks",
        "brute force",
        "constructive algorithms",
        "dp",
        "math"
    ],
    "hidden_unit_tests": ""
}