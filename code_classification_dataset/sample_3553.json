{
    "prob_desc_time_limit": "7 seconds",
    "prob_desc_sample_outputs": "[\"2 4 1 3 3\", \"1 2 2 4 4\"]",
    "src_uid": "478d92c1ee52a473863ad07acb668510",
    "prob_desc_notes": "NoteIn the first example, $$$S$$$ consists of the following strings: ieh, iqgp, i, iqge, ier.",
    "prob_desc_description": "You are given a set of strings $$$S$$$. Each string consists of lowercase Latin letters.For each string in this set, you want to calculate the minimum number of seconds required to type this string. To type a string, you have to start with an empty string and transform it into the string you want to type using the following actions:  if the current string is $$$t$$$, choose some lowercase Latin letter $$$c$$$ and append it to the back of $$$t$$$, so the current string becomes $$$t + c$$$. This action takes $$$1$$$ second;  use autocompletion. When you try to autocomplete the current string $$$t$$$, a list of all strings $$$s \\in S$$$ such that $$$t$$$ is a prefix of $$$s$$$ is shown to you. This list includes $$$t$$$ itself, if $$$t$$$ is a string from $$$S$$$, and the strings are ordered lexicographically. You can transform $$$t$$$ into the $$$i$$$-th string from this list in $$$i$$$ seconds. Note that you may choose any string from this list you want, it is not necessarily the string you are trying to type. What is the minimum number of seconds that you have to spend to type each string from $$$S$$$?Note that the strings from $$$S$$$ are given in an unusual way.",
    "prob_desc_output_spec": "Print $$$k$$$ integers, the $$$i$$$-th of them should be equal to the minimum number of seconds required to type the string $$$s_{a_i}$$$.",
    "prob_desc_input_spec": "The first line contains one integer $$$n$$$ ($$$1 \\le n \\le 10^6$$$). Then $$$n$$$ lines follow, the $$$i$$$-th line contains one integer $$$p_i$$$ ($$$0 \\le p_i &lt; i$$$) and one lowercase Latin character $$$c_i$$$. These lines form some set of strings such that $$$S$$$ is its subset as follows: there are $$$n + 1$$$ strings, numbered from $$$0$$$ to $$$n$$$; the $$$0$$$-th string is an empty string, and the $$$i$$$-th string ($$$i \\ge 1$$$) is the result of appending the character $$$c_i$$$ to the string $$$p_i$$$. It is guaranteed that all these strings are distinct. The next line contains one integer $$$k$$$ ($$$1 \\le k \\le n$$$) — the number of strings in $$$S$$$. The last line contains $$$k$$$ integers $$$a_1$$$, $$$a_2$$$, ..., $$$a_k$$$ ($$$1 \\le a_i \\le n$$$, all $$$a_i$$$ are pairwise distinct) denoting the indices of the strings generated by above-mentioned process that form the set $$$S$$$ — formally, if we denote the $$$i$$$-th generated string as $$$s_i$$$, then $$$S = {s_{a_1}, s_{a_2}, \\dots, s_{a_k}}$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2600,
    "file_name": "train_068.jsonl",
    "code_uid": "53332509f7e581333c2211aa8c07fd9a",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"10\\n0 i\\n1 q\\n2 g\\n0 k\\n1 e\\n5 r\\n4 m\\n5 h\\n3 p\\n3 e\\n5\\n8 9 1 10 6\", \"8\\n0 a\\n1 b\\n2 a\\n2 b\\n4 a\\n4 b\\n5 c\\n6 d\\n5\\n2 3 4 7 8\"]",
    "exec_outcome": "PASSED",
    "source_code": "import io\nimport os\n\nDEBUG = False\n\n\ndef dfs(trie, root, preorder=None, postorder=None):\n    stack = [root]\n    seen = set()\n    while stack:\n        nodeId = stack.pop()\n        if nodeId not in seen:\n            if preorder:\n                preorder(nodeId)\n            stack.append(nodeId)\n            seen.add(nodeId)\n            for c, childId in reversed(trie[nodeId]):\n                stack.append(childId)\n        else:\n            if postorder:\n                postorder(nodeId)\n\n\ndef solve(N, PC, K, A):\n    ROOT = 0\n    trie = {ROOT: []}  # nodeId to list of (character, nodeId)\n    parent = {}\n    for i, (p, c) in enumerate(PC, 1):  # i starts from 1\n        trie[p].append((c, i))\n        assert i not in trie\n        trie[i] = []\n        parent[i] = p\n\n    terminal = set(A)\n\n    # Sort children of each node by character\n    for children in trie.values():\n        children.sort()\n\n    # DFS\n    offset = 0\n    ancestor = []\n    dist = {}\n\n    def getDistPre(nodeId):\n        nonlocal offset\n\n        if nodeId == 0:\n            # Is root\n            dist[nodeId] = 0\n            ancestor.append((0, nodeId, offset))\n        else:\n            assert nodeId in parent\n\n            # Default best dist is 1 from parent dist\n            best = 1 + dist[parent[nodeId]]\n\n            if nodeId in terminal:\n                # If terminal node, jump from the best ancestor\n                # Costs (offset - oldOffset) + 1 number of other terminals node that we need to skip past\n                # Note: This tuple is just for debugging, can actually get away with just storing sortKey\n                sortKey, ancestorId, oldOffset = ancestor[-1]\n                assert (\n                    sortKey + offset + 1 == dist[ancestorId] + (offset - oldOffset) + 1\n                )\n                best = min(best, dist[ancestorId] + (offset - oldOffset) + 1)\n            ancestor.append(min(ancestor[-1], (best - offset, nodeId, offset)))\n\n            dist[nodeId] = best\n\n            # Count how many terminal nodes have been seen\n            if nodeId in terminal:\n                offset += 1\n\n    def getDistPost(nodeId):\n        ancestor.pop()\n\n    dfs(trie, ROOT, preorder=getDistPre, postorder=getDistPost)\n\n    if DEBUG:\n\n        def printNode(nodeId, word):\n            return (\n                str(nodeId)\n                + \"\\t\"\n                + word\n                + (\"$\" if nodeId in terminal else \"\")\n                + \"\\t\"\n                + \"dist: \"\n                + str(dist[nodeId])\n            )\n            return str(nodeId) + \"\\t\" + word + (\"$\" if nodeId in terminal else \"\")\n\n        def printGraph(nodeId, path):\n            W = 8\n            depth = len(path)\n            for ch, childId in trie[nodeId]:\n                path.append(ch)\n                print(\n                    (\n                        \" \" * (W * depth)\n                        + \"└\"\n                        + ch.center(W - 1, \"─\")\n                        + str(childId)\n                        + (\"$\" if childId in terminal else \"\")\n                    ).ljust(50)\n                    + printNode(childId, \"\".join(path))\n                )\n                printGraph(childId, path)\n                path.pop()\n\n        printGraph(ROOT, [])\n\n    out = []\n    for a in A:\n        out.append(str(dist[a]))\n    return \" \".join(out)\n\n\nif __name__ == \"__main__\":\n    input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\n    N, = list(map(int, input().split()))\n    PC = []\n    for i in range(N):\n        p, c = input().decode().split()\n        PC.append((int(p), str(c)))\n    K, = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    ans = solve(N, PC, K, A)\n    print(ans)\n",
    "prob_desc_created_at": "1583764500",
    "tags": [
        "dp",
        "dfs and similar",
        "data structures"
    ],
    "hidden_unit_tests": ""
}