{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"abca\", \"aabbbcba\", \"abdbdccacbdbdccb\", \"cccccffffcccccffccfcffcccccfffff\", \"zz\"]",
    "src_uid": "bc145a67268b42c00835dc2370804ec9",
    "prob_desc_notes": "NoteIn the first test, the lexicographically minimal xoration $$$t$$$ of $$$s =$$$\"acba\" is \"abca\". It's a xoration because, for $$$j = 3$$$,   $$$t_0 = s_{0 \\oplus j} = s_3 =$$$ \"a\";  $$$t_1 = s_{1 \\oplus j} = s_2 =$$$ \"b\";  $$$t_2 = s_{2 \\oplus j} = s_1 =$$$ \"c\";  $$$t_3 = s_{3 \\oplus j} = s_0 =$$$ \"a\".  There isn't any xoration of $$$s$$$ lexicographically smaller than \"abca\".In the second test, the minimal string xoration corresponds to choosing $$$j = 4$$$ in the definition of xoration.In the third test, the minimal string xoration corresponds to choosing $$$j = 11$$$ in the definition of xoration.In the fourth test, the minimal string xoration corresponds to choosing $$$j = 10$$$ in the definition of xoration.In the fifth test, the minimal string xoration corresponds to choosing either $$$j = 0$$$ or $$$j = 1$$$ in the definition of xoration.",
    "prob_desc_description": "You are given an integer $$$n$$$ and a string $$$s$$$ consisting of $$$2^n$$$ lowercase letters of the English alphabet. The characters of the string $$$s$$$ are $$$s_0s_1s_2\\cdots s_{2^n-1}$$$.A string $$$t$$$ of length $$$2^n$$$ (whose characters are denoted by $$$t_0t_1t_2\\cdots t_{2^n-1}$$$) is a xoration of $$$s$$$ if there exists an integer $$$j$$$ ($$$0\\le j \\leq 2^n-1$$$) such that, for each $$$0 \\leq i \\leq 2^n-1$$$, $$$t_i = s_{i \\oplus j}$$$ (where $$$\\oplus$$$ denotes the operation bitwise XOR).Find the lexicographically minimal xoration of $$$s$$$.A string $$$a$$$ is lexicographically smaller than a string $$$b$$$ if and only if one of the following holds:   $$$a$$$ is a prefix of $$$b$$$, but $$$a \\ne b$$$;  in the first position where $$$a$$$ and $$$b$$$ differ, the string $$$a$$$ has a letter that appears earlier in the alphabet than the corresponding letter in $$$b$$$.  ",
    "prob_desc_output_spec": "Print a single line containing the lexicographically minimal xoration of $$$s$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$n$$$ ($$$1 \\le n \\le 18$$$). The second line contains a string $$$s$$$ consisting of $$$2^n$$$ lowercase letters of the English alphabet.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2800,
    "file_name": "train_105.jsonl",
    "code_uid": "37d7150d1a865df973d983a4ad17cfe3",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"2\\nacba\", \"3\\nbcbaaabb\", \"4\\nbdbcbccdbdbaaccd\", \"5\\nccfcffccccccffcfcfccfffffcccccff\", \"1\\nzz\"]",
    "exec_outcome": "PASSED",
    "source_code": "r=range\r\nn=int(input())\r\nN=1<<n\r\ns=input()\r\na=sorted([ord(s[i])*N+i for i in r(N)])\r\nfor j in r(n):\r\n\tp=1<<j;v=[0]*N;c=0;l=0\r\n\tfor i in r(N):\r\n\t\tif a[i]//N>c:c=a[i]//N;l+=1\r\n\t\tv[a[i]%N]=l\r\n\ta=sorted([v[i]*N*N+v[i^p]*N+i for i in r(N)])\r\nprint(''.join([s[j^(a[0]%N)]for j in r(N)]))",
    "prob_desc_created_at": "1647764100",
    "tags": [
        "bitmasks",
        "data structures",
        "divide and conquer",
        "greedy",
        "hashing",
        "sortings",
        "strings"
    ],
    "hidden_unit_tests": ""
}