{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"()()()\\n((()))\\n(()())\\n()\\n((()))\\n(())()\\n()(())\"]",
    "src_uid": "27b73a87fc30c77abb55784e2e1fde38",
    "prob_desc_notes": null,
    "prob_desc_description": "A bracket sequence is a string containing only characters \"(\" and \")\". A regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \"1\" and \"+\" between the original characters of the sequence. For example, bracket sequences \"()()\" and \"(())\" are regular (the resulting expressions are: \"(1)+(1)\" and \"((1+1)+1)\"), and \")(\", \"(\" and \")\" are not.You are given an integer $$$n$$$. Your goal is to construct and print exactly $$$n$$$ different regular bracket sequences of length $$$2n$$$.",
    "prob_desc_output_spec": "For each test case, print $$$n$$$ lines, each containing a regular bracket sequence of length exactly $$$2n$$$. All bracket sequences you output for a testcase should be different (though they may repeat in different test cases). If there are multiple answers, print any of them. It can be shown that it's always possible.",
    "prob_desc_input_spec": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 50$$$) â€” the number of test cases. Each test case consists of one line containing one integer $$$n$$$ ($$$1 \\le n \\le 50$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_088.jsonl",
    "code_uid": "ec04938c1a9aa20b69a47b9d08ada6e4",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n3\\n1\\n3\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input())\r\nfor i in range(n):\r\n    e = int(input())\r\n    for j in range(e):\r\n        print(\"()\" * j + \"(\" * (e - j) + \")\" * (e - j))",
    "prob_desc_created_at": "1632148500",
    "tags": [
        "constructive algorithms"
    ],
    "hidden_unit_tests": ""
}