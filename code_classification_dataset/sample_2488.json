{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"4\\n0\\n1\"]",
    "src_uid": "7636c493ad91210ec7571895b4b71214",
    "prob_desc_notes": null,
    "prob_desc_description": "There are $$$n$$$ cities in Berland and some pairs of them are connected by two-way roads. It is guaranteed that you can pass from any city to any other, moving along the roads. Cities are numerated from $$$1$$$ to $$$n$$$.Two fairs are currently taking place in Berland — they are held in two different cities $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le n$$$; $$$a \\ne b$$$).Find the number of pairs of cities $$$x$$$ and $$$y$$$ ($$$x \\ne a, x \\ne b, y \\ne a, y \\ne b$$$) such that if you go from $$$x$$$ to $$$y$$$ you will have to go through both fairs (the order of visits doesn't matter). Formally, you need to find the number of pairs of cities $$$x,y$$$ such that any path from $$$x$$$ to $$$y$$$ goes through $$$a$$$ and $$$b$$$ (in any order).Print the required number of pairs. The order of two cities in a pair does not matter, that is, the pairs $$$(x,y)$$$ and $$$(y,x)$$$ must be taken into account only once.",
    "prob_desc_output_spec": "Print $$$t$$$ integers — the answers to the given test cases in the order they are written in the input.",
    "prob_desc_input_spec": "The first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 4\\cdot10^4$$$) — the number of test cases in the input. Next, $$$t$$$ test cases are specified. The first line of each test case contains four integers $$$n$$$, $$$m$$$, $$$a$$$ and $$$b$$$ ($$$4 \\le n \\le 2\\cdot10^5$$$, $$$n - 1 \\le m \\le 5\\cdot10^5$$$, $$$1 \\le a,b \\le n$$$, $$$a \\ne b$$$) — numbers of cities and roads in Berland and numbers of two cities where fairs are held, respectively. The following $$$m$$$ lines contain descriptions of roads between cities. Each of road description contains a pair of integers $$$u_i, v_i$$$ ($$$1 \\le u_i, v_i \\le n$$$, $$$u_i \\ne v_i$$$) — numbers of cities connected by the road. Each road is bi-directional and connects two different cities. It is guaranteed that from any city you can pass to any other by roads. There can be more than one road between a pair of cities. The sum of the values of $$$n$$$ for all sets of input data in the test does not exceed $$$2\\cdot10^5$$$. The sum of the values of $$$m$$$ for all sets of input data in the test does not exceed $$$5\\cdot10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_023.jsonl",
    "code_uid": "2d484b21cb8a9c70394f61ef4ba4d59f",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n7 7 3 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 5\\n4 5 2 3\\n1 2\\n2 3\\n3 4\\n4 1\\n4 2\\n4 3 2 1\\n1 2\\n2 3\\n4 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "t = int(input())\n\nfor _ in range(t):\n    n,m,a,b = map(int,input().split())\n    e = {}\n    for _ in range(m):\n        u,v = map(int,input().split())\n\n        if u not in e:\n            e[u] = set()\n        e[u].add(v)\n        \n        if v not in e:\n            e[v] = set()\n        e[v].add(u)\n\n    used = [False] * (n + 1)\n    s = [-1] * n\n    sl = 0\n    sr = 0\n    c1,c2 = 0,0\n    used[a] = True\n    used[b] = True\n    start = 1\n    while start <= n and used[start]:\n        start += 1\n           \n    while start <= n:\n        s[sr] = start\n        sr += 1 \n        used[start] = True\n        c = 0\n        da = False\n        db = False\n        while sl < sr:\n            u = s[sl]\n            sl += 1\n            c += 1\n                        \n            for v in e[u]:\n                if v == a:\n                    da = True\n                if v == b:\n                    db = True\n                if not used[v]:\n                    s[sr] = v\n                    sr += 1\n                    used[v] = True\n\n        while start <= n and used[start]:\n            start += 1\n\n        if da and not db:\n            c1 += c\n\n        if not da and db:\n            c2 += c\n        \n    print(c1 * c2)",
    "prob_desc_created_at": "1576321500",
    "tags": [
        "combinatorics",
        "dsu",
        "dfs and similar",
        "graphs"
    ],
    "hidden_unit_tests": ""
}