{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"1 1 0 1 6 -1 -1 -1\"]",
    "src_uid": "ab89b5642465e632547fb57b9895beb6",
    "prob_desc_notes": "NoteFor $$$k = 0$$$, to make the string $$$a$$$ have no occurrence of 101, you can do one character change as follows.100101011 $$$\\rightarrow$$$ 100100011For $$$k = 1$$$, you can also change a single character.100101011 $$$\\rightarrow$$$ 100001011For $$$k = 2$$$, no changes are needed.",
    "prob_desc_description": "The Winter holiday will be here soon. Mr. Chanek wants to decorate his house's wall with ornaments. The wall can be represented as a binary string $$$a$$$ of length $$$n$$$. His favorite nephew has another binary string $$$b$$$ of length $$$m$$$ ($$$m \\leq n$$$).Mr. Chanek's nephew loves the non-negative integer $$$k$$$. His nephew wants exactly $$$k$$$ occurrences of $$$b$$$ as substrings in $$$a$$$. However, Mr. Chanek does not know the value of $$$k$$$. So, for each $$$k$$$ ($$$0 \\leq k \\leq n - m + 1$$$), find the minimum number of elements in $$$a$$$ that have to be changed such that there are exactly $$$k$$$ occurrences of $$$b$$$ in $$$a$$$.A string $$$s$$$ occurs exactly $$$k$$$ times in $$$t$$$ if there are exactly $$$k$$$ different pairs $$$(p,q)$$$ such that we can obtain $$$s$$$ by deleting $$$p$$$ characters from the beginning and $$$q$$$ characters from the end of $$$t$$$.",
    "prob_desc_output_spec": "Output $$$n - m + 2$$$ integers — the $$$(k+1)$$$-th integer denotes the minimal number of elements in $$$a$$$ that have to be changed so there are exactly $$$k$$$ occurrences of $$$b$$$ as a substring in $$$a$$$.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq m \\leq n \\leq 500$$$) — size of the binary string $$$a$$$ and $$$b$$$ respectively. The second line contains a binary string $$$a$$$ of length $$$n$$$. The third line contains a binary string $$$b$$$ of length $$$m$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_102.jsonl",
    "code_uid": "ff71665530d2b690ed550e27d5f5aeb7",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"9 3\\n100101011\\n101\"]",
    "exec_outcome": "PASSED",
    "source_code": "\r\ndef main():\r\n    \r\n    n, m = readIntArr()\r\n    a = input()\r\n    b = input()\r\n    \r\n    maxCnt = n - m + 1\r\n    depthTxn = [[-1, -1] for _ in range(m + 1)] # depthTxn[currentDepth][0 or 1] = new maximum depth\r\n    def getMaxDepth(c):\r\n        # c : xxxxx\r\n        # b :   yyyyy\r\n        # depth <->\r\n        for depth in range(m, -1, -1):\r\n            if len(c) < depth: continue\r\n            if depth == 0:\r\n                c2 = ''\r\n            else:\r\n                c2 = c[-depth:]\r\n            b2 = b[:depth]\r\n            # print('c:{} depth:{} c2:{} b2:{}'.format(c, depth,c2,b2))\r\n            if c2 == b2:\r\n                return depth\r\n    for currDepth in range(m + 1):\r\n        c = b[:currDepth]\r\n        for i in range(2):\r\n            c2 = c + str(i)\r\n            # print('currDepth:{} c2:{}'.format(currDepth, c2))\r\n            depthTxn[currDepth][i] = getMaxDepth(c2)\r\n    \r\n    # print(depthTxn)\r\n    \r\n    dp = [[[505 for _ in range(maxCnt + 1)] for __ in range(m + 1)] for ___ in range(n)]\r\n    # dp[i][depth][cnts]\r\n    for i in range(n):\r\n        for prevDepth in range(m + 1):\r\n            if prevDepth > i:\r\n                continue\r\n            for c in range(2):\r\n                add = 0\r\n                if str(c) != a[i]: add = 1\r\n                currDepth = depthTxn[prevDepth][c]\r\n                for cnts in range(maxCnt):\r\n                    if i - 1 >= 0:\r\n                        prevVal = dp[i-1][prevDepth][cnts]\r\n                    else:\r\n                        if cnts == 0:\r\n                            prevVal = 0\r\n                        else:\r\n                            prevVal = 505\r\n                    if prevDepth == m:\r\n                        dp[i][currDepth][cnts+1] = min(dp[i][currDepth][cnts+1],\r\n                                                                    prevVal + add)\r\n                    else:\r\n                        dp[i][currDepth][cnts] = min(dp[i][currDepth][cnts],\r\n                                                                  prevVal + add)\r\n    ans = [505]* (maxCnt + 1)\r\n    for cnts in range(maxCnt + 1):\r\n        for depth in range(m):\r\n            ans[cnts] = min(ans[cnts], dp[n-1][depth][cnts])\r\n        if cnts >= 1:\r\n            ans[cnts] = min(ans[cnts], dp[n-1][m][cnts-1])\r\n    for i in range(maxCnt + 1):\r\n        if ans[i] == 505:\r\n            ans[i] = -1\r\n    oneLineArrayPrint(ans)\r\n    \r\n    # print(dp)\r\n    \r\n    return\r\n\r\n\r\nimport sys\r\n# input=sys.stdin.buffer.readline #FOR READING PURE INTEGER INPUTS (space separation ok)\r\ninput=lambda: sys.stdin.readline().rstrip(\"\\r\\n\") #FOR READING STRING/TEXT INPUTS.\r\n\r\ndef oneLineArrayPrint(arr):\r\n    print(' '.join([str(x) for x in arr]))\r\ndef multiLineArrayPrint(arr):\r\n    print('\\n'.join([str(x) for x in arr]))\r\ndef multiLineArrayOfArraysPrint(arr):\r\n    print('\\n'.join([' '.join([str(x) for x in y]) for y in arr]))\r\n \r\ndef readIntArr():\r\n    return [int(x) for x in input().split()]\r\n# def readFloatArr():\r\n#     return [float(x) for x in input().split()]\r\n \r\ndef makeArr(defaultValFactory,dimensionArr): # eg. makeArr(lambda:0,[n,m])\r\n    dv=defaultValFactory;da=dimensionArr\r\n    if len(da)==1:return [dv() for _ in range(da[0])]\r\n    else:return [makeArr(dv,da[1:]) for _ in range(da[0])]\r\n \r\ndef queryInteractive(i,j):\r\n    print('? {} {}'.format(i,j))\r\n    sys.stdout.flush()\r\n    return int(input())\r\n \r\ndef answerInteractive(i,j,k):\r\n    print('! {} {} {}'.format(i,j,k))\r\n    sys.stdout.flush()\r\n \r\ninf=float('inf')\r\n# MOD=10**9+7\r\n# MOD=998244353\r\n\r\nfrom math import gcd,floor,ceil\r\nimport math\r\n# from math import floor,ceil # for Python2\r\n \r\nfor _abc in range(1):\r\n    main()",
    "prob_desc_created_at": "1633181700",
    "tags": [
        "dp",
        "strings"
    ],
    "hidden_unit_tests": ""
}