{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"7 5\\n7 6\\n7 7\"]",
    "src_uid": "ebe8f3323a901a27d14482b75be35fb9",
    "prob_desc_notes": "NoteIn the example, the hidden king was at $$$(8, 8)$$$ at the start. The game follows like this:    ",
    "prob_desc_description": "This is an interactive problem.ICPC Assiut Community decided to hold a unique chess contest, and you were chosen to control a queen and hunt down the hidden king, while a member of ICPC Assiut Community controls this king.You compete on an $$$8\\times8$$$ chessboard, the rows are numerated from top to bottom, and the columns are numerated left to right, and the cell in row $$$x$$$ and column $$$y$$$ is denoted as $$$(x, y)$$$.In one turn you can move the queen to any of the squares on the same horizontal line, vertical line, or any of the diagonals. For example, if the queen was on square ($$$4$$$, $$$5$$$), you can move to ($$$q_1$$$, $$$5$$$), ($$$4$$$, $$$q_1$$$), ($$$q_1$$$, $$$9-q_1$$$), or ($$$q_2$$$, $$$q_2+1$$$) where ($$$1 \\le q_1 \\le 8$$$, $$$q_1 \\ne 4$$$, $$$1 \\le q_2 \\le 7$$$, $$$q_2 \\ne 4$$$). Note that the queen cannot stay on its current cell.   In one turn, the king can move \"Right\", \"Left\", \"Up\", \"Down\", \"Down-Right\", \"Down-Left\", \"Up-Left\", or \"Up-Right\" such that he doesn't get out of the board. The king cannot move into a cell that is on the same row, column or diagonal with the queen (including the position of the queen itself). For example, if the king was on square ($$$4$$$, $$$5$$$), he can move to ($$$4+k_1$$$, $$$5+k_2$$$) where ($$$-1 \\le k_1,k_2 \\le 1$$$, $$$(k_1, k_2) \\ne (0, 0)$$$).   At the start of the game, you should place the queen at any location on the board, and this is done once per game. After that the king is secretly placed at any cell different from the queen's location. You do not know the position of the king. Then, the king and the queen take turns with the king moving first. The king moves to one of the possible directions (\"Right\", \"Down\", \"Up-Left\", etc.), and you are only given the direction it moves to. After that, you should move your queen by declaring the square to which your queen will move. The game follows like this until you win the game or run out of moves.You win if the king has no valid moves. You lose if after $$$130$$$ moves of the queen the king still has valid moves.",
    "prob_desc_output_spec": null,
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 60$$$) — the number of test cases.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2800,
    "file_name": "train_095.jsonl",
    "code_uid": "d674f7c16cbe61bdcfecee61c05fb50a",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1\\nLeft\\nRight\\nDone\"]",
    "exec_outcome": "PASSED",
    "source_code": "#from itertools import product, permutations, combinations, accumulate, compress\n#from collections import Counter, defaultdict, deque # deque([iterable[, maxlen]]) #appendleft popleft rotate\n#from heapq import heapify, heappop, heappush # func(heapifiedlist, item)\n#from bisect import bisect_left, bisect_right, insort # func(sortedlist, item)\n# TODO: more coping mechanisms...?\n#from sys import setrecursionlimit\n\nimport os, sys\ninput = lambda: sys.stdin.buffer.readline().rstrip(b'\\r\\n')\n\ndef dbp(*args, **kwargs): # calling with dbp(locals()) is perfectly cromulent\n\tprint(*args, file=sys.stderr, **kwargs)\n\na_str = lambda: input().decode('ascii')\nget_int_list = lambda: [int(x) for x in input().split()]\njoin_str = lambda l, ch=' ': ch.join((str(x) for x in l))  # ch is a default, not kwarg\n\n# I dislike the notion that I was overthinking this WAAAAYYY too much during comp\n# but at least it was an excuse to brush up on particle filters\n# albeit in a discrete probabilty-free completely dumbed down way...\n# none of which I will be using here...\n\ndef do_thing():\n\tqr, qc = 1, 1\n\thdir = 1 # for right, -1 for left\n\tsneak = False\n\t'''\n\tkd = {\n\t\t'Right':(0, 1),\n\t\t'Left':(0,-1),\n\t\t'Up':(-1, 0),\n\t\t'Down':(1, 0),\n\t\t'Down-Right':(1,1),\n\t\t\"Down-Left\":(1,-1),\n\t\t\"Up-Left\":(-1,-1),\n\t\t\"Up-Right\":(-1,1)\n\t\t}\n\t'''\n\tprint(qr, qc, flush=True)\n\tres = a_str()\n\tif res == 'Done':\n\t\treturn\n\tqc += 1\n\tprint(qr, qc, flush=True)\n\tres = a_str()\n\n\twhile res != 'Done':\n\t\tdrop = 'Down' in res\n\t\tif 'Up' in res:\n\t\t\tsneak = True\n\t\tif qc == 8:\n\t\t\tif hdir == 1:\n\t\t\t\tif not sneak:\n\t\t\t\t\tdrop = True\n\t\t\t\telse:\n\t\t\t\t\tsneak = False\n\t\t\thdir = -1\n\t\tif qc == 1:\n\t\t\tif hdir == -1:\n\t\t\t\tif not sneak:\n\t\t\t\t\tdrop = True\n\t\t\t\telse:\n\t\t\t\t\tsneak = False\n\t\t\thdir = 1\n\n\t\tif drop and qr < 7:\n\t\t\tqr += 1\n\t\telse:\n\t\t\tqc += hdir\n\n\t\tprint(qr, qc, flush=True)\n\t\tres = a_str()\n\n\n\t\n\n\t\t\n\n\ndef multicase():\n\tmaxcc = int(input().strip())\n\tfor cc in range(maxcc):\n\t\tdo_thing()\n\nif __name__ == \"__main__\":\n\tmulticase()\n\t#print(do_thing())",
    "prob_desc_created_at": "1628519700",
    "tags": [
        "brute force",
        "constructive algorithms",
        "interactive"
    ],
    "hidden_unit_tests": ""
}