{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"4\\n0\\n6\\n3\\n6\"]",
    "src_uid": "ebf0bf949a29eeaba3bcc35091487199",
    "prob_desc_notes": "NoteQuestions about the optimal strategy will be ignored.",
    "prob_desc_description": "Alice and Bob play a game. They have a binary string $$$s$$$ (a string such that each character in it is either $$$0$$$ or $$$1$$$). Alice moves first, then Bob, then Alice again, and so on.During their move, the player can choose any number (not less than one) of consecutive equal characters in $$$s$$$ and delete them.For example, if the string is $$$10110$$$, there are $$$6$$$ possible moves (deleted characters are bold):  $$$\\textbf{1}0110 \\to 0110$$$;  $$$1\\textbf{0}110 \\to 1110$$$;  $$$10\\textbf{1}10 \\to 1010$$$;  $$$101\\textbf{1}0 \\to 1010$$$;  $$$10\\textbf{11}0 \\to 100$$$;  $$$1011\\textbf{0} \\to 1011$$$. After the characters are removed, the characters to the left and to the right of the removed block become adjacent. I. e. the following sequence of moves is valid: $$$10\\textbf{11}0 \\to 1\\textbf{00} \\to 1$$$.The game ends when the string becomes empty, and the score of each player is the number of $$$1$$$-characters deleted by them.Each player wants to maximize their score. Calculate the resulting score of Alice.",
    "prob_desc_output_spec": "For each test case, print one integer — the resulting score of Alice (the number of $$$1$$$-characters deleted by her).",
    "prob_desc_input_spec": "The first line contains one integer $$$T$$$ ($$$1 \\le T \\le 500$$$) — the number of test cases. Each test case contains exactly one line containing a binary string $$$s$$$ ($$$1 \\le |s| \\le 100$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_002.jsonl",
    "code_uid": "e9974cd0511c658c8bd6ff0266080b81",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n01111001\\n0000\\n111111\\n101010101\\n011011110111\"]",
    "exec_outcome": "PASSED",
    "source_code": "t = int(input())\n\nfor _ in range(t):\n    s = sorted(input().split('0'), reverse=True)[::2]\n    res = sum(list(map(len, s)))\n    print(res)\n",
    "prob_desc_created_at": "1597415700",
    "tags": [
        "greedy",
        "sortings",
        "games"
    ],
    "hidden_unit_tests": ""
}