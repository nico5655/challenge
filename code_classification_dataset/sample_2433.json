{
    "prob_desc_time_limit": "4 seconds",
    "prob_desc_sample_outputs": "[\"5\\n11\\n6\\n1\\n0\", \"2\\n0\"]",
    "src_uid": "27b78f0e344210e038ddba299a483a00",
    "prob_desc_notes": "NoteExplanation of the first query:After making first $$$x = 3$$$ and last $$$y = 1$$$ elements impossible to remove, $$$a$$$ becomes $$$[\\times, \\times, \\times, 9, 5, 4, 6, 5, 7, 8, 3, 11, \\times]$$$ (we represent $$$14$$$ as $$$\\times$$$ for clarity).Here is a strategy that removes $$$5$$$ elements (the element removed is colored in red):  $$$[\\times, \\times, \\times, 9, \\color{red}{5}, 4, 6, 5, 7, 8, 3, 11, \\times]$$$  $$$[\\times, \\times, \\times, 9, 4, 6, 5, 7, 8, 3, \\color{red}{11}, \\times]$$$  $$$[\\times, \\times, \\times, 9, 4, \\color{red}{6}, 5, 7, 8, 3, \\times]$$$  $$$[\\times, \\times, \\times, 9, 4, 5, 7, \\color{red}{8}, 3, \\times]$$$  $$$[\\times, \\times, \\times, 9, 4, 5, \\color{red}{7}, 3, \\times]$$$  $$$[\\times, \\times, \\times, 9, 4, 5, 3, \\times]$$$ (final state) It is impossible to remove more than $$$5$$$ elements, hence the weight is $$$5$$$.",
    "prob_desc_description": "Let $$$a_1, \\ldots, a_n$$$ be an array of $$$n$$$ positive integers. In one operation, you can choose an index $$$i$$$ such that $$$a_i = i$$$, and remove $$$a_i$$$ from the array (after the removal, the remaining parts are concatenated).The weight of $$$a$$$ is defined as the maximum number of elements you can remove.You must answer $$$q$$$ independent queries $$$(x, y)$$$: after replacing the $$$x$$$ first elements of $$$a$$$ and the $$$y$$$ last elements of $$$a$$$ by $$$n+1$$$ (making them impossible to remove), what would be the weight of $$$a$$$?",
    "prob_desc_output_spec": "Print $$$q$$$ lines, $$$i$$$-th line should contain a single integer  — the answer to the $$$i$$$-th query.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$q$$$ ($$$1 \\le n, q \\le 3 \\cdot 10^5$$$)  — the length of the array and the number of queries. The second line contains $$$n$$$ integers $$$a_1$$$, $$$a_2$$$, ..., $$$a_n$$$ ($$$1 \\leq a_i \\leq n$$$) — elements of the array. The $$$i$$$-th of the next $$$q$$$ lines contains two integers $$$x$$$ and $$$y$$$ ($$$x, y \\ge 0$$$ and $$$x+y &lt; n$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_022.jsonl",
    "code_uid": "2b10589eea634726369368d1115d0a0f",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"13 5\\n2 2 3 9 5 4 6 5 7 8 3 11 13\\n3 1\\n0 0\\n2 4\\n5 0\\n0 12\", \"5 2\\n1 4 1 2 4\\n0 0\\n1 0\"]",
    "exec_outcome": "PASSED",
    "source_code": "class Fenwick:\n    def __init__(self, size):\n        self.size = size\n        self.tree = [0] * (size + 1)\n\n    def add(self, idx, val):\n        idx = int(idx)\n        while idx <= self.size:\n            self.tree[idx] += val\n            idx += idx & (-idx)\n\n    def sum(self, idx):\n        ret = 0\n        idx = int(idx)\n        while idx > 0:\n            ret += self.tree[idx]\n            idx -= idx & (-idx)\n        return ret\n\n\nn, q = map(int, input().split())\nA = [int(x) for x in input().split()]\nA = [A[i] - (i + 1) for i in range(n)]\nquery = [[] for _ in range(n + 1)]\nfor i in range(q):\n    x, y = map(int, input().split())\n    l, r = x, n - y - 1\n    query[r].append((l, i))\nft = Fenwick(n + 1)\n\n# ans = [0 for _ in range(q + 3)]\n# for r in range(n):\n#     ob = A[r]\n#     if ob <= 0:\n#         if ft.sum(1) >= -ob:\n#             low, high = 0, r\n#             while low + 1 < high:\n#                 mid = low + high >> 1;\n#                 if ft.sum(mid + 1) >= -ob:\n#                     low = mid\n#                 else: high = mid\n#             idx = low\n#             if ft.sum(high + 1) >= -ob:\n#                 idx = max(idx, high)\n#             ft.add(1, 1)\n#             ft.add(idx + 2, -1)\n#     for qr in query[r]:\n#         ans[qr[1]] = ft.sum(qr[0] + 1)\n#\n# for _ in range(q):\n#     print(ans[_])\n\nans = [0 for _ in range(q + 3)]\nfor r in range(n):\n    ob = A[r]\n    if ob <= 0:\n        if ft.sum(1) >= -ob:\n            low, high = 0, r\n            while low + 1 < high:\n                mid = low + high >> 1\n                if ft.sum(mid + 1) >= -ob:\n                    low = mid\n                else: high = mid\n            idx = high if ft.sum(high + 1) >= -ob else low\n            ft.add(1, 1)\n            ft.add(idx + 2, -1)\n    for qr in query[r]:\n        ans[qr[1]] = ft.sum(qr[0] + 1)\nfor _ in range(q):\n    print(ans[_])",
    "prob_desc_created_at": "1599402900",
    "tags": [
        "data structures",
        "binary search",
        "sortings"
    ],
    "hidden_unit_tests": ""
}