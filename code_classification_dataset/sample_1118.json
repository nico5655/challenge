{
    "prob_desc_time_limit": "4 seconds",
    "prob_desc_sample_outputs": "[\"3 4 2\", \"199999\", \"6\"]",
    "src_uid": "07484b6a6915c5cb5fdf1921355f2a6a",
    "prob_desc_notes": null,
    "prob_desc_description": "Authors guessed an array $$$a$$$ consisting of $$$n$$$ integers; each integer is not less than $$$2$$$ and not greater than $$$2 \\cdot 10^5$$$. You don't know the array $$$a$$$, but you know the array $$$b$$$ which is formed from it with the following sequence of operations:  Firstly, let the array $$$b$$$ be equal to the array $$$a$$$;  Secondly, for each $$$i$$$ from $$$1$$$ to $$$n$$$:   if $$$a_i$$$ is a prime number, then one integer $$$p_{a_i}$$$ is appended to array $$$b$$$, where $$$p$$$ is an infinite sequence of prime numbers ($$$2, 3, 5, \\dots$$$);  otherwise (if $$$a_i$$$ is not a prime number), the greatest divisor of $$$a_i$$$ which is not equal to $$$a_i$$$ is appended to $$$b$$$;   Then the obtained array of length $$$2n$$$ is shuffled and given to you in the input. Here $$$p_{a_i}$$$ means the $$$a_i$$$-th prime number. The first prime $$$p_1 = 2$$$, the second one is $$$p_2 = 3$$$, and so on.Your task is to recover any suitable array $$$a$$$ that forms the given array $$$b$$$. It is guaranteed that the answer exists (so the array $$$b$$$ is obtained from some suitable array $$$a$$$). If there are multiple answers, you can print any.",
    "prob_desc_output_spec": "In the only line of the output print $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$2 \\le a_i \\le 2 \\cdot 10^5$$$) in any order — the array $$$a$$$ from which the array $$$b$$$ can be obtained using the sequence of moves given in the problem statement. If there are multiple answers, you can print any.",
    "prob_desc_input_spec": "The first line of the input contains one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the number of elements in $$$a$$$. The second line of the input contains $$$2n$$$ integers $$$b_1, b_2, \\dots, b_{2n}$$$ ($$$2 \\le b_i \\le 2750131$$$), where $$$b_i$$$ is the $$$i$$$-th element of $$$b$$$. $$$2750131$$$ is the $$$199999$$$-th prime number.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_006.jsonl",
    "code_uid": "d0979b3daabd5b6984d7e79732d1052c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n3 5 2 3 2 4\", \"1\\n2750131 199999\", \"1\\n3 6\"]",
    "exec_outcome": "PASSED",
    "source_code": "import collections,math\n\nn=int(input())\na=list(map(int, input().split()))\na.sort(reverse=True)\nprimes_arr=[-1]\nmaxi = 2750131+1\nprimes_sieve=[0 for _ in range(maxi)]\ndef sieve():\n    for i in range(2, maxi):\n        if not primes_sieve[i]:\n            primes_arr.append(i)\n            primes_sieve[i] = 1\n            for j in range(i*i, maxi, i):\n                if not primes_sieve[j]:\n                    primes_sieve[j] = i\n\nsieve()\n# print(primes_sieve[:20])\nd=collections.defaultdict(int)\nz=collections.defaultdict(int)\n\nans=[]\nprimes = []\nfor i in range(n*2):\n    x=a[i]//primes_sieve[a[i]]\n    if d[a[i]] > 0:\n        d[a[i]]-=1\n    elif x!=a[i]:\n        d[x]+=1\n        ans.append(a[i])\n    else:\n        primes.append(a[i])\nprimes=primes[::-1]\nfor i in range(len(primes)):\n    if z[primes[i]]>0:\n        z[primes[i]]-=1\n    else:\n        z[primes_arr[primes[i]]]+=1\n        ans.append(primes[i])\n\nprint(*ans)",
    "prob_desc_created_at": "1560090900",
    "tags": [
        "greedy",
        "graphs",
        "number theory",
        "sortings",
        "dfs and similar"
    ],
    "hidden_unit_tests": ""
}