{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1 1 3 8\\n-1\\n0 0 0 0 0\"]",
    "src_uid": "f4b790bef9a6cbcd5d1f9235bcff7c8f",
    "prob_desc_notes": "NoteIn the second example, there are two suitable arrays: $$$[2, 8, 5]$$$ and $$$[2, 8, 11]$$$.",
    "prob_desc_description": "For an array of non-negative integers $$$a$$$ of size $$$n$$$, we construct another array $$$d$$$ as follows: $$$d_1 = a_1$$$, $$$d_i = |a_i - a_{i - 1}|$$$ for $$$2 \\le i \\le n$$$.Your task is to restore the array $$$a$$$ from a given array $$$d$$$, or to report that there are multiple possible arrays. ",
    "prob_desc_output_spec": "For each test case, print the elements of the array $$$a$$$, if there is only one possible array $$$a$$$. Otherwise, print $$$-1$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. The first line of each test case contains one integer $$$n$$$ ($$$1 \\le n \\le 100$$$) — the size of the arrays $$$a$$$ and $$$d$$$. The second line contains $$$n$$$ integers $$$d_1, d_2, \\dots, d_n$$$ ($$$0 \\le d_i \\le 100$$$) — the elements of the array $$$d$$$. It can be shown that there always exists at least one suitable array $$$a$$$ under these constraints.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_109.jsonl",
    "code_uid": "ebd0536d3f01c09266c968c2c9e3844a",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n\\n4\\n\\n1 0 2 5\\n\\n3\\n\\n2 6 3\\n\\n5\\n\\n0 0 0 0 0\"]",
    "exec_outcome": "PASSED",
    "source_code": "for _ in range(int(input())):\r\n    n=int(input())\r\n    d=list(map(int,input().split()))\r\n    ans=[]\r\n    ans.append(d[0])\r\n    \r\n    count=0\r\n    # print(ans[1]+d[2])\r\n    for i in range(1,n):\r\n        \r\n        first=ans[i-1]+d[i]\r\n        second=ans[i-1]-d[i]\r\n        \r\n        if first>=0 and second>=0 and first!=second:\r\n            count+=1\r\n            break\r\n            \r\n        else:\r\n            ans.append(first)\r\n    if count==0:\r\n        print(*ans)\r\n    else:\r\n        print(-1)        \r\n",
    "prob_desc_created_at": "1664462100",
    "tags": [
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "hidden_unit_tests": ""
}