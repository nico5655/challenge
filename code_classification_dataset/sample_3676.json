{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3 2\\n0\", \"4 3\\n3\\n1 2 2 2\\n3 2 3 3\\n1 3 2 3\"]",
    "src_uid": "af470d1faade2c44b641cfda0cfe98f2",
    "prob_desc_notes": "NoteHere are how the sample input and output looks like. The colored arrows denotes all the possible paths while a red cross denotes a locked door.In the first sample case:  In the second sample case:  ",
    "prob_desc_description": "ZS the Coder loves mazes. Your job is to create one so that he can play with it. A maze consists of n × m rooms, and the rooms are arranged in n rows (numbered from the top to the bottom starting from 1) and m columns (numbered from the left to the right starting from 1). The room in the i-th row and j-th column is denoted by (i, j). A player starts in the room (1, 1) and wants to reach the room (n, m).Each room has four doors (except for ones at the maze border), one on each of its walls, and two adjacent by the wall rooms shares the same door. Some of the doors are locked, which means it is impossible to pass through the door. For example, if the door connecting (i, j) and (i, j + 1) is locked, then we can't go from (i, j) to (i, j + 1). Also, one can only travel between the rooms downwards (from the room (i, j) to the room (i + 1, j)) or rightwards (from the room (i, j) to the room (i, j + 1)) provided the corresponding door is not locked.    This image represents a maze with some doors locked. The colored arrows denotes all the possible paths while a red cross denotes a locked door. ZS the Coder considers a maze to have difficulty x if there is exactly x ways of travelling from the room (1, 1) to the room (n, m). Two ways are considered different if they differ by the sequence of rooms visited while travelling.Your task is to create a maze such that its difficulty is exactly equal to T. In addition, ZS the Coder doesn't like large mazes, so the size of the maze and the number of locked doors are limited. Sounds simple enough, right?",
    "prob_desc_output_spec": "The first line should contain two integers n and m (1 ≤ n, m ≤ 50) — the number of rows and columns of the maze respectively. The next line should contain a single integer k (0 ≤ k ≤ 300) — the number of locked doors in the maze. Then, k lines describing locked doors should follow. Each of them should contain four integers, x1, y1, x2, y2. This means that the door connecting room (x1, y1) and room (x2, y2) is locked. Note that room (x2, y2) should be adjacent either to the right or to the bottom of (x1, y1), i.e. x2 + y2 should be equal to x1 + y1 + 1. There should not be a locked door that appears twice in the list. It is guaranteed that at least one solution exists. If there are multiple solutions, print any of them.",
    "prob_desc_input_spec": "The first and only line of the input contains a single integer T (1 ≤ T ≤ 1018), the difficulty of the required maze.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 3100,
    "file_name": "train_078.jsonl",
    "code_uid": "9b6e6ab46527c62e8028003bd50f31b4",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\", \"4\"]",
    "exec_outcome": "PASSED",
    "source_code": "w = input();\nwall = []\n\np = 39\n\nfor i in range(p - 1):\n    wall.append((4 + i , 1 + i , 4 + i , 2 + i))\n    wall.append((1 + i , 4 + i , 2 + i , 4 + i))\nfor i in range(p - 2):\n    wall.append((6 + i , 1 + i , 6 + i , 2 + i))\n    wall.append((1 + i , 6 + i , 2 + i , 6 + i))\nfor i in range(3):\n    wall.append((p + 2 , p + 2 - i , p + 3 , p + 2 - i))\n    wall.append((p + 2 - i , p + 2 , p + 2 - i , p + 3))\n\n\nfor i in range(p):\n    c = w / (3 ** i) % 3\n    if c <= 1:\n        wall.append((3 + i , 1 + i , 4 + i , 1 + i))\n    if c <= 0:\n        wall.append((1 + i , 3 + i , 1 + i , 4 + i))\n\ndp = [[0 for i in range(p + 4)] for j in range(p + 4)]\ndp[1][1] = 1\n\nfor i in range(1 , p + 4):\n    for j in range(1 , p + 4):\n        if [i - 1 , j , i , j] not in wall:\n            dp[i][j] += dp[i - 1][j]\n        if [i , j - 1 , i , j] not in wall:\n            dp[i][j] += dp[i][j - 1]\n#print dp[p + 3][p + 3]\n\nprint p + 3 , p + 3\nwall = set(wall)\nprint len(wall)\nfor W in wall:\n    print W[0], W[1], W[2], W[3]\n",
    "prob_desc_created_at": "1474119900",
    "tags": [
        "constructive algorithms"
    ],
    "hidden_unit_tests": ""
}