{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\\n1 5 11 9\\n2 5 7 6\\n0\"]",
    "src_uid": "8b2b7208630af1d086420513a437a914",
    "prob_desc_notes": "NoteConsider the first test case.Initially $$$a = [9, 6, 3, 11, 15]$$$.In the first operation replace $$$a_1$$$ with $$$11$$$ and $$$a_5$$$ with $$$9$$$. It's valid, because $$$\\min{(a_1, a_5)} = \\min{(11, 9)} = 9$$$.After this $$$a = [11, 6, 3, 11, 9]$$$.In the second operation replace $$$a_2$$$ with $$$7$$$ and $$$a_5$$$ with $$$6$$$. It's valid, because $$$\\min{(a_2, a_5)} = \\min{(7, 6)} = 6$$$.After this $$$a = [11, 7, 3, 11, 6]$$$ — a good array.In the second test case, the initial array is already good.",
    "prob_desc_description": "Nastia has received an array of $$$n$$$ positive integers as a gift.She calls such an array $$$a$$$ good that for all $$$i$$$ ($$$2 \\le i \\le n$$$) takes place $$$gcd(a_{i - 1}, a_{i}) = 1$$$, where $$$gcd(u, v)$$$ denotes the greatest common divisor (GCD) of integers $$$u$$$ and $$$v$$$.You can perform the operation: select two different indices $$$i, j$$$ ($$$1 \\le i, j \\le n$$$, $$$i \\neq j$$$) and two integers $$$x, y$$$ ($$$1 \\le x, y \\le 2 \\cdot 10^9$$$) so that $$$\\min{(a_i, a_j)} = \\min{(x, y)}$$$. Then change $$$a_i$$$ to $$$x$$$ and $$$a_j$$$ to $$$y$$$.The girl asks you to make the array good using at most $$$n$$$ operations.It can be proven that this is always possible.",
    "prob_desc_output_spec": "For each of $$$t$$$ test cases print a single integer $$$k$$$ ($$$0 \\le k \\le n$$$) — the number of operations. You don't need to minimize this number. In each of the next $$$k$$$ lines print $$$4$$$ integers $$$i$$$, $$$j$$$, $$$x$$$, $$$y$$$ ($$$1 \\le i \\neq j \\le n$$$, $$$1 \\le x, y \\le 2 \\cdot 10^9$$$) so that $$$\\min{(a_i, a_j)} = \\min{(x, y)}$$$ — in this manner you replace $$$a_i$$$ with $$$x$$$ and $$$a_j$$$ with $$$y$$$. If there are multiple answers, print any.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10\\,000$$$) — the number of test cases. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$) — the length of the array. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_{n}$$$ ($$$1 \\le a_i \\le 10^9$$$) — the array which Nastia has received as a gift. It's guaranteed that the sum of $$$n$$$ in one test doesn't exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1300,
    "file_name": "train_099.jsonl",
    "code_uid": "4b7b9ffdfc81ffac5cf28df3df1afdb7",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n5\\n9 6 3 11 15\\n3\\n7 5 13\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\nimport math\r\nfrom collections import defaultdict,Counter\r\nfrom itertools import permutations\r\nfrom collections import deque\r\nfrom decimal import Decimal\r\nfrom fractions import Fraction\r\nfrom heapq import heappush , heappop\r\nimport bisect\r\n \r\n \r\ndef sin():\r\n\treturn int(sys.stdin.readline())\r\n \r\ndef array():\t\r\n\treturn list(map(int, sys.stdin.readline().strip().split()))\r\n \r\ndef two():\r\n\treturn map(int, sys.stdin.readline().strip().split())\r\n \r\ndef multiple():\r\n\treturn [int(x) for x in sys.stdin.readline().split()]\r\n \r\ndef string():\r\n\treturn sys.stdin.readline().strip()\r\n \r\ndef sqrt(x):\r\n\tlow , high = 0 , x\r\n\twhile low <= high:\r\n\t\tmid = (low + high) // 2\r\n\t\tif mid * mid <= x < (mid+1) * (mid+1):\r\n\t\t\treturn mid\r\n\t\telif x < mid * mid:\r\n\t\t\thigh = mid - 1\r\n\t\telse:\r\n\t\t\tlow = mid + 1\r\n \r\n \r\n\r\nt = sin()\r\nfor _ in range(t):\r\n\tn = sin()\r\n\tarr = array()\r\n\r\n\tk = 1999999974\r\n\r\n\tans = []\r\n\r\n\tmini = k\r\n\r\n\tif n == 1:\r\n\t\tprint(0)\r\n\t\tcontinue\r\n\r\n\tfor i in range(1 , n):\r\n\t\tmini = min(arr[i-1] , arr[i])\r\n\t\tarr[i-1] = k\r\n\t\tarr[i] = mini\r\n\t\tans.append([i , i+1 , k , mini])\r\n\t\tk -= 1\r\n\r\n\tif math.gcd(arr[n-2] , arr[n-1]) != 1:\r\n\t\tans.append([1 , n , mini , k])\r\n\r\n\tprint(len(ans))\r\n\tfor i in ans:\r\n\t\tprint(*i)\r\n\r\n\t#print(arr)\r\n\r\n\r\n\r\n\r\n",
    "prob_desc_created_at": "1620398100",
    "tags": [
        "constructive algorithms",
        "math",
        "number theory"
    ],
    "hidden_unit_tests": ""
}