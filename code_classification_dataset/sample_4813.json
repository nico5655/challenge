{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\\n-1\\n0\\n3\\n2\"]",
    "src_uid": "8ca8317ce3f678c99dc746cb9b058993",
    "prob_desc_notes": "NoteIn the first test case, you can choose a letter 'a' and erase its first and last occurrences, you will get a string 'bcaacb', which is a palindrome. You can also choose a letter 'b' and erase all its occurrences, you will get a string 'acaaca', which is a palindrome as well.In the second test case, it can be shown that it is impossible to choose a letter and erase some of its occurrences to get a palindrome.In the third test case, you don't have to erase any symbols because the string is already a palindrome.",
    "prob_desc_description": "Grandma Capa has decided to knit a scarf and asked Grandpa Sher to make a pattern for it, a pattern is a string consisting of lowercase English letters. Grandpa Sher wrote a string $$$s$$$ of length $$$n$$$.Grandma Capa wants to knit a beautiful scarf, and in her opinion, a beautiful scarf can only be knit from a string that is a palindrome. She wants to change the pattern written by Grandpa Sher, but to avoid offending him, she will choose one lowercase English letter and erase some (at her choice, possibly none or all) occurrences of that letter in string $$$s$$$.She also wants to minimize the number of erased symbols from the pattern. Please help her and find the minimum number of symbols she can erase to make string $$$s$$$ a palindrome, or tell her that it's impossible. Notice that she can only erase symbols equal to the one letter she chose.A string is a palindrome if it is the same from the left to the right and from the right to the left. For example, the strings 'kek', 'abacaba', 'r' and 'papicipap' are palindromes, while the strings 'abb' and 'iq' are not.",
    "prob_desc_output_spec": "For each test case print the minimum number of erased symbols required to make the string a palindrome, if it is possible, and $$$-1$$$, if it is impossible.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. The next $$$2 \\cdot t$$$ lines contain the description of test cases. The description of each test case consists of two lines. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$) — the length of the string. The second line of each test case contains the string $$$s$$$ consisting of $$$n$$$ lowercase English letters. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1200,
    "file_name": "train_106.jsonl",
    "code_uid": "541454725187f77fba935aedfe1b20e8",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n8\\nabcaacab\\n6\\nxyzxyz\\n4\\nabba\\n8\\nrprarlap\\n10\\nkhyyhhyhky\"]",
    "exec_outcome": "PASSED",
    "source_code": "import os, sys\r\nfrom io import BytesIO, IOBase\r\n \r\nBUFSIZE = 8192\r\n \r\n \r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n \r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n \r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n#mod = 10 ** 9 + 7 \r\n\r\n\r\n\r\n'''\r\ndef get(l,idx,avgl,avgr,n):\r\n    if n==1:\r\n        return False\r\n    if idx==n-1:\r\n        return False\r\n    print(avgl,idx,avgr)\r\n    if avgl==avgr:\r\n        return True\r\n    return get(l,idx+1,(avgl*idx+l[idx])/(idx+1),(avgr*(n-idx)-l[idx])/(n-idx-1),n) or get(l,idx+1,avgl,avgr,n)\r\n\r\n\r\nl=[1,2,3,4,5,6,7,8] #list(map(int,input().split()))\r\ns=sum(l)\r\nn=len(l)\r\nprint(get(l,0,0,s/n,n))\r\n'''\r\n\r\n\r\n\r\nfor _ in range(int(input())):\r\n    n=int(input())\r\n    l=list(input())\r\n    i=0\r\n    j=n-1\r\n    f=0\r\n    while i<j:\r\n        if l[i]==l[j]:\r\n            i+=1\r\n            j-=1\r\n            continue\r\n        else:\r\n            f=1\r\n            break\r\n    if f==1:\r\n        if n==2:\r\n            print(1)\r\n            continue\r\n        left=0\r\n        right=0\r\n        ti=i\r\n        tj=j\r\n        while ti<tj:\r\n            if l[ti]!=l[tj]:\r\n                if l[j]==l[tj]:\r\n                    tj-=1\r\n                else:\r\n                    break\r\n            else:\r\n                left=1\r\n                leftreq=l[j]\r\n                break\r\n        ti=i\r\n        tj=j\r\n        while ti<tj:\r\n            if l[ti]!=l[tj]:\r\n                if l[i]==l[ti]:\r\n                    ti+=1\r\n                else:\r\n                    break\r\n            else:\r\n                right=1\r\n                rightreq=l[i]\r\n                break\r\n        if left==0 and right==0:\r\n            if ti==tj:\r\n                print(1)\r\n                continue\r\n            else:\r\n                print(-1)\r\n                continue\r\n        ans=float('inf')\r\n        if left==1:\r\n            f=0\r\n            c=0\r\n            i=0\r\n            j=n-1\r\n            while i<j:\r\n                if l[i]==l[j]:\r\n                    i+=1\r\n                    j-=1\r\n                else:\r\n                    if l[i]==leftreq:\r\n                        i+=1\r\n                        c+=1\r\n                    elif l[j]==leftreq:\r\n                        j-=1\r\n                        c+=1\r\n                    else:\r\n                        f=1\r\n                        break\r\n            if f==0:\r\n                ans=min(ans,c)\r\n        if right==1:\r\n            f=0\r\n            c=0\r\n            i=0\r\n            j=n-1\r\n            while i<j:\r\n                if l[i]==l[j]:\r\n                    i+=1\r\n                    j-=1\r\n                else:\r\n                    if l[i]==rightreq:\r\n                        i+=1\r\n                        c+=1\r\n                    elif l[j]==rightreq:\r\n                        j-=1\r\n                        c+=1\r\n                    else:\r\n                        f=1\r\n                        break\r\n            if f==0:\r\n                ans=min(ans,c)\r\n        if ans==float('inf'):\r\n            print(-1)\r\n            continue\r\n        print(ans)\r\n    else:\r\n        print(0)\r\n",
    "prob_desc_created_at": "1635069900",
    "tags": [
        "brute force",
        "data structures",
        "greedy",
        "strings",
        "two pointers"
    ],
    "hidden_unit_tests": ""
}