{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"4\\n3\\n16\"]",
    "src_uid": "1f7fa6c56cb7be9404aa2ebaba89a44c",
    "prob_desc_notes": "NoteConsider the first test case of the example. The initial state of the trees is $$$[1, 2, 4]$$$.  During the first day, let's water the first tree, so the sequence of heights becomes $$$[2, 2, 4]$$$;  during the second day, let's water the second tree, so the sequence of heights becomes $$$[2, 4, 4]$$$;  let's skip the third day;  during the fourth day, let's water the first tree, so the sequence of heights becomes $$$[4, 4, 4]$$$. Thus, the answer is $$$4$$$.",
    "prob_desc_description": "There are $$$n$$$ trees in a park, numbered from $$$1$$$ to $$$n$$$. The initial height of the $$$i$$$-th tree is $$$h_i$$$.You want to water these trees, so they all grow to the same height.The watering process goes as follows. You start watering trees at day $$$1$$$. During the $$$j$$$-th day you can:   Choose a tree and water it. If the day is odd (e.g. $$$1, 3, 5, 7, \\dots$$$), then the height of the tree increases by $$$1$$$. If the day is even (e.g. $$$2, 4, 6, 8, \\dots$$$), then the height of the tree increases by $$$2$$$.  Or skip a day without watering any tree. Note that you can't water more than one tree in a day. Your task is to determine the minimum number of days required to water the trees so they grow to the same height.You have to answer $$$t$$$ independent test cases.",
    "prob_desc_output_spec": "For each test case, print one integer — the minimum number of days required to water the trees, so they grow to the same height.",
    "prob_desc_input_spec": "The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 2 \\cdot 10^4$$$) — the number of test cases. The first line of the test case contains one integer $$$n$$$ ($$$1 \\le n \\le 3 \\cdot 10^5$$$) — the number of trees. The second line of the test case contains $$$n$$$ integers $$$h_1, h_2, \\ldots, h_n$$$ ($$$1 \\le h_i \\le 10^9$$$), where $$$h_i$$$ is the height of the $$$i$$$-th tree. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$3 \\cdot 10^5$$$ ($$$\\sum n \\le 3 \\cdot 10^5$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_092.jsonl",
    "code_uid": "026173628ee9e396dea69cf2d4020dad",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n3\\n1 2 4\\n5\\n4 4 3 5 5\\n7\\n2 5 4 8 3 7 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\nfrom os import path\r\n \r\ndef solve(word):\r\n  # handel string input from codeforces\r\n  hieghts=word.split(\" \")\r\n  trees = [int(i) for i in hieghts]\r\n  Max = max(trees)\r\n  Sum = 0\r\n  c1  = 0\r\n  #count number of even and odd days needed for all trees\r\n  for i in trees:\r\n    dist = Max - i\r\n    if(dist%2 == 1):\r\n      Sum += (dist//2)\r\n      c1+=1\r\n    else:\r\n      Sum += (dist//2)\r\n  # if number of odd greater than number of even you just need twice odd number\r\n  # but you don't need the last day because it's even \r\n  if c1 > Sum+1:\r\n    ans=c1+c1-1\r\n  #if the number of even greater than odd try to find min days that gives you\r\n  #even growth by using both even and odd days\r\n  elif Sum > c1:\r\n    x= (Sum -c1)*2    #convert number of even days to number of days (multiply by 2)\r\n                      #for every 3 days we have 2 odds and one even as we have 2 evens \r\n    if x%3==0:\r\n      ans = x//3 *2\r\n    elif x%3==1:\r\n      ans = x//3 *2+1\r\n    else:\r\n      ans = x//3 *2 +2\r\n    ans+=c1*2\r\n  # if the number of even equal to number of odd-\r\n  # -or smaller by one so you need thier sum\r\n  else:\r\n    ans = c1 +Sum\r\n  # repeat the previos steps but with target length equal max+1\r\n  # because min time achived if length equal max or max+1 and get min of the two\r\n  Sum = 0 \r\n  c1  = 0\r\n  for i in trees:\r\n    dist = Max - i +1\r\n    if(dist%2 == 1):\r\n      Sum += (dist//2)\r\n      c1+=1\r\n    else:\r\n      Sum += (dist//2)\r\n  if c1 > Sum+1:\r\n    ans2=c1+c1-1\r\n  elif Sum > c1:\r\n    x= (Sum -c1)*2\r\n    if x%3==0:\r\n      ans2 = x//3 *2\r\n    elif x%3==1:\r\n      ans2 = x//3 *2+1\r\n    else:\r\n      ans2 = x//3 *2 +2\r\n    ans2+=c1*2\r\n  else:\r\n    ans2 = c1 +Sum\r\n  return min(ans , ans2) \r\n# common used function to handel codeforces input (online search) \r\ndef get_int():\r\n  \"\"\" This function takes number of test cases \"\"\"\r\n  return int(sys.stdin.readline())\r\n \r\ndef get_string():\r\n  \"\"\"This function takes a string of each test case\"\"\"\r\n  return sys.stdin.readline().strip()\r\n \r\nn = get_int()\r\n \r\nfinal_result = []\r\nfor i in range(n):\r\n  num_trees=get_int()\r\n  word = get_string()        \r\n  out=solve(word)      \r\n  final_result.append(out)   \r\n \r\nfor item in final_result:\r\n  sys.stdout.write(str(item))   \r\n  sys.stdout.write('\\n')\r\n",
    "prob_desc_created_at": "1649514900",
    "tags": [
        "binary search",
        "greedy",
        "math"
    ],
    "hidden_unit_tests": ""
}