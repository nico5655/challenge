{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"? 1\\n\\n? 9\\n\\n? 16\\n\\n! 32\"]",
    "src_uid": "8eb4ce3fb9f6220ab6dbc12819680c1e",
    "prob_desc_notes": "NoteIn the first test case, the words are $$$\\{\\texttt{glory},\\texttt{to},\\texttt{ukraine},\\texttt{and},\\texttt{anton},\\texttt{trygub}\\}$$$, so $$$l=\\{5,2,7,3,5,6\\}$$$. If $$$w=1$$$, then the text editor is not able to display all words properly and will crash. The height of the text editor is $$$h_1=0$$$, so the grader will return $$$0$$$.If $$$w=9$$$, then a possible way that the words will be displayed on the text editor is:   $$$\\texttt{glory__to}$$$  $$$\\texttt{ukraine__}$$$  $$$\\texttt{and_anton}$$$  $$$\\texttt{__trygub_}$$$ The height of the text editor is $$$h_{9}=4$$$, so the grader will return $$$4$$$.If $$$w=16$$$, then a possible way that the words will be displayed on the text editor is:   $$$\\texttt{glory_to_ukraine}$$$  $$$\\texttt{and_anton_trygub}$$$ The height of the text editor is $$$h_{16}=2$$$, so the grader will return $$$2$$$.We have somehow figured out that the minimum area of the text editor is $$$32$$$, so we answer it.",
    "prob_desc_description": "This is an interactive problem.There are $$$n$$$ words in a text editor. The $$$i$$$-th word has length $$$l_i$$$ ($$$1 \\leq l_i \\leq 2000$$$). The array $$$l$$$ is hidden and only known by the grader. The text editor displays words in lines, splitting each two words in a line with at least one space. Note that a line does not have to end with a space. Let the height of the text editor refer to the number of lines used. For the given width, the text editor will display words in such a way that the height is minimized.More formally, suppose that the text editor has width $$$w$$$. Let $$$a$$$ be an array of length $$$k+1$$$ where $$$1=a_1 &lt; a_2 &lt; \\ldots &lt; a_{k+1}=n+1$$$. $$$a$$$ is a valid array if for all $$$1 \\leq i \\leq k$$$, $$$l_{a_i}+1+l_{a_i+1}+1+\\ldots+1+l_{a_{i+1}-1} \\leq w$$$. Then the height of the text editor is the minimum $$$k$$$ over all valid arrays.Note that if $$$w &lt; \\max(l_i)$$$, the text editor cannot display all the words properly and will crash, and the height of the text editor will be $$$0$$$ instead.You can ask $$$n+30$$$ queries. In one query, you provide a width $$$w$$$. Then, the grader will return the height $$$h_w$$$ of the text editor when its width is $$$w$$$.Find the minimum area of the text editor, which is the minimum value of $$$w \\cdot h_w$$$ over all $$$w$$$ for which $$$h_w \\neq 0$$$.The lengths are fixed in advance. In other words, the interactor is not adaptive.",
    "prob_desc_output_spec": null,
    "prob_desc_input_spec": "The first and only line of input contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2000$$$)  — the number of words on the text editor. It is guaranteed that the hidden lengths $$$l_i$$$ satisfy $$$1 \\leq l_i \\leq 2000$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_108.jsonl",
    "code_uid": "f87e037a889fa0c8469e75d1a49e94d9",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n\\n0\\n\\n4\\n\\n2\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\ninput = sys.stdin.readline\r\n\r\nn = int(input())\r\nleft, right = 1, 10000000\r\nwhile left < right:\r\n    mid = (left + right) // 2\r\n    print('?', mid); sys.stdout.flush()\r\n    val = int(input())\r\n    if val == 1:\r\n        right = mid\r\n    else:\r\n        left = mid + 1\r\nk = left\r\nans = k\r\nfor i in range(2, n+1):\r\n    print('?', k // i); sys.stdout.flush()\r\n    val = int(input())\r\n    if val != 0: ans = min(ans, val * (k // i))\r\n    else: break\r\nprint('!', ans)",
    "prob_desc_created_at": "1650722700",
    "tags": [
        "binary search",
        "constructive algorithms",
        "greedy",
        "interactive"
    ],
    "hidden_unit_tests": ""
}