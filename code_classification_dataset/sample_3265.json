{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"PetrLovtTttttNumtttt\", \"petrsmatchwin\", \"abCacba\"]",
    "src_uid": "258753b00e378df9c6e06692026aadad",
    "prob_desc_notes": null,
    "prob_desc_description": "Petya loves hockey very much. One day, as he was watching a hockey match, he fell asleep. Petya dreamt of being appointed to change a hockey team's name. Thus, Petya was given the original team name w and the collection of forbidden substrings s1, s2, ..., sn. All those strings consist of uppercase and lowercase Latin letters. String w has the length of |w|, its characters are numbered from 1 to |w|.First Petya should find all the occurrences of forbidden substrings in the w string. During the search of substrings the case of letter shouldn't be taken into consideration. That is, strings \"aBC\" and \"ABc\" are considered equal.After that Petya should perform the replacement of all letters covered by the occurrences. More formally: a letter in the position i should be replaced by any other one if for position i in string w there exist pair of indices l, r (1 ≤ l ≤ i ≤ r ≤ |w|) such that substring w[l ... r] is contained in the collection s1, s2, ..., sn, when using case insensitive comparison. During the replacement the letter's case should remain the same. Petya is not allowed to replace the letters that aren't covered by any forbidden substring.Letter letter (uppercase or lowercase) is considered lucky for the hockey players. That's why Petya should perform the changes so that the letter occurred in the resulting string as many times as possible. Help Petya to find such resulting string. If there are several such strings, find the one that comes first lexicographically.Note that the process of replacements is not repeated, it occurs only once. That is, if after Petya's replacements the string started to contain new occurrences of bad substrings, Petya pays no attention to them.",
    "prob_desc_output_spec": "Output the only line — Petya's resulting string with the maximum number of letters letter. If there are several answers then output the one that comes first lexicographically. The lexicographical comparison is performed by the standard &lt; operator in modern programming languages. The line a is lexicographically smaller than the line b, if a is a prefix of b, or there exists such an i (1 ≤ i ≤ |a|), that ai &lt; bi, and for any j (1 ≤ j &lt; i) aj = bj. |a| stands for the length of string a.",
    "prob_desc_input_spec": "The first line contains the only integer n (1 ≤ n ≤ 100) — the number of forbidden substrings in the collection. Next n lines contain these substrings. The next line contains string w. All those n + 1 lines are non-empty strings consisting of uppercase and lowercase Latin letters whose length does not exceed 100. The last line contains a lowercase letter letter.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_050.jsonl",
    "code_uid": "49d303275c38bd314c367a9d36432e9d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\nbers\\nucky\\nelu\\nPetrLoveLuckyNumbers\\nt\", \"4\\nhello\\nparty\\nabefglghjdhfgj\\nIVan\\npetrsmatchwin\\na\", \"2\\naCa\\ncba\\nabAcaba\\nc\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin,stdout\ninput=stdin.readline\nprint=stdout.write\nn = int(input())\na = []\nfor i in range(n):\n    a.append(input().rstrip())\nw = list(input().rstrip())\nc = input().rstrip()\nm = len(w)\nz = []\ni = 0\nwhile i < m:\n    for j in range(n):\n        if w[i].lower() == a[j][0].lower():\n            if i + len(a[j]) <= m:\n                f = 1\n                for k in range(i,i+len(a[j])):\n                    if w[k].lower() != a[j][k-i].lower():\n                        f=0\n                        break\n                if f:\n                    if len(z)!=0:\n                        if z[-1][1]>=i:\n                            z[-1][1]=max(i+len(a[j])-1,z[-1][1])\n                        else:\n                            z.append([i,i+len(a[j])-1])\n                    else:\n                        z.append([i,i+len(a[j])-1])\n    i += 1\nfor i in z:\n    for k in range(i[0],i[1]+1):\n        if w[k].isupper():\n            if w[k] != c.upper():\n                w[k] = c.upper()\n            else:\n                if w[k] != \"A\":\n                    w[k] = \"A\"\n                else:\n                    w[k] = \"B\"\n        else:\n            if w[k] != c.lower():\n                w[k] = c.lower()\n            else:\n                if w[k] != \"a\":\n                    w[k] = \"a\"\n                else:\n                    w[k] = \"b\"\nprint(\"\".join(w))",
    "prob_desc_created_at": "1310137200",
    "tags": [
        "implementation",
        "strings"
    ],
    "hidden_unit_tests": ""
}