{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\\nYES\\nNO\"]",
    "src_uid": "6ae754639d96790c890f9d1ab259332a",
    "prob_desc_notes": "NoteFor $$$n=2$$$, Phoenix can create a square like this:    For $$$n=4$$$, Phoenix can create a square like this:    For $$$n=6$$$, it is impossible for Phoenix to create a square.",
    "prob_desc_description": "Phoenix is playing with a new puzzle, which consists of $$$n$$$ identical puzzle pieces. Each puzzle piece is a right isosceles triangle as shown below.    A puzzle piece The goal of the puzzle is to create a square using the $$$n$$$ pieces. He is allowed to rotate and move the pieces around, but none of them can overlap and all $$$n$$$ pieces must be used (of course, the square shouldn't contain any holes as well). Can he do it?",
    "prob_desc_output_spec": "For each test case, if Phoenix can create a square with the $$$n$$$ puzzle pieces, print YES. Otherwise, print NO.",
    "prob_desc_input_spec": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^9$$$) — the number of puzzle pieces.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1000,
    "file_name": "train_097.jsonl",
    "code_uid": "b13f6f8f2f9a0076a40b7d36ef0d61db",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n2\\n4\\n6\"]",
    "exec_outcome": "PASSED",
    "source_code": "t = int(input())\r\n\r\nimport math\r\n\r\nfor j in range(1, t + 1):\r\n    n = int(input())\r\n    if n % 2 != 0:\r\n        print(\"NO\")\r\n    elif n % 2 == 0:\r\n        n = n // 2\r\n        if math.sqrt(n)%1==0:\r\n            print(\"YES\")\r\n        elif n % 2 == 0:\r\n            n = n // 2\r\n            if math.sqrt(n)%1==0:\r\n                print(\"YES\")\r\n            else:\r\n                print(\"NO\")\r\n        else:\r\n            print(\"NO\")\r\n    else:\r\n        print(\"NO\")",
    "prob_desc_created_at": "1619966100",
    "tags": [
        "brute force",
        "geometry",
        "math",
        "number theory"
    ],
    "hidden_unit_tests": ""
}