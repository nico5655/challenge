{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"109\", \"23\"]",
    "src_uid": "cb6574f12f8305193593688c78a63133",
    "prob_desc_notes": "NoteIn the first example the optimal sequence of erasings is: 1101001 $$$\\rightarrow$$$ 111001 $$$\\rightarrow$$$ 11101 $$$\\rightarrow$$$ 1111 $$$\\rightarrow$$$ $$$\\varnothing$$$.In the second example the optimal sequence of erasings is: 10101 $$$\\rightarrow$$$ 1001 $$$\\rightarrow$$$ 11 $$$\\rightarrow$$$ $$$\\varnothing$$$.",
    "prob_desc_description": "Vasya has a string $$$s$$$ of length $$$n$$$ consisting only of digits 0 and 1. Also he has an array $$$a$$$ of length $$$n$$$. Vasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets $$$a_x$$$ points for erasing substring of length $$$x$$$.Vasya wants to maximize his total points, so help him with this! ",
    "prob_desc_output_spec": "Print one integer — the maximum total points Vasya can get.",
    "prob_desc_input_spec": "The first line contains one integer $$$n$$$ ($$$1 \\le n \\le 100$$$) — the length of string $$$s$$$. The second line contains string $$$s$$$, consisting only of digits 0 and 1. The third line contains $$$n$$$ integers $$$a_1, a_2, \\dots a_n$$$ ($$$1 \\le a_i \\le 10^9$$$), where $$$a_i$$$ is the number of points for erasing the substring of length $$$i$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_016.jsonl",
    "code_uid": "1bc66e852e5cbab69e20da852a105f2c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7\\n1101001\\n3 4 9 100 1 2 3\", \"5\\n10101\\n3 10 15 15 15\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input())\ns = input()\na = [int(x) for x in input().split()]\n\ndp = [[[False for i in range(101)] for j in range(101)] for k in range(101)]\n\ndef f(i, j, k):\n    if not dp[i][j][k]:\n        if i == j:\n            dp[i][j][k] = 0\n        else:\n            dp[i][j][k] = f(i+1, j, 0) + a[k]\n            for m in range(i+1, j):\n                if s[i] == s[m]:\n                    dp[i][j][k] = max(dp[i][j][k], f(i+1, m, 0) + f(m, j, k+1))\n    return dp[i][j][k]\n\nanswer = f(0, n, 0)\nprint(answer)",
    "prob_desc_created_at": "1548516900",
    "tags": [
        "dp"
    ],
    "hidden_unit_tests": ""
}