{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"3\\nabout proud\\nhooray round\\nwow first\\nthis is\\ni that\\nmcdics am\", \"0\", \"1\\nsame differ\\nsame same\"]",
    "src_uid": "f06f7d0dcef10f064f5ce1e9eccf3928",
    "prob_desc_notes": "NoteIn the first example, those beautiful lyrics are one of the possible answers. Let's look at the first lyric on the sample output of the first example. \"about proud hooray round\" forms a beautiful lyric because \"about\" and \"hooray\" have same number of vowels, \"proud\" and \"round\" have same number of vowels, and both lines have same last vowel. On the other hand, you cannot form any beautiful lyric with the word \"codeforces\".In the second example, you cannot form any beautiful lyric from given words.In the third example, you can use the word \"same\" up to three times.",
    "prob_desc_description": "You are given $$$n$$$ words, each of which consists of lowercase alphabet letters. Each word contains at least one vowel. You are going to choose some of the given words and make as many beautiful lyrics as possible.Each lyric consists of two lines. Each line consists of two words separated by whitespace. A lyric is beautiful if and only if it satisfies all conditions below.   The number of vowels in the first word of the first line is the same as the number of vowels in the first word of the second line.  The number of vowels in the second word of the first line is the same as the number of vowels in the second word of the second line.  The last vowel of the first line is the same as the last vowel of the second line. Note that there may be consonants after the vowel. Also, letters \"a\", \"e\", \"o\", \"i\", and \"u\" are vowels. Note that \"y\" is never vowel.For example of a beautiful lyric,  \"hello hellooowww\" \"whatsup yowowowow\"  is a beautiful lyric because there are two vowels each in \"hello\" and \"whatsup\", four vowels each in \"hellooowww\" and \"yowowowow\" (keep in mind that \"y\" is not a vowel), and the last vowel of each line is \"o\".For example of a not beautiful lyric,  \"hey man\"\"iam mcdic\"  is not a beautiful lyric because \"hey\" and \"iam\" don't have same number of vowels and the last vowels of two lines are different (\"a\" in the first and \"i\" in the second).How many beautiful lyrics can you write from given words? Note that you cannot use a word more times than it is given to you. For example, if a word is given three times, you can use it at most three times.",
    "prob_desc_output_spec": "In the first line, print $$$m$$$ — the number of maximum possible beautiful lyrics. In next $$$2m$$$ lines, print $$$m$$$ beautiful lyrics (two lines per lyric). If there are multiple answers, print any.",
    "prob_desc_input_spec": "The first line contains single integer $$$n$$$ ($$$1 \\le n \\le 10^{5}$$$) — the number of words. The $$$i$$$-th of the next $$$n$$$ lines contains string $$$s_{i}$$$ consisting lowercase alphabet letters — the $$$i$$$-th word. It is guaranteed that the sum of the total word length is equal or less than $$$10^{6}$$$. Each word contains at least one vowel.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_034.jsonl",
    "code_uid": "fd891599d2896e0e2c5c0dda0f8aa7a5",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"14\\nwow\\nthis\\nis\\nthe\\nfirst\\nmcdics\\ncodeforces\\nround\\nhooray\\ni\\nam\\nproud\\nabout\\nthat\", \"7\\narsijo\\nsuggested\\nthe\\nidea\\nfor\\nthis\\nproblem\", \"4\\nsame\\nsame\\nsame\\ndiffer\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin, stdout\nimport sys, atexit, io\n\nbuffer = io.BytesIO()\nsys.stdout = buffer\n\n@atexit.register\ndef write():\n\tsys.__stdout__.write(buffer.getvalue())\n\n@atexit.register\ndef main():\n\t\n\tdici = {}\n\n\tn = int(stdin.readline())\n\tfor k in xrange(n):\n\t\tword = stdin.readline()\n\t\tvog = \"\"\n\t\tcont = 0\n\t\tfor l in word:\n\t\t\tif l in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n\t\t\t\tvog = l\n\t\t\t\tcont += 1\n\t\t\t\n\t\tif not (vog, cont) in dici:\n\t\t\tdici[(vog, cont)] = [word]\n\t\telse:\n\t\t\t\n\t\t\tdici[(vog, cont)].append(word)\n\t\n\treject = {}\n\tother = []\n\tgod = []\n\t\n\tfor l in dici:\n\t\tif len(dici[l]) > 1:\n\t\t\tfor k in xrange(len(dici[l])-1, 0, -2):\n\t\t\t\tother.append((dici[l][k], dici[l][k-1]))\n\t\t\t\tdici[l].pop()\n\t\t\t\tdici[l].pop()\n\t\t\n\tfor l in dici:\n\t\tif len(dici[l]) == 1:\n\t\t\tif not l[1] in reject:\n\t\t\t\treject[l[1]] = [dici[l][0]]\n\t\t\telse:\n\t\t\t\treject[l[1]].append(dici[l][0])\n\t\n\t\n\t\n\tfor l in reject:\n\t\tif len(reject[l]) > 1:\n\t\t\tfor k in xrange(len(reject[l])-1, 0, -2):\n\t\t\t\tgod.append((reject[l][k], reject[l][k-1]))\n\t\t\t\treject[l].pop()\n\t\t\t\treject[l].pop()\n\n\tresult = []\n\t\n\tfor k in xrange(min(len(other), len(god) )):\n\t\tresult.append(other[k])\n\t\tresult.append(god[k])\n\t\n\tfinal = []\n\tfor k in xrange( 0,len(result), 2):\n\t\tfinal.append( (result[k+1][1], result[k][1]))\n\t\tfinal.append( (result[k+1][0], result[k][0]))\n\t\n\tif (len(god) - len(other)) % 2 == 0:\n\t\tfor k in xrange(len(god), len(other), 2):\n\t\t\tfinal.append( (other[k+1][1], other[k][1]))\n\t\t\tfinal.append( (other[k+1][0], other[k][0]))\n\telse:\n\t\tfor k in xrange(len(god) + 1, len(other), 2):\n\t\t\tfinal.append( (other[k+1][1], other[k][1]))\n\t\t\tfinal.append( (other[k+1][0], other[k][0]))\n\t\n\tstdout.write(\"%d\\n\" % (len(final)/2))\n\tfor k in xrange(0, len(final), 2):\n\t\tstdout.write(final[k][0] + final[k][1])\n\t\tstdout.write(final[k+1][0] + final[k+1][1])\n\t\n\t\nif __name__ == \"__main__\":\n\tmain\n\t\n",
    "prob_desc_created_at": "1560258300",
    "tags": [
        "data structures",
        "greedy",
        "strings"
    ],
    "hidden_unit_tests": ""
}