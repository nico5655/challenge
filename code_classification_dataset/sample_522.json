{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"2\\naba aca\", \"1\\n02TrrT20\", \"2\\na A\"]",
    "src_uid": "d062ba289fd9c373a31ca5e099f9306c",
    "prob_desc_notes": null,
    "prob_desc_description": "Kolya has a string s of length n consisting of lowercase and uppercase Latin letters and digits.He wants to rearrange the symbols in s and cut it into the minimum number of parts so that each part is a palindrome and all parts have the same lengths. A palindrome is a string which reads the same backward as forward, such as madam or racecar.Your task is to help Kolya and determine the minimum number of palindromes of equal lengths to cut s into, if it is allowed to rearrange letters in s before cuttings.",
    "prob_desc_output_spec": "Print to the first line an integer k — minimum number of palindromes into which you can cut a given string. Print to the second line k strings — the palindromes themselves. Separate them by a space. You are allowed to print palindromes in arbitrary order. All of them should have the same length.",
    "prob_desc_input_spec": "The first line contains an integer n (1 ≤ n ≤ 4·105) — the length of string s. The second line contains a string s of length n consisting of lowercase and uppercase Latin letters and digits.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_002.jsonl",
    "code_uid": "3256ad12d2ffa1cc1da2a97b84b3b805",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\naabaac\", \"8\\n0rTrT022\", \"2\\naA\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(raw_input())\nimport logging\nlogging.basicConfig(level=logging.ERROR)\ns = str(raw_input())\nfrom collections import Counter\nc = Counter()\nfor char in s:\n    c[char] += 1\n\neven_count = len([char for char in c if c[char] % 2 == 0])\nodd_count = len(c) - even_count\n\ndef simple_even(c):\n    s = \"\"\n    for char in c:\n        l = c[char] / 2\n        s = l*char + s + l*char\n    return s\n\ndef weird_odd(c, n, k):\n    \n    #print \"k = %d\" % k\n    # initialize odds\n    d = {}\n    for i in range(k):\n        d[i] = Counter()\n        odd_boi = None\n        for char in c:\n            if c[char] % 2 == 1 and odd_boi == None:\n                odd_boi = char\n        if odd_boi == None:\n            for char in c:\n                if c[char] > 0:\n                    odd_boi = char\n                    break\n        if odd_boi == None:\n            return None\n        d[i][odd_boi] = 1\n        c[odd_boi] -= 1\n    #print d\n    #print c\n    min_length = n // k\n    #print \"min_length %d\" % min_length\n    logging.debug((n, k))\n    logging.debug(d)\n    for i in d:\n        left = min_length - 1\n        logging.debug(\"left = %d\" % left) \n\n        while left > 0:\n            for char in c:\n                if left == 0:\n                    break\n                if c[char] == 0:\n                    continue\n                if c[char] >= left:\n                    d[i][char] += left\n                    c[char] -= left\n                    left = 0\n                else:\n                    left -= c[char]\n                    d[i][char] += c[char]\n                    c[char] = 0\n        #print d[i]\n    #print d\n    def make_pal(counts):\n        odd_boi = [c for c in counts if counts[c] % 2 == 1]\n        #print odd_boi\n        if len(odd_boi) > 1:\n            return None \n        odd_boi = odd_boi[0]\n        s = str(odd_boi * counts[odd_boi])\n        counts[odd_boi] = 0\n        for c in counts:\n            l = counts[c] / 2\n            s = l*c + s + l*c\n        return s\n\n    #print k, d\n    words = []\n    for i in d:\n        w = make_pal(d[i])\n        if w == None:\n            return None\n        words.append(w)\n    return \" \".join(words)\n        \n            \n#print \"odd count %d\" % odd_count\nif odd_count == 0:\n    print 1\n    print simple_even(c)\n\nelse:\n    k = odd_count\n    logging.debug(\"odd count = %d\" % k)\n    solved = False\n    while k <= n:\n        if n % k == 0 and (n // k) % 2 == 1:\n            print k\n            if k == n:\n                print \" \".join([c for c in s])\n            else:\n                print weird_odd(c, n, k)\n            break\n        else:\n            k += 1\n",
    "prob_desc_created_at": "1508573100",
    "tags": [
        "implementation",
        "brute force",
        "strings"
    ],
    "hidden_unit_tests": ""
}