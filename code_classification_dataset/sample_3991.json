{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\\n1\\n0\\n4\\n2\"]",
    "src_uid": "da5f2ad6c1ef2cccab5c04f44b9e1412",
    "prob_desc_notes": "NoteFor the first testcase, an optimal sequence of operations would be: $$$[1,2,3,2,1,3,3] \\rightarrow [3,2,1,3,3] \\rightarrow [3,3,3]$$$.For the second testcase, all elements in the array are already equal.For the third testcase, the only possible sequence of operations is: $$$[1,1,1,2,2,2] \\rightarrow [1,1,2,2] \\rightarrow [1,2] \\rightarrow []$$$. Note that, according to the statement, the elements deleted at each step must be different.For the fourth testcase, the optimal sequence of operations is: $$$[1,1,2,2,3,3,1,1] \\rightarrow [1,1,2,3,1,1] \\rightarrow [1,1,1,1]$$$.For the fifth testcase, one possible reachable array of two equal elements is $$$[4,4]$$$.",
    "prob_desc_description": "You are given an integer $$$n$$$ and an array $$$a_1,a_2,\\ldots,a_n$$$.In one operation, you can choose an index $$$i$$$ ($$$1 \\le i \\lt n$$$) for which $$$a_i \\neq a_{i+1}$$$ and delete both $$$a_i$$$ and $$$a_{i+1}$$$ from the array. After deleting $$$a_i$$$ and $$$a_{i+1}$$$, the remaining parts of the array are concatenated.For example, if $$$a=[1,4,3,3,6,2]$$$, then after performing an operation with $$$i=2$$$, the resulting array will be $$$[1,3,6,2]$$$.What is the maximum possible length of an array of equal elements obtainable from $$$a$$$ by performing several (perhaps none) of the aforementioned operations?",
    "prob_desc_output_spec": "For each testcase, print a single integer, the maximum possible length of an array of equal elements obtainable from $$$a$$$ by performing a sequence of operations.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line of input contains one integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases. The following lines contain the descriptions of the test cases. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 5000$$$) — the length of array $$$a$$$. The second line of each test case contains $$$n$$$ integers $$$a_1,a_2,\\ldots,a_n$$$ ($$$1 \\le a_i \\le n$$$) — the elements of array $$$a$$$. It is guaranteed that the sum of $$$n$$$ across all test cases does not exceed $$$10\\,000$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_088.jsonl",
    "code_uid": "d63f7a9be5077518d9099e2847d86e58",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n\\n7\\n\\n1 2 3 2 1 3 3\\n\\n1\\n\\n1\\n\\n6\\n\\n1 1 1 2 2 2\\n\\n8\\n\\n1 1 2 2 3 3 1 1\\n\\n12\\n\\n1 5 2 3 3 3 4 4 4 4 3 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\ninput = sys.stdin.readline\r\n\r\n\r\ndp = [[1] * 5050 for _ in range(5050)]\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    arr = [*map(int, input().split())]\r\n    for i in range(n):\r\n        for j in range(n):\r\n            dp[i][j] = 1\r\n    \r\n    for j in range(n):\r\n        mx = 0\r\n        cnt = [0] * (n + 1)\r\n        for i in range(j, n):\r\n            cnt[arr[i]] += 1\r\n            mx = max(mx, cnt[arr[i]])\r\n            if ((i - j) % 2 == 0) or (2 * mx > i - j + 1):\r\n                dp[j][i] = 0\r\n    \r\n    res = [0] * n\r\n    res[0] = 1\r\n    for i in range(2, n, 2):\r\n        if dp[0][i - 1]:\r\n            res[i] = 1\r\n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if (res[j] > 0) and (arr[j] == arr[i]) and dp[j + 1][i - 1]:\r\n                res[i] = max(res[i], res[j] + 1)\r\n    \r\n    ans = res[-1]\r\n    for i in range(n - 3, -1, -2):\r\n        if dp[i + 1][n - 1]:\r\n            ans = max(ans, res[i])\r\n    \r\n    print(ans)",
    "prob_desc_created_at": "1656945300",
    "tags": [
        "data structures",
        "dp",
        "greedy"
    ],
    "hidden_unit_tests": ""
}