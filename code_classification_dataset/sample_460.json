{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"9\", \"7\", \"72\"]",
    "src_uid": "b6b60d1e21e51771d6ba2a8b41619296",
    "prob_desc_notes": "NoteFor the first example, the following $$$9$$$ arrays have an ascent: $$$[1, 2], [1, 2], [1, 3], [1, 3], [1, 4], [1, 4], [2, 3], [2, 4], [3, 4]$$$. Arrays with the same contents are counted as their occurences.",
    "prob_desc_description": "A sequence $$$a = [a_1, a_2, \\ldots, a_l]$$$ of length $$$l$$$ has an ascent if there exists a pair of indices $$$(i, j)$$$ such that $$$1 \\le i &lt; j \\le l$$$ and $$$a_i &lt; a_j$$$. For example, the sequence $$$[0, 2, 0, 2, 0]$$$ has an ascent because of the pair $$$(1, 4)$$$, but the sequence $$$[4, 3, 3, 3, 1]$$$ doesn't have an ascent.Let's call a concatenation of sequences $$$p$$$ and $$$q$$$ the sequence that is obtained by writing down sequences $$$p$$$ and $$$q$$$ one right after another without changing the order. For example, the concatenation of the $$$[0, 2, 0, 2, 0]$$$ and $$$[4, 3, 3, 3, 1]$$$ is the sequence $$$[0, 2, 0, 2, 0, 4, 3, 3, 3, 1]$$$. The concatenation of sequences $$$p$$$ and $$$q$$$ is denoted as $$$p+q$$$.Gyeonggeun thinks that sequences with ascents bring luck. Therefore, he wants to make many such sequences for the new year. Gyeonggeun has $$$n$$$ sequences $$$s_1, s_2, \\ldots, s_n$$$ which may have different lengths. Gyeonggeun will consider all $$$n^2$$$ pairs of sequences $$$s_x$$$ and $$$s_y$$$ ($$$1 \\le x, y \\le n$$$), and will check if its concatenation $$$s_x + s_y$$$ has an ascent. Note that he may select the same sequence twice, and the order of selection matters.Please count the number of pairs ($$$x, y$$$) of sequences $$$s_1, s_2, \\ldots, s_n$$$ whose concatenation $$$s_x + s_y$$$ contains an ascent.",
    "prob_desc_output_spec": "Print a single integer, the number of pairs of sequences whose concatenation has an ascent.",
    "prob_desc_input_spec": "The first line contains the number $$$n$$$ ($$$1 \\le n \\le 100\\,000$$$) denoting the number of sequences. The next $$$n$$$ lines contain the number $$$l_i$$$ ($$$1 \\le l_i$$$) denoting the length of $$$s_i$$$, followed by $$$l_i$$$ integers $$$s_{i, 1}, s_{i, 2}, \\ldots, s_{i, l_i}$$$ ($$$0 \\le s_{i, j} \\le 10^6$$$) denoting the sequence $$$s_i$$$.  It is guaranteed that the sum of all $$$l_i$$$ does not exceed $$$100\\,000$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_002.jsonl",
    "code_uid": "dbdfbb9499ee60a4f9b3b72fb94464f3",
    "prob_desc_memory_limit": "1024 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n1 1\\n1 1\\n1 2\\n1 4\\n1 3\", \"3\\n4 2 0 2 0\\n6 9 9 8 8 7 7\\n1 6\", \"10\\n3 62 24 39\\n1 17\\n1 99\\n1 60\\n1 64\\n1 30\\n2 79 29\\n2 20 73\\n2 85 37\\n1 100\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin\ninput=stdin.readline\nn=int(input());s=cnt=0;v,p=[],[]\nfor _ in range(n):\n\ta=list(map(int,input().split()))\n\tl=a[0]\n\tdel a[0]\n\tmx=mn=a[0];f=1\n\tfor i in range(1,l):\n\t\tif a[i]>mn:f=0;break\n\t\telse:mn=a[i]\n\tif f:\n\t\tv+=mn,\n\t\tp+=mx,\n\telse:\n\t\ts+=1\ncnt=s*n+(n-s)*s\nm=n-s\np=sorted(p,reverse=True)\nfor i in range(m):\n\tl=0\n\tr=m-1\n\tans=-1\n\twhile l<=r:\n\t\tmd=(l+r)//2\n\t\tif p[md]<=v[i]:r=md-1\n\t\telse:ans=md;l=md+1\n\tcnt+=(ans+1)\nprint(cnt)",
    "prob_desc_created_at": "1578139500",
    "tags": [
        "dp",
        "combinatorics",
        "implementation",
        "sortings",
        "data structures",
        "binary search"
    ],
    "hidden_unit_tests": ""
}