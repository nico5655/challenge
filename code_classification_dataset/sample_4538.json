{
    "prob_desc_time_limit": "5 seconds",
    "prob_desc_sample_outputs": "[\"3 3\", \"9 7\", \"2000000000 1\", \"1393 3876\"]",
    "src_uid": "3317413b2c38fff76f7816c3554e9862",
    "prob_desc_notes": "NoteThe first test case was explained in the statement.In the second test case $$$p = [100, 101, 102, 103, 104, 105, 104, 103, 102, 103, 104, 105, 106, 107, 108]$$$.In the third test case $$$p = [1, 2, \\ldots, 2000000000]$$$.",
    "prob_desc_description": "Igor had a sequence $$$d_1, d_2, \\dots, d_n$$$ of integers. When Igor entered the classroom there was an integer $$$x$$$ written on the blackboard.Igor generated sequence $$$p$$$ using the following algorithm:   initially, $$$p = [x]$$$;  for each $$$1 \\leq i \\leq n$$$ he did the following operation $$$|d_i|$$$ times:   if $$$d_i \\geq 0$$$, then he looked at the last element of $$$p$$$ (let it be $$$y$$$) and appended $$$y + 1$$$ to the end of $$$p$$$;  if $$$d_i &lt; 0$$$, then he looked at the last element of $$$p$$$ (let it be $$$y$$$) and appended $$$y - 1$$$ to the end of $$$p$$$.  For example, if $$$x = 3$$$, and $$$d = [1, -1, 2]$$$, $$$p$$$ will be equal $$$[3, 4, 3, 4, 5]$$$.Igor decided to calculate the length of the longest increasing subsequence of $$$p$$$ and the number of them.A sequence $$$a$$$ is a subsequence of a sequence $$$b$$$ if $$$a$$$ can be obtained from $$$b$$$ by deletion of several (possibly, zero or all) elements.A sequence $$$a$$$ is an increasing sequence if each element of $$$a$$$ (except the first one) is strictly greater than the previous element.For $$$p = [3, 4, 3, 4, 5]$$$, the length of longest increasing subsequence is $$$3$$$ and there are $$$3$$$ of them: $$$[\\underline{3}, \\underline{4}, 3, 4, \\underline{5}]$$$, $$$[\\underline{3}, 4, 3, \\underline{4}, \\underline{5}]$$$, $$$[3, 4, \\underline{3}, \\underline{4}, \\underline{5}]$$$.",
    "prob_desc_output_spec": "Print two integers:    the first integer should be equal to the length of the longest increasing subsequence of $$$p$$$;  the second should be equal to the number of them modulo $$$998244353$$$.  You should print only the second number modulo $$$998244353$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 50$$$) — the length of the sequence $$$d$$$. The second line contains a single integer $$$x$$$ ($$$-10^9 \\leq x \\leq 10^9$$$) — the integer on the blackboard. The third line contains $$$n$$$ integers $$$d_1, d_2, \\ldots, d_n$$$ ($$$-10^9 \\leq d_i \\leq 10^9$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 3000,
    "file_name": "train_100.jsonl",
    "code_uid": "981b4dee6842c267e1d973d3bfa1535b",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n3\\n1 -1 2\", \"3\\n100\\n5 -3 6\", \"3\\n1\\n999999999 0 1000000000\", \"5\\n34\\n1337 -146 42 -69 228\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys, io, os\r\n\r\nif os.environ['USERNAME']=='kissz':\r\n    inp=open('in55.txt','r').readline\r\n    def debug(*args):\r\n        print(*args,file=sys.stderr)\r\nelse:\r\n    inp=io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\r\n    def debug(*args):\r\n        pass\r\n\r\ndef mexp(size,power):\r\n    A=[]\r\n    for i in range(size):\r\n        A.append([int(j<=(i//2)*2) for j in range(size)])\r\n    powers={1: A}\r\n    p=1\r\n    while p*2<=power:\r\n        powers[p*2]=mmmult(powers[p],powers[p])\r\n        p*=2\r\n    A=powers[p]\r\n    power-=p\r\n    while power>0:\r\n        p=p//2\r\n        if p<=power:\r\n            A=mmmult(A,powers[p])\r\n            power-=p\r\n    return A                \r\n\r\ndef mvmult(A,V):\r\n    res=[]\r\n    for i in range(len(A)):\r\n        res.append(sum(a*v for a,v in zip(A[i],V)) % 998244353 )\r\n    return res\r\n\r\ndef mmmult(A,B):\r\n    res=[]\r\n    for i in range(len(A)):\r\n        res.append([sum(a*B[j][k] for j,a in enumerate(A[i])) for k in range(len(B[0]))])\r\n    return res\r\n\r\ndef get_rep(corners):\r\n    corners[0]-=1\r\n    corners[-1]+=1\r\n    bps=sorted(list(set(corners)))\r\n    m=len(bps)\r\n    X=[1]\r\n    active=[1]\r\n    for i in range(1,m):\r\n        x,y=bps[i-1],bps[i]\r\n        d=y-x\r\n        A=mexp(len(active),d)\r\n        X=mvmult(A,X)\r\n        #debug(active,X)\r\n        #debug(A)     \r\n        if i<m-1:\r\n            for j,c in enumerate(corners):\r\n                if c==y:\r\n                    if j%2: # top: j and j+1 in active\r\n                        idx=active.index(j)\r\n                        X[idx+2]+=X[idx]\r\n                        active.pop(idx)\r\n                        active.pop(idx)\r\n                        X.pop(idx)\r\n                        X.pop(idx)\r\n                    else: # bottom\r\n                        active+=[j,j+1]\r\n                        active.sort()\r\n                        idx=active.index(j)\r\n                        X=X[:idx]+[0,X[idx-1]]+X[idx:]\r\n        else:\r\n            return X[0]\r\n        \r\nn=int(inp())\r\ninp()\r\nd,*D=map(int,inp().split())\r\nif d==0 and all(dd==0 for dd in D):\r\n    print(1,1)\r\nelse:\r\n    while d==0: d,*D=D\r\n    up=(d>=0)\r\n    corners=[0,d]\r\n    for d in D:\r\n        x=corners[-1]+d\r\n        if up==(d>=0):\r\n            corners[-1]=x\r\n        if up!=(d>=0):\r\n            up=(d>=0)\r\n            corners.append(x)\r\n    debug(corners)\r\n    \r\n    cands=[(-1,0,0)]\r\n    low=(0,0)\r\n    maxdiff=(0,0,0)\r\n    for i,corner in enumerate(corners):\r\n        if corner<low[0]: low=(corner,i)\r\n        if corner-low[0]>=cands[0][0]:\r\n            if corner-low[0]==cands[0][0] and low[1]>cands[0][1]:\r\n                cands+=[(corner-low[0],low[1],i)]\r\n            else:\r\n                cands=[(corner-low[0],low[1],i)]\r\n    \r\n    L=cands[0][0]+1\r\n    if L>1:\r\n        X=0\r\n        debug(cands)\r\n        for _, starti, endi in cands:\r\n            #debug(corners[starti:endi+1])\r\n            X+=get_rep(corners[starti:endi+1])\r\n    else:\r\n        X=1-corners[-1]\r\n    print(L,X % 998244353)\r\n\r\n\r\n    \r\n\r\n\r\n\r\n",
    "prob_desc_created_at": "1611066900",
    "tags": [
        "dp",
        "math",
        "matrices"
    ],
    "hidden_unit_tests": ""
}