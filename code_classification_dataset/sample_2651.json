{
    "prob_desc_time_limit": "4 seconds",
    "prob_desc_sample_outputs": "[\"OR 1 2\\n\\nOR 2 3\\n\\nXOR 2 4\\n\\n! 0 0 2 3\"]",
    "src_uid": "0ce667283c449582aa79c64927a4b781",
    "prob_desc_notes": "NoteThe array $$$a$$$ in the example is $$$[0, 0, 2, 3]$$$.",
    "prob_desc_description": "The only difference between the easy and hard versions is the constraints on the number of queries.This is an interactive problem.Ridbit has a hidden array $$$a$$$ of $$$n$$$ integers which he wants Ashish to guess. Note that $$$n$$$ is a power of two. Ashish is allowed to ask three different types of queries. They are of the form   AND $$$i$$$ $$$j$$$: ask for the bitwise AND of elements $$$a_i$$$ and $$$a_j$$$ $$$(1 \\leq i, j \\le n$$$, $$$i \\neq j)$$$  OR $$$i$$$ $$$j$$$: ask for the bitwise OR of elements $$$a_i$$$ and $$$a_j$$$ $$$(1 \\leq i, j \\le n$$$, $$$i \\neq j)$$$  XOR $$$i$$$ $$$j$$$: ask for the bitwise XOR of elements $$$a_i$$$ and $$$a_j$$$ $$$(1 \\leq i, j \\le n$$$, $$$i \\neq j)$$$ Can you help Ashish guess the elements of the array?In this version, each element takes a value in the range $$$[0, n-1]$$$ (inclusive) and Ashish can ask no more than $$$n+1$$$ queries.",
    "prob_desc_output_spec": null,
    "prob_desc_input_spec": "The first line of input contains one integer $$$n$$$ $$$(4 \\le n \\le 2^{16})$$$ — the length of the array. It is guaranteed that $$$n$$$ is a power of two.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": null,
    "file_name": "train_027.jsonl",
    "code_uid": "5ce5536001501032bbd9e6c2a1e938eb",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n\\n0\\n\\n2\\n\\n3\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input())\na = [0]\nknow = 0\npos = [0]*n\npos[0] = 1\nfor i in range(2, n+1):\n\tprint(\"XOR\", 1, i)\n\tx = int(input())\n\ta.append(x)\n\tif pos[x] > 0 and know == 0:\n\t\tknow = 1\n\t\tprint(\"OR\", pos[x], i)\n\t\ta[0] = int(input())^x\n\tpos[x] = i\nif know == 0:\n\tprint(\"OR\", 1, pos[1])\n\tx = int(input()) # x = a[0] | (a[0] ^ 1)\n\tprint(\"OR\", 1, pos[2])\n\ty = int(input()) # y = a[0] | (a[0] ^ 2)\n\ta[0] = (x & (n-2)) | (y & (n-3))\nfor i in range(1, n):\n\ta[i] ^= a[0]\nprint('!', *a)",
    "prob_desc_created_at": "1605969300",
    "tags": [
        "math",
        "constructive algorithms",
        "bitmasks",
        "interactive"
    ],
    "hidden_unit_tests": ""
}