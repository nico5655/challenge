{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1.75\", \"12\", \"3.141592\"]",
    "src_uid": "89ef92879ce322251c9734b22a413d36",
    "prob_desc_notes": "NoteIn the first example, you should predict teams 1 and 4 to win in round 1, and team 1 to win in round 2. Recall that the winner you predict in round 2 must also be predicted as a winner in round 1.",
    "prob_desc_description": "The annual college sports-ball tournament is approaching, which for trademark reasons we'll refer to as Third Month Insanity. There are a total of 2N teams participating in the tournament, numbered from 1 to 2N. The tournament lasts N rounds, with each round eliminating half the teams. The first round consists of 2N - 1 games, numbered starting from 1. In game i, team 2·i - 1 will play against team 2·i. The loser is eliminated and the winner advances to the next round (there are no ties). Each subsequent round has half as many games as the previous round, and in game i the winner of the previous round's game 2·i - 1 will play against the winner of the previous round's game 2·i.Every year the office has a pool to see who can create the best bracket. A bracket is a set of winner predictions for every game. For games in the first round you may predict either team to win, but for games in later rounds the winner you predict must also be predicted as a winner in the previous round. Note that the bracket is fully constructed before any games are actually played. Correct predictions in the first round are worth 1 point, and correct predictions in each subsequent round are worth twice as many points as the previous, so correct predictions in the final game are worth 2N - 1 points.For every pair of teams in the league, you have estimated the probability of each team winning if they play against each other. Now you want to construct a bracket with the maximum possible expected score.",
    "prob_desc_output_spec": "Print the maximum possible expected score over all possible brackets. Your answer must be correct to within an absolute or relative error of 10 - 9. Formally, let your answer be a, and the jury's answer be b. Your answer will be considered correct, if .",
    "prob_desc_input_spec": "Input will begin with a line containing N (2 ≤ N ≤ 6). 2N lines follow, each with 2N integers. The j-th column of the i-th row indicates the percentage chance that team i will defeat team j, unless i = j, in which case the value will be 0. It is guaranteed that the i-th column of the j-th row plus the j-th column of the i-th row will add to exactly 100.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_009.jsonl",
    "code_uid": "fe69a3ad2a471eb90fa8197125a83674",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n0 40 100 100\\n60 0 40 40\\n0 60 0 45\\n0 60 55 0\", \"3\\n0 0 100 0 100 0 0 0\\n100 0 100 0 0 0 100 100\\n0 0 0 100 100 0 0 0\\n100 100 0 0 0 0 100 100\\n0 100 0 100 0 0 100 0\\n100 100 100 100 100 0 0 0\\n100 0 100 0 0 100 0 0\\n100 0 100 0 100 100 100 0\", \"2\\n0 21 41 26\\n79 0 97 33\\n59 3 0 91\\n74 67 9 0\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\n\nN = int(sys.stdin.readline())\nP = []\nfor i in range(2 ** N) :\n  P.append([int(x)/100. for x in sys.stdin.readline().split()])\n\nProunds = [[1 for i in range(2**N)] for j in range(N+1) ]\nrounds = [[0 for i in range(2**N)] for j in range(N+1) ]\n\nfor i in range(1, N+1) :\n  for player_a in range(2 ** N) :\n    top = int(player_a / (2 ** i)) * (2 ** i)\n    bottom = top + (2 ** i)\n    mid = bottom - (2 ** (i - 1))\n    \n    \n    Prounds[i][player_a] = Prounds[i-1][player_a] * sum([P[player_a][player_b]*Prounds[i-1][player_b] for player_b in (range(mid, bottom) if player_a < mid else range(top, mid))])\n    \n    rounds[i][player_a] = max([rounds[i-1][player_a] + rounds[i-1][player_b] + (2 ** (i-1))*Prounds[i][player_a] for player_b in (range(mid, bottom) if player_a < mid else range(top, mid))])\n    \nprint max(rounds[N])",
    "prob_desc_created_at": "1505583300",
    "tags": [
        "dp",
        "probabilities",
        "trees"
    ],
    "hidden_unit_tests": ""
}