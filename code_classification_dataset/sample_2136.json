{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"3\", \"-1\"]",
    "src_uid": "3d670528c82a7d8dcd187b7304d36f96",
    "prob_desc_notes": "NoteFor the first sample, we can split the strip into 3 pieces: [1, 3, 1], [2, 4], [1, 2].For the second sample, we can't let 1 and 100 be on the same piece, so no solution exists.",
    "prob_desc_description": "Alexandra has a paper strip with n numbers on it. Let's call them ai from left to right.Now Alexandra wants to split it into some pieces (possibly 1). For each piece of strip, it must satisfy: Each piece should contain at least l numbers. The difference between the maximal and the minimal number on the piece should be at most s.Please help Alexandra to find the minimal number of pieces meeting the condition above.",
    "prob_desc_output_spec": "Output the minimal number of strip pieces. If there are no ways to split the strip, output -1.",
    "prob_desc_input_spec": "The first line contains three space-separated integers n, s, l (1 ≤ n ≤ 105, 0 ≤ s ≤ 109, 1 ≤ l ≤ 105). The second line contains n integers ai separated by spaces ( - 109 ≤ ai ≤ 109).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_017.jsonl",
    "code_uid": "b2e0d25cc17bfc43fa58066dc9e9d832",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7 2 2\\n1 3 1 2 4 1 2\", \"7 2 2\\n1 100 1 100 1 100 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "#!/usr/bin/python\n# coding: utf-8\n\ndef make(a, n, s, l):\n  pieces = []\n  i = 1\n  tmpMin = a[0]\n  tmpMax = a[0]\n  tmpPieces = [a[0]]\n  while i < n:\n    if abs(a[i] - tmpMin) <= s and abs(a[i] - tmpMax) <= s:\n      tmpPieces.append(a[i])\n      if a[i] < tmpMin:\n        tmpMin = a[i]\n      elif a[i] > tmpMax:\n        tmpMax = a[i]\n    else:\n      pieces.append(tmpPieces)\n      tmpPieces = [a[i]]\n      tmpMin = a[i]\n      tmpMax = a[i]\n    i += 1\n  pieces.append(tmpPieces)\n  fail = False\n  for j in xrange(len(pieces)):\n    if len(pieces[j]) < l:\n      if j > 0:\n        preVpc = pieces[j - 1]\n        minJ = min(pieces[j])\n        maxJ = max(pieces[j])\n        while len(pieces[j]) < l:\n          tmp = preVpc.pop()\n          if abs(tmp - minJ) <= s and abs(tmp - maxJ) <= s:\n            pieces[j].insert(0, tmp)\n            if tmp < minJ:\n              minJ = tmp\n            elif tmp > maxJ:\n              maxJ = tmp\n          else:\n            return -1\n          if len(preVpc) < l:\n            return -1\n      else:\n        return -1\n  return len(pieces)\nn, s, l = map(int, raw_input().split())\na = map(int, raw_input().split())\nans = make(a, n, s, l)\nif ans < 0:\n  a.reverse()\n  ans = make(a, n, s, l)\nprint ans ",
    "prob_desc_created_at": "1416590400",
    "tags": [
        "dp",
        "two pointers",
        "binary search",
        "data structures"
    ],
    "hidden_unit_tests": ""
}