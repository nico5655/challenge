{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1\", \"0\", \"8\"]",
    "src_uid": "805d82c407c1b34f217f8836454f7e09",
    "prob_desc_notes": "NoteIn the first example you can add one point with coordinate 0.In the second example the distances between all neighboring points are already equal, so you shouldn't add anything.",
    "prob_desc_description": "There are n points on a straight line, and the i-th point among them is located at xi. All these coordinates are distinct.Determine the number m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. ",
    "prob_desc_output_spec": "Print a single integer m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. ",
    "prob_desc_input_spec": "The first line contains a single integer n (3 ≤ n ≤ 100 000) — the number of points. The second line contains a sequence of integers x1, x2, ..., xn ( - 109 ≤ xi ≤ 109) — the coordinates of the points. All these coordinates are distinct. The points can be given in an arbitrary order.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_007.jsonl",
    "code_uid": "f4b1ce3084f6baa3e9090668f580462d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n-5 10 5\", \"6\\n100 200 400 300 600 500\", \"4\\n10 9 0 -1\"]",
    "exec_outcome": "PASSED",
    "source_code": "def gcd(a,b):\n    if b == 0:\n        return a;\n    return gcd(b,a%b);\n\n\nn=int(input())\na=[int(x) for x in input().split()]\na.sort()\nans=0\nfor i in range(1,n):\n    ans=gcd(ans,a[i]-a[i-1])\n\nprint((a[n-1]-a[0])//ans+1-n)",
    "prob_desc_created_at": "1521300900",
    "tags": [],
    "hidden_unit_tests": ""
}