{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"4\\n9\\n2\\n12\\n3\\n1\"]",
    "src_uid": "2b757fa66ce89046fe18cdfdeafa6660",
    "prob_desc_notes": "NoteIn the first test case, one of the optimal solutions is:  Divide $$$a$$$ by $$$b$$$. After this operation $$$a = 4$$$ and $$$b = 2$$$.  Divide $$$a$$$ by $$$b$$$. After this operation $$$a = 2$$$ and $$$b = 2$$$.  Increase $$$b$$$. After this operation $$$a = 2$$$ and $$$b = 3$$$.  Divide $$$a$$$ by $$$b$$$. After this operation $$$a = 0$$$ and $$$b = 3$$$. ",
    "prob_desc_description": "You have two positive integers $$$a$$$ and $$$b$$$.You can perform two kinds of operations:  $$$a = \\lfloor \\frac{a}{b} \\rfloor$$$ (replace $$$a$$$ with the integer part of the division between $$$a$$$ and $$$b$$$)  $$$b=b+1$$$ (increase $$$b$$$ by $$$1$$$) Find the minimum number of operations required to make $$$a=0$$$.",
    "prob_desc_output_spec": "For each test case, print a single integer: the minimum number of operations required to make $$$a=0$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) â€” the number of test cases. The only line of the description of each test case contains two integers $$$a$$$, $$$b$$$ ($$$1 \\le a,b \\le 10^9$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1000,
    "file_name": "train_092.jsonl",
    "code_uid": "78a09ee5fffd23419b136d1677624f6c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n9 2\\n1337 1\\n1 1\\n50000000 4\\n991026972 997\\n1234 5678\"]",
    "exec_outcome": "PASSED",
    "source_code": "def count_divs(a, b):\r\n    count = 0\r\n    while a > 0:\r\n        a = a // b\r\n        count += 1\r\n    return count\r\n\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    a, b = map(int, input().split())\r\n    b_additions = 0\r\n    if b == 1:\r\n        b = 2\r\n        b_additions += 1\r\n    prev_res = count_divs(a, b) + b_additions\r\n    while True:\r\n        b_additions += 1\r\n        b += 1\r\n        curr_res = count_divs(a, b) + b_additions\r\n        if curr_res > prev_res:\r\n            break\r\n        prev_res = curr_res\r\n\r\n    print(prev_res)\r\n",
    "prob_desc_created_at": "1613141400",
    "tags": [
        "brute force",
        "greedy",
        "math",
        "number theory"
    ],
    "hidden_unit_tests": ""
}