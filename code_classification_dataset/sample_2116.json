{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"Fou\\nShi\\nShi\"]",
    "src_uid": "6e2e7fd13e9f79267baa4bfd75444f32",
    "prob_desc_notes": "NoteIn the first example, $$$a_3 = 0$$$. You can't reach it, because AND with it is always zero. $$$a_2\\, \\&amp;\\, a_4 &gt; 0$$$, so $$$4$$$ is reachable from $$$2$$$, and to go from $$$1$$$ to $$$4$$$ you can use $$$p = [1, 2, 4]$$$.",
    "prob_desc_description": "Toad Pimple has an array of integers $$$a_1, a_2, \\ldots, a_n$$$.We say that $$$y$$$ is reachable from $$$x$$$ if $$$x&lt;y$$$ and there exists an integer array $$$p$$$ such that $$$x = p_1 &lt; p_2 &lt; \\ldots &lt; p_k=y$$$, and $$$a_{p_i}\\, \\&amp;\\, a_{p_{i+1}} &gt; 0$$$ for all integers $$$i$$$ such that $$$1 \\leq i &lt; k$$$.Here $$$\\&amp;$$$ denotes the bitwise AND operation.You are given $$$q$$$ pairs of indices, check reachability for each of them.",
    "prob_desc_output_spec": "Output $$$q$$$ lines. In the $$$i$$$-th of them print \"Shi\" if $$$y_i$$$ is reachable from $$$x_i$$$, otherwise, print \"Fou\".",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$q$$$ ($$$2 \\leq n \\leq 300\\,000$$$, $$$1 \\leq q \\leq 300\\,000$$$) — the number of integers in the array and the number of queries you need to answer. The second line contains $$$n$$$ space-separated integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\leq a_i \\leq 300\\,000$$$) — the given array. The next $$$q$$$ lines contain two integers each. The $$$i$$$-th of them contains two space-separated integers $$$x_i$$$ and $$$y_i$$$ ($$$1 \\leq x_i &lt; y_i \\leq n$$$). You need to check if $$$y_i$$$ is reachable from $$$x_i$$$. ",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_017.jsonl",
    "code_uid": "781dd6fa95b29e45794867d8a9aa6111",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 3\\n1 3 0 2 1\\n1 3\\n2 4\\n1 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop,heapify\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n\nfrom itertools import accumulate\nfrom functools import lru_cache\n\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\n\n\n\nn, q = li()\n\n\nqueue = [-1] * 20\n\nans = [[-1] * 20 for i in range(n + 1)]\nl = li()\nfor i, curr in enumerate(l):\n\n    for j in range(20):\n        if curr >> j & 1:\n            for k in range(20):        \n                ans[i][k] = max(ans[i][k], ans[queue[j]][k])\n            ans[i][j] = i\n    \n    for j in range(20):queue[j] = max(queue[j], ans[i][j])\n\n\nqueries = []\nfor i in range(q):queries.append(li())    \nfor i in range(q):\n    a, b = queries[i]\n    a -= 1\n    b -= 1\n\n    currans = 0\n\n    for j in range(20):\n        if (l[a] >> j) & 1 and ans[b][j] >= a:\n            currans = 1\n            break\n    print('Shi' if currans else 'Fou')",
    "prob_desc_created_at": "1558884900",
    "tags": [
        "dp",
        "bitmasks"
    ],
    "hidden_unit_tests": ""
}