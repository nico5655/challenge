{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3 4 2 1\", \"-1\", \"4 5 1 2 3\"]",
    "src_uid": "f52a4f8c4d84733a8e78a5825b63bdbc",
    "prob_desc_notes": null,
    "prob_desc_description": "A permutation of length n is an array containing each integer from 1 to n exactly once. For example, q = [4, 5, 1, 2, 3] is a permutation. For the permutation q the square of permutation is the permutation p that p[i] = q[q[i]] for each i = 1... n. For example, the square of q = [4, 5, 1, 2, 3] is p = q2 = [2, 3, 4, 5, 1].This problem is about the inverse operation: given the permutation p you task is to find such permutation q that q2 = p. If there are several such q find any of them.",
    "prob_desc_output_spec": "If there is no permutation q such that q2 = p print the number \"-1\". If the answer exists print it. The only line should contain n different integers qi (1 ≤ qi ≤ n) — the elements of the permutation q. If there are several solutions print any of them.",
    "prob_desc_input_spec": "The first line contains integer n (1 ≤ n ≤ 106) — the number of elements in permutation p. The second line contains n distinct integers p1, p2, ..., pn (1 ≤ pi ≤ n) — the elements of permutation p.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_078.jsonl",
    "code_uid": "f72311f55a7ddb13537aedb87076082f",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n2 1 4 3\", \"4\\n2 1 3 4\", \"5\\n2 3 4 5 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "from __future__ import division\nfrom collections import defaultdict\nimport random\n#import numpy as np\n\ndef get_cycle(perm, i):\n    start = i\n    current = i\n    res = [i]\n    while True:\n        new = perm[current]\n        perm[current] = -1\n        current = new\n        if current == start:\n            return res\n        res.append(current)\n\ndef invert_odd_cycle(res, cycle):\n    n = len(cycle)\n    m = (n - 1) // 2\n    for i, e in enumerate(cycle):\n        res[e] = cycle[(n + i - m) % n]\n\ndef invert_two_even_cycles(res, cycle1, cycle2):\n    n = len(cycle1)\n    for i in range(n):\n        res[cycle1[i]] = cycle2[i]\n        res[cycle2[i]] = cycle1[(i+1)%n]\n\ndef _sqrtp(perm):\n    perm = list(perm)\n    res = [None] * len(perm)\n    start = 0\n    even_cycles = defaultdict(list)\n    while True:\n        while perm[start] == -1:\n            start += 1\n            if start >= len(perm):\n                for cycles in even_cycles.values():\n                    if len(cycles) % 2 == 1:\n                        return -1\n                    for i in range(len(cycles) // 2):\n                        invert_two_even_cycles(res, cycles[2 * i], cycles[2 * i + 1])\n                return tuple(res)\n\n        cycle = get_cycle(perm, start)\n        if len(cycle) % 2 == 1:\n            invert_odd_cycle(res, cycle)\n        else:\n            even_cycles[len(cycle)].append(cycle)\n\n\ndef sqrtp(perm):\n    res = _sqrtp(decp(perm))\n    if isinstance(res, tuple):\n        return incp(res)\n    else:\n        return res\n\ndef _sqrp(perm):\n    res = [None]*len(perm)\n    for i,e in enumerate(perm):\n        res[i] = perm[perm[i]]\n    return tuple(res)\n\ndef sqrp(perm):\n    return incp(_sqrp(decp(perm)))\n\ndef incp(perm):\n    return tuple(n + 1 for n in perm)\n\ndef decp(perm):\n    return tuple(n - 1 for n in perm)\n\ndef randp(n):\n    res = list(range(n))\n    for i in range(1, n):\n        #j = np.random.randint(0, i)\n        j = random.randint(0, i)\n        a = res[i]\n        res[i] = res[j]\n        res[j] = a\n    return incp(res)\n\nraw_input()\nperm = map(int, raw_input().split())\nres = sqrtp(perm)\nprint(' '.join(map(str, res)) if isinstance(res, tuple) else res)\n",
    "prob_desc_created_at": "1451055600",
    "tags": [
        "graphs",
        "constructive algorithms",
        "combinatorics",
        "math",
        "dfs and similar"
    ],
    "hidden_unit_tests": ""
}