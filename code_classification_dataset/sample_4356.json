{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"aabaabaa\\naaabbcc\\ndihktlwlxnyoz\"]",
    "src_uid": "1d46a356c5515f8894cbb83e438cc544",
    "prob_desc_notes": "NoteIn the first test case, it is optimal to take two 'a's from the string $$$a$$$ and add them to the string $$$c$$$. Then it is forbidden to take more characters from $$$a$$$, hence one character 'b' from the string $$$b$$$ has to be taken. Following that logic, we end up with $$$c$$$ being 'aabaabaa' when string $$$a$$$ is emptied.In the second test case it is optimal to take as many 'a's from string $$$a$$$ as possible, then take as many 'b's as possible from string $$$b$$$. In the end, we take two 'c's from the string $$$a$$$ emptying it. ",
    "prob_desc_description": "Kuznecov likes art, poetry, and music. And strings consisting of lowercase English letters.Recently, Kuznecov has found two strings, $$$a$$$ and $$$b$$$, of lengths $$$n$$$ and $$$m$$$ respectively. They consist of lowercase English letters and no character is contained in both strings. Let another string $$$c$$$ be initially empty. Kuznecov can do the following two types of operations:  Choose any character from the string $$$a$$$, remove it from $$$a$$$, and add it to the end of $$$c$$$.  Choose any character from the string $$$b$$$, remove it from $$$b$$$, and add it to the end of $$$c$$$. But, he can not do more than $$$k$$$ operations of the same type in a row. He must perform operations until either $$$a$$$ or $$$b$$$ becomes empty. What is the lexicographically smallest possible value of $$$c$$$ after he finishes?A string $$$x$$$ is lexicographically smaller than a string $$$y$$$ if and only if one of the following holds: $$$x$$$ is a prefix of $$$y$$$, but $$$x \\neq y$$$;  in the first position where $$$x$$$ and $$$y$$$ differ, the string $$$x$$$ has a letter that appears earlier in the alphabet than the corresponding letter in $$$y$$$.",
    "prob_desc_output_spec": "In each test case, output a single string $$$c$$$ — the answer to the problem.",
    "prob_desc_input_spec": "There are several test cases in the input data. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases. This is followed by the test cases description. The first line of each test case contains three integers $$$n$$$, $$$m$$$, and $$$k$$$ ($$$1\\leq n,m,k \\leq 100$$$) — parameters from the statement. The second line of each test case contains the string $$$a$$$ of length $$$n$$$. The third line of each test case contains the string $$$b$$$ of length $$$m$$$.  The strings contain only lowercase English letters. It is guaranteed that no symbol appears in $$$a$$$ and $$$b$$$ simultaneously.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_095.jsonl",
    "code_uid": "e760bd560332643f4623d83a872f4868",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n\\n6 4 2\\n\\naaaaaa\\n\\nbbbb\\n\\n5 9 3\\n\\ncaaca\\n\\nbedededeb\\n\\n7 7 1\\n\\nnoskill\\n\\nwxhtzdy\"]",
    "exec_outcome": "PASSED",
    "source_code": "t = int(input())\r\n\r\nfor c in range(t):\r\n    n, m, k = [int(i) for i in input().split()]\r\n    s = []\r\n    ans = ''\r\n    s1 = input()\r\n    s.append(''.join(sorted(s1)))\r\n    s2 = input()\r\n    s.append(''.join(sorted(s2)))\r\n    canSelect = True\r\n    selected = 0\r\n    d = k\r\n    while(s[0]!='' and s[1]!=''):\r\n        if (canSelect):\r\n            lastSelected = selected\r\n            if (s[1-selected][0]<s[selected][0]):\r\n                selected = 1-selected\r\n            if (lastSelected != selected):\r\n                d = k\r\n        else:\r\n            selected = 1-selected\r\n            canSelect = True\r\n        if (s[selected][0]<s[1-selected][0]):\r\n            l = min(d,s[selected].count(s[selected][0]))\r\n        else:\r\n            l = 1\r\n        ans+=l*s[selected][0]\r\n        s[selected]=s[selected][l:]\r\n        d -= l\r\n        if (d<=0):\r\n            d = k\r\n            canSelect = False\r\n    print(ans)\r\n",
    "prob_desc_created_at": "1654878900",
    "tags": [
        "brute force",
        "greedy",
        "implementation",
        "sortings",
        "two pointers"
    ],
    "hidden_unit_tests": ""
}