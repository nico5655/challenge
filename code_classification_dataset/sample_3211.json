{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\", \"0\", \"13\"]",
    "src_uid": "a5d56056fd66713128616bc7c2de8b22",
    "prob_desc_notes": null,
    "prob_desc_description": "Marina loves Sasha. But she keeps wondering whether Sasha loves her. Of course, the best way to know it is fortune telling. There are many ways of telling fortune, but Marina has picked the easiest one. She takes in her hand one or several camomiles and tears off the petals one by one. After each petal she pronounces alternatively \"Loves\" and \"Doesn't love\", at that Marina always starts with \"Loves\". There are n camomiles growing in the field, possessing the numbers of petals equal to a1, a2, ... an. Marina wants to pick a bouquet with the maximal possible total number of petals so that the result would still be \"Loves\". Help her do that; find the maximal number of petals possible in the bouquet.",
    "prob_desc_output_spec": "Print a single number which is the maximal number of petals in the bouquet, the fortune telling on which would result in \"Loves\". If there are no such bouquet, print 0 instead. The bouquet may consist of a single flower.",
    "prob_desc_input_spec": "The first line contains an integer n (1 ≤ n ≤ 100), which is the number of flowers growing in the field. The second line contains n integers ai (1 ≤ ai ≤ 100) which represent the number of petals on a given i-th camomile.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1200,
    "file_name": "train_046.jsonl",
    "code_uid": "8e19832cb294f891a89fbd7149b649c8",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1\\n1\", \"1\\n2\", \"3\\n5 6 7\"]",
    "exec_outcome": "PASSED",
    "source_code": "# ///==========Libraries, Constants and Functions=============///\n#mkraghav\nimport sys\n\ninf = float(\"inf\")\nmod = 1000000007\n\n\ndef get_array(): return list(map(int, sys.stdin.readline().split()))\n\n\ndef get_ints(): return map(int, sys.stdin.readline().split())\n\n\ndef input(): return sys.stdin.readline()\n\ndef int1():return int(input())\n\nimport string\n\nimport math\n\nfrom itertools import combinations\n# ///==========MAIN=============///\n\n\ndef main():\n    n=int(input())\n    sum=0\n    mn=105\n    l=map(int,input().split())\n    for x in l:\n    \tsum=sum+x\n    \tif x%2==1:\n    \t\tmn=min(mn,x)\n    if sum%2==0:\n    \tif mn==105:\n    \t\tprint(0)\n    \telse:\n    \t\tprint(sum-mn)\n    else:\n    \tprint(sum)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "prob_desc_created_at": "1297440000",
    "tags": [
        "implementation",
        "number theory"
    ],
    "hidden_unit_tests": ""
}