{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\", \"NO\", \"YES\"]",
    "src_uid": "c4b7265ff4332225c0d5617c3233a910",
    "prob_desc_notes": null,
    "prob_desc_description": "One day n cells of some array decided to play the following game. Initially each cell contains a number which is equal to it's ordinal number (starting from 1). Also each cell determined it's favourite number. On it's move i-th cell can exchange it's value with the value of some other j-th cell, if |i - j| = di, where di is a favourite number of i-th cell. Cells make moves in any order, the number of moves is unlimited.The favourite number of each cell will be given to you. You will also be given a permutation of numbers from 1 to n. You are to determine whether the game could move to this state.",
    "prob_desc_output_spec": "If the given state is reachable in the described game, output YES, otherwise NO.",
    "prob_desc_input_spec": "The first line contains positive integer n (1 ≤ n ≤ 100) — the number of cells in the array. The second line contains n distinct integers from 1 to n — permutation. The last line contains n integers from 1 to n — favourite numbers of the cells.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_034.jsonl",
    "code_uid": "cc056a88cd96d0b8039a6bc699aa93e6",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n5 4 3 2 1\\n1 1 1 1 1\", \"7\\n4 3 5 1 2 7 6\\n4 6 6 1 6 6 1\", \"7\\n4 2 5 1 3 7 6\\n4 6 6 1 6 6 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input())\ndata = list(map(int, input().split()))\nspans = list(map(int, input().split()))\n\nconnect = [[False for c in range(n)] for r in range(n)]\nfor p, span in enumerate(spans):\n  for r in [p-span, p+span]:\n    if r >= 0 and r < n:\n      connect[p][r] = connect[r][p] = True\n\ndef visit(data, connect, seen, group, i):\n  if not seen[i]:\n    seen[i] = True\n    group.append((i, data[i]))\n    for j in range(n):\n      if connect[i][j]:\n        visit(data, connect, seen, group, j)\n\nseen = [False for i in range(n)]\nfor i in range(n):\n  group = []\n  visit(data, connect, seen, group, i)\n  group.sort()\n  #print()\n  #print(group)\n  values = sorted([value for (index, value) in group])\n  #print(values)\n  for i, value in enumerate(values):\n    data[group[i][0]] = value\n  #print(data)\n\nif data == list(range(1, n+1)):\n  print('YES')\nelse:\n  print('NO')\n",
    "prob_desc_created_at": "1284735600",
    "tags": [
        "dsu",
        "dfs and similar",
        "graphs"
    ],
    "hidden_unit_tests": ""
}