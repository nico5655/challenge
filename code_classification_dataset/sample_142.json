{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"0\\n2\"]",
    "src_uid": "a98f67141b341152fcf20d803cbd5409",
    "prob_desc_notes": "NoteIn the first permutation, it is already sorted so no exchanges are needed.It can be shown that you need at least $$$2$$$ exchanges to sort the second permutation.$$$[3, 2, 4, 5, 1, 6, 7]$$$Perform special exchange on range ($$$1, 5$$$)$$$[4, 1, 2, 3, 5, 6, 7]$$$Perform special exchange on range ($$$1, 4$$$)$$$[1, 2, 3, 4, 5, 6, 7]$$$",
    "prob_desc_description": "Patrick likes to play baseball, but sometimes he will spend so many hours hitting home runs that his mind starts to get foggy! Patrick is sure that his scores across $$$n$$$ sessions follow the identity permutation (ie. in the first game he scores $$$1$$$ point, in the second game he scores $$$2$$$ points and so on). However, when he checks back to his record, he sees that all the numbers are mixed up! Define a special exchange as the following: choose any subarray of the scores and permute elements such that no element of subarray gets to the same position as it was before the exchange. For example, performing a special exchange on $$$[1,2,3]$$$ can yield $$$[3,1,2]$$$ but it cannot yield $$$[3,2,1]$$$ since the $$$2$$$ is in the same position. Given a permutation of $$$n$$$ integers, please help Patrick find the minimum number of special exchanges needed to make the permutation sorted! It can be proved that under given constraints this number doesn't exceed $$$10^{18}$$$.An array $$$a$$$ is a subarray of an array $$$b$$$ if $$$a$$$ can be obtained from $$$b$$$ by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.",
    "prob_desc_output_spec": "For each test case, output one integer: the minimum number of special exchanges needed to sort the permutation.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 100$$$). Description of the test cases follows. The first line of each test case contains integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$)  — the length of the given permutation. The second line of each test case contains $$$n$$$ integers $$$a_{1},a_{2},...,a_{n}$$$ ($$$1 \\leq a_{i} \\leq n$$$)  — the initial permutation. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_000.jsonl",
    "code_uid": "d8498ad02add4a9f32695655e17a004d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n\\n5\\n\\n1 2 3 4 5\\n\\n7\\n\\n3 2 4 5 1 6 7\"]",
    "exec_outcome": "PASSED",
    "source_code": "from math import *\nfrom collections import *\nfrom operator import itemgetter\nimport bisect\nfrom heapq import *\ni = lambda: input()\nii = lambda: int(input())\niia = lambda: list(map(int,input().split()))\nisa = lambda: list(input().split())\nI = lambda:list(map(int,input().split()))\nchrIdx = lambda x: ord(x)-96\nidxChr = lambda x: chr(96+x)\n\n\nt = ii()\n\nfor _ in range(t):\n\tn = ii()\n\ta = iia()\n\tb = [i+1 for i in range(n)]\n\t#print(b)\n\tc = []\n\tfor i in range(n):\n\t\tc.append(a[i]-(i+1))\n\tcnt = 0\n\tnz = 0\n\tnnz = 0\n\tans = 0\n\tj = 0\n\t#print(c)\n\twhile j<n:\n\t\ti = j\n\t\tnz = 0\n\t\tnnz = 0\n\t\tcz = 0\n\t\twhile i<n:\n\t\t\tcnt+=c[i]\n\t\t\tif c[i]==0:\n\t\t\t\tnz+=1\n\t\t\t\tk = i+1\n\t\t\t\twhile k<n:\n\t\t\t\t\tif c[k]==0:\n\t\t\t\t\t\tk+=1\n\t\t\t\t\telse:\n\t\t\t\t\t\tbreak\n\t\t\t\ti = k-1\n\t\t\telse:\n\t\t\t\tnnz+=1\n\t\t\tif cnt==0:\n\t\t\t\tbreak\n\t\t\ti+=1\n\t\tif nnz>0:\n\t\t\tans+=(nz+1)\n\t\tj = i+1 \n\tprint(min(ans,2))\n\n\n\n\n\n\n\n\n",
    "prob_desc_created_at": "1594479900",
    "tags": [
        "constructive algorithms",
        "math"
    ],
    "hidden_unit_tests": ""
}