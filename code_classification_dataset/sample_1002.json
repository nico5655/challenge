{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"0.320000000000\", \"1.000000000000\"]",
    "src_uid": "5d76ec741a9d873ce9d7c3ef55eb984c",
    "prob_desc_notes": "NoteConsider that [a, b] denotes an interval of integers; this interval includes the boundaries. That is, In first case there are 32 suitable pairs: (1, 7), (1, 8), (1, 9), (1, 10), (2, 7), (2, 8), (2, 9), (2, 10), (3, 7), (3, 8), (3, 9), (3, 10), (4, 7), (4, 8), (4, 9), (4, 10), (7, 1), (7, 2), (7, 3), (7, 4), (8, 1), (8, 2), (8, 3), (8, 4), (9, 1), (9, 2), (9, 3), (9, 4), (10, 1), (10, 2), (10, 3), (10, 4). Total number of possible pairs is 10·10 = 100, so answer is 32 / 100.In second case Petya always get number less than Vasya and the only lucky 7 is between this numbers, so there will be always 1 lucky number.",
    "prob_desc_description": "Petya loves lucky numbers. We all know that lucky numbers are the positive integers whose decimal representations contain only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.Petya and his friend Vasya play an interesting game. Petya randomly chooses an integer p from the interval [pl, pr] and Vasya chooses an integer v from the interval [vl, vr] (also randomly). Both players choose their integers equiprobably. Find the probability that the interval [min(v, p), max(v, p)] contains exactly k lucky numbers.",
    "prob_desc_output_spec": "On the single line print the result with an absolute error of no more than 10 - 9.",
    "prob_desc_input_spec": "The single line contains five integers pl, pr, vl, vr and k (1 ≤ pl ≤ pr ≤ 109, 1 ≤ vl ≤ vr ≤ 109, 1 ≤ k ≤ 1000).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_005.jsonl",
    "code_uid": "7794c865344b2dcd8d5a6cff3c092176",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1 10 1 10 2\", \"5 6 8 10 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "pl,pr,vl,vr,k=map(int,raw_input().split())\ndef conv(x):\n  t=0\n  while x>1:\n    t=t*10+(7 if x&1 else 4)\n    x>>=1\n  return t\na=filter(lambda x: x>=min(pl,vl) and x<=max(pr,vr),[conv(x) for x in xrange(2,1<<11)])\na.sort()\nn,s=len(a),0\na+=[10**10]\ndef size(a,b,c,d):\n  return max(0,min(b,d)-max(a,c)+1)\nfor i in xrange(n-k+1):\n  p1=a[i-1]+1 if i>0 else 1\n  p2=a[i]\n  v1,v2=a[i+k-1],a[i+k]-1\n  s+=size(p1,p2,pl,pr)*size(v1,v2,vl,vr)\n  s+=size(p1,p2,vl,vr)*size(v1,v2,pl,pr)\n  if 1==k and pl<=p2<=pr and vl<=p2<=vr:s-=1\nprint s/1.0/(pr-pl+1)/(vr-vl+1)\n",
    "prob_desc_created_at": "1314633600",
    "tags": [
        "probabilities",
        "brute force"
    ],
    "hidden_unit_tests": ""
}