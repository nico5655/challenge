{
    "prob_desc_time_limit": "2.5 seconds",
    "prob_desc_sample_outputs": "[\"2\\n2\\n6\"]",
    "src_uid": "3c91df8d91562039d550f879570c8af1",
    "prob_desc_notes": "NoteAfter the first query the array is $$$[12, 6, 8, 12]$$$, $$$\\operatorname{gcd}(12, 6, 8, 12) = 2$$$.After the second query — $$$[12, 18, 8, 12]$$$, $$$\\operatorname{gcd}(12, 18, 8, 12) = 2$$$.After the third query — $$$[12, 18, 24, 12]$$$, $$$\\operatorname{gcd}(12, 18, 24, 12) = 6$$$.Here the $$$\\operatorname{gcd}$$$ function denotes the greatest common divisor.",
    "prob_desc_description": "You are given an array $$$a$$$ of length $$$n$$$. You are asked to process $$$q$$$ queries of the following format: given integers $$$i$$$ and $$$x$$$, multiply $$$a_i$$$ by $$$x$$$.After processing each query you need to output the greatest common divisor (GCD) of all elements of the array $$$a$$$.Since the answer can be too large, you are asked to output it modulo $$$10^9+7$$$.",
    "prob_desc_output_spec": "Print $$$q$$$ lines: after processing each query output the GCD of all elements modulo $$$10^9+7$$$ on a separate line.",
    "prob_desc_input_spec": "The first line contains two integers — $$$n$$$ and $$$q$$$ ($$$1 \\le n, q \\le 2 \\cdot 10^5$$$). The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 2 \\cdot 10^5$$$) — the elements of the array $$$a$$$ before the changes. The next $$$q$$$ lines contain queries in the following format: each line contains two integers $$$i$$$ and $$$x$$$ ($$$1 \\le i \\le n$$$, $$$1 \\le x \\le 2 \\cdot 10^5$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_105.jsonl",
    "code_uid": "30244b1b6e6964edc559b447c8eeb41a",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 3\\n1 6 8 12\\n1 12\\n2 3\\n3 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import defaultdict\r\nimport sys, os, io\r\ninput = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\r\n\r\ndef fast_prime_factorization(n):\r\n    d = [(i + 1) % 2 * 2 for i in range(n + 1)]\r\n    d[0], d[1] = 0, 1\r\n    for i in range(3, n + 1):\r\n        if d[i]:\r\n            continue\r\n        for j in range(i, n + 1, 2 * i):\r\n            if not d[j]:\r\n                d[j] = i\r\n    return d\r\n\r\nn, q = map(int, input().split())\r\na = list(map(int, input().split()))\r\nmod = pow(10, 9) + 7\r\nl = 2 * pow(10, 5) + 5\r\nd = fast_prime_factorization(l)\r\ncnt = [defaultdict(lambda : 0) for _ in range(l)]\r\nj = 0\r\nfor i in a:\r\n    while i ^ d[i]:\r\n        cnt[d[i]][j] += 1\r\n        i //= d[i]\r\n    if i > 1:\r\n        cnt[i][j] += 1\r\n    j += 1\r\ny = []\r\nfor _ in range(q):\r\n    i, x = map(int, input().split())\r\n    i -= 1\r\n    y.append((i, x))\r\n    while x ^ d[x]:\r\n        cnt[d[x]][i] += 1\r\n        x //= d[x]\r\n    if x > 1:\r\n        cnt[x][i] += 1\r\ninf = pow(10, 9) + 1\r\nmi = [0] * l\r\ninv = [1] * l\r\nans0 = 1\r\nfor i in range(2, l):\r\n    if len(cnt[i]) ^ n:\r\n        continue\r\n    mi0 = min(j for j in cnt[i].values())\r\n    mi[i] = mi0\r\n    ans0 *= pow(i, mi0, mod)\r\n    ans0 %= mod\r\n    inv[i] = pow(i, mod - 2, mod)\r\nans = [ans0]\r\nfor i, x in reversed(y[1:]):\r\n    while x ^ d[x]:\r\n        cnt[d[x]][i] -= 1\r\n        if mi[d[x]] > cnt[d[x]][i]:\r\n            mi[d[x]] = cnt[d[x]][i]\r\n            ans0 *= inv[d[x]]\r\n            ans0 %= mod\r\n        x //= d[x]\r\n    if x > 1:\r\n        cnt[x][i] -= 1\r\n        if mi[x] > cnt[x][i]:\r\n            mi[d[x]] = cnt[x][i]\r\n            ans0 *= inv[x]\r\n            ans0 %= mod\r\n    ans.append(ans0)\r\nsys.stdout.write(\"\\n\".join(map(str, reversed(ans))))",
    "prob_desc_created_at": "1615039500",
    "tags": [
        "brute force",
        "data structures",
        "hashing",
        "implementation",
        "math",
        "number theory",
        "sortings",
        "two pointers"
    ],
    "hidden_unit_tests": ""
}