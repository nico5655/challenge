{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\\nmasha 1 00123 \\nivan 1 00123\", \"3\\nkatya 1 612 \\npetr 1 12 \\nkarl 1 612\", \"2\\ndasha 2 23 789 \\nivan 4 789 123 2 456\"]",
    "src_uid": "df7b16d582582e6756cdb2d6d856c873",
    "prob_desc_notes": null,
    "prob_desc_description": "Vasya has several phone books, in which he recorded the telephone numbers of his friends. Each of his friends can have one or several phone numbers.Vasya decided to organize information about the phone numbers of friends. You will be given n strings — all entries from Vasya's phone books. Each entry starts with a friend's name. Then follows the number of phone numbers in the current entry, and then the phone numbers themselves. It is possible that several identical phones are recorded in the same record.Vasya also believes that if the phone number a is a suffix of the phone number b (that is, the number b ends up with a), and both numbers are written by Vasya as the phone numbers of the same person, then a is recorded without the city code and it should not be taken into account.The task is to print organized information about the phone numbers of Vasya's friends. It is possible that two different people have the same number. If one person has two numbers x and y, and x is a suffix of y (that is, y ends in x), then you shouldn't print number x. If the number of a friend in the Vasya's phone books is recorded several times in the same format, it is necessary to take it into account exactly once.Read the examples to understand statement and format of the output better.",
    "prob_desc_output_spec": "Print out the ordered information about the phone numbers of Vasya's friends. First output m — number of friends that are found in Vasya's phone books. The following m lines must contain entries in the following format \"name number_of_phone_numbers phone_numbers\". Phone numbers should be separated by a space. Each record must contain all the phone numbers of current friend. Entries can be displayed in arbitrary order, phone numbers for one record can also be printed in arbitrary order.",
    "prob_desc_input_spec": "First line contains the integer n (1 ≤ n ≤ 20) — number of entries in Vasya's phone books.  The following n lines are followed by descriptions of the records in the format described in statement. Names of Vasya's friends are non-empty strings whose length does not exceed 10. They consists only of lowercase English letters. Number of phone numbers in one entry is not less than 1 is not more than 10. The telephone numbers consist of digits only. If you represent a phone number as a string, then its length will be in range from 1 to 10. Phone numbers can contain leading zeros.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_026.jsonl",
    "code_uid": "620c7e1133a98a8610b8d3a932986028",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\nivan 1 00123\\nmasha 1 00123\", \"3\\nkarl 2 612 12\\npetr 1 12\\nkatya 1 612\", \"4\\nivan 3 123 123 456\\nivan 2 456 456\\nivan 8 789 3 23 6 56 9 89 2\\ndasha 2 23 789\"]",
    "exec_outcome": "PASSED",
    "source_code": "def cleaner(l):\n    l = list(set(l))\n    l.sort()\n    ans=[]\n    for i in range(len(l)):\n        for j in range(0,len(l)):\n            if l[j].endswith(l[i]) and i!=j:\n                break\n        else:\n            ans+=[l[i]]\n    return ans\nd = dict()\nfor t in range(int(input())):\n    l = [x for x in input().split(\" \")]\n    name,x = l[0],[1]\n    l = l[2:]\n    if name in d:\n        d[name]+=l\n    else:\n        d[name]=l\nkeys = d.keys()\nprint(len(keys))\nfor k in keys:\n    l = cleaner(d[k])\n    print(k,len(l),*l)",
    "prob_desc_created_at": "1513424100",
    "tags": [
        "implementation",
        "strings"
    ],
    "hidden_unit_tests": ""
}