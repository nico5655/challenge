{
    "prob_desc_time_limit": "6 seconds",
    "prob_desc_sample_outputs": "[\"5\", \"25\", \"793019428\", \"94810539\"]",
    "src_uid": "77443424be253352aaf2b6c89bdd4671",
    "prob_desc_notes": "NoteIn the first test, there are three ways to move the token from cell $$$3$$$ to cell $$$1$$$ in one shift: using subtraction of $$$y = 2$$$, or using division by $$$z = 2$$$ or $$$z = 3$$$.There are also two ways to move the token from cell $$$3$$$ to cell $$$1$$$ via cell $$$2$$$: first subtract $$$y = 1$$$, and then either subtract $$$y = 1$$$ again or divide by $$$z = 2$$$.Therefore, there are five ways in total.",
    "prob_desc_description": "Note that the memory limit in this problem is lower than in others.You have a vertical strip with $$$n$$$ cells, numbered consecutively from $$$1$$$ to $$$n$$$ from top to bottom.You also have a token that is initially placed in cell $$$n$$$. You will move the token up until it arrives at cell $$$1$$$.Let the token be in cell $$$x &gt; 1$$$ at some moment. One shift of the token can have either of the following kinds:   Subtraction: you choose an integer $$$y$$$ between $$$1$$$ and $$$x-1$$$, inclusive, and move the token from cell $$$x$$$ to cell $$$x - y$$$.  Floored division: you choose an integer $$$z$$$ between $$$2$$$ and $$$x$$$, inclusive, and move the token from cell $$$x$$$ to cell $$$\\lfloor \\frac{x}{z} \\rfloor$$$ ($$$x$$$ divided by $$$z$$$ rounded down). Find the number of ways to move the token from cell $$$n$$$ to cell $$$1$$$ using one or more shifts, and print it modulo $$$m$$$. Note that if there are several ways to move the token from one cell to another in one shift, all these ways are considered distinct (check example explanation for a better understanding).",
    "prob_desc_output_spec": "Print the number of ways to move the token from cell $$$n$$$ to cell $$$1$$$, modulo $$$m$$$.",
    "prob_desc_input_spec": "The only line contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\le n \\le 4 \\cdot 10^6$$$; $$$10^8 &lt; m &lt; 10^9$$$; $$$m$$$ is a prime number) — the length of the strip and the modulo.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_100.jsonl",
    "code_uid": "bbab8ef7c5efe2eb878aa74f4a613178",
    "prob_desc_memory_limit": "128 megabytes",
    "prob_desc_sample_inputs": "[\"3 998244353\", \"5 998244353\", \"42 998244353\", \"787788 100000007\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nfrom array import array\n\ninput = sys.stdin.readline\n\n\ndef ri(): return [int(i) for i in input().split()]\n\n\ndef rs(): return input().split()[0]\n\n\ndef main():\n    t = 1\n\n    for _ in range(t):\n        n, m = ri()\n        sum = [0] * (n + 2)  # ans[x] + ... + ans[n]\n        sum[n] = 1\n        sum[n + 1] = 0\n\n        last = -1\n        for x in range(n - 1, 0, -1):\n            extra = sum[x + 1]  # jump by subtraction\n\n            # jump by division\n            for d in range(2, n // x + 1):\n                from_ = x * d\n                to_ = min(x * d + d - 1, n)\n                extra = (extra + sum[from_] - sum[to_ + 1]) % m\n\n            last = extra\n            sum[x] = (sum[x + 1] + last) % m\n        # print(ans)\n        print(last % m)\n\n\nmain()\n",
    "prob_desc_created_at": "1629815700",
    "tags": [
        "brute force",
        "dp",
        "math",
        "number theory"
    ],
    "hidden_unit_tests": ""
}