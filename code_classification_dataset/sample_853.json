{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2000000000\", \"0\", \"4\", \"3\"]",
    "src_uid": "ab1b4487899609ac0f882e1b1713d162",
    "prob_desc_notes": null,
    "prob_desc_description": "The term of this problem is the same as the previous one, the only exception — increased restrictions.",
    "prob_desc_output_spec": "Print the maximum number of cookies, which Apollinaria will be able to bake using the ingredients that she has and the magic powder.",
    "prob_desc_input_spec": "The first line contains two positive integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ 109) — the number of ingredients and the number of grams of the magic powder. The second line contains the sequence a1, a2, ..., an (1 ≤ ai ≤ 109), where the i-th number is equal to the number of grams of the i-th ingredient, needed to bake one cookie. The third line contains the sequence b1, b2, ..., bn (1 ≤ bi ≤ 109), where the i-th number is equal to the number of grams of the i-th ingredient, which Apollinaria has.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_004.jsonl",
    "code_uid": "1218928b19fb59076108be81bcaf91dd",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1 1000000000\\n1\\n1000000000\", \"10 1\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n1 1 1 1 1 1 1 1 1 1\", \"3 1\\n2 1 4\\n11 3 16\", \"4 3\\n4 3 5 6\\n11 12 14 20\"]",
    "exec_outcome": "PASSED",
    "source_code": "import threading\nimport sys\n\nfirst_line = raw_input().split()\n\nn = int(first_line[0])\nk = int(first_line[1])\n\na = [ int(x) for x in raw_input().split() ]\nb = [ int(x) for x in raw_input().split() ]\nc = [0] * n\n\n\ndef solution(a, b, k):\n    if len(a) == 1:\n        print((b[0]+k) // a[0])\n        return\n\n    a, b, c = first_round(a,b)\n\n    dl = min(c)\n    dr = max(c) + k\n\n    d = list(range(dl, dr))\n\n    l = -1\n    r = len(d)\n\n    while l+1 < r:\n        m  = (l + r) // 2\n        #print(\"m\", m)\n\n        if can(a, b, c, k, d[m]):\n            l = m\n        else:\n            r = m\n    print(d[l])\n\ndef can(a, b, c, k, x):\n    #print(\"can\", x, \"? if a =\", a, \"b =\", b, \"c=\", c)\n    for i in range(len(a)):\n        if c[i] < x:\n            if (x - c[i]) * a[i] - b[i] <= k:\n                k -= (x - c[i]) * a[i] - b[i]\n            else:\n                #print(\"can not\", x, \"i\", i)\n                return False\n\n    return True\n\ndef first_round(a, b):\n    for i in range(len(a)):\n        c[i] = b[i] // a[i]\n\n        b[i] = b[i] % a[i]\n\n    return a, b, c\n\nsys.setrecursionlimit(1000000)\nthreading.stack_size(10240000)\nthread = threading.Thread(target=solution, args=(a,b,k))\nthread.start()\n",
    "prob_desc_created_at": "1462464300",
    "tags": [
        "binary search",
        "implementation"
    ],
    "hidden_unit_tests": ""
}