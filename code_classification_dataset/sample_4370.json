{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\\nYES\\nNO\\nNO\\nYES\\nYES\"]",
    "src_uid": "3ae4f35808348841e0f47540cdf4abe6",
    "prob_desc_notes": "NoteIn the first test case, you can select $$$i=1$$$, $$$j=4$$$, $$$k=3$$$. Then $$$a_1 + a_4 + a_3 = 20 + 84 + 19 = 123$$$, which ends in the digit $$$3$$$.In the second test case, you can select $$$i=1$$$, $$$j=2$$$, $$$k=3$$$. Then $$$a_1 + a_2 + a_3 = 1 + 11 + 1 = 13$$$, which ends in the digit $$$3$$$.In the third test case, it can be proven that no such $$$i$$$, $$$j$$$, $$$k$$$ exist. Note that $$$i=4$$$, $$$j=4$$$, $$$k=4$$$ is not a valid solution, since although $$$a_4 + a_4 + a_4 = 1111 + 1111 + 1111 = 3333$$$, which ends in the digit $$$3$$$, the indices need to be distinct.In the fourth test case, it can be proven that no such $$$i$$$, $$$j$$$, $$$k$$$ exist.In the fifth test case, you can select $$$i=4$$$, $$$j=3$$$, $$$k=1$$$. Then $$$a_4 + a_3 + a_1 = 4 + 8 + 1 = 13$$$, which ends in the digit $$$3$$$.In the sixth test case, you can select $$$i=1$$$, $$$j=2$$$, $$$k=6$$$. Then $$$a_1 + a_2 + a_6 = 16 + 38 + 99 = 153$$$, which ends in the digit $$$3$$$.",
    "prob_desc_description": "Given an array $$$a$$$ of positive integers with length $$$n$$$, determine if there exist three distinct indices $$$i$$$, $$$j$$$, $$$k$$$ such that $$$a_i + a_j + a_k$$$ ends in the digit $$$3$$$.",
    "prob_desc_output_spec": "Output $$$t$$$ lines, each of which contains the answer to the corresponding test case. Output \"YES\" if there exist three distinct indices $$$i$$$, $$$j$$$, $$$k$$$ satisfying the constraints in the statement, and \"NO\" otherwise. You can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).",
    "prob_desc_input_spec": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases. The first line of each test case contains an integer $$$n$$$ ($$$3 \\leq n \\leq 2 \\cdot 10^5$$$) — the length of the array. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the elements of the array. The sum of $$$n$$$ across all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1300,
    "file_name": "train_096.jsonl",
    "code_uid": "594ea863207f61fe4b330ae94d854447",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n\\n4\\n\\n20 22 19 84\\n\\n4\\n\\n1 11 1 2022\\n\\n4\\n\\n1100 1100 1100 1111\\n\\n5\\n\\n12 34 56 78 90\\n\\n4\\n\\n1 9 8 4\\n\\n6\\n\\n16 38 94 25 18 99\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import *\r\nfrom heapq import *\r\nfrom bisect import *\r\nfrom itertools import *\r\nfrom functools import *\r\nfrom math import *\r\nfrom string import *\r\nimport operator\r\nimport sys\r\n\r\ninput = sys.stdin.readline\r\n\r\n\r\ndef solve():\r\n    n = int(input())\r\n    A = list(map(int, input().split()))\r\n    A = [x % 10 for x in A]\r\n    count = Counter(A)\r\n\r\n    arr = []\r\n    for x in count:\r\n        arr.extend([x] * min(count[x], 3))\r\n\r\n    def two_sum(start, target):\r\n        seen = set()\r\n        for j in range(start, len(arr)):\r\n            subtarget = (target - arr[j]) % 10\r\n            if subtarget in seen:\r\n                return True\r\n            seen.add(arr[j])\r\n\r\n        return False\r\n\r\n    # A[i] + A[j] + A[k] == 3 % 10\r\n    for k in range(len(arr)):\r\n        if two_sum(k + 1, (3 - arr[k]) % 10):\r\n            return True\r\n\r\n    return False\r\n\r\n\r\ndef main():\r\n    tests = int(input())\r\n    for _ in range(tests):\r\n        print(\"YES\" if solve() else \"NO\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
    "prob_desc_created_at": "1655217300",
    "tags": [
        "brute force",
        "math"
    ],
    "hidden_unit_tests": ""
}