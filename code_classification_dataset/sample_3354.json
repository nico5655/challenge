{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"3\\n1 4\\n3 2\\n7 1\", \"3\\n1 3\\n2 2\\n3 1\"]",
    "src_uid": "3fb70a77e4de4851ed93f988140df221",
    "prob_desc_notes": null,
    "prob_desc_description": "You have a string s = s1s2...s|s|, where |s| is the length of string s, and si its i-th character. Let's introduce several definitions:  A substring s[i..j] (1 ≤ i ≤ j ≤ |s|) of string s is string sisi + 1...sj.  The prefix of string s of length l (1 ≤ l ≤ |s|) is string s[1..l].  The suffix of string s of length l (1 ≤ l ≤ |s|) is string s[|s| - l + 1..|s|]. Your task is, for any prefix of string s which matches a suffix of string s, print the number of times it occurs in string s as a substring.",
    "prob_desc_output_spec": "In the first line, print integer k (0 ≤ k ≤ |s|) — the number of prefixes that match a suffix of string s. Next print k lines, in each line print two integers li ci. Numbers li ci mean that the prefix of the length li matches the suffix of length li and occurs in string s as a substring ci times. Print pairs li ci in the order of increasing li.",
    "prob_desc_input_spec": "The single line contains a sequence of characters s1s2...s|s| (1 ≤ |s| ≤ 105) — string s. The string only consists of uppercase English letters.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_054.jsonl",
    "code_uid": "34ca44611c717c1b164a2ddb50108653",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"ABACABA\", \"AAA\"]",
    "exec_outcome": "PASSED",
    "source_code": "\ndef z_advanced(s):\n    \"\"\"An advanced computation of Z-values of a string.\"\"\"\n\n    Z = [0] * len(s)\n    Z[0] = len(s)\n\n    rt = 0\n    lt = 0\n\n    for k in range(1, len(s)):\n        if k > rt:\n            # If k is outside the current Z-box, do naive computation.\n            n = 0\n            while n + k < len(s) and s[n] == s[n + k]:\n                n += 1\n            Z[k] = n\n            if n > 0:\n                lt = k\n                rt = k + n - 1\n        else:\n            # If k is inside the current Z-box, consider two cases.\n\n            p = k - lt  # Pair index.\n            right_part_len = rt - k + 1\n\n            if Z[p] < right_part_len:\n                Z[k] = Z[p]\n            else:\n                i = rt + 1\n                while i < len(s) and s[i] == s[i - k]:\n                    i += 1\n                Z[k] = i - k\n\n                lt = k\n                rt = i - 1\n    return Z\n\ndef kmptab(s):\n    tab = [0]*len(s)\n    i = 1\n    j = 0\n    while i < len(s):\n        if s[i] == s[j]:\n            tab[i] = j + 1\n            i += 1\n            j += 1\n        else:\n            if j != 0:\n                j = tab[j-1]\n            else:\n                i += 1\n    return tab\n\nif __name__ == '__main__':\n    s = input()\n    tab = kmptab(s)\n    my_set = set()\n    i = len(s)\n    while i != 0:\n        my_set.add(i)\n        i = tab[i-1]\n    V = []\n    dict = {}\n    for i in my_set:\n        V.append(i)\n        dict[i] = 0\n    Z = z_advanced(s)\n\n    v = []\n    V.sort()\n    my_tab = [0]*(len(s)+1)\n    # print(Z)\n    for i in Z:\n        my_tab[i] += 1\n    somme = 0\n    # print(my_tab)\n    for i in range(len(my_tab)-1, -1, -1):\n\n        my_tab[i] += somme\n        somme = my_tab[i]\n    # print(my_tab)\n    for i in dict:\n        dict[i] = my_tab[i]\n        v.append((dict[i], i))\n    v.sort(key=lambda tup: tup[1])\n    print(len(v))\n    for i in v:\n        print(str(i[1]) + \" \" + str(i[0]))\n",
    "prob_desc_created_at": "1400167800",
    "tags": [
        "dp",
        "two pointers",
        "string suffix structures",
        "strings"
    ],
    "hidden_unit_tests": ""
}