{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"0\\n\\n2\\n2 3 \\n1\\n1 \\n2\\n3 4 \\n2\\n3 4 \\n-1\"]",
    "src_uid": "a5f496c5cfe471049eddb3a35d0c2d98",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given a table $$$a$$$ of size $$$2 \\times n$$$ (i.e. two rows and $$$n$$$ columns) consisting of integers from $$$1$$$ to $$$n$$$.In one move, you can choose some column $$$j$$$ ($$$1 \\le j \\le n$$$) and swap values $$$a_{1, j}$$$ and $$$a_{2, j}$$$ in it. Each column can be chosen no more than once.Your task is to find the minimum number of moves required to obtain permutations of size $$$n$$$ in both first and second rows of the table or determine if it is impossible to do that.You have to answer $$$t$$$ independent test cases.Recall that the permutation of size $$$n$$$ is such an array of size $$$n$$$ that contains each integer from $$$1$$$ to $$$n$$$ exactly once (the order of elements doesn't matter).",
    "prob_desc_output_spec": "For each test case print the answer: -1 if it is impossible to obtain permutation of size $$$n$$$ in both first and the second rows of the table, or one integer $$$k$$$ in the first line, where $$$k$$$ is the minimum number of moves required to obtain permutations in both rows, and $$$k$$$ distinct integers $$$pos_1, pos_2, \\dots, pos_k$$$ in the second line ($$$1 \\le pos_i \\le n$$$) in any order — indices of columns in which you need to swap values to obtain permutations in both rows. If there are several answers, you can print any.",
    "prob_desc_input_spec": "The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 2 \\cdot 10^4$$$) — the number of test cases. Then $$$t$$$ test cases follow. The first line of the test case contains one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the number of columns in the table. The second line of the test case contains $$$n$$$ integers $$$a_{1, 1}, a_{1, 2}, \\dots, a_{1, n}$$$ ($$$1 \\le a_{1, i} \\le n$$$), where $$$a_{1, i}$$$ is the $$$i$$$-th element of the first row of the table. The third line of the test case contains $$$n$$$ integers $$$a_{2, 1}, a_{2, 2}, \\dots, a_{2, n}$$$ ($$$1 \\le a_{2, i} \\le n$$$), where $$$a_{2, i}$$$ is the $$$i$$$-th element of the second row of the table. It is guaranteed that the sum of $$$n$$$ does not exceed $$$2 \\cdot 10^5$$$ ($$$\\sum n \\le 2 \\cdot 10^5$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_050.jsonl",
    "code_uid": "c16d185c19467f10b90d1549512f00a5",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n4\\n1 2 3 4\\n2 3 1 4\\n5\\n5 3 5 1 4\\n1 2 3 2 4\\n3\\n1 2 1\\n3 3 2\\n4\\n1 2 2 1\\n3 4 3 4\\n4\\n4 3 1 4\\n3 2 2 1\\n3\\n1 1 2\\n3 2 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\n\ndef input():\n\treturn sys.stdin.readline().strip()\n\ndef solve():\n\tn = int(input())\n\ta = list(map(int,input().split()))\n\tb = list(map(int,input().split()))\n\tpos = [[] for i in range(n+1)]\n\tfor i in range(n):\n\t\tpos[a[i]].extend((i,0))\n\t\tpos[b[i]].extend((i,1))\n\t\tif len(pos[a[i]]) > 4 \\\n\t\tor len(pos[b[i]]) > 4:\n\t\t\tprint(-1)\n\t\t\treturn\n\twas = [False]*(n+1)\n\tres = []\n\tfor i in range(1, n):\n\t\tif not was[i]:\n\t\t\tx = i\n\t\t\tp = pos[i][0]\n\t\t\tif pos[i][1] == 1:\n\t\t\t\tone, two = [p], []\n\t\t\telse:\n\t\t\t\tone, two = [], [p]\n\t\t\tfirst = p\n\t\t\twhile True:\n\t\t\t\twas[x] = True\n\t\t\t\tif pos[x][0] == p:\n\t\t\t\t\tp = pos[x][2]\n\t\t\t\t\tif p == first:\n\t\t\t\t\t\tbreak\n\t\t\t\t\tr = pos[x][3]\n\t\t\t\telse:\n\t\t\t\t\tp = pos[x][0]\n\t\t\t\t\tif p == first:\n\t\t\t\t\t\tbreak\n\t\t\t\t\tr = pos[x][1]\n\t\t\t\tif r == 0:\n\t\t\t\t\tone.append(p)\n\t\t\t\t\tx = b[p]\n\t\t\t\telse:\n\t\t\t\t\ttwo.append(p)\n\t\t\t\t\tx = a[p]\n\t\t\tif len(one) > len(two):\n\t\t\t\tone = two\n\t\t\tres.extend(one)\n\t'''for i in res:\n\t\ta[i], b[i] = b[i], a[i]\n\tif len(set(a)) != n:\n\t\tprint(-1)\n\t\treturn'''\n\tprint(len(res))\n\tprint(' '.join([str(i+1) for i in res]))\n\nfor i in range(int(input())):\n\tsolve()\n",
    "prob_desc_created_at": "1594996500",
    "tags": [
        "graphs",
        "2-sat",
        "dsu",
        "implementation",
        "dfs and similar"
    ],
    "hidden_unit_tests": ""
}