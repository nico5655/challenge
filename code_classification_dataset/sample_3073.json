{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"113337\\n1337\"]",
    "src_uid": "9aabacc9817722dc11335eccac5d65ac",
    "prob_desc_notes": null,
    "prob_desc_description": "The subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.You are given an integer $$$n$$$. You have to find a sequence $$$s$$$ consisting of digits $$$\\{1, 3, 7\\}$$$ such that it has exactly $$$n$$$ subsequences equal to $$$1337$$$.For example, sequence $$$337133377$$$ has $$$6$$$ subsequences equal to $$$1337$$$:   $$$337\\underline{1}3\\underline{3}\\underline{3}7\\underline{7}$$$ (you can remove the second and fifth characters);  $$$337\\underline{1}\\underline{3}3\\underline{3}7\\underline{7}$$$ (you can remove the third and fifth characters);  $$$337\\underline{1}\\underline{3}\\underline{3}37\\underline{7}$$$ (you can remove the fourth and fifth characters);  $$$337\\underline{1}3\\underline{3}\\underline{3}\\underline{7}7$$$ (you can remove the second and sixth characters);  $$$337\\underline{1}\\underline{3}3\\underline{3}\\underline{7}7$$$ (you can remove the third and sixth characters);  $$$337\\underline{1}\\underline{3}\\underline{3}3\\underline{7}7$$$ (you can remove the fourth and sixth characters). Note that the length of the sequence $$$s$$$ must not exceed $$$10^5$$$.You have to answer $$$t$$$ independent queries.",
    "prob_desc_output_spec": "For the $$$i$$$-th query print one string $$$s_i$$$ ($$$1 \\le |s_i| \\le 10^5$$$) consisting of digits $$$\\{1, 3, 7\\}$$$. String $$$s_i$$$ must have exactly $$$n_i$$$ subsequences $$$1337$$$. If there are multiple such strings, print any of them.",
    "prob_desc_input_spec": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10$$$) â€” the number of queries.  Next $$$t$$$ lines contains a description of queries: the $$$i$$$-th line contains one integer $$$n_i$$$ ($$$1 \\le n_i \\le 10^9$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_040.jsonl",
    "code_uid": "51c5581cac1155fb157b78ae2010b466",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n6\\n1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\ninput = sys.stdin.readline\nfrom bisect import bisect_right\n\nQ = int(input())\nQuery = [int(input()) for _ in range(Q)]\n\nA = [0]\nfor t in range(1, 10**5):\n    A.append(A[-1]+t)\n\nfor n in Query:\n    NUMs = []\n    while n:\n        i = bisect_right(A, n)\n        NUMs.append(i)\n        n -= A[i-1]\n    ans = \"1\"\n    now = 0\n    while NUMs:\n        p = NUMs.pop()\n        ans += \"3\"*(p-now) + \"7\"\n        now = p\n    print(ans)",
    "prob_desc_created_at": "1565188500",
    "tags": [
        "combinatorics",
        "constructive algorithms",
        "math",
        "strings"
    ],
    "hidden_unit_tests": ""
}