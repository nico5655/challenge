{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"3\\n8 7 9 10 5 6 1 2 3 4\", \"2\\n8 7 10 9 5 6 4 3 2 1\", \"20\\n2 1\"]",
    "src_uid": "a375cfcfab66bedb13e3f6f5549cc613",
    "prob_desc_notes": "NoteIn the first example the following pairs of pearls are combined: $$$(7, 9)$$$, $$$(10, 5)$$$, $$$(6, 1)$$$, $$$(2, 3)$$$ and $$$(4, 8)$$$. The beauties of connections equal correspondingly: $$$3$$$, $$$3$$$, $$$3$$$, $$$20$$$, $$$20$$$.The following drawing shows this construction.  ",
    "prob_desc_description": "Johnny's younger sister Megan had a birthday recently. Her brother has bought her a box signed as \"Your beautiful necklace — do it yourself!\". It contains many necklace parts and some magic glue. The necklace part is a chain connecting two pearls. Color of each pearl can be defined by a non-negative integer. The magic glue allows Megan to merge two pearls (possibly from the same necklace part) into one. The beauty of a connection of pearls in colors $$$u$$$ and $$$v$$$ is defined as follows: let $$$2^k$$$ be the greatest power of two dividing $$$u \\oplus v$$$ — exclusive or of $$$u$$$ and $$$v$$$. Then the beauty equals $$$k$$$. If $$$u = v$$$, you may assume that beauty is equal to $$$20$$$.Each pearl can be combined with another at most once. Merging two parts of a necklace connects them. Using the glue multiple times, Megan can finally build the necklace, which is a cycle made from connected necklace parts (so every pearl in the necklace is combined with precisely one other pearl in it). The beauty of such a necklace is the minimum beauty of a single connection in it. The girl wants to use all available necklace parts to build exactly one necklace consisting of all of them with the largest possible beauty. Help her!",
    "prob_desc_output_spec": "The first line should contain a single integer $$$b$$$ denoting the maximum possible beauty of a necklace built from all given parts. The following line should contain $$$2n$$$ distinct integers $$$p_i$$$ $$$(1 \\leq p_i \\leq 2n)$$$ — the indices of initial pearls in the order in which they appear on a cycle. Indices of pearls belonging to the same necklace part have to appear at neighboring positions in this permutation (so $$$1\\,4\\,3\\,2$$$ is not a valid output, whereas $$$2\\,1\\,4\\,3$$$ and $$$4\\,3\\,1\\,2$$$ are). If there are many possible answers, you can print any.",
    "prob_desc_input_spec": "The first line contains $$$n$$$ $$$(1 \\leq n \\leq 5 \\cdot 10^5)$$$ — the number of necklace parts in the box. Each of the next $$$n$$$ lines contains two integers $$$a$$$ and $$$b$$$ $$$(0 \\leq a, b &lt; 2^{20})$$$, which denote colors of pearls presented in the necklace parts. Pearls in the $$$i$$$-th line have indices $$$2i - 1$$$ and $$$2i$$$ respectively.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2500,
    "file_name": "train_058.jsonl",
    "code_uid": "25d80f4a99574ae9ee6447102525bd6b",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n13 11\\n11 1\\n3 5\\n17 1\\n9 27\", \"5\\n13 11\\n11 1\\n3 5\\n17 1\\n7 29\", \"1\\n1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nrange = xrange\ninput = raw_input\n\n\ndef eulerian_cycle(coupl, V):\n    for c in coupl:\n        if len(c) & 1:\n            return None\n    m = len(V) >> 1\n    found = [0]*m\n    cycle = []\n    \n    stack = [0]\n    while stack:\n        eind = stack.pop()\n        if eind < 0:\n            eind = ~eind\n            cycle.append(eind)\n            node = V[eind ^ 1]\n        else:\n            node = V[eind]\n        while coupl[node]:\n            eind = coupl[node].pop()\n            if not found[eind >> 1]:\n                found[eind >> 1] = 1\n                stack.append(~eind)\n                stack.append(eind)\n                break\n    if len(cycle) == m:\n        return cycle\n    else:\n        return None\n\n\ninp = [int(x) for x in sys.stdin.read().split()]; ii = 0\n \nm = 20\nmshift = 1 << m\nbitreverse = [0] * mshift\nfor i in range(1, mshift):\n    x = i.bit_length() - 1\n    bitreverse[i] = (mshift >> x + 1) + bitreverse[i - (1 << x)]\n \nn = inp[ii]; ii += 1\nA = [bitreverse[a] for a in inp[ii:]]\n \nB = [[] for _ in range(mshift)]\nfor i in range(2 * n):\n    B[A[i]].append(i)\n \nwhile len(B) > 1:\n    found = [0] * len(B)\n    bfs = [A[0]]\n    found[A[0]] = 1\n    count = 0\n    odd = 0\n    for val in bfs:\n        t = len(B[val])\n        count += t\n        odd += t & 1\n        for i in B[val]:\n            x = A[i ^ 1]\n            if not found[x]:\n                found[x] = 1\n                bfs.append(x)\n    \n    if not odd and count == 2 * n:\n        break\n \n    B2 = B[::2]\n    for i in range(1,len(B),2):\n        B2[i >> 1] += B[i]\n    B = B2\n    for i in range(2 * n):\n        A[i] >>= 1\n \nans = len(B).bit_length() - 1\n\nfor i in range(0, 2 * n, 2):\n    A[i], A[i + 1] = A[i + 1], A[i]\n\ncycle = eulerian_cycle(B, A)\nout = []\nfor i in cycle:\n    out.append(i ^ 1)\n    out.append(i)\n\nprint ans\nprint ' '.join(str(x + 1) for x in out)\n",
    "prob_desc_created_at": "1591281300",
    "tags": [
        "graphs",
        "constructive algorithms",
        "bitmasks",
        "dsu",
        "binary search",
        "dfs and similar"
    ],
    "hidden_unit_tests": ""
}