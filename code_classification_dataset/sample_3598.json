{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\\n1 2 1 3 \\nYES\\n1 2 3 3 9 9 2 1 6 \\nNO\"]",
    "src_uid": "bb8f933f438e2c7c091716cc42dc0060",
    "prob_desc_notes": "NotePictures corresponding to the first and the second test cases of the example:",
    "prob_desc_description": "You are given two integers $$$n$$$ and $$$d$$$. You need to construct a rooted binary tree consisting of $$$n$$$ vertices with a root at the vertex $$$1$$$ and the sum of depths of all vertices equals to $$$d$$$.A tree is a connected graph without cycles. A rooted tree has a special vertex called the root. A parent of a vertex $$$v$$$ is the last different from $$$v$$$ vertex on the path from the root to the vertex $$$v$$$. The depth of the vertex $$$v$$$ is the length of the path from the root to the vertex $$$v$$$. Children of vertex $$$v$$$ are all vertices for which $$$v$$$ is the parent. The binary tree is such a tree that no vertex has more than $$$2$$$ children.You have to answer $$$t$$$ independent test cases.",
    "prob_desc_output_spec": "For each test case, print the answer. If it is impossible to construct such a tree, print \"NO\" (without quotes) in the first line. Otherwise, print \"{YES}\" in the first line. Then print $$$n-1$$$ integers $$$p_2, p_3, \\dots, p_n$$$ in the second line, where $$$p_i$$$ is the parent of the vertex $$$i$$$. Note that the sequence of parents you print should describe some binary tree.",
    "prob_desc_input_spec": "The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases. The only line of each test case contains two integers $$$n$$$ and $$$d$$$ ($$$2 \\le n, d \\le 5000$$$) — the number of vertices in the tree and the required sum of depths of all vertices. It is guaranteed that the sum of $$$n$$$ and the sum of $$$d$$$ both does not exceed $$$5000$$$ ($$$\\sum n \\le 5000, \\sum d \\le 5000$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_072.jsonl",
    "code_uid": "4bfaf217e978eb7b40c06bfbc9ba5855",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n5 7\\n10 19\\n10 18\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline()[:-1]\n\ndef main():\n    t=II()\n    for _ in range(t):\n        n,d=MI()\n        s=n*(n-1)//2\n        diff=s-d\n        if d>s:\n            print(\"NO\")\n            continue\n        aa=[1]*n\n        l=1\n        for r in range(n-1,-1,-1):\n            if l>=r:break\n            if diff==0:break\n            to=max(r-diff,l)\n            aa[r]=0\n            aa[to]+=1\n            diff-=r-to\n            if aa[l]==1<<l:l+=1\n        if diff:\n            print(\"NO\")\n            continue\n        #print(aa)\n        ans=[]\n        pa=1\n        st=1\n        for a in aa[1:]:\n            for i in range(a):\n                ans.append(st+i%pa)\n            st+=pa\n            pa=a\n        print(\"YES\")\n        print(*ans)\n\nmain()",
    "prob_desc_created_at": "1582554900",
    "tags": [
        "constructive algorithms",
        "trees",
        "brute force"
    ],
    "hidden_unit_tests": ""
}