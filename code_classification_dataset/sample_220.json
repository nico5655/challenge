{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"750000007\", \"125000003\"]",
    "src_uid": "a44cba5685500b16e24b8fba30451bc5",
    "prob_desc_notes": "NoteThe answer for the first sample is equal to $$$\\frac{14}{8}$$$.The answer for the second sample is equal to $$$\\frac{17}{8}$$$.",
    "prob_desc_description": "Today Adilbek is taking his probability theory test. Unfortunately, when Adilbek arrived at the university, there had already been a long queue of students wanting to take the same test. Adilbek has estimated that he will be able to start the test only $$$T$$$ seconds after coming. Fortunately, Adilbek can spend time without revising any boring theorems or formulas. He has an app on this smartphone which contains $$$n$$$ Japanese crosswords to solve. Adilbek has decided to solve them all one by one in the order they are listed in the app, without skipping any crossword. For each crossword, a number $$$t_i$$$ is given that represents the time it takes an average crossword expert to solve this crossword (the time is given in seconds).Adilbek is a true crossword expert, but, unfortunately, he is sometimes unlucky in choosing the way to solve the crossword. So, it takes him either $$$t_i$$$ seconds or $$$t_i + 1$$$ seconds to solve the $$$i$$$-th crossword, equiprobably (with probability $$$\\frac{1}{2}$$$ he solves the crossword in exactly $$$t_i$$$ seconds, and with probability $$$\\frac{1}{2}$$$ he has to spend an additional second to finish the crossword). All these events are independent.After $$$T$$$ seconds pass (or after solving the last crossword, if he manages to do it in less than $$$T$$$ seconds), Adilbek closes the app (if he finishes some crossword at the same moment, that crossword is considered solved; otherwise Adilbek does not finish solving the current crossword at all). He thinks it would be an interesting probability theory problem to calculate $$$E$$$ — the expected number of crosswords he will be able to solve completely. Can you calculate it? Recall that the expected value of a discrete random variable is the probability-weighted average of all possible values — in this problem it means that the expected value of the number of solved crosswords can be calculated as $$$E = \\sum \\limits_{i = 0}^{n} i p_i$$$, where $$$p_i$$$ is the probability that Adilbek will solve exactly $$$i$$$ crosswords. We can represent $$$E$$$ as rational fraction $$$\\frac{P}{Q}$$$ with $$$Q &gt; 0$$$. To give the answer, you should print $$$P \\cdot Q^{-1} \\bmod (10^9 + 7)$$$.",
    "prob_desc_output_spec": "Print one integer — the expected value of the number of crosswords Adilbek solves in $$$T$$$ seconds, expressed in the form of $$$P \\cdot Q^{-1} \\bmod (10^9 + 7)$$$.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$T$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$, $$$1 \\le T \\le 2 \\cdot 10^{14}$$$) — the number of crosswords and the time Adilbek has to spend, respectively. The second line contains $$$n$$$ integers $$$t_1, t_2, \\dots, t_n$$$ ($$$1 \\le t_i \\le 10^9$$$), where $$$t_i$$$ is the time it takes a crossword expert to solve the $$$i$$$-th crossword. Note that Adilbek solves the crosswords in the order they are given in the input without skipping any of them.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_001.jsonl",
    "code_uid": "81bda70b1f577dfe53f0cb3c1bd9d668",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 5\\n2 2 2\", \"3 5\\n2 1 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "MOD = 10 ** 9 + 7\nMAX = 5 * 10 ** 5\nfac, ifac, ipow2 = [1] * MAX, [1] * MAX, [1] * MAX\nfor i in range(1, MAX):\n    fac[i] = fac[i - 1] * i % MOD\n    ifac[i] = pow(fac[i], MOD - 2, MOD)\n    ipow2[i] = ipow2[i - 1] * (MOD + 1) // 2 % MOD\nchoose = lambda n, k: fac[n] * ifac[k] % MOD * ifac[n - k] % MOD\nn, t = map(int, raw_input().split())\na = list(map(int, raw_input().split()))\ns = 0\np = [1] + [0] * (n + 1)\nk = cur = 0\nfor i in range(n):\n    s += a[i]\n    if s > t: break\n    if s + i + 1 <= t:\n        p[i + 1] = 1\n        continue\n    newk = t - s\n    cur = cur * 2 - choose(i, k) if cur else sum(choose(i + 1, j) for j in range(newk + 1))\n    if newk < k:\n        cur -= sum(choose(i + 1, x) for x in range(k, newk, -1))\n    cur %= MOD\n    p[i + 1] = cur * ipow2[i + 1] % MOD\n    k = newk\nprint(sum((p[i] - p[i + 1]) * i % MOD for i in range(1, n + 1)) % MOD)",
    "prob_desc_created_at": "1563115500",
    "tags": [
        "dp",
        "combinatorics",
        "two pointers",
        "number theory",
        "probabilities"
    ],
    "hidden_unit_tests": ""
}