{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1\\n1 6 4\", \"2\\n4\\n1 5 2 4\", \"1\\n3 4 5\"]",
    "src_uid": "f9ffc3ccb320c7a4ea95cbcca95f1abf",
    "prob_desc_notes": "NoteIn the first sample:Notice that you can solve either problem, so printing the cycle $$$2-4-3-1-5-6$$$ is also acceptable.In the second sample:Notice that if there are multiple answers you can print any, so printing the cycle $$$2-5-6$$$, for example, is acceptable.In the third sample:",
    "prob_desc_description": "It's the year 5555. You have a graph, and you want to find a long cycle and a huge independent set, just because you can. But for now, let's just stick with finding either.Given a connected graph with $$$n$$$ vertices, you can choose to either:  find an independent set that has exactly $$$\\lceil\\sqrt{n}\\rceil$$$ vertices. find a simple cycle of length at least $$$\\lceil\\sqrt{n}\\rceil$$$. An independent set is a set of vertices such that no two of them are connected by an edge. A simple cycle is a cycle that doesn't contain any vertex twice. I have a proof you can always solve one of these problems, but it's too long to fit this margin.",
    "prob_desc_output_spec": "If you choose to solve the first problem, then on the first line print \"1\", followed by a line containing $$$\\lceil\\sqrt{n}\\rceil$$$ distinct integers not exceeding $$$n$$$, the vertices in the desired independent set. If you, however, choose to solve the second problem, then on the first line print \"2\", followed by a line containing one integer, $$$c$$$, representing the length of the found cycle, followed by a line containing $$$c$$$ distinct integers integers not exceeding $$$n$$$, the vertices in the desired cycle, in the order they appear in the cycle.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$m$$$ ($$$5 \\le n \\le 10^5$$$, $$$n-1 \\le m \\le 2 \\cdot 10^5$$$) — the number of vertices and edges in the graph. Each of the next $$$m$$$ lines contains two space-separated integers $$$u$$$ and $$$v$$$ ($$$1 \\le u,v \\le n$$$) that mean there's an edge between vertices $$$u$$$ and $$$v$$$. It's guaranteed that the graph is connected and doesn't contain any self-loops or multiple edges.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2500,
    "file_name": "train_062.jsonl",
    "code_uid": "c318a0796d096b1c128c9ce45ba86cf0",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6 6\\n1 3\\n3 4\\n4 2\\n2 6\\n5 6\\n5 1\", \"6 8\\n1 3\\n3 4\\n4 2\\n2 6\\n5 6\\n5 1\\n1 4\\n2 5\", \"5 4\\n1 2\\n1 3\\n2 4\\n2 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "#!/usr/bin/env python3\nimport sys\nfrom math import *\nfrom collections import defaultdict\nfrom queue import deque                # Queues\nfrom heapq import heappush, heappop    # Priority Queues\n\n# parse\nlines = [line.strip() for line in sys.stdin.readlines()]\nn, m = list(map(int, lines[0].split()))\nedges = [set() for i in range(n)]\n\nfor i in range(1, m+1):\n  u, v = list(map(int, lines[i].split()))\n  u -= 1\n  v -= 1\n  edges[u].add(v)\n  edges[v].add(u)\n\nnn = int(ceil(sqrt(n)))\n\ndef find_cycle(v, forbidden):\n  used = set([v])\n  forbidden = set(forbidden)\n  ret = [v]\n  while True:\n    v = ret[-1]\n    ss = edges[v] - used - forbidden\n    nxt = None\n    for s in ss:\n      nxt = s\n      break\n    \n    if nxt is None:\n      break\n    ret += [nxt]\n    used.add(nxt)\n\n  i = 0\n  while ret[i] not in edges[ret[-1]]:\n    i += 1\n\n  return ret[i:]\n\n\nq = []\nfor v in range(n):\n  heappush(q, (len(edges[v]), v))\n\n# find indep set\nind = set()\ncovered = set()\nwhile q:\n  d, v = heappop(q)\n\n  if v in covered:\n    continue\n\n  ind.add(v)\n  ss = set(edges[v])\n  ss.add(v)\n\n  if len(ind) == nn:\n    # found an indep set\n    print(1)\n    print(' '.join('%s' % (i+1) for i in ind))\n    break\n  if d >= nn - 1:\n    # found a cycle\n    ys = find_cycle(v, list(covered))\n    print(2)\n    print(len(ys))\n    print(' '.join('%s' % (i+1) for i in ys))\n    break\n\n  covered |= ss\n\n  ws = set()\n  for u in edges[v]:\n    for w in edges[u]:\n      ws.add(w)\n  \n  ws -= ss\n  for w in ws:\n    edges[w] -= ss\n    heappush(q, (len(edges[w]), w))\n\n",
    "prob_desc_created_at": "1584196500",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "greedy",
        "graphs"
    ],
    "hidden_unit_tests": ""
}