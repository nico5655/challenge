{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"15\", \"-45\", \"8\"]",
    "src_uid": "c7a37e8220d5fc44556dff66c1e129e7",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given an array $$$a_1, a_2, \\dots, a_n$$$ and an integer $$$k$$$.You are asked to divide this array into $$$k$$$ non-empty consecutive subarrays. Every element in the array should be included in exactly one subarray. Let $$$f(i)$$$ be the index of subarray the $$$i$$$-th element belongs to. Subarrays are numbered from left to right and from $$$1$$$ to $$$k$$$.Let the cost of division be equal to $$$\\sum\\limits_{i=1}^{n} (a_i \\cdot f(i))$$$. For example, if $$$a = [1, -2, -3, 4, -5, 6, -7]$$$ and we divide it into $$$3$$$ subbarays in the following way: $$$[1, -2, -3], [4, -5], [6, -7]$$$, then the cost of division is equal to $$$1 \\cdot 1 - 2 \\cdot 1 - 3 \\cdot 1 + 4 \\cdot 2 - 5 \\cdot 2 + 6 \\cdot 3 - 7 \\cdot 3 = -9$$$.Calculate the maximum cost you can obtain by dividing the array $$$a$$$ into $$$k$$$ non-empty consecutive subarrays. ",
    "prob_desc_output_spec": "Print the maximum cost you can obtain by dividing the array $$$a$$$ into $$$k$$$ nonempty consecutive subarrays. ",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 3 \\cdot 10^5$$$). The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$ |a_i| \\le 10^6$$$). ",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_021.jsonl",
    "code_uid": "317e48c17daf99d8ae0dbdc91f6879ea",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 2\\n-1 -2 5 -4 8\", \"7 6\\n-3 0 -1 -2 -2 -4 -1\", \"4 1\\n3 -1 6 0\"]",
    "exec_outcome": "PASSED",
    "source_code": "n, k = map(int, raw_input().strip().split())\na = map(int, raw_input().strip().split())\n\npre = [0] * n\npre[0] = a[0]\nfor i in xrange(1, n):\n    pre[i] = pre[i - 1] + a[i]\n\nans = k * pre[-1]\npre.pop()\n\npre.sort()\n\nz = 0\nfor i in xrange(k - 1): z += pre[i]\n\nprint ans - z\n",
    "prob_desc_created_at": "1559745300",
    "tags": [
        "sortings",
        "greedy"
    ],
    "hidden_unit_tests": ""
}