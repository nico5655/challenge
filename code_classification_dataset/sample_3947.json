{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\\n3 1 3 \\nYES\\n1 \\nNO\\nYES\\n5 5 4 1 4 5\"]",
    "src_uid": "21fed74be8462143d77bbbee48dc8a12",
    "prob_desc_notes": "NoteLet's consider the $$$1$$$-st test case of the example:  the $$$1$$$-st singer in the $$$1$$$-st city will give a concert for $$$3$$$ minutes, in the $$$2$$$-nd — for $$$6$$$ minutes, in the $$$3$$$-rd — for $$$9$$$ minutes;  the $$$2$$$-nd singer in the $$$1$$$-st city will give a concert for $$$3$$$ minutes, in the $$$2$$$-nd — for $$$1$$$ minute, in the $$$3$$$-rd - for $$$2$$$ minutes;  the $$$3$$$-rd singer in the $$$1$$$-st city will give a concert for $$$6$$$ minutes, in the $$$2$$$-nd — for $$$9$$$ minutes, in the $$$3$$$-rd — for $$$3$$$ minutes. ",
    "prob_desc_description": "$$$n$$$ towns are arranged in a circle sequentially. The towns are numbered from $$$1$$$ to $$$n$$$ in clockwise order. In the $$$i$$$-th town, there lives a singer with a repertoire of $$$a_i$$$ minutes for each $$$i \\in [1, n]$$$.Each singer visited all $$$n$$$ towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. In addition, in each town, the $$$i$$$-th singer got inspired and came up with a song that lasts $$$a_i$$$ minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.Hence, for the $$$i$$$-th singer, the concert in the $$$i$$$-th town will last $$$a_i$$$ minutes, in the $$$(i + 1)$$$-th town the concert will last $$$2 \\cdot a_i$$$ minutes, ..., in the $$$((i + k) \\bmod n + 1)$$$-th town the duration of the concert will be $$$(k + 2) \\cdot a_i$$$, ..., in the town $$$((i + n - 2) \\bmod n + 1)$$$ — $$$n \\cdot a_i$$$ minutes.You are given an array of $$$b$$$ integer numbers, where $$$b_i$$$ is the total duration of concerts in the $$$i$$$-th town. Reconstruct any correct sequence of positive integers $$$a$$$ or say that it is impossible.",
    "prob_desc_output_spec": "For each test case, print the answer as follows: If there is no suitable sequence $$$a$$$, print NO. Otherwise, on the first line print YES, on the next line print the sequence $$$a_1, a_2, \\dots, a_n$$$ of $$$n$$$ integers, where $$$a_i$$$ ($$$1 \\le a_i \\le 10^{9}$$$) is the initial duration of repertoire of the $$$i$$$-th singer. If there are multiple answers, print any of them.",
    "prob_desc_input_spec": "The first line contains one integer $$$t$$$ $$$(1 \\le t \\le 10^3$$$) — the number of test cases. Then the test cases follow. Each test case consists of two lines. The first line contains a single integer $$$n$$$ ($$$1 \\le n \\le 4 \\cdot 10^4$$$) — the number of cities. The second line contains $$$n$$$ integers $$$b_1, b_2, \\dots, b_n$$$ ($$$1 \\le b_i \\le 10^{9}$$$) — the total duration of concerts in $$$i$$$-th city. The sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_087.jsonl",
    "code_uid": "e1efd267d1b30eda865bed7b68fd0687",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n3\\n12 16 14\\n1\\n1\\n3\\n1 2 3\\n6\\n81 75 75 93 93 87\"]",
    "exec_outcome": "PASSED",
    "source_code": "'''import requests\r\nimport leaf\r\nimport pandas as pd\r\n\r\ndict = {'Авиастроительный': 'https://edu.tatar.ru/aviastroit/type/1',\r\n        'Вахитовский': 'https://edu.tatar.ru/vahit/type/1',\r\n        'Кировский':'https://edu.tatar.ru/kirov/type/1',\r\n        'Московский':'https://edu.tatar.ru/moskow/type/1',\r\n        'Ново-Савиновский':'https://edu.tatar.ru/nsav/type/1',\r\n        'Приволжский':'https://edu.tatar.ru/priv/type/1',\r\n        'Советский':'https://edu.tatar.ru/sovetcki/type/1'}\r\n\r\nschool_links = {'Район':[], 'Адрес':[], 'Название':[]}\r\n\r\nfor key, url in dict.items():\r\n    response = requests.get(url)\r\n    leaf_doc = leaf.parse(response.text)\r\n    leaf_a = leaf_doc('div.panel-body li a')\r\n    for i in leaf_a:\r\n        print(i.inner_html())\r\n        school_links['Район'].append(key)\r\n        school_links['Название'].append(i.inner_html())\r\n        school_response = requests.get('https://edu.tatar.ru' + i.href)\r\n        leaf_school_doc = leaf.parse(school_response.text)\r\n        place = leaf_school_doc.get('div.sp_block.contacts > div.col > table > tr:nth-child(1) > td:nth-child(2)')\r\n        school_links['Адрес'].append(place.inner_html())\r\ndf = pd.DataFrame(school_links)\r\ndf.to_excel('schools.xlsx')'''\r\n\r\nt = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    b = [int(i) for i in input().split()]\r\n    a = [0 for i in range(n)]\r\n    answer = 'YES'\r\n    sumA = int(2 * sum(b) / n / (n + 1))\r\n    if sum(b) % (n*(n+1)/2) != 0:\r\n        answer = 'NO'\r\n    for i in range(1, n):\r\n        if answer == 'NO':\r\n            break\r\n        a[i] = (sumA - b[i] + b[i - 1])\r\n        if a[i] % n != 0 or a[i] <= 0:\r\n            answer = 'NO'\r\n            break\r\n        else:\r\n            a[i] = int(a[i] / n)\r\n    a[0] = sumA - sum(a[1:])\r\n    if a[0] <= 0:\r\n        answer = 'NO'\r\n    print(answer)\r\n    if answer == 'YES':\r\n        print(*a)\r\n\r\n\r\n",
    "prob_desc_created_at": "1639492500",
    "tags": [
        "constructive algorithms",
        "math"
    ],
    "hidden_unit_tests": ""
}