{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"5\\n1 2 3 4 5\", \"2\\n4 5\", \"1\\n1\"]",
    "src_uid": "a704760d5ccd09d08558ea98d6007835",
    "prob_desc_notes": null,
    "prob_desc_description": "Valera's finally decided to go on holiday! He packed up and headed for a ski resort.Valera's fancied a ski trip but he soon realized that he could get lost in this new place. Somebody gave him a useful hint: the resort has n objects (we will consider the objects indexed in some way by integers from 1 to n), each object is either a hotel or a mountain.Valera has also found out that the ski resort had multiple ski tracks. Specifically, for each object v, the resort has at most one object u, such that there is a ski track built from object u to object v. We also know that no hotel has got a ski track leading from the hotel to some object.Valera is afraid of getting lost on the resort. So he wants you to come up with a path he would walk along. The path must consist of objects v1, v2, ..., vk (k ≥ 1) and meet the following conditions:  Objects with numbers v1, v2, ..., vk - 1 are mountains and the object with number vk is the hotel.  For any integer i (1 ≤ i &lt; k), there is exactly one ski track leading from object vi. This track goes to object vi + 1.  The path contains as many objects as possible (k is maximal). Help Valera. Find such path that meets all the criteria of our hero!",
    "prob_desc_output_spec": "In the first line print k — the maximum possible path length for Valera. In the second line print k integers v1, v2, ..., vk — the path. If there are multiple solutions, you can print any of them.",
    "prob_desc_input_spec": "The first line contains integer n (1 ≤ n ≤ 105) — the number of objects. The second line contains n space-separated integers type1, type2, ..., typen — the types of the objects. If typei equals zero, then the i-th object is the mountain. If typei equals one, then the i-th object is the hotel. It is guaranteed that at least one object is a hotel. The third line of the input contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ n) — the description of the ski tracks. If number ai equals zero, then there is no such object v, that has a ski track built from v to i. If number ai doesn't equal zero, that means that there is a track built from object ai to object i.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_008.jsonl",
    "code_uid": "9fb81725092eebfb874539680a7c25c8",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n0 0 0 0 1\\n0 1 2 3 4\", \"5\\n0 0 1 0 1\\n0 1 2 2 4\", \"4\\n1 0 0 0\\n2 3 4 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import Counter\n\nn = input()\nv = [int(i) for i in raw_input().split()]\na = [int(i) for i in raw_input().split()]\n\ncnt = Counter(a)\npf = {}\nhotels = []\n\nfor i in range(len(a)):\n    if v[i] == 1:\n        hotels.append(i+1)\n    if a[i] == 0:\n        continue\n    pf[i+1] = a[i]\n\nmp = []\nfor h in hotels:\n    now = h\n    path = [h]\n    while pf.has_key(now):\n        now = pf[now]\n        if cnt[now] > 1:\n            break\n        path.append(now)\n    if len(path) > len(mp):\n        mp = path\n\nmp.reverse()\n\nprint len(mp)\nprint ' '.join(str(i) for i in mp)",
    "prob_desc_created_at": "1380641400",
    "tags": [
        "graphs"
    ],
    "hidden_unit_tests": ""
}