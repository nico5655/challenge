{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"27\", \"26\"]",
    "src_uid": "87f4b8523d0047935931906ccc2ea911",
    "prob_desc_notes": "NoteIn the first example Max should use the spell of the first type on the second creature, then the spell of the second type on the same creature. Then total damage will be equal to 15 + 6·2 = 27.In the second example Max should use the spell of the second type on the first creature, then the spell of the second type on the third creature. Total damage will be equal to 10 + 11 + 5 = 26.",
    "prob_desc_description": "Recently Max has got himself into popular CCG \"BrainStone\". As \"BrainStone\" is a pretty intellectual game, Max has to solve numerous hard problems during the gameplay. Here is one of them:Max owns n creatures, i-th of them can be described with two numbers — its health hpi and its damage dmgi. Max also has two types of spells in stock:  Doubles health of the creature (hpi := hpi·2);  Assigns value of health of the creature to its damage (dmgi := hpi). Spell of first type can be used no more than a times in total, of the second type — no more than b times in total. Spell can be used on a certain creature multiple times. Spells can be used in arbitrary order. It isn't necessary to use all the spells.Max is really busy preparing for his final exams, so he asks you to determine what is the maximal total damage of all creatures he can achieve if he uses spells in most optimal way.",
    "prob_desc_output_spec": "Print single integer — maximum total damage creatures can deal.",
    "prob_desc_input_spec": "The first line contains three integers n, a, b (1 ≤ n ≤ 2·105, 0 ≤ a ≤ 20, 0 ≤ b ≤ 2·105) — the number of creatures, spells of the first type and spells of the second type, respectively. The i-th of the next n lines contain two number hpi and dmgi (1 ≤ hpi, dmgi ≤ 109) — description of the i-th creature.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_016.jsonl",
    "code_uid": "64abec9edc19d8edb2d4c5b5bc8c0add",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2 1 1\\n10 15\\n6 1\", \"3 0 3\\n10 8\\n7 11\\n5 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "# python3\nfrom sys import stdin\n\ndef main():\n    def parseints(line): return tuple(map(int, line.split()))\n    def bdiff(creature): return max(0, creature[0] - creature[1])\n\n    n, a, b = parseints(input())\n    hand = list(map(parseints, stdin.readlines()))\n\n    ans = sum(creature[1] for creature in hand)  # default damage\n    if b:\n        hand.sort(key=bdiff)\n\n        best = 0\n        if n > b:\n            lost = bdiff(hand[n - b])\n            for creature in hand[:n-b]:\n                best = max(best, (creature[0] << a) - creature[1] - lost)\n\n        for creature in hand[max(0,n-b):]:\n            best = max(best, (creature[0] << a) - max(creature))\n            ans += bdiff(creature)\n        ans += best\n\n    print(ans)\n\n\nmain()",
    "prob_desc_created_at": "1525099200",
    "tags": [
        "sortings",
        "greedy"
    ],
    "hidden_unit_tests": ""
}