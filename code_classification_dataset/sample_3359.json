{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\", \"1\", \"0\"]",
    "src_uid": "d70053777c911c1b090d5b3950d24621",
    "prob_desc_notes": "NoteIn the first example the dog should skip the second bowl to eat from the two bowls (the first and the third).",
    "prob_desc_description": "A new dog show on TV is starting next week. On the show dogs are required to demonstrate bottomless stomach, strategic thinking and self-preservation instinct. You and your dog are invited to compete with other participants and naturally you want to win!On the show a dog needs to eat as many bowls of dog food as possible (bottomless stomach helps here). Dogs compete separately of each other and the rules are as follows:At the start of the show the dog and the bowls are located on a line. The dog starts at position x = 0 and n bowls are located at positions x = 1, x = 2, ..., x = n. The bowls are numbered from 1 to n from left to right. After the show starts the dog immediately begins to run to the right to the first bowl.The food inside bowls is not ready for eating at the start because it is too hot (dog's self-preservation instinct prevents eating). More formally, the dog can eat from the i-th bowl after ti seconds from the start of the show or later.It takes dog 1 second to move from the position x to the position x + 1. The dog is not allowed to move to the left, the dog runs only to the right with the constant speed 1 distance unit per second. When the dog reaches a bowl (say, the bowl i), the following cases are possible:  the food had cooled down (i.e. it passed at least ti seconds from the show start): the dog immediately eats the food and runs to the right without any stop,  the food is hot (i.e. it passed less than ti seconds from the show start): the dog has two options: to wait for the i-th bowl, eat the food and continue to run at the moment ti or to skip the i-th bowl and continue to run to the right without any stop. After T seconds from the start the show ends. If the dog reaches a bowl of food at moment T the dog can not eat it. The show stops before T seconds if the dog had run to the right of the last bowl.You need to help your dog create a strategy with which the maximum possible number of bowls of food will be eaten in T seconds.",
    "prob_desc_output_spec": "Output a single integer — the maximum number of bowls of food the dog will be able to eat in T seconds.",
    "prob_desc_input_spec": "Two integer numbers are given in the first line - n and T (1 ≤ n ≤ 200 000, 1 ≤ T ≤ 2·109) — the number of bowls of food and the time when the dog is stopped. On the next line numbers t1, t2, ..., tn (1 ≤ ti ≤ 109) are given, where ti is the moment of time when the i-th bowl of food is ready for eating.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_054.jsonl",
    "code_uid": "eea0003160d8e798214bc15cd361ff60",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 5\\n1 5 3\", \"1 2\\n1\", \"1 1\\n1\"]",
    "exec_outcome": "PASSED",
    "source_code": "# using the min-heap \nfrom heapq import heappush,heappop\nbowels,Time = map(int,input().split())\nmyLine = [-int(b) for b in input().split()]\ngulp = []; eat = 0\nfor i in range(1,min(bowels+1,Time)):\n    # redundant (now that i look at it. the min does that already)\n    if i >= Time:\n        break\n    while gulp and -gulp[0] >= Time - i:\n        # remove the bowel with the highest time penalty \n        heappop(gulp)\n    # Check if the option is viable\n    if -myLine[i-1] < Time:\n        # Remove the step penalty and store the remaining \n        heappush(gulp,myLine[i-1] + i)\n    eat = max(len(gulp),eat)\nprint (eat)",
    "prob_desc_created_at": "1505739900",
    "tags": [
        "data structures",
        "greedy"
    ],
    "hidden_unit_tests": ""
}