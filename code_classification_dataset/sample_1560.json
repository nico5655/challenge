{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"94\\n25\\n2900000000\\n13\"]",
    "src_uid": "4fa609ef581f705df901f7532b52cf7c",
    "prob_desc_notes": "NoteThe optimal pipeline for the first query is shown at the picture above.The optimal pipeline for the second query is pictured below:  The optimal (and the only possible) pipeline for the third query is shown below:  The optimal pipeline for the fourth query is shown below:  ",
    "prob_desc_description": "You are responsible for installing a gas pipeline along a road. Let's consider the road (for simplicity) as a segment $$$[0, n]$$$ on $$$OX$$$ axis. The road can have several crossroads, but for simplicity, we'll denote each crossroad as an interval $$$(x, x + 1)$$$ with integer $$$x$$$. So we can represent the road as a binary string consisting of $$$n$$$ characters, where character 0 means that current interval doesn't contain a crossroad, and 1 means that there is a crossroad.Usually, we can install the pipeline along the road on height of $$$1$$$ unit with supporting pillars in each integer point (so, if we are responsible for $$$[0, n]$$$ road, we must install $$$n + 1$$$ pillars). But on crossroads we should lift the pipeline up to the height $$$2$$$, so the pipeline won't obstruct the way for cars.We can do so inserting several zig-zag-like lines. Each zig-zag can be represented as a segment $$$[x, x + 1]$$$ with integer $$$x$$$ consisting of three parts: $$$0.5$$$ units of horizontal pipe + $$$1$$$ unit of vertical pipe + $$$0.5$$$ of horizontal. Note that if pipeline is currently on height $$$2$$$, the pillars that support it should also have length equal to $$$2$$$ units.  Each unit of gas pipeline costs us $$$a$$$ bourles, and each unit of pillar — $$$b$$$ bourles. So, it's not always optimal to make the whole pipeline on the height $$$2$$$. Find the shape of the pipeline with minimum possible cost and calculate that cost.Note that you must start and finish the pipeline on height $$$1$$$ and, also, it's guaranteed that the first and last characters of the input string are equal to 0.",
    "prob_desc_output_spec": "Print $$$T$$$ integers — one per query. For each query print the minimum possible cost of the constructed pipeline.",
    "prob_desc_input_spec": "The fist line contains one integer $$$T$$$ ($$$1 \\le T \\le 100$$$) — the number of queries. Next $$$2 \\cdot T$$$ lines contain independent queries — one query per two lines. The first line contains three integers $$$n$$$, $$$a$$$, $$$b$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$, $$$1 \\le a \\le 10^8$$$, $$$1 \\le b \\le 10^8$$$) — the length of the road, the cost of one unit of the pipeline and the cost of one unit of the pillar, respectively. The second line contains binary string $$$s$$$ ($$$|s| = n$$$, $$$s_i \\in \\{0, 1\\}$$$, $$$s_1 = s_n = 0$$$) — the description of the road. It's guaranteed that the total length of all strings $$$s$$$ doesn't exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_010.jsonl",
    "code_uid": "d81964dc77640ee69c3429aa550dee84",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n8 2 5\\n00110010\\n8 1 1\\n00110010\\n9 100000000 100000000\\n010101010\\n2 5 1\\n00\"]",
    "exec_outcome": "PASSED",
    "source_code": "inf = 10000000000000000000000000000000000000000000000000000000000000000\ndef solve(n, a, b, s):\n    dp = [[]] * 2\n    for i in range(2):\n        dp[i] = [0] * n\n    dp[0][0] = (n + 1) * (a + b) - a\n    dp[1][0] = inf\n    for i in range(1, n):\n        if s[i] == '1':\n            dp[1][i] = min(dp[1][i - 1] + b, dp[0][i - 1] + a + 2 * b)\n            dp[0][i] = inf\n        else:\n            dp[0][i] = min(dp[0][i - 1], dp[1][i - 1] + a)\n            dp[1][i] = min(dp[1][i - 1] + b, dp[0][i - 1] + a + 2 * b)\n    return dp[0][n - 1]\nfor i in range(int(input())):\n    n, a, b = map(int, input().split())\n    s = input()\n    print(solve(n, a, b, s))\n",
    "prob_desc_created_at": "1566484500",
    "tags": [
        "dp",
        "greedy"
    ],
    "hidden_unit_tests": ""
}