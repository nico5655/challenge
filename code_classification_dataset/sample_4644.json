{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1 3 2 3 1 3 2\\n1 4 1 4\"]",
    "src_uid": "f51a46e87b8871c3f581786f84e5e6d1",
    "prob_desc_notes": null,
    "prob_desc_description": "There are $$$n + 1$$$ cities, numbered from $$$0$$$ to $$$n$$$. $$$n$$$ roads connect these cities, the $$$i$$$-th road connects cities $$$i - 1$$$ and $$$i$$$ ($$$i \\in [1, n]$$$).Each road has a direction. The directions are given by a string of $$$n$$$ characters such that each character is either L or R. If the $$$i$$$-th character is L, it means that the $$$i$$$-th road initially goes from the city $$$i$$$ to the city $$$i - 1$$$; otherwise it goes from the city $$$i - 1$$$ to the city $$$i$$$.A traveler would like to visit as many cities of this country as possible. Initially, they will choose some city to start their journey from. Each day, the traveler must go from the city where they currently are to a neighboring city using one of the roads, and they can go along a road only if it is directed in the same direction they are going; i. e., if a road is directed from city $$$i$$$ to the city $$$i + 1$$$, it is possible to travel from $$$i$$$ to $$$i + 1$$$, but not from $$$i + 1$$$ to $$$i$$$. After the traveler moves to a neighboring city, all roads change their directions to the opposite ones. If the traveler cannot go from their current city to a neighboring city, their journey ends; it is also possible to end the journey whenever the traveler wants to.The goal of the traveler is to visit as many different cities as possible (they can visit a city multiple times, but only the first visit is counted). For each city $$$i$$$, calculate the maximum number of different cities the traveler can visit during exactly one journey if they start in the city $$$i$$$. ",
    "prob_desc_output_spec": "For each test case, print $$$n + 1$$$ integers. The $$$i$$$-th integer should be equal to the maximum number of different cities the traveler can visit during one journey if this journey starts in the $$$i$$$-th city.",
    "prob_desc_input_spec": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. Each test case consists of two lines. The first line contains one integer $$$n$$$ ($$$1 \\le n \\le 3 \\cdot 10^5$$$). The second line contains the string $$$s$$$ consisting of exactly $$$n$$$ characters, each character is either L or R. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$3 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_102.jsonl",
    "code_uid": "32c1ea4338af1a2958b21e30e7ca1c9b",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n6\\nLRRRLL\\n3\\nLRL\"]",
    "exec_outcome": "PASSED",
    "source_code": "def solve():\r\n    n = int(input())\r\n    a = list(input())\r\n    for i in range(n):\r\n        if a[i] == \"R\":\r\n            a[i] = 1\r\n        else:\r\n            a[i] = 0\r\n\r\n    left = [-1 for i in range(n + 1)]\r\n    right = [-1 for i in range(n + 1)]\r\n    right[-1] = 0\r\n    left[-1] = 0\r\n\r\n    for i in range(n):\r\n        if right[i] == -1:\r\n            j = i\r\n            right[i] = 0\r\n            cnt = 0\r\n\r\n            while j < n:\r\n                if (a[j] + cnt) % 2 == 1:\r\n                    right[i] += 1\r\n                    cnt += 1\r\n                    j += 1\r\n                else:\r\n                    break\r\n\r\n            cnt = 1\r\n            for j in range(i + 1, i + right[i]):\r\n                if cnt % 2 == 1:\r\n                    right[j] = 0\r\n                else:\r\n                    right[j] = right[i] - cnt\r\n                cnt += 1 \r\n             \r\n    a.reverse()\r\n\r\n    for i in range(n):\r\n        if left[i] == -1:\r\n            j = i\r\n            left[i] = 0\r\n            cnt = 0\r\n\r\n            while j < n:\r\n                if (a[j] + cnt) % 2 == 0:\r\n                    left[i] += 1\r\n                    cnt += 1\r\n                    j += 1\r\n                else:\r\n                    break\r\n            \r\n            cnt = 1\r\n            for j in range(i + 1, i + left[i]):\r\n                if cnt % 2 == 1:\r\n                    left[j] = 0\r\n                else:\r\n                    left[j] = left[i] - cnt\r\n                cnt += 1\r\n            \r\n\r\n    left.reverse()\r\n\r\n\r\n    for i in range(n + 1):\r\n        print(1 + right[i] + left[i], end=\" \")\r\n    print()\r\n\r\n\r\ntt = int(input())\r\nfor _ in range(tt):\r\n    solve()\r\n",
    "prob_desc_created_at": "1611930900",
    "tags": [
        "dfs and similar",
        "dp",
        "dsu",
        "implementation"
    ],
    "hidden_unit_tests": ""
}