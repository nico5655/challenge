{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"No\", \"Yes\\n1 2\\n2 1 3\"]",
    "src_uid": "bb7bace930d5c5f231bfc2061576ec45",
    "prob_desc_notes": "NoteIn the first example, there is no way to partition a single number into two non-empty sets, hence the answer is \"No\".In the second example, the sums of the sets are $$$2$$$ and $$$4$$$ respectively. The $$$\\mathrm{gcd}(2, 4) = 2 &gt; 1$$$, hence that is one of the possible answers.",
    "prob_desc_description": "Find out if it is possible to partition the first $$$n$$$ positive integers into two non-empty disjoint sets $$$S_1$$$ and $$$S_2$$$ such that:$$$\\mathrm{gcd}(\\mathrm{sum}(S_1), \\mathrm{sum}(S_2)) &gt; 1$$$ Here $$$\\mathrm{sum}(S)$$$ denotes the sum of all elements present in set $$$S$$$ and $$$\\mathrm{gcd}$$$ means thegreatest common divisor.Every integer number from $$$1$$$ to $$$n$$$ should be present in exactly one of $$$S_1$$$ or $$$S_2$$$.",
    "prob_desc_output_spec": "If such partition doesn't exist, print \"No\" (quotes for clarity). Otherwise, print \"Yes\" (quotes for clarity), followed by two lines, describing $$$S_1$$$ and $$$S_2$$$ respectively. Each set description starts with the set size, followed by the elements of the set in any order. Each set must be non-empty. If there are multiple possible partitions — print any of them.",
    "prob_desc_input_spec": "The only line of the input contains a single integer $$$n$$$ ($$$1 \\le n \\le 45\\,000$$$)",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_003.jsonl",
    "code_uid": "bdcddfeef444530e63ef7564ca2a3437",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1\", \"3\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input())\nif n <3:\n\tprint (\"No\")\nelif n ==3:\n\tprint (\"Yes\")\n\tprint (1,2)\n\tprint (2,1,3)\nelse:\n\tprint (\"Yes\")\n\tprint(3,1,n,n-1)\n\tprint(n-3,*range(2,n-1))\n",
    "prob_desc_created_at": "1536248100",
    "tags": [
        "constructive algorithms",
        "math"
    ],
    "hidden_unit_tests": ""
}