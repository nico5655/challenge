{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"\\u0421\\u043c\\u043e\\u0442\\u0440\\u0438\\u0442\\u0435 \\u0437\\u0430\\u043c\\u0435\\u0447\\u0430\\u043d\\u0438\\u0435 \\u043d\\u0438\\u0436\\u0435.\\nSee the note below.\"]",
    "src_uid": "19190fd248eb2c621ac2c78b803049a8",
    "prob_desc_notes": "NoteLet's consider the following output:25 1 50 28 1 80 2This output is not guaranteed to catch the thief and is not correct. It is given to you only to show the expected output format. There exists a combination of an initial position and a movement strategy such that the police will not catch the thief.Consider the following initial position and thief’s movement:In the first hour, the thief is located in district (1,1). Police officers will search districts (5,1) and (50,2) and will not find him.At the start of the second hour, the thief moves to district (2,2). Police officers will search districts (8,1) and (80,2) and will not find him.Since there is no further investigation by the police, the thief escaped!",
    "prob_desc_description": "There was a big bank robbery in Tablecity. In order to catch the thief, the President called none other than Albert – Tablecity’s Chief of Police. Albert does not know where the thief is located, but he does know how he moves.Tablecity can be represented as 1000 × 2 grid, where every cell represents one district. Each district has its own unique name “(X, Y)”, where X and Y are the coordinates of the district in the grid. The thief’s movement is as Every hour the thief will leave the district (X, Y) he is currently hiding in, and move to one of the districts: (X - 1, Y), (X + 1, Y), (X - 1, Y - 1), (X - 1, Y + 1), (X + 1, Y - 1), (X + 1, Y + 1) as long as it exists in Tablecity. Below is an example of thief’s possible movements if he is located in district (7,1):Albert has enough people so that every hour he can pick any two districts in Tablecity and fully investigate them, making sure that if the thief is located in one of them, he will get caught. Albert promised the President that the thief will be caught in no more than 2015 hours and needs your help in order to achieve that.",
    "prob_desc_output_spec": "The first line of output contains integer N – duration of police search in hours. Each of the following N lines contains exactly 4 integers Xi1, Yi1, Xi2, Yi2 separated by spaces, that represent 2 districts (Xi1, Yi1), (Xi2, Yi2) which got investigated during i-th hour. Output is given in chronological order (i-th line contains districts investigated during i-th hour) and should guarantee that the thief is caught in no more than 2015 hours, regardless of thief’s initial position and movement.   N ≤ 2015  1 ≤ X ≤ 1000  1 ≤ Y ≤ 2 ",
    "prob_desc_input_spec": "There is no input for this problem. ",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_015.jsonl",
    "code_uid": "204704e3f3e4a7db86056ba5978c0f9b",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"\\u0412 \\u044d\\u0442\\u043e\\u0439 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0435 \\u043d\\u0435\\u0442 \\u043f\\u0440\\u0438\\u043c\\u0435\\u0440\\u043e\\u0432 \\u0432\\u0432\\u043e\\u0434\\u0430-\\u0432\\u044b\\u0432\\u043e\\u0434\\u0430.\\nThis problem doesn't have sample input and output.\"]",
    "exec_outcome": "PASSED",
    "source_code": "print(1998)\n[print(i, 1, i, 2) for k in '12' for i in range(1, 1000)]",
    "prob_desc_created_at": "1441526400",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "hidden_unit_tests": ""
}