{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\", \"9\", \"0\"]",
    "src_uid": "ff5abd7dfd6234ddaf0ee7d24e02c404",
    "prob_desc_notes": "NoteIn the first test, you can perform the following sequence:  ask a person to move from armchair $$$1$$$ to armchair $$$2$$$, it takes $$$1$$$ minute;  ask a person to move from armchair $$$7$$$ to armchair $$$6$$$, it takes $$$1$$$ minute;  ask a person to move from armchair $$$4$$$ to armchair $$$5$$$, it takes $$$1$$$ minute. In the second test, you can perform the following sequence:  ask a person to move from armchair $$$1$$$ to armchair $$$4$$$, it takes $$$3$$$ minutes;  ask a person to move from armchair $$$2$$$ to armchair $$$6$$$, it takes $$$4$$$ minutes;  ask a person to move from armchair $$$4$$$ to armchair $$$5$$$, it takes $$$1$$$ minute;  ask a person to move from armchair $$$3$$$ to armchair $$$4$$$, it takes $$$1$$$ minute. In the third test, no seat is occupied so your goal is achieved instantly.",
    "prob_desc_description": "There are $$$n$$$ armchairs, numbered from $$$1$$$ to $$$n$$$ from left to right. Some armchairs are occupied by people (at most one person per armchair), others are not. The number of occupied armchairs is not greater than $$$\\frac{n}{2}$$$.For some reason, you would like to tell people to move from their armchairs to some other ones. If the $$$i$$$-th armchair is occupied by someone and the $$$j$$$-th armchair is not, you can tell the person sitting in the $$$i$$$-th armchair to move to the $$$j$$$-th armchair. The time it takes a person to move from the $$$i$$$-th armchair to the $$$j$$$-th one is $$$|i - j|$$$ minutes. You may perform this operation any number of times, but these operations must be done sequentially, i. e. you cannot tell a person to move until the person you asked to move in the last operation has finished moving to their destination armchair.You want to achieve the following situation: every seat that was initially occupied must be free. What is the minimum time you need to do it?",
    "prob_desc_output_spec": "Print one integer — the minimum number of minutes you have to spend to achieve the following situation: every seat that was initially occupied must be free.",
    "prob_desc_input_spec": "The first line contains one integer $$$n$$$ ($$$2 \\le n \\le 5000$$$) — the number of armchairs. The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$0 \\le a_i \\le 1$$$). $$$a_i = 1$$$ means that the $$$i$$$-th armchair is initially occupied, $$$a_i = 0$$$ means that it is initially free. The number of occupied armchairs is at most $$$\\frac{n}{2}$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_110.jsonl",
    "code_uid": "980793cd066798e066161d63b1d7f55f",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"7\\n1 0 0 1 0 0 1\", \"6\\n1 1 1 0 0 0\", \"5\\n0 0 0 0 0\"]",
    "exec_outcome": "PASSED",
    "source_code": "inf = float('inf')\r\n\r\nn = int(input())\r\nli = list(map(int, input().split()))\r\n\r\ninits = []\r\nempties = []\r\ndp = [[0] * n for _ in range(n)]\r\nfor i in range(n):\r\n    if li[i]:\r\n        inits.append(i)\r\n    else:\r\n        empties.append(i)\r\n        \r\ninit_len = len(inits)\r\nempty_len = len(empties)\r\n        \r\nif not inits:\r\n    print(0)\r\nelse:\r\n    dp = [[inf] * empty_len for _ in range(init_len)]\r\n    for ei in range(empty_len):\r\n        dp[0][ei] = abs(empties[ei] - inits[0])\r\n        if ei >= 1:\r\n            dp[0][ei] = min(dp[0][ei - 1], dp[0][ei])\r\n            \r\n    for ii in range(1, init_len):\r\n        for ei in range(ii, empty_len):\r\n            dp[ii][ei] = dp[ii - 1][ei - 1] + abs(empties[ei] - inits[ii])\r\n            dp[ii][ei] = min(dp[ii][ei - 1], dp[ii][ei])\r\n            \r\n    print(dp[-1][-1])",
    "prob_desc_created_at": "1621152000",
    "tags": [
        "dp",
        "flows",
        "graph matchings",
        "greedy"
    ],
    "hidden_unit_tests": ""
}