{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"0\\n1\\n0\\n4\\n0\\n36\\n665702330\"]",
    "src_uid": "0b718a81787c3c5c1aa5b92834ee8bf5",
    "prob_desc_notes": "NoteIn first test case, we only have one permutation which is $$$[1]$$$ but it is not beautiful because $$$\\gcd(1 \\cdot 1) = 1$$$.In second test case, we only have one beautiful permutation which is $$$[2, 1]$$$ because $$$\\gcd(1 \\cdot 2, 2 \\cdot 1) = 2$$$. ",
    "prob_desc_description": "Marin wants you to count number of permutations that are beautiful. A beautiful permutation of length $$$n$$$ is a permutation that has the following property: $$$$$$ \\gcd (1 \\cdot p_1, \\, 2 \\cdot p_2, \\, \\dots, \\, n \\cdot p_n) &gt; 1, $$$$$$ where $$$\\gcd$$$ is the greatest common divisor.A permutation is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array) and $$$[1,3, 4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array).",
    "prob_desc_output_spec": "For each test case, print one integer — number of beautiful permutations. Because the answer can be very big, please print the answer modulo $$$998\\,244\\,353$$$.",
    "prob_desc_input_spec": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10^3$$$) — the number of test cases. Each test case consists of one line containing one integer $$$n$$$ ($$$1 \\le n \\le 10^3$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_095.jsonl",
    "code_uid": "d010c0b118b5b7a671b840b994bef607",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7\\n1\\n2\\n3\\n4\\n5\\n6\\n1000\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\nimport math\r\nimport bisect\r\nimport heapq\r\ninput = sys.stdin.readline\r\nprint = sys.stdout.write\r\nt = int(input())\r\n\r\n\r\ndef solve():\r\n    # input init.\r\n    # input()\r\n    # num\r\n    n=int(input())\r\n    # x,d=map(int, input().split())\r\n    # string\r\n    # s=input().rstrip('\\n')\r\n    # c=input().rstrip('\\n')\r\n    # list\r\n    # l=list(map(int,input().split()))\r\n    # l=input().split()\r\n    # matrix\r\n    # matrix=[list(map(int,input().split())) for _ in range(n)]\r\n    # matrix=[list(map(int,list(input().rstrip('\\n')))) for _ in range(n)]\r\n\r\n    # solve.\r\n\r\n    mod=998244353\r\n    if n%2==1:\r\n        return 0\r\n    else:\r\n        res=1\r\n        for i in range(1,n//2+1):\r\n            res*=i\r\n            res%=mod\r\n\r\n    # return.\r\n    \r\n    return (res**2)%mod\r\n\r\n# solve()\r\n# print(str(solve()))\r\nfor _ in range(t):\r\n    print(str(solve())+'\\n')\r\n    # solve()\r\n\r\n",
    "prob_desc_created_at": "1648391700",
    "tags": [
        "combinatorics",
        "math",
        "number theory"
    ],
    "hidden_unit_tests": ""
}