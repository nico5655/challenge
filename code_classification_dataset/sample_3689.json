{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1\\n2 4\", \"3\\n1 2\\n3 4\\n5 6\"]",
    "src_uid": "8eac2aa41331c9970c55b2307b251c15",
    "prob_desc_notes": null,
    "prob_desc_description": "Xenia the horse breeder has n (n &gt; 1) horses that stand in a row. Each horse has its own unique number. Initially, the i-th left horse has number i. That is, the sequence of numbers of horses in a row looks as follows (from left to right): 1, 2, 3, ..., n.Xenia trains horses before the performance. During the practice sessions, she consistently gives them commands. Each command is a pair of numbers l, r (1 ≤ l &lt; r ≤ n). The command l, r means that the horses that are on the l-th, (l + 1)-th, (l + 2)-th, ..., r-th places from the left must be rearranged. The horses that initially stand on the l-th and r-th places will swap. The horses on the (l + 1)-th and (r - 1)-th places will swap. The horses on the (l + 2)-th and (r - 2)-th places will swap and so on. In other words, the horses that were on the segment [l, r] change their order to the reverse one.For example, if Xenia commanded l = 2, r = 5, and the sequence of numbers of horses before the command looked as (2, 1, 3, 4, 5, 6), then after the command the sequence will be (2, 5, 4, 3, 1, 6).We know that during the practice Xenia gave at most three commands of the described form. You have got the final sequence of numbers of horses by the end of the practice. Find what commands Xenia gave during the practice. Note that you do not need to minimize the number of commands in the solution, find any valid sequence of at most three commands.",
    "prob_desc_output_spec": "The first line should contain integer k (0 ≤ k ≤ 3) — the number of commads Xenia gave during the practice. In each of the next k lines print two integers. In the i-th line print numbers li, ri (1 ≤ li &lt; ri ≤ n) — Xenia's i-th command during the practice. It is guaranteed that a solution exists. If there are several solutions, you are allowed to print any of them.",
    "prob_desc_input_spec": "The first line contains an integer n (2 ≤ n ≤ 1000) — the number of horses in the row. The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ n), where ai is the number of the i-th left horse in the row after the practice.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 2700,
    "file_name": "train_078.jsonl",
    "code_uid": "54512e16e806c62692c4bd6cfa79345f",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n1 4 3 2 5\", \"6\\n2 1 4 3 6 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = input()\na = [0] + map(int, raw_input().split())\nla, ra, m = [0]*3, [0]*3, 0\n\ndef left():\n    for i in xrange(1, n+1):\n        if a[i] != i:\n            return i\n    return 0\n\ndef right():\n    for i in xrange(n, 0, -1):\n        if a[i] != i:\n            return i\n    return 0\n\ndef find(x):\n    for i in xrange(1, n+1):\n        if a[i] == x:\n            return i\n\ndef dfs(x):\n    global a, la, ra, m\n    l = left()\n    if l == 0: return True\n    if x == 3: return False \n    r = find(l)\n    a[l:r+1] = a[r:l-1:-1]\n    if dfs(x+1):\n        la[m] = l\n        ra[m] = r\n        m += 1\n        return True\n    a[l:r+1] = a[r:l-1:-1]\n    r = right()\n    l = find(r)\n    a[l:r+1] = a[r:l-1:-1]\n    if dfs(x+1):\n        la[m] = l\n        ra[m] = r\n        m += 1\n        return True\n    a[l:r+1] = a[r:l-1:-1]\n    return False\n    \ndfs(0)\n\nprint m\nfor i in xrange(m):\n    print la[i], ra[i]\n",
    "prob_desc_created_at": "1377531000",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "greedy"
    ],
    "hidden_unit_tests": ""
}