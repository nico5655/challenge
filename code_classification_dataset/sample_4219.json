{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"5\", \"-1\"]",
    "src_uid": "282a2f110ab3c0ab7853e7c427e26552",
    "prob_desc_notes": "NoteIn the first test the minimum value is $$$5 = w_3 + w_4$$$, because numbers $$$\\{2, 3, 4, 5\\}$$$ are distinct.In the second test case, there are no suitable pair $$$(i, j)$$$.",
    "prob_desc_description": "Sam changed his school and on the first biology lesson he got a very interesting task about genes.You are given $$$n$$$ arrays, the $$$i$$$-th of them contains $$$m$$$ different integers — $$$a_{i,1}, a_{i,2},\\ldots,a_{i,m}$$$. Also you are given an array of integers $$$w$$$ of length $$$n$$$.Find the minimum value of $$$w_i + w_j$$$ among all pairs of integers $$$(i, j)$$$ ($$$1 \\le i, j \\le n$$$), such that the numbers $$$a_{i,1}, a_{i,2},\\ldots,a_{i,m}, a_{j,1}, a_{j,2},\\ldots,a_{j,m}$$$ are distinct.",
    "prob_desc_output_spec": "Print a single number — the answer to the problem.  If there are no suitable pairs $$$(i, j)$$$, print $$$-1$$$.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$, $$$m$$$ ($$$2 \\leq n \\leq 10^5$$$, $$$1 \\le m \\le 5$$$). The $$$i$$$-th of the next $$$n$$$ lines starts with $$$m$$$ distinct integers $$$a_{i,1}, a_{i,2}, \\ldots, a_{i,m}$$$ and then $$$w_i$$$ follows ($$$1\\leq a_{i,j} \\leq 10^9$$$, $$$1 \\leq w_{i} \\leq 10^9$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2700,
    "file_name": "train_092.jsonl",
    "code_uid": "201daf47535a18ee65618d92ee34b037",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"4 2\\n1 2 5\\n4 3 1\\n2 3 2\\n4 5 3\", \"4 3\\n1 2 3 5\\n2 3 4 2\\n3 4 5 3\\n1 3 10 10\"]",
    "exec_outcome": "PASSED",
    "source_code": "from random import seed, randint\r\nimport sys\r\nraw_input = iter(sys.stdin.read().splitlines()).next\r\n\r\ndef f(a, w, vals):\r\n    bits = [1<<randint(0, K-1) for _ in vals]\r\n    masks = [reduce(lambda x, y: x|bits[y], row, 0) for row in a]\r\n    dp = [float(\"inf\")]*(1<<K)\r\n    for i, x in enumerate(masks):\r\n        dp[x] = min(dp[x], w[i])\r\n    for mask in xrange(len(dp)):\r\n        base = 1\r\n        for i in xrange(K):\r\n            dp[mask|base] = min(dp[mask|base], dp[mask])\r\n            base <<= 1\r\n    full_mask = len(dp)-1\r\n    return min(x+dp[full_mask^masks[i]] for i, x in enumerate(w)) \r\n\r\ndef solution():\r\n    n, m = map(int, raw_input().strip().split())\r\n    a, w = [None]*n, [0]*n\r\n    for i in xrange(n):\r\n        args = map(int, raw_input().strip().split())\r\n        a[i], w[i] = args[:-1], args[-1]\r\n    vals = set(a[i][j] for i in xrange(n) for j in xrange(m))\r\n    lookup = {x:i for i, x in enumerate(vals)}\r\n    for i in xrange(n):\r\n        for j in xrange(m):\r\n            a[i][j] = lookup[a[i][j]]\r\n    result = min(f(a, w, vals) for _ in xrange(RETRY))\r\n    return result if result != float(\"inf\") else -1\r\n\r\nseed(0)\r\nK = 10\r\nRETRY = 80\r\nprint '%s' % solution()",
    "prob_desc_created_at": "1645611000",
    "tags": [
        "binary search",
        "bitmasks",
        "combinatorics",
        "math",
        "two pointers"
    ],
    "hidden_unit_tests": ""
}