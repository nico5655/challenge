{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"3\", \"9\"]",
    "src_uid": "d073d41f7e184e9bc4a12219d86e7184",
    "prob_desc_notes": "NoteIn the first example, the following 3 pairs of planes satisfy the requirements:   (2, 5) passes the station at time 3 / 4 with vwind = 1;  (3, 4) passes the station at time 2 / 5 with vwind = 1 / 2;  (3, 5) passes the station at time 4 / 7 with vwind =  - 1 / 4. In the second example, each of the 3 planes with negative coordinates can form a valid pair with each of the other 3, totaling 9 pairs.",
    "prob_desc_description": "Arkady the air traffic controller is now working with n planes in the air. All planes move along a straight coordinate axis with Arkady's station being at point 0 on it. The i-th plane, small enough to be represented by a point, currently has a coordinate of xi and is moving with speed vi. It's guaranteed that xi·vi &lt; 0, i.e., all planes are moving towards the station.Occasionally, the planes are affected by winds. With a wind of speed vwind (not necessarily positive or integral), the speed of the i-th plane becomes vi + vwind.According to weather report, the current wind has a steady speed falling inside the range [ - w, w] (inclusive), but the exact value cannot be measured accurately since this value is rather small — smaller than the absolute value of speed of any plane.Each plane should contact Arkady at the exact moment it passes above his station. And you are to help Arkady count the number of pairs of planes (i, j) (i &lt; j) there are such that there is a possible value of wind speed, under which planes i and j contact Arkady at the same moment. This value needn't be the same across different pairs.The wind speed is the same for all planes. You may assume that the wind has a steady speed and lasts arbitrarily long.",
    "prob_desc_output_spec": "Output a single integer — the number of unordered pairs of planes that can contact Arkady at the same moment.",
    "prob_desc_input_spec": "The first line contains two integers n and w (1 ≤ n ≤ 100 000, 0 ≤ w &lt; 105) — the number of planes and the maximum wind speed. The i-th of the next n lines contains two integers xi and vi (1 ≤ |xi| ≤ 105, w + 1 ≤ |vi| ≤ 105, xi·vi &lt; 0) — the initial position and speed of the i-th plane. Planes are pairwise distinct, that is, no pair of (i, j) (i &lt; j) exists such that both xi = xj and vi = vj.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2500,
    "file_name": "train_075.jsonl",
    "code_uid": "5268500ec26d478844a8f61ead2087ba",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 1\\n-3 2\\n-3 3\\n-1 2\\n1 -3\\n3 -5\", \"6 1\\n-3 2\\n-2 2\\n-1 2\\n1 -2\\n2 -2\\n3 -2\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nrange = xrange\ninput = raw_input\n\ninp = [int(x) for x in sys.stdin.read().split()]; ii = 0\n\nn = inp[ii]; ii += 1\nw = inp[ii]; ii += 1\n\nX = inp[ii + 0: ii + 2 * n: 2]\nV = inp[ii + 1: ii + 2 * n: 2]\nV = [-v for v in V]\nii += 2 * n\n\ndef sign(x):\n    return 1 - 2*(x < 0)\n\ndef cmp1(i,j):\n    # X[i] / (V[i] - w) < X[j] / (V[j] - w)\n    a = X[i]\n    b = V[i] - w\n\n    c = X[j]\n    d = V[j] - w\n\n    x = sign(b) * a * abs(d)\n    y = sign(d) * c * abs(b)\n\n    if x < y:\n        return -1\n    return -(x < y or (x == y and 1.0 * a / b / b < 1.0 * c / d / d))\n\ndef cmp2(i,j):\n    # X[i] / (V[i] + w) < X[j] / (V[j] + w)\n    a = X[i]\n    b = V[i] + w\n\n    c = X[j]\n    d = V[j] + w\n\n    x = sign(b) * a * abs(d)\n    y = sign(d) * c * abs(b)\n\n    if x < y:\n        return -1\n    return -(x < y or (x == y and 1.0 * a / b / b > 1.0 * c / d / d))\n\norder1 = sorted(range(n), cmp = cmp1)\norder2 = sorted(range(n), cmp = cmp2)\n\ndef invert_count(A, B):\n    mapper = [0]*n\n    for i in range(n):\n        mapper[A[i]] = i\n\n    order = [mapper[i] for i in B]\n    \n    class segtree:\n        def __init__(self, n):\n            m = 1\n            while m < n: m*=2\n            self.m = m\n            self.data = [0]*(2*m)\n        def add(self, i):\n            i += self.m\n            while i:\n                self.data[i] += 1\n                i >>= 1\n        def summer(self, l, r):\n            l += self.m\n            r += self.m\n\n            s = 0\n            while l < r:\n                if l & 1:\n                    s += self.data[l]\n                    l += 1\n                if r & 1:\n                    r -= 1\n                    s += self.data[r]\n                l >>= 1\n                r >>= 1\n            return s\n\n    seg = segtree(n)\n    s = 0\n    for i in reversed(order):\n        s += seg.summer(0, i)\n        seg.add(i)\n    return s\n\nprint invert_count(order1, order2)",
    "prob_desc_created_at": "1521905700",
    "tags": [],
    "hidden_unit_tests": ""
}