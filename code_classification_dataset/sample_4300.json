{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\"]",
    "src_uid": "485d5984e34a479f2c074a305ae999ae",
    "prob_desc_notes": "NoteThe first test case corresponds to the sample described in the statement.In the second test case we can choose the number $$$50$$$ and the letter a.In the third test case we can choose the number $$$11$$$ and the letter a, after that $$$a = [a, 22]$$$. Then we choose the number $$$22$$$ and the letter b and get $$$a = [a, b]$$$.In the fifth test case we can change all numbers one by one to the letter a.",
    "prob_desc_description": "An integer array $$$a_1, a_2, \\ldots, a_n$$$ is being transformed into an array of lowercase English letters using the following prodecure:While there is at least one number in the array:   Choose any number $$$x$$$ from the array $$$a$$$, and any letter of the English alphabet $$$y$$$.  Replace all occurrences of number $$$x$$$ with the letter $$$y$$$. For example, if we initially had an array $$$a = [2, 3, 2, 4, 1]$$$, then we could transform it the following way:  Choose the number $$$2$$$ and the letter c. After that $$$a = [c, 3, c, 4, 1]$$$.  Choose the number $$$3$$$ and the letter a. After that $$$a = [c, a, c, 4, 1]$$$.  Choose the number $$$4$$$ and the letter t. After that $$$a = [c, a, c, t, 1]$$$.  Choose the number $$$1$$$ and the letter a. After that $$$a = [c, a, c, t, a]$$$. After the transformation all letters are united into a string, in our example we get the string \"cacta\".Having the array $$$a$$$ and the string $$$s$$$ determine if the string $$$s$$$ could be got from the array $$$a$$$ after the described transformation?",
    "prob_desc_output_spec": "For each test case, output \"YES\", if we can get the string $$$s$$$ from the array $$$a$$$, and \"NO\" otherwise. You can output each letter in any case.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ $$$(1 \\leq t \\leq 10^3$$$) — the number of test cases. Then the description of the test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 50$$$) — the length of the array $$$a$$$ and the string $$$s$$$. The second line of each test case contains exactly $$$n$$$ integers: $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 50$$$) — the elements of the array $$$a$$$. The third line of each test case contains a string $$$s$$$ of length $$$n$$$, consisting of lowercase English letters. ",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_094.jsonl",
    "code_uid": "e6c162dc16e6a3a84651de7e2af10272",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7\\n\\n5\\n\\n2 3 2 4 1\\n\\ncacta\\n\\n1\\n\\n50\\n\\na\\n\\n2\\n\\n11 22\\n\\nab\\n\\n4\\n\\n1 2 2 1\\n\\naaab\\n\\n5\\n\\n1 2 3 2 1\\n\\naaaaa\\n\\n6\\n\\n1 10 2 9 3 8\\n\\nazzfdb\\n\\n7\\n\\n1 2 3 4 1 1 2\\n\\nabababb\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin, stdout\r\n\r\nI = stdin.readline\r\nO = stdout.write\r\n\r\n# n = int(I())\r\n# arr = list(map(int, I().split()))\r\n\r\ndef solve():\r\n    n = int(I())\r\n    arr = list(map(int, I().split()))\r\n    s = input()\r\n    mp = {}\r\n    ans = \"\"\r\n    ok = True\r\n    \r\n    for i in range(n):\r\n        if arr[i] in mp:\r\n            if s[i] != mp[arr[i]]:\r\n                ok = False\r\n                break\r\n        else:\r\n            mp[arr[i]] = s[i]\r\n\r\n    if ok:\r\n        ans = \"YES\"\r\n    else:\r\n        ans = \"NO\"\r\n    \r\n    print(ans)\r\n    \r\n\r\nfor tc in range(int(input())):\r\n    solve()",
    "prob_desc_created_at": "1665930900",
    "tags": [
        "greedy",
        "implementation"
    ],
    "hidden_unit_tests": ""
}