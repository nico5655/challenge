{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"5\\n1 2 3 4 5\", \"2\\n3 5\", \"1\\n3\"]",
    "src_uid": "fd2227498f1a0f4042673382a3c71c85",
    "prob_desc_notes": "NoteIn the first example, any $$$k$$$ is suitable, since $$$a$$$ is an arithmetic progression.Possible arrays $$$x$$$:  $$$[1]$$$ $$$[1, 1]$$$ $$$[1, 1, 1]$$$ $$$[1, 1, 1, 1]$$$  $$$[1, 1, 1, 1, 1]$$$In the second example, Bajtek's array can have three or five elements.Possible arrays $$$x$$$:  $$$[1, 2, 2]$$$ $$$[1, 2, 2, 1, 2]$$$For example, $$$k = 4$$$ is bad, since it leads to $$$6 + x_0 = 8$$$ and $$$0 + x_0 = 1$$$, which is an obvious contradiction.In the third example, only $$$k = n$$$ is good.Array $$$[1, 4, -2]$$$ satisfies the requirements.Note that $$$x_i$$$ may be negative.",
    "prob_desc_description": "Bajtek, known for his unusual gifts, recently got an integer array $$$x_0, x_1, \\ldots, x_{k-1}$$$.Unfortunately, after a huge array-party with his extraordinary friends, he realized that he'd lost it. After hours spent on searching for a new toy, Bajtek found on the arrays producer's website another array $$$a$$$ of length $$$n + 1$$$. As a formal description of $$$a$$$ says, $$$a_0 = 0$$$ and for all other $$$i$$$ ($$$1 \\le i \\le n$$$) $$$a_i = x_{(i-1)\\bmod k} + a_{i-1}$$$, where $$$p \\bmod q$$$ denotes the remainder of division $$$p$$$ by $$$q$$$.For example, if the $$$x = [1, 2, 3]$$$ and $$$n = 5$$$, then:  $$$a_0 = 0$$$,  $$$a_1 = x_{0\\bmod 3}+a_0=x_0+0=1$$$,  $$$a_2 = x_{1\\bmod 3}+a_1=x_1+1=3$$$,  $$$a_3 = x_{2\\bmod 3}+a_2=x_2+3=6$$$,  $$$a_4 = x_{3\\bmod 3}+a_3=x_0+6=7$$$,  $$$a_5 = x_{4\\bmod 3}+a_4=x_1+7=9$$$. So, if the $$$x = [1, 2, 3]$$$ and $$$n = 5$$$, then $$$a = [0, 1, 3, 6, 7, 9]$$$.Now the boy hopes that he will be able to restore $$$x$$$ from $$$a$$$! Knowing that $$$1 \\le k \\le n$$$, help him and find all possible values of $$$k$$$ — possible lengths of the lost array.",
    "prob_desc_output_spec": "The first line of the output should contain one integer $$$l$$$ denoting the number of correct lengths of the lost array. The second line of the output should contain $$$l$$$ integers — possible lengths of the lost array in increasing order.",
    "prob_desc_input_spec": "The first line contains exactly one integer $$$n$$$ ($$$1 \\le n \\le 1000$$$) — the length of the array $$$a$$$, excluding the element $$$a_0$$$. The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 10^6$$$). Note that $$$a_0$$$ is always $$$0$$$ and is not given in the input.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1200,
    "file_name": "train_016.jsonl",
    "code_uid": "2e68a99363e8b6395ac50e6368a0bd51",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n1 2 3 4 5\", \"5\\n1 3 5 6 8\", \"3\\n1 5 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input())\na = list(map(int,input().split()))\nb = [a[0]]\nfor i in range(1,n):\n    b.append(a[i]-a[i-1])\ncnt = 0\nd = []\nfor i in range(n):\n    check=False\n    for j in range(n):\n        if b[j]!=b[j%(i+1)]:\n            check=True\n    if not check:\n        d.append(i+1)\nprint(len(d))\nfor i in d:\n    print(i,end=' ')",
    "prob_desc_created_at": "1540740900",
    "tags": [
        "implementation"
    ],
    "hidden_unit_tests": ""
}