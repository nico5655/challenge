{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\", \"1\"]",
    "src_uid": "d28614f0365ea53530e35c6bd1e6f1dd",
    "prob_desc_notes": "NoteIn first sample the common divisors are strings \"abcd\" and \"abcdabcd\".In the second sample the common divisor is a single string \"a\". String \"aa\" isn't included in the answer as it isn't a divisor of string \"aaa\".",
    "prob_desc_description": "Vasya has recently learned at school what a number's divisor is and decided to determine a string's divisor. Here is what he came up with.String a is the divisor of string b if and only if there exists a positive integer x such that if we write out string a consecutively x times, we get string b. For example, string \"abab\" has two divisors â€” \"ab\" and \"abab\".Now Vasya wants to write a program that calculates the number of common divisors of two strings. Please help him.",
    "prob_desc_output_spec": "Print the number of common divisors of strings s1 and s2. ",
    "prob_desc_input_spec": "The first input line contains a non-empty string s1. The second input line contains a non-empty string s2. Lengths of strings s1 and s2 are positive and do not exceed 105. The strings only consist of lowercase Latin letters.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_025.jsonl",
    "code_uid": "04af7dae66afff12e57cf3f40fe3ba93",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"abcdabcd\\nabcdabcdabcdabcd\", \"aaa\\naa\"]",
    "exec_outcome": "PASSED",
    "source_code": "\nfrom math import sqrt\nfrom collections import defaultdict\nfrom bisect import bisect_right\ndef ncr(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = (num * (n - i)) % p\n        den = (den * (i + 1)) % p\n    return (num * pow(den,\n                      p - 2, p)) % p\n\nfrom sys import stdin\ndef ret(s):\n    n = len(s)\n    j = 1\n    i = 0\n    start = -1\n    flag = 0\n    while j<n:\n\n        if s[i] == s[j]:\n# /,/            print(j)\n\n            i+=1\n            if flag == 0:\n                flag = 1\n                start = j\n            j+=1\n\n        else:\n            start = -1\n            i = 0\n            if flag == 0:\n              j+=1\n            flag = 0\n\n\n\n    if start == -1 or n%len(s[:start])!=0:\n        return s\n    else:\n        return s[:start]\n\ndef cal(n):\n    seti = set()\n    for i in range(1,int(sqrt(n))+1):\n        if n%i == 0:\n            seti.add(n//i)\n            seti.add(i)\n\n\n    return seti\n\n\ndef solve():\n\n    s1 = input()\n    s2 = input()\n    n1,n2 = len(s1),len(s2)\n    z1,z2 = ret(s1),ret(s2)\n    # print(z1,z2)\n    if z1 == z2:\n        k1,k2 = cal(n1//len(z1)),cal(n2//(len(z2)))\n        print(len(k1.intersection(k2)))\n\n\n    else:\n        print(0)\n\n\n\n\n\n# t = int(stdin.readline())\n# for _ in range(t):\nsolve()\n\n\n\n\n\n",
    "prob_desc_created_at": "1335280200",
    "tags": [
        "hashing",
        "math",
        "implementation",
        "brute force",
        "strings"
    ],
    "hidden_unit_tests": ""
}