{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\", \"nO\", \"YES\"]",
    "src_uid": "424f37abd0e19208e6b0cb8b670e7187",
    "prob_desc_notes": "NoteThe following image shows the first sample: both $$$P$$$ and $$$T$$$ are squares. The second sample was shown in the statements.",
    "prob_desc_description": "Guy-Manuel and Thomas are going to build a polygon spaceship. You're given a strictly convex (i. e. no three points are collinear) polygon $$$P$$$ which is defined by coordinates of its vertices. Define $$$P(x,y)$$$ as a polygon obtained by translating $$$P$$$ by vector $$$\\overrightarrow {(x,y)}$$$. The picture below depicts an example of the translation:Define $$$T$$$ as a set of points which is the union of all $$$P(x,y)$$$ such that the origin $$$(0,0)$$$ lies in $$$P(x,y)$$$ (both strictly inside and on the boundary). There is also an equivalent definition: a point $$$(x,y)$$$ lies in $$$T$$$ only if there are two points $$$A,B$$$ in $$$P$$$ such that $$$\\overrightarrow {AB} = \\overrightarrow {(x,y)}$$$. One can prove $$$T$$$ is a polygon too. For example, if $$$P$$$ is a regular triangle then $$$T$$$ is a regular hexagon. At the picture below $$$P$$$ is drawn in black and some $$$P(x,y)$$$ which contain the origin are drawn in colored: The spaceship has the best aerodynamic performance if $$$P$$$ and $$$T$$$ are similar. Your task is to check whether the polygons $$$P$$$ and $$$T$$$ are similar.",
    "prob_desc_output_spec": "Output \"YES\" in a separate line, if $$$P$$$ and $$$T$$$ are similar. Otherwise, output \"NO\" in a separate line. You can print each letter in any case (upper or lower).",
    "prob_desc_input_spec": "The first line of input will contain a single integer $$$n$$$ ($$$3 \\le n \\le 10^5$$$) — the number of points. The $$$i$$$-th of the next $$$n$$$ lines contains two integers $$$x_i, y_i$$$ ($$$|x_i|, |y_i| \\le 10^9$$$), denoting the coordinates of the $$$i$$$-th vertex. It is guaranteed that these points are listed in counterclockwise order and these points form a strictly convex polygon.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_010.jsonl",
    "code_uid": "2f41e6e84e49f712fe66b29f73de52fb",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n1 0\\n4 1\\n3 4\\n0 3\", \"3\\n100 86\\n50 0\\n150 0\", \"8\\n0 0\\n1 0\\n2 1\\n3 3\\n4 6\\n3 6\\n2 5\\n1 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input())\npolygon = [None] * n\nfor i in range(n):\n    polygon[i] = tuple(map(int, input().split()))\nif n % 2:\n    print(\"NO\")\nelse:\n    def same(id1, id2):\n        ax = polygon[id1 + 1][0] - polygon[id1][0]\n        ay = polygon[id1 + 1][1] - polygon[id1][1]\n        bx = polygon[id2 + 1][0] - polygon[id2][0]\n        by = polygon[id2 + 1][1] - polygon[id2][1]\n        return abs(ax) == abs(bx) and (ax * by == bx * ay)\n    polygon.append(polygon[0])\n    for i in range(n // 2):\n        if not same(i, i + n // 2):\n            print(\"NO\")\n            exit()\n    print(\"YES\")\n",
    "prob_desc_created_at": "1581257100",
    "tags": [
        "geometry"
    ],
    "hidden_unit_tests": ""
}