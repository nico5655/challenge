{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"499122177\", \"578894053\", \"1\", \"1\"]",
    "src_uid": "075249e446f34d1e88245ea3a1ab0768",
    "prob_desc_notes": "NoteThe real answer in the first test is $$$\\frac{1}{2}$$$.",
    "prob_desc_description": "An online contest will soon be held on ForceCoders, a large competitive programming platform. The authors have prepared $$$n$$$ problems; and since the platform is very popular, $$$998244351$$$ coder from all over the world is going to solve them.For each problem, the authors estimated the number of people who would solve it: for the $$$i$$$-th problem, the number of accepted solutions will be between $$$l_i$$$ and $$$r_i$$$, inclusive.The creator of ForceCoders uses different criteria to determine if the contest is good or bad. One of these criteria is the number of inversions in the problem order. An inversion is a pair of problems $$$(x, y)$$$ such that $$$x$$$ is located earlier in the contest ($$$x &lt; y$$$), but the number of accepted solutions for $$$y$$$ is strictly greater.Obviously, both the creator of ForceCoders and the authors of the contest want the contest to be good. Now they want to calculate the probability that there will be no inversions in the problem order, assuming that for each problem $$$i$$$, any integral number of accepted solutions for it (between $$$l_i$$$ and $$$r_i$$$) is equally probable, and all these numbers are independent.",
    "prob_desc_output_spec": "The probability that there will be no inversions in the contest can be expressed as an irreducible fraction $$$\\frac{x}{y}$$$, where $$$y$$$ is coprime with $$$998244353$$$. Print one integer — the value of $$$xy^{-1}$$$, taken modulo $$$998244353$$$, where $$$y^{-1}$$$ is an integer such that $$$yy^{-1} \\equiv 1$$$ $$$(mod$$$ $$$998244353)$$$.",
    "prob_desc_input_spec": "The first line contains one integer $$$n$$$ ($$$2 \\le n \\le 50$$$) — the number of problems in the contest. Then $$$n$$$ lines follow, the $$$i$$$-th line contains two integers $$$l_i$$$ and $$$r_i$$$ ($$$0 \\le l_i \\le r_i \\le 998244351$$$) — the minimum and maximum number of accepted solutions for the $$$i$$$-th problem, respectively.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2700,
    "file_name": "train_000.jsonl",
    "code_uid": "19a3ecddd1f87157670832731596526c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n1 2\\n1 2\\n1 2\", \"2\\n42 1337\\n13 420\", \"2\\n1 1\\n0 0\", \"2\\n1 1\\n1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nfrom itertools import chain\nreadline = sys.stdin.readline\n\nMOD = 998244353\ndef compress(L):\n    L2 = list(set(L))\n    L2.sort()\n    C = {v : k for k, v in enumerate(L2)}\n    return L2, C\n\n\nN = int(readline())\nLR = [tuple(map(int, readline().split())) for _ in range(N)]\nLR = [(a-1, b) for a, b in LR]\nLR2 = LR[:]\nml = LR[-1][0]\nres = 0\nfor i in range(N-2, -1, -1):\n    l, r = LR[i]\n    if r <= ml:\n        break\n    l = max(ml, l)\n    ml = l\n    LR[i] = (l, r)\nelse:\n    Z = list(chain(*LR))\n    Z2, Dc = compress(Z)\n    \n    NN = len(Z2)\n    seglen = [0] + [n - p for p, n in zip(Z2, Z2[1:])]\n    \n    hc = [[0]*(N+3) for _ in range(NN)]\n    for j in range(NN):\n        hc[j][0] = 1\n        for k in range(1, N+3):\n            hc[j][k] = hc[j][k-1]*pow(k, MOD-2, MOD)*(seglen[j]-1+k)%MOD\n\n    mask = [[[True]*NN]]\n\n    dp = [[[0]*(N+1) for _ in range(NN+1)] for _ in range(N+1)]\n    Dp = [[1]*(NN+1)] + [[0]*(NN+1) for _ in range(N)]\n    for i in range(1, N+1):\n        mask2 = [False]*NN\n        l, r = LR[i-1]\n        dl, dr = Dc[l], Dc[r]\n        for j in range(dr, dl, -1):\n            mask2[j] = True\n        mm = [[m1&m2 for m1, m2 in zip(mask[-1][idx], mask2)] for idx in range(i)] + [mask2]\n        mask.append(mm)\n        for j in range(NN):\n            for k in range(1, i+1):\n                if mask[i][i-k+1][j]:\n                    dp[i][j][k] = Dp[i-k][j+1]*hc[j][k]%MOD\n        \n        for j in range(NN-1, -1, -1):\n            res = Dp[i][j+1]\n            if dl < j <= dr:\n                for k in range(1, i+1):        \n                    res = (res + dp[i][j][k])%MOD\n            Dp[i][j] = res\n    \n    res = Dp[N][0]\n    for l, r in LR2:\n        res = res*(pow(r-l, MOD-2, MOD))%MOD\nprint(res)\n\n    ",
    "prob_desc_created_at": "1580308500",
    "tags": [
        "dp",
        "combinatorics",
        "probabilities"
    ],
    "hidden_unit_tests": ""
}