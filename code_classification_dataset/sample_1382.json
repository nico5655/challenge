{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"5\", \"3\", \"5\"]",
    "src_uid": "0efd4b05b3e2e3bc80c93d37508a5197",
    "prob_desc_notes": "NoteIn the first example, you can increase the second element twice. Than array will be $$$[1, 5, 5]$$$ and it's median is $$$5$$$.In the second example, it is optimal to increase the second number and than increase third and fifth. This way the answer is $$$3$$$.In the third example, you can make four operations: increase first, fourth, sixth, seventh element. This way the array will be $$$[5, 1, 2, 5, 3, 5, 5]$$$ and the median will be $$$5$$$.",
    "prob_desc_description": "You are given an array $$$a$$$ of $$$n$$$ integers, where $$$n$$$ is odd. You can make the following operation with it:  Choose one of the elements of the array (for example $$$a_i$$$) and increase it by $$$1$$$ (that is, replace it with $$$a_i + 1$$$). You want to make the median of the array the largest possible using at most $$$k$$$ operations.The median of the odd-sized array is the middle element after the array is sorted in non-decreasing order. For example, the median of the array $$$[1, 5, 2, 3, 5]$$$ is $$$3$$$.",
    "prob_desc_output_spec": "Print a single integer — the maximum possible median after the operations.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$, $$$n$$$ is odd, $$$1 \\le k \\le 10^9$$$) — the number of elements in the array and the largest number of operations you can make. The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_008.jsonl",
    "code_uid": "c8e44d772bafdb88a779bd2e6b7c7eb9",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 2\\n1 3 5\", \"5 5\\n1 2 1 1 1\", \"7 7\\n4 1 2 4 3 4 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\nfrom sys import stdin, stdout\n \n#N = int(input())\n#s = input()\nN,K = [int(x) for x in stdin.readline().split()]\narr = [int(x) for x in stdin.readline().split()]\n \narr.sort()\n \nhalf = N//2\ns = sum(arr[half:])\n \nbound = s + K\nres = 0\nfor i in range(N-1,(N//2)-1,-1):\n    if bound//(i-half+1)>arr[i]:\n        res = max(res,bound//(i-half+1))\n        if i!=N-1 and res>arr[i+1]:\n            res = arr[i+1]\n        break\n    else:\n        bound -= arr[i]\n \nprint(res)",
    "prob_desc_created_at": "1564936500",
    "tags": [
        "binary search",
        "sortings",
        "greedy",
        "math"
    ],
    "hidden_unit_tests": ""
}