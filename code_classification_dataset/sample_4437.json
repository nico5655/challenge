{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"18\\n10\\n0\"]",
    "src_uid": "4bcaa910cce687f0881a36231aa1a2c8",
    "prob_desc_notes": "NoteAn optimal solution for the first test case is shown in the following figure:  The beauty is $$$\\left|4-3 \\right|+\\left|3-5 \\right|+\\left|2-4 \\right|+\\left|5-2 \\right|+\\left|1-6 \\right|+\\left|6-1 \\right|=18$$$.An optimal solution for the second test case is shown in the following figure:  The beauty is $$$\\left|2-2 \\right|+\\left|1-6 \\right|+\\left|3-3 \\right|+\\left|6-1 \\right|+\\left|4-4 \\right|+\\left|5-5 \\right|=10$$$.",
    "prob_desc_description": "Tokitsukaze has two colorful tapes. There are $$$n$$$ distinct colors, numbered $$$1$$$ through $$$n$$$, and each color appears exactly once on each of the two tapes. Denote the color of the $$$i$$$-th position of the first tape as $$$ca_i$$$, and the color of the $$$i$$$-th position of the second tape as $$$cb_i$$$.Now Tokitsukaze wants to select each color an integer value from $$$1$$$ to $$$n$$$, distinct for all the colors. After that she will put down the color values in each colored position on the tapes. Denote the number of the $$$i$$$-th position of the first tape as $$$numa_i$$$, and the number of the $$$i$$$-th position of the second tape as $$$numb_i$$$.  For example, for the above picture, assuming that the color red has value $$$x$$$ ($$$1 \\leq x \\leq n$$$), it appears at the $$$1$$$-st position of the first tape and the $$$3$$$-rd position of the second tape, so $$$numa_1=numb_3=x$$$.Note that each color $$$i$$$ from $$$1$$$ to $$$n$$$ should have a distinct value, and the same color which appears in both tapes has the same value. After labeling each color, the beauty of the two tapes is calculated as $$$$$$\\sum_{i=1}^{n}|numa_i-numb_i|.$$$$$$Please help Tokitsukaze to find the highest possible beauty. ",
    "prob_desc_output_spec": "For each test case, print a single integer — the highest possible beauty.",
    "prob_desc_input_spec": "The first contains a single positive integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases. For each test case, the first line contains a single integer $$$n$$$ ($$$1\\leq n \\leq 10^5$$$) — the number of colors. The second line contains $$$n$$$ integers $$$ca_1, ca_2, \\ldots, ca_n$$$ ($$$1 \\leq ca_i \\leq n$$$) — the color of each position of the first tape. It is guaranteed that $$$ca$$$ is a permutation. The third line contains $$$n$$$ integers $$$cb_1, cb_2, \\ldots, cb_n$$$ ($$$1 \\leq cb_i \\leq n$$$) — the color of each position of the second tape. It is guaranteed that $$$cb$$$ is a permutation. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^{5}$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_097.jsonl",
    "code_uid": "7cadc2c941678666d49d6b1410a69dee",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n\\n6\\n\\n1 5 4 3 2 6\\n\\n5 3 1 4 6 2\\n\\n6\\n\\n3 5 4 6 2 1\\n\\n3 6 4 5 2 1\\n\\n1\\n\\n1\\n\\n1\"]",
    "exec_outcome": "PASSED",
    "source_code": "\r\ndef compute(cycleSize, n):\r\n    curr = n-1\r\n    res = 0\r\n    # print(\"n\", n)\r\n    for i in range(cycleSize-1):\r\n        # print(\"add\", curr)\r\n        res += curr\r\n        curr -= 1\r\n    # print(\"add\", n-cycleSize//2)\r\n    if cycleSize % 2 == 0:\r\n        res += n - cycleSize//2\r\n    else:\r\n        res += cycleSize//2\r\n    return res\r\n\r\n\r\nt = int(input())\r\n\r\nfor ti in range(t):\r\n    n = int(input())\r\n    a = [int(e) for e in input().split(' ')]\r\n    b = [int(e) for e in input().split(' ')]\r\n\r\n    # if ti == 306:\r\n    #     print(a, b)\r\n    #     raise Exception(a, b)\r\n\r\n    visited = set()\r\n    edges = [None]*(n+1)\r\n    for ai, bi in zip(a, b):\r\n        edges[ai] = bi\r\n\r\n    res = 0\r\n    cycles = []\r\n    for ai in a:\r\n        if ai in visited:\r\n            continue\r\n\r\n        curr = ai\r\n        l = 0\r\n        while l == 0 or curr != ai:\r\n            visited.add(curr)\r\n            curr = edges[curr]\r\n            l += 1\r\n        # print(\"cycle size\", l, ai)\r\n        if l != 1:\r\n            cycles.append(l)\r\n\r\n    cycles = sorted(cycles)\r\n    for cycle in cycles:\r\n\r\n        c = compute(cycle, n)\r\n        # print(cycle, n, c)\r\n        res += c\r\n        n -= cycle\r\n        if cycle % 2 == 1:\r\n            n += 1\r\n\r\n    # if t != 10000:\r\n    print(res)\r\n",
    "prob_desc_created_at": "1652020500",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "graphs",
        "greedy"
    ],
    "hidden_unit_tests": ""
}