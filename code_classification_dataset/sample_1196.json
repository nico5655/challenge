{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1\", \"1\", \"2\", \"0\"]",
    "src_uid": "742e4e6ca047da5f5ebe5d854d6a2024",
    "prob_desc_notes": "NoteIn the first sample the image contains a single face, located in a square with the upper left corner at the second line and the second column:   In the second sample the image also contains exactly one face, its upper left corner is at the second row and the first column.In the third sample two faces are shown:   In the fourth sample the image has no faces on it.",
    "prob_desc_description": "The developers of Looksery have to write an efficient algorithm that detects faces on a picture. Unfortunately, they are currently busy preparing a contest for you, so you will have to do it for them. In this problem an image is a rectangular table that consists of lowercase Latin letters. A face on the image is a 2 × 2 square, such that from the four letters of this square you can make word \"face\". You need to write a program that determines the number of faces on the image. The squares that correspond to the faces can overlap.",
    "prob_desc_output_spec": "In the single line print the number of faces on the image.",
    "prob_desc_input_spec": "The first line contains two space-separated integers, n and m (1 ≤ n, m ≤ 50) — the height and the width of the image, respectively. Next n lines define the image. Each line contains m lowercase Latin letters.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 900,
    "file_name": "train_007.jsonl",
    "code_uid": "993cb490e00b48b7cee3708eaaee1a34",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 4\\nxxxx\\nxfax\\nxcex\\nxxxx\", \"4 2\\nxx\\ncf\\nae\\nxx\", \"2 3\\nfac\\ncef\", \"1 4\\nface\"]",
    "exec_outcome": "PASSED",
    "source_code": "N,M=map(range,map(int,raw_input().split()))\na=[raw_input()+'x' for _ in N] + ['x'*64]\nc=0\nfor i in N:\n  for j in M:\n    if sorted(a[i][j]+a[i][j+1]+a[i+1][j]+a[i+1][j+1])==['a','c','e','f']:\n      c+=1\nprint c",
    "prob_desc_created_at": "1433595600",
    "tags": [
        "implementation",
        "strings"
    ],
    "hidden_unit_tests": ""
}