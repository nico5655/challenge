{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\\n4 1\\n0 1\\n5\\n3 0 0 2 2\\n3 2 3 3 0\\n0 1 0 4 0\\n3 0 0 0 0\\n2 1 3 3 3\"]",
    "src_uid": "79d8943cb9a9f63b008cb38ee51ae41e",
    "prob_desc_notes": "NoteNote that $$$0$$$ in this problem represents a blank, not a number.Examples of possible answers for the first test case:$$$\\begin{array}{cc} 1 &amp; 1 \\\\ 4 &amp; 0 \\\\ \\end{array} \\hspace{0,5cm} \\begin{array}{cc} 1 &amp; 4 \\\\ 1 &amp; 0 \\\\ \\end{array} \\hspace{0,5cm} \\begin{array}{cc} 4 &amp; 0 \\\\ 1 &amp; 1 \\\\ \\end{array}$$$Examples of not beautiful matrices for the first test case:$$$\\begin{array}{cc} 1 &amp; 0 \\\\ 4 &amp; 1 \\\\ \\end{array} \\hspace{0,5cm} \\begin{array}{cc} 4 &amp; 1 \\\\ 7 &amp; 1 \\\\ \\end{array} \\hspace{0,5cm} \\begin{array}{cc} 1 &amp; 0 \\\\ 4 &amp; 0 \\\\ \\end{array}$$$The example of the not beautiful matrix for the second test case:$$$\\begin{array}{cc} 3 &amp; 4 &amp; 0 &amp; 2 &amp; 2 \\\\ 3 &amp; 2 &amp; 3 &amp; 3 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 \\\\ 3 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 2 &amp; 1 &amp; 3 &amp; 3 &amp; 3 \\\\ \\end{array}$$$Everything is okay, except the left-top submatrix contains $$$4$$$ numbers.",
    "prob_desc_description": "You like numbers, don't you? Nastia has a lot of numbers and she wants to share them with you! Isn't it amazing?Let $$$a_i$$$ be how many numbers $$$i$$$ ($$$1 \\le i \\le k$$$) you have.An $$$n \\times n$$$ matrix is called beautiful if it contains all the numbers you have, and for each $$$2 \\times 2$$$ submatrix of the original matrix is satisfied:   The number of occupied cells doesn't exceed $$$3$$$;  The numbers on each diagonal are distinct. Make a beautiful matrix of minimum size.",
    "prob_desc_output_spec": "For each $$$t$$$ test case print a single integer $$$n$$$ — the size of the beautiful matrix. In the next $$$n$$$ lines print $$$n$$$ integers $$$b_{i, j}$$$ ($$$0 \\le b_{i, j} \\le k$$$; if position is empty, print $$$b_{i, j} = 0$$$) — the beautiful matrix $$$b$$$ you made up. ",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10\\,000$$$) — the number of test cases. The first line of each test case contains $$$2$$$ integers $$$m$$$ and $$$k$$$ ($$$1 \\le m, k \\le 10^5$$$) — how many numbers Nastia gave you and the length of the array $$$a$$$, respectively. The second line of each test case contains $$$k$$$ integers $$$a_1, a_2, \\ldots, a_{k}$$$ ($$$0 \\le a_i \\le m$$$, $$$a_1 + a_2 + \\ldots + a_{k} = m$$$), where $$$a_i$$$ is how many numbers $$$i$$$ you have. It's guaranteed that the sum of $$$m$$$ and $$$k$$$ in one test doesn't exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2700,
    "file_name": "train_099.jsonl",
    "code_uid": "e9606fd79a6a884095937f4369f117cf",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n3 4\\n2 0 0 1\\n15 4\\n2 4 8 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nI=lambda:[*map(int,sys.stdin.readline().split())]\n\ndef totalcells(n):\n    return n*n-(n//2)*(n//2)\ndef maxfreq(n):\n    return n*((n+1)//2)\n\nt, = I()\nfor _ in range(t):\n    m, k = I()\n    a = I()\n    mf = max(a)\n    n = 0\n    while totalcells(n) < m or maxfreq(n) < mf:\n        n += 1\n    print(n)\n    ans = [[0]*n for _ in range(n)]\n    gone = set()\n    for (sx, sy) in ((1, 0), (0, 1)):\n        spots = ((n+1)//2)*(n//2)\n        vals = []\n        z = max(range(k), key=lambda i: a[i])\n        if z not in gone:\n            c = min(spots, a[z])\n            if c > 0:\n                vals += [z]*c\n                gone.add(z)\n                a[z] -= c\n        for i in range(k):\n            if i not in gone:\n                c = min(spots-len(vals), a[i])\n                if c > 0:\n                    vals += [i]*c\n                    a[i] -= c\n                    gone.add(i)\n        v = 0\n        for i in range(sx, n, 2):\n            for j in range(sy, n, 2):\n                if v < len(vals):\n                    ans[i][j] = vals[v]+1\n                    v += 1\n    vals = []\n    for i in range(k):\n        vals += [i]*a[i]\n    vals.sort(key=lambda x: x not in gone)\n    v = 0\n    for (sx, sy) in ((0, 0), (1, 0), (0, 1)):\n        for i in range(sx, n, 2):\n            for j in range(sy, n, 2):\n                if v < len(vals) and ans[i][j] == 0:\n                    ans[i][j] = vals[v]+1\n                v += 1\n    for row in ans:\n        print(*row)\n",
    "prob_desc_created_at": "1620398100",
    "tags": [
        "binary search",
        "constructive algorithms",
        "dp",
        "greedy"
    ],
    "hidden_unit_tests": ""
}