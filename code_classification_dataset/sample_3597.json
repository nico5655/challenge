{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"2 2 6 6 0\", \"1 2 11 20 15 10 5 0\"]",
    "src_uid": "40a2d69987359fc83a9c3e5eff52ce34",
    "prob_desc_notes": null,
    "prob_desc_description": "This is the easy version of the problem. The only difference between easy and hard versions is the constraint of $$$m$$$. You can make hacks only if both versions are solved.Chiori loves dolls and now she is going to decorate her bedroom! As a doll collector, Chiori has got $$$n$$$ dolls. The $$$i$$$-th doll has a non-negative integer value $$$a_i$$$ ($$$a_i &lt; 2^m$$$, $$$m$$$ is given). Chiori wants to pick some (maybe zero) dolls for the decoration, so there are $$$2^n$$$ different picking ways.Let $$$x$$$ be the bitwise-xor-sum of values of dolls Chiori picks (in case Chiori picks no dolls $$$x = 0$$$). The value of this picking way is equal to the number of $$$1$$$-bits in the binary representation of $$$x$$$. More formally, it is also equal to the number of indices $$$0 \\leq i &lt; m$$$, such that $$$\\left\\lfloor \\frac{x}{2^i} \\right\\rfloor$$$ is odd.Tell her the number of picking ways with value $$$i$$$ for each integer $$$i$$$ from $$$0$$$ to $$$m$$$. Due to the answers can be very huge, print them by modulo $$$998\\,244\\,353$$$.",
    "prob_desc_output_spec": "Print $$$m+1$$$ integers $$$p_0, p_1, \\ldots, p_m$$$  — $$$p_i$$$ is equal to the number of picking ways with value $$$i$$$ by modulo $$$998\\,244\\,353$$$.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$, $$$0 \\le m \\le 35$$$)  — the number of dolls and the maximum value of the picking way. The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\le a_i &lt; 2^m$$$)  — the values of dolls.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2700,
    "file_name": "train_072.jsonl",
    "code_uid": "fe093b357f67a7d61068e7b425fd9f98",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"4 4\\n3 5 8 14\", \"6 7\\n11 45 14 9 19 81\"]",
    "exec_outcome": "PASSED",
    "source_code": "MOD = 998244353\nBOUND = 19\n \nn, m = map(int, input().split())\nl = list(map(int,input().split()))\n \nbasis = []\nfor p in range(m-1,-1,-1):\n    p2 = pow(2,p)\n    nex = -1\n    for i in range(n):\n        if l[i] >= p2:\n            nex = l[i]\n            break\n    if nex != -1:\n        basis.append(nex)\n        for i in range(n):\n            if l[i] >= p2:\n                l[i] ^= nex\n        \nextra = n - len(basis)\n\ndef add(a, b):\n    out = [0] * (max(len(a), len(b)))\n    for i in range(len(a)):\n        out[i] = a[i]\n    for i in range(len(b)):\n        out[i] += b[i]\n        out[i] %= MOD\n    return out\n    \n \ndef addSh(a, b):\n    out = [0] * (max(len(a) + 1, len(b)))\n    for i in range(len(a)):\n        out[i + 1] = a[i]\n    for i in range(len(b)):\n        out[i] += b[i]\n        out[i] %= MOD\n    return out\n \ni = 0\ncurr = dict()\ncurr[0] = [1]\nfor p in range(m-1,-1,-1):\n    p2 = pow(2,p)\n    if i < len(basis) and basis[i] >= p2:\n        currN = dict(curr)\n        for v in curr:\n            if v ^ basis[i] not in currN:\n                currN[v ^ basis[i]] = [0]\n            currN[v ^ basis[i]] = add(curr[v], currN[v ^ basis[i]])\n        curr = currN\n        i += 1\n \n    currN = dict(curr)\n    for v in curr:\n        if v >= p2:\n            if v ^ p2 not in currN:\n                currN[v ^ p2] = [0]\n            currN[v ^ p2] = addSh(curr[v], currN[v ^ p2])\n            del currN[v]\n    curr = currN  \n \nout = curr[0]\nwhile len(out) < m + 1:\n    out.append(0)\nfor i in range(m + 1):\n    out[i] *= pow(2, extra, MOD)\n    out[i] %= MOD\nprint(' '.join(map(str,out)))\n                ",
    "prob_desc_created_at": "1586961300",
    "tags": [
        "combinatorics",
        "bitmasks",
        "brute force",
        "math"
    ],
    "hidden_unit_tests": ""
}