{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"101011\\n11111\\n1001\"]",
    "src_uid": "ea3ce069895b6fc0f354f0118c7c9fff",
    "prob_desc_notes": "NoteThe first test case is described in the problem statement.In the second test case all numbers from $$$1$$$ to $$$5$$$ are beautiful:  if $$$l = 3$$$ and $$$r = 3$$$ we will have a permutation $$$[1]$$$ for $$$m = 1$$$;  if $$$l = 3$$$ and $$$r = 4$$$ we will have a permutation $$$[1, 2]$$$ for $$$m = 2$$$;  if $$$l = 2$$$ and $$$r = 4$$$ we will have a permutation $$$[3, 1, 2]$$$ for $$$m = 3$$$;  if $$$l = 2$$$ and $$$r = 5$$$ we will have a permutation $$$[3, 1, 2, 4]$$$ for $$$m = 4$$$;  if $$$l = 1$$$ and $$$r = 5$$$ we will have a permutation $$$[5, 3, 1, 2, 4]$$$ for $$$m = 5$$$. ",
    "prob_desc_description": "You are given a permutation $$$p=[p_1, p_2, \\ldots, p_n]$$$ of integers from $$$1$$$ to $$$n$$$. Let's call the number $$$m$$$ ($$$1 \\le m \\le n$$$) beautiful, if there exists two indices $$$l, r$$$ ($$$1 \\le l \\le r \\le n$$$), such that the numbers $$$[p_l, p_{l+1}, \\ldots, p_r]$$$ is a permutation of numbers $$$1, 2, \\ldots, m$$$.For example, let $$$p = [4, 5, 1, 3, 2, 6]$$$. In this case, the numbers $$$1, 3, 5, 6$$$ are beautiful and $$$2, 4$$$ are not. It is because:  if $$$l = 3$$$ and $$$r = 3$$$ we will have a permutation $$$[1]$$$ for $$$m = 1$$$;  if $$$l = 3$$$ and $$$r = 5$$$ we will have a permutation $$$[1, 3, 2]$$$ for $$$m = 3$$$;  if $$$l = 1$$$ and $$$r = 5$$$ we will have a permutation $$$[4, 5, 1, 3, 2]$$$ for $$$m = 5$$$;  if $$$l = 1$$$ and $$$r = 6$$$ we will have a permutation $$$[4, 5, 1, 3, 2, 6]$$$ for $$$m = 6$$$;  it is impossible to take some $$$l$$$ and $$$r$$$, such that $$$[p_l, p_{l+1}, \\ldots, p_r]$$$ is a permutation of numbers $$$1, 2, \\ldots, m$$$ for $$$m = 2$$$ and for $$$m = 4$$$. You are given a permutation $$$p=[p_1, p_2, \\ldots, p_n]$$$. For all $$$m$$$ ($$$1 \\le m \\le n$$$) determine if it is a beautiful number or not.",
    "prob_desc_output_spec": "Print $$$t$$$ lines — the answers to test cases in the order they are given in the input.  The answer to a test case is the string of length $$$n$$$, there the $$$i$$$-th character is equal to $$$1$$$ if $$$i$$$ is a beautiful number and is equal to $$$0$$$ if $$$i$$$ is not a beautiful number.",
    "prob_desc_input_spec": "The first line contains the only integer $$$t$$$ ($$$1 \\le t \\le 1000$$$)  — the number of test cases in the input. The next lines contain the description of test cases. The first line of a test case contains a number $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the length of the given permutation $$$p$$$. The next line contains $$$n$$$ integers $$$p_1, p_2, \\ldots, p_n$$$ ($$$1 \\le p_i \\le n$$$, all $$$p_i$$$ are different) — the given permutation $$$p$$$. It is guaranteed, that the sum of $$$n$$$ from all test cases in the input doesn't exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1300,
    "file_name": "train_010.jsonl",
    "code_uid": "3889f6be97644ea324b8aa22fe603db2",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n6\\n4 5 1 3 2 6\\n5\\n5 3 1 2 4\\n4\\n1 4 3 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "# -*- coding: utf-8 -*-\nimport sys\nfrom collections import defaultdict, deque\nfrom math import sqrt\ndef input(): return sys.stdin.readline()[:-1]\n# def input(): return sys.stdin.buffer.readline()[:-1]\n\n\ndef solve():\n    n = int(input())\n    a = [int(x) - 1 for x in input().split()]\n    p = [0] * n\n    for i in range(n):\n        p[a[i]] = i\n\n    l = n\n    r = 0\n    ans = ''\n    for i in range(n):\n        l = min(l, p[i])\n        r = max(r, p[i])\n        if r - l == i:\n            ans = ans + '1'\n        else:\n            ans = ans + '0'\n    print(ans)\n\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n\n\n\n\n\n\"\"\"\n\n\"\"\"\n\n",
    "prob_desc_created_at": "1575556500",
    "tags": [
        "data structures",
        "two pointers",
        "implementation",
        "math"
    ],
    "hidden_unit_tests": ""
}