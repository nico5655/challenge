{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"3 2 2 0 0 0 0 \\n0 3 0 2 0 0 \\n1 \\n0 0 1 1 1 \\n1 0 4 0 0 0 \\n2 2 2 2 0 0 0 0\"]",
    "src_uid": "c63640fd70e0268f03cb4eec18540f3a",
    "prob_desc_notes": "NoteIn the first test case, one of the possible ways to form a tower of color $$$1$$$ and size $$$3$$$ is:   place block $$$1$$$ at position $$$(0, 0)$$$;  place block $$$2$$$ to the right of block $$$1$$$, at position $$$(1, 0)$$$;  place block $$$3$$$ above block $$$2$$$, at position $$$(1, 1)$$$;  place block $$$4$$$ to the left of block $$$3$$$, at position $$$(0, 1)$$$;  place block $$$5$$$ to the left of block $$$4$$$, at position $$$(-1, 1)$$$;  place block $$$6$$$ above block $$$5$$$, at position $$$(-1, 2)$$$;  place block $$$7$$$ to the right of block $$$6$$$, at position $$$(0, 2)$$$.   The blocks at positions $$$(0, 0)$$$, $$$(0, 1)$$$, and $$$(0, 2)$$$ all have color $$$1$$$, forming an tower of size $$$3$$$.In the second test case, note that the following placement is not valid, since you are not allowed to place block $$$6$$$ under block $$$5$$$:  It can be shown that it is impossible to form a tower of color $$$4$$$ and size $$$3$$$.",
    "prob_desc_description": "You have a sequence of $$$n$$$ colored blocks. The color of the $$$i$$$-th block is $$$c_i$$$, an integer between $$$1$$$ and $$$n$$$.You will place the blocks down in sequence on an infinite coordinate grid in the following way.   Initially, you place block $$$1$$$ at $$$(0, 0)$$$.  For $$$2 \\le i \\le n$$$, if the $$$(i - 1)$$$-th block is placed at position $$$(x, y)$$$, then the $$$i$$$-th block can be placed at one of positions $$$(x + 1, y)$$$, $$$(x - 1, y)$$$, $$$(x, y + 1)$$$ (but not at position $$$(x, y - 1)$$$), as long no previous block was placed at that position. A tower is formed by $$$s$$$ blocks such that they are placed at positions $$$(x, y), (x, y + 1), \\ldots, (x, y + s - 1)$$$ for some position $$$(x, y)$$$ and integer $$$s$$$. The size of the tower is $$$s$$$, the number of blocks in it. A tower of color $$$r$$$ is a tower such that all blocks in it have the color $$$r$$$.For each color $$$r$$$ from $$$1$$$ to $$$n$$$, solve the following problem independently:   Find the maximum size of a tower of color $$$r$$$ that you can form by placing down the blocks according to the rules. ",
    "prob_desc_output_spec": "For each test case, output $$$n$$$ integers. The $$$r$$$-th of them should be the maximum size of an tower of color $$$r$$$ you can form by following the given rules. If you cannot form any tower of color $$$r$$$, the $$$r$$$-th integer should be $$$0$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.  The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$). The second line of each test case contains $$$n$$$ integers $$$c_1, c_2, \\ldots, c_n$$$ ($$$1 \\le c_i \\le n$$$). It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_093.jsonl",
    "code_uid": "2484f6d989a143c0b9d42c956809e3d8",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n\\n7\\n\\n1 2 3 1 2 3 1\\n\\n6\\n\\n4 2 2 2 4 4\\n\\n1\\n\\n1\\n\\n5\\n\\n5 4 5 3 5\\n\\n6\\n\\n3 3 3 1 3 3\\n\\n8\\n\\n1 2 3 4 4 3 2 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "\r\ndef solveonecolor(array):\r\n\r\n    m = len(array)\r\n    if m==0:\r\n        return 0\r\n    elif m==1:\r\n        return 1\r\n    else:\r\n        maxi = 1\r\n        for i in range(m-1):\r\n            if (array[i+1]-array[i])%2==1:\r\n                maxi+=1\r\n\r\n    return maxi\r\n\r\n\r\ndef solve(n, array):\r\n    allans = []\r\n    subarrays = [[] for _ in range(n)]\r\n    for i in range(n):\r\n        color = array[i]-1\r\n        subarrays[color].append(i)\r\n\r\n    for color in range(n):\r\n        allans.append(solveonecolor(subarrays[color]))\r\n    print(\" \".join(str(i) for i in allans))\r\n\r\n\r\ntests = int(input())\r\nfor _ in range(tests):\r\n    n = int(input())\r\n    array = list(map(int, input().split()))\r\n    solve(n, array)\r\n\r\n\r\n",
    "prob_desc_created_at": "1658154900",
    "tags": [
        "dp",
        "greedy",
        "math"
    ],
    "hidden_unit_tests": ""
}