{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\\n4 \\n2\\n5 1 \\n1\\n0 \\n1\\n5 \\n2\\n2 2 \\n4\\n3 2 2 0\"]",
    "src_uid": "962c4354c936030da78261871dd6d55b",
    "prob_desc_notes": "NoteIn the first test case, the lexicographically maximum array $$$b$$$ is obtained by selecting $$$k=5$$$, resulting in the $$$MEX$$$ of the whole array $$$a$$$. It is lexicographically maximum because an array starting with a smaller number than $$$4$$$ is lexicographically smaller, and choosing a $$$k&lt;5$$$ would result in an array starting with a number smaller than $$$4$$$.In the second test case, there are two ways to obtain the maximum array: first selecting $$$k=6$$$, then $$$k=2$$$, or first selecting $$$k=7$$$ and then $$$k=1$$$.",
    "prob_desc_description": "Mihai has just learned about the MEX concept and since he liked it so much, he decided to use it right away.Given an array $$$a$$$ of $$$n$$$ non-negative integers, Mihai wants to create a new array $$$b$$$ that is formed in the following way:While $$$a$$$ is not empty:   Choose an integer $$$k$$$ ($$$1 \\leq k \\leq |a|$$$).  Append the MEX of the first $$$k$$$ numbers of the array $$$a$$$ to the end of array $$$b$$$ and erase them from the array $$$a$$$, shifting the positions of the remaining numbers in $$$a$$$. But, since Mihai loves big arrays as much as the MEX concept, he wants the new array $$$b$$$ to be the lexicographically maximum. So, Mihai asks you to tell him what the maximum array $$$b$$$ that can be created by constructing the array optimally is.An array $$$x$$$ is lexicographically greater than an array $$$y$$$ if in the first position where $$$x$$$ and $$$y$$$ differ $$$x_i &gt; y_i$$$ or if $$$|x| &gt; |y|$$$ and $$$y$$$ is a prefix of $$$x$$$ (where $$$|x|$$$ denotes the size of the array $$$x$$$).The MEX of a set of non-negative integers is the minimal non-negative integer such that it is not in the set. For example, MEX({$$${1, 2, 3}$$$}) $$$= 0$$$ and MEX({$$${0, 1, 2, 4, 5}$$$}) $$$= 3$$$.",
    "prob_desc_output_spec": "For each test case print $$$m$$$ — the length of the maximum array $$$b$$$ Mihai can create, followed by $$$m$$$ integers denoting the elements of the array $$$b$$$.",
    "prob_desc_input_spec": "The first line of the input contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. The description of test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) — the number of elements in the array $$$a$$$. The second line of each test case contains $$$n$$$ non-negative integers $$$a_1, \\ldots, a_n$$$ ($$$0 \\leq a_i \\leq n$$$), where $$$a_i$$$ is the $$$i$$$-th integer from the array $$$a$$$. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_093.jsonl",
    "code_uid": "45a59b1395258b6c0eec83f6d579ba5a",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n5\\n1 0 2 0 3\\n8\\n2 2 3 4 0 1 2 0\\n1\\n1\\n5\\n0 1 2 3 4\\n4\\n0 1 1 0\\n10\\n0 0 2 1 1 1 0 0 1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "t = int(input())\r\nwhile t > 0:\r\n    t -= 1\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    \r\n    b = [0]*n\r\n    c = [0]*(max(a)+2)\r\n    i = n-1\r\n    j = 0\r\n    while i > -1:\r\n        c[a[i]] = 1\r\n        while c[j] != 0:\r\n            j += 1\r\n            if j == len(c):\r\n                break\r\n        b[i] = j\r\n        i -= 1\r\n    # print(*b)\r\n    \r\n    \r\n    d = []\r\n    i = 0\r\n    j = 0\r\n    while True:\r\n        s = set()\r\n        if b[i] != 0:\r\n            while len(s) < b[i]:\r\n                if a[j] < b[i] and a[j] not in s:\r\n                    s.add(a[j])\r\n                j += 1\r\n                if j == n:\r\n                    break\r\n        else:\r\n            j += 1\r\n        d += [b[i]]\r\n        i = j\r\n        if i == n:\r\n            break\r\n    \r\n    \r\n    print(len(d))\r\n    if len(d) == 1:\r\n        print(d[0])\r\n    else:\r\n        print(*d)",
    "prob_desc_created_at": "1642862100",
    "tags": [
        "constructive algorithms",
        "data structures",
        "greedy",
        "math",
        "two pointers"
    ],
    "hidden_unit_tests": ""
}