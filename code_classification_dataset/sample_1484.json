{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"12\\n3 4\\n1 2 3 5\\n3 1 5 4\\n5 6 8 9\", \"1\\n1 1\\n1\"]",
    "src_uid": "db447a8896347bb47ce05a1df334a8b3",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given $$$n$$$ integers. You need to choose a subset and put the chosen numbers in a beautiful rectangle (rectangular matrix). Each chosen number should occupy one of its rectangle cells, each cell must be filled with exactly one chosen number. Some of the $$$n$$$ numbers may not be chosen.A rectangle (rectangular matrix) is called beautiful if in each row and in each column all values are different.What is the largest (by the total number of cells) beautiful rectangle you can construct? Print the rectangle itself.",
    "prob_desc_output_spec": "In the first line print $$$x$$$ ($$$1 \\le x \\le n$$$) â€” the total number of cells of the required maximum beautiful rectangle. In the second line print $$$p$$$ and $$$q$$$ ($$$p \\cdot q=x$$$): its sizes. In the next $$$p$$$ lines print the required rectangle itself. If there are several answers, print any.",
    "prob_desc_input_spec": "The first line contains $$$n$$$ ($$$1 \\le n \\le 4\\cdot10^5$$$). The second line contains $$$n$$$ integers ($$$1 \\le a_i \\le 10^9$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_009.jsonl",
    "code_uid": "a0bfd8e7bd1558537a370e3239202980",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"12\\n3 1 4 1 5 9 2 6 5 3 5 8\", \"5\\n1 1 1 1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "\nfrom collections import Counter\nfrom itertools import accumulate\nfrom math import sqrt\nfrom operator import itemgetter\nimport sys\n \nn = int(input())\ncnt = Counter(map(int, input().split()))\nnums, counts = zip(*sorted(cnt.items(), key=itemgetter(1)))\nacc = [0] + list(accumulate(counts))\narea = 1\nh, w = 1, 1\ni = len(counts)\n \nfor y in range(int(sqrt(n)), 0, -1):\n    while i and counts[i-1] > y:\n        i -= 1\n    total = acc[i] + (len(counts) - i) * y\n    x = total // y\n    if y <= x and area < x * y:\n        h, w, area = y, x, x*y\n \nans = [[0]*w for _ in range(h)]\ni = len(counts)-1\nnum, count = nums[i], min(h, counts[i])\n \nfor x in range(w):\n    for y in range(h):\n        ans[y][(x + y) % w] = num\n \n        count -= 1\n        if count == 0:\n            i -= 1\n            num, count = nums[i], h if h < counts[i] else counts[i]\n \nprint(area)\nprint(h, w)\nfor y in range(h):\n    sys.stdout.write(' '.join(map(str, ans[y])) + '\\n')",
    "prob_desc_created_at": "1576321500",
    "tags": [
        "greedy",
        "constructive algorithms",
        "combinatorics",
        "math",
        "data structures",
        "brute force"
    ],
    "hidden_unit_tests": ""
}