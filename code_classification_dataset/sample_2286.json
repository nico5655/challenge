{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"0 2\\n2 1\\n2 3\", \"1 1\\n3 2\", \"3 3\\n1 3\\n1 2\\n1 3\"]",
    "src_uid": "9cd42fb28173170a6cfa947cb31ead6d",
    "prob_desc_notes": "NoteIn the first sample you need to move the cubes two times, from the second tower to the third one and from the second one to the first one. Then the heights of the towers are all the same and equal to 6.",
    "prob_desc_description": "As you know, all the kids in Berland love playing with cubes. Little Petya has n towers consisting of cubes of the same size. Tower with number i consists of ai cubes stacked one on top of the other. Petya defines the instability of a set of towers as a value equal to the difference between the heights of the highest and the lowest of the towers. For example, if Petya built five cube towers with heights (8, 3, 2, 6, 3), the instability of this set is equal to 6 (the highest tower has height 8, the lowest one has height 2). The boy wants the instability of his set of towers to be as low as possible. All he can do is to perform the following operation several times: take the top cube from some tower and put it on top of some other tower of his set. Please note that Petya would never put the cube on the same tower from which it was removed because he thinks it's a waste of time. Before going to school, the boy will have time to perform no more than k such operations. Petya does not want to be late for class, so you have to help him accomplish this task.",
    "prob_desc_output_spec": "In the first line print two space-separated non-negative integers s and m (m ≤ k). The first number is the value of the minimum possible instability that can be obtained after performing at most k operations, the second number is the number of operations needed for that. In the next m lines print the description of each operation as two positive integers i and j, each of them lies within limits from 1 to n. They represent that Petya took the top cube from the i-th tower and put in on the j-th one (i ≠ j). Note that in the process of performing operations the heights of some towers can become equal to zero. If there are multiple correct sequences at which the minimum possible instability is achieved, you are allowed to print any of them.",
    "prob_desc_input_spec": "The first line contains two space-separated positive integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 1000) — the number of towers in the given set and the maximum number of operations Petya can perform. The second line contains n space-separated positive integers ai (1 ≤ ai ≤ 104) — the towers' initial heights.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_019.jsonl",
    "code_uid": "739b1f85bc7ea224423865ad656a2646",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 2\\n5 8 5\", \"3 4\\n2 2 4\", \"5 3\\n8 3 2 6 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nfrom collections import defaultdict, Counter\nfrom itertools import permutations, combinations\nfrom math import sin, cos, asin, acos, tan, atan, pi\n\nsys.setrecursionlimit(10 ** 6)\n\ndef pyes_no(condition, yes = \"YES\", no = \"NO\", none = \"-1\") :\n  if condition == None:\n    print (none)\n  elif condition :\n    print (yes)\n  else :\n    print (no)\n\ndef plist(a, s = ' ') :\n  print (s.join(map(str, a)))\n\ndef rint() :\n  return int(sys.stdin.readline())\n\ndef rstr() :\n  return sys.stdin.readline().strip()\n\n\ndef rints() :\n  return map(int, sys.stdin.readline().split())\n\ndef rfield(n, m = None) :\n  if m == None :\n    m = n\n  \n  field = []\n  for i in xrange(n) :\n    chars = sys.stdin.readline().strip()\n    assert(len(chars) == m)\n    field.append(chars)\n  return field\n\ndef pfield(field, separator = '') :\n  print ('\\n'.join(map(lambda x: separator.join(x), field)))\n\ndef check_field_equal(field, i, j, value) :\n  if i >= 0 and i < len(field) and j >= 0 and j < len(field[i]) :\n    return value == field[i][j]\n  return None \n\ndef digits(x, p) :\n  digits = []\n  while x > 0 :\n    digits.append(x % p)\n    x //= p\n  return digits[::-1]\n\ndef undigits(x, p) :\n  value = 0\n  for d in x :\n    value *= p\n    value += d\n  return value\n\ndef modpower(a, n, mod) :\n  r = a ** (n % 2)\n  if n > 1 :\n    r *= modpower(a, n // 2, mod) ** 2\n  return r % mod\n\ndef gcd(a, b) :\n  if a > b :\n    a, b = b, a\n  \n  while a > 0 :\n    a, b = b % a, a\n\n  return b\n\ndef vector_distance(a, b) :\n  diff = vector_diff(a, b)\n  \n  return scalar_product(diff, diff) ** 0.5\n\ndef vector_inverse(v) :\n  r = [-x for x in v]\n\n  return tuple(r)\n\ndef vector_diff(a, b) :\n  return vector_sum(a, vector_inverse(b))\n\ndef vector_sum(a, b) :\n  r = [c1 + c2 for c1, c2 in zip(a, b)]\n    \n  return tuple(r)\n\ndef scalar_product(a, b) :\n  r = 0\n  for c1, c2 in zip(a, b) :\n    r += c1 * c2\n\n  return r\n\ndef check_rectangle(points) :\n  assert(len(points) == 4)\n\n  A, B, C, D = points\n\n  for A1, A2, A3, A4 in [\n    (A, B, C, D),\n    (A, C, B, D),\n    (A, B, D, C),\n    (A, C, D, B),\n    (A, D, B, C),\n    (A, D, C, B),\n  ] :\n    sides = (\n      vector_diff(A1, A2),\n      vector_diff(A2, A3),\n      vector_diff(A3, A4),\n      vector_diff(A4, A1),\n    )\n    if all(scalar_product(s1, s2) == 0 for s1, s2 in zip(sides, sides[1:])) :\n       return True\n  return False\n\ndef check_square(points) :\n  if not check_rectangle(points) :\n    return False\n  A, B, C, D = points\n\n  for A1, A2, A3, A4 in [\n    (A, B, C, D),\n    (A, C, B, D),\n    (A, B, D, C),\n    (A, C, D, B),\n    (A, D, B, C),\n    (A, D, C, B),\n  ] :\n    side_lengths = [\n      (first[0] - next[0]) ** 2 + (first[1] - next[1]) ** 2 for first, next in zip([A1, A2, A3, A4], [A2, A3, A4, A1])\n    ]\n    if len(set(side_lengths)) == 1 :\n      return True\n    \n  return False\n\ndef check_right(p) :\n  # Check if there are same points\n  for a, b in [\n    (p[0], p[1]),\n    (p[0], p[2]),\n    (p[1], p[2]),\n  ] :\n    if a[0] == b[0] and a[1] == b[1] :\n      return False\n\n  a, b, c = p\n  a, b, c = vector_diff(a, b), vector_diff(b, c), vector_diff(c, a)   \n\n  return scalar_product(a, b) * scalar_product(a, c) * scalar_product(b, c) == 0\n\ndef modmatrixproduct(a, b, mod) :\n  n, m1 = len(a), len(a[0])\n  m2, k = len(b), len(b[0])\n\n  assert(m1 == m2)\n  m = m1\n\n  r = [[0] * k for i in range(n)]\n  for i in range(n) :\n    for j in range(k) :\n      for l in range(m) :\n        r[i][j] += a[i][l] * b[l][j]\n      r[i][j] %= mod\n  return r\n\ndef modmatrixpower(a, n, mod) :\n  magic = 2\n  for m in [2, 3, 5, 7] :\n    if n % m == 0 :\n      magic = m\n      break\n\n  r = None\n  if n < magic : \n    r = a\n    n -= 1\n  else :\n    s = modmatrixpower(a, n // magic, mod)\n    r = s\n    for i in range(magic - 1) :\n      r = modmatrixproduct(r, s, mod)\n\n  for i in range(n % magic) : \n    r = modmatrixproduct(r, a, mod)\n  \n  return r\n\ndef f_index(a, f) :\n  return a.index(f(a))\n\nn, k = rints()\na = rints()\n\noperations = []\nfor i in range(k) :\n  max_index = f_index(a, max)\n  min_index = f_index(a, min)\n  if a[max_index] - a[min_index] <= 1:\n    break\n  a[max_index] -= 1\n  a[min_index] += 1\n  operations.append((max_index + 1, min_index + 1))\n\nprint max(a) - min(a), len(operations)\nfor a, b in operations :\n  print a, b\n",
    "prob_desc_created_at": "1413709200",
    "tags": [
        "greedy",
        "constructive algorithms",
        "implementation",
        "sortings",
        "brute force"
    ],
    "hidden_unit_tests": ""
}