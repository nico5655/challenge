{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"5\", \"165\"]",
    "src_uid": "5ca990a9f93c0b9450aa22a723403b1f",
    "prob_desc_notes": "NoteIn the first example, there are $$$5$$$ ways, all depicted in the figure below. Here, $$$0$$$ is white, $$$1$$$ is red, $$$2$$$ is green and $$$3$$$ is blue.Below is an example of a painting process that is not valid, as in the second step the segment 1 3 is not single colour, and thus may not be repainted with colour $$$2$$$.",
    "prob_desc_description": "This is the first subtask of problem F. The only differences between this and the second subtask are the constraints on the value of $$$m$$$ and the time limit. You need to solve both subtasks in order to hack this one.There are $$$n+1$$$ distinct colours in the universe, numbered $$$0$$$ through $$$n$$$. There is a strip of paper $$$m$$$ centimetres long initially painted with colour $$$0$$$. Alice took a brush and painted the strip using the following process. For each $$$i$$$ from $$$1$$$ to $$$n$$$, in this order, she picks two integers $$$0 \\leq a_i &lt; b_i \\leq m$$$, such that the segment $$$[a_i, b_i]$$$ is currently painted with a single colour, and repaints it with colour $$$i$$$. Alice chose the segments in such a way that each centimetre is now painted in some colour other than $$$0$$$. Formally, the segment $$$[i-1, i]$$$ is painted with colour $$$c_i$$$ ($$$c_i \\neq 0$$$). Every colour other than $$$0$$$ is visible on the strip.Count the number of different pairs of sequences $$$\\{a_i\\}_{i=1}^n$$$, $$$\\{b_i\\}_{i=1}^n$$$ that result in this configuration. Since this number may be large, output it modulo $$$998244353$$$.",
    "prob_desc_output_spec": "Output a single integer — the number of ways Alice can perform the painting, modulo $$$998244353$$$.",
    "prob_desc_input_spec": "The first line contains a two integers $$$n$$$, $$$m$$$ ($$$1 \\leq n \\leq 500$$$, $$$n = m$$$) — the number of colours excluding the colour $$$0$$$ and the length of the paper, respectively. The second line contains $$$m$$$ space separated integers $$$c_1, c_2, \\ldots, c_m$$$ ($$$1 \\leq c_i \\leq n$$$) — the colour visible on the segment $$$[i-1, i]$$$ after the process ends. It is guaranteed that for all $$$j$$$ between $$$1$$$ and $$$n$$$ there is an index $$$k$$$ such that $$$c_k = j$$$. Note that since in this subtask $$$n = m$$$, this means that $$$c$$$ is a permutation of integers $$$1$$$ through $$$n$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_028.jsonl",
    "code_uid": "e44cb80be162cc339e3f3dd12620303a",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 3\\n1 2 3\", \"7 7\\n4 5 1 6 2 3 7\"]",
    "exec_outcome": "PASSED",
    "source_code": "n, m = map(int, raw_input().split())\nl = list(map(int, raw_input().split()))\nindex = [[0 for i in range(n)] for j in range(n)]\nfor i in range(n):\n\tmini = 10000000000000\n\tfor j in range(i, n):\n\t\tif l[j] < mini:\n\t\t\tinde = j\n\t\t\tmini = l[j]\n\t\tindex[i][j] = inde\nprime = 998244353\nd = {}\nval = [[1 for i in range(n + 1)] for j in range(n + 1)]\nfor i in range(n):\n\tfor j in range(n - i):\n\t\tif i == 0:\n\t\t\tval[j][j + i] = 1\n\t\telif i == 1:\n\t\t\tval[j][j + i] = 2\n\t\telse:\n\t\t\tind = index[j][j + i]\n\t\t\tsumap = 0\n\t\t\tsumak = 0\n\t\t\tfor p in range(j, ind +1):\n\t\t\t\tsumap += (val[j][p - 1] * val[p][ind - 1]) % prime\n\t\t\tfor k in range(ind, j + i + 1):\n\t\t\t\tsumak += (val[ind + 1][k] * val[k + 1][j + i]) % prime\n\t\t\tval[j][j + i] = (sumap * sumak) % prime\nprint(val[0][n-1])",
    "prob_desc_created_at": "1563636900",
    "tags": [
        "dp",
        "combinatorics",
        "dfs and similar"
    ],
    "hidden_unit_tests": ""
}