{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"4 2 1 5 0 6 7 3\\n2 1 3\\n2 1 3 0\\n2 0 4 5 3\\n4 1 2 12 3 8\\n1 2 3 4 5 6 7\\n8 2 3 7 4 0 5 6 9\"]",
    "src_uid": "52bd5dc6b92b2af5aebd387553ef4076",
    "prob_desc_notes": "NoteIn the first test case the XOR on odd indices is $$$4 \\oplus 1 \\oplus 0 \\oplus 7 = 2$$$ and the XOR on even indices is $$$2 \\oplus 5 \\oplus 6 \\oplus 3= 2$$$.",
    "prob_desc_description": "Given an integer $$$n$$$, find any array $$$a$$$ of $$$n$$$ distinct nonnegative integers less than $$$2^{31}$$$ such that the bitwise XOR of the elements on odd indices equals the bitwise XOR of the elements on even indices.",
    "prob_desc_output_spec": "For each test case, output one line containing $$$n$$$ distinct integers that satisfy the conditions. If there are multiple answers, you can output any of them.",
    "prob_desc_input_spec": "The first line of the input contains an integer $$$t$$$ ($$$1 \\leq t \\leq 629$$$) — the number of test cases. Then $$$t$$$ lines follow, each containing a single integer $$$n$$$ $$$(3 \\leq n \\leq 2\\cdot10^5)$$$ — the length of the array. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_109.jsonl",
    "code_uid": "d18addf8bbebc96efc338819a0e1d283",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7\\n8\\n3\\n4\\n5\\n6\\n7\\n9\"]",
    "exec_outcome": "PASSED",
    "source_code": "from functools import reduce\nimport operator\n\n\ntc = int(input())\n\n\nfor _ in range(tc):\n    n = int(input())\n    if n == 3:\n        print(\"2 1 3\")\n        continue\n    a = set()\n    b = set()\n    val = 2\n    for i in range(n // 2):\n        a.add(val)\n        val += 1\n        b.add(val)\n        val += 1\n    if n % 2 == 0:\n        b.pop()\n    while True:\n        a_xor = reduce(operator.xor, a)\n        b_xor = reduce(operator.xor, b)\n        ax = f\"{a_xor:031b}\"\n        bx = f\"{b_xor:031b}\"\n        last = []\n        for i, el in enumerate(ax):\n            bel = bx[i]\n            if el == \"0\":\n                last.append(\"1\" if bel == \"1\" else \"0\")\n            else:\n                last.append(\"1\" if bel == \"0\" else \"0\")\n        res_last = int(\"\".join(last), 2)\n        # print(\"\".join(last), ax, bx, f\"{(res_last):031b}\")\n        if (res_last in a) or (res_last in b):\n            lst_b = b.pop()\n            lst_b += 1\n            while (lst_b in a) or (lst_b in b):\n                lst_b += 1\n            b.add(lst_b)\n            continue\n        if n % 2 == 0:\n            b.add(res_last)\n        else:\n            a, b = b, a\n            a.add(res_last)\n        break\n    # print(f\"{n=}\")\n    # print(f\"{a=} {b=}\")\n    # print(\"@\", a_xor, b_xor ^ res_last)\n    # print(\"@\", reduce(operator.xor, a), reduce(operator.xor, b))\n    while a or b:\n        if a:\n            print(a.pop(), end=\" \")\n        if b:\n            print(b.pop(), end=\" \")\n    print()\n",
    "prob_desc_created_at": "1661871000",
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "greedy"
    ],
    "hidden_unit_tests": ""
}