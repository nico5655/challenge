{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"0\\n0\\n3\\n3\", \"0\\n0\\n0\\n3\\n3\\n4\\n4\\n5\", \"0\\n0\\n0\\n0\\n3\\n4\\n4\"]",
    "src_uid": "d795e0f49617b1aa281c72f24a632f67",
    "prob_desc_notes": "NoteIn the first example,   $$$1,2,3$$$ can go on day $$$3$$$ and $$$4$$$. In the second example,   $$$2,4,5$$$ can go on day $$$4$$$ and $$$5$$$.  $$$1,2,4,5$$$ can go on day $$$6$$$ and $$$7$$$.  $$$1,2,3,4,5$$$ can go on day $$$8$$$. In the third example,   $$$1,2,5$$$ can go on day $$$5$$$.  $$$1,2,3,5$$$ can go on day $$$6$$$ and $$$7$$$. ",
    "prob_desc_description": "There are $$$n$$$ persons who initially don't know each other. On each morning, two of them, who were not friends before, become friends.We want to plan a trip for every evening of $$$m$$$ days. On each trip, you have to select a group of people that will go on the trip. For every person, one of the following should hold:   Either this person does not go on the trip,  Or at least $$$k$$$ of his friends also go on the trip. Note that the friendship is not transitive. That is, if $$$a$$$ and $$$b$$$ are friends and $$$b$$$ and $$$c$$$ are friends, it does not necessarily imply that $$$a$$$ and $$$c$$$ are friends.For each day, find the maximum number of people that can go on the trip on that day.",
    "prob_desc_output_spec": "Print exactly $$$m$$$ lines, where the $$$i$$$-th of them ($$$1\\leq i\\leq m$$$) contains the maximum number of people that can go on the trip on the evening of the day $$$i$$$.",
    "prob_desc_input_spec": "The first line contains three integers $$$n$$$, $$$m$$$, and $$$k$$$ ($$$2 \\leq n \\leq 2 \\cdot 10^5, 1 \\leq m \\leq 2 \\cdot 10^5$$$, $$$1 \\le k &lt; n$$$) — the number of people, the number of days and the number of friends each person on the trip should have in the group. The $$$i$$$-th ($$$1 \\leq i \\leq m$$$) of the next $$$m$$$ lines contains two integers $$$x$$$ and $$$y$$$ ($$$1\\leq x, y\\leq n$$$, $$$x\\ne y$$$), meaning that persons $$$x$$$ and $$$y$$$ become friends on the morning of day $$$i$$$. It is guaranteed that $$$x$$$ and $$$y$$$ were not friends before.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_073.jsonl",
    "code_uid": "10accb27649ab606e19aeacbd53bbb52",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 4 2\\n2 3\\n1 2\\n1 3\\n1 4\", \"5 8 2\\n2 1\\n4 2\\n5 4\\n5 2\\n4 3\\n5 1\\n4 1\\n3 2\", \"5 7 2\\n1 5\\n3 2\\n2 5\\n3 4\\n1 2\\n5 3\\n1 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import deque\n\ndef solve(adj, m, k, uv):\n    n = len(adj)\n    nn = [len(a) for a in adj]\n    q = deque()\n    for i in range(n):\n        if nn[i] < k:\n            q.append(i)\n    while q:\n        v = q.popleft()\n        for u in adj[v]:\n            nn[u] -= 1\n            if nn[u] == k-1:\n                q.append(u)\n    res = [0]*m\n    nk = len([1 for i in nn if i >= k])\n    res[-1] = nk\n    for i in range(m-1, 0, -1):\n        u1, v1 = uv[i]\n\n        if nn[u1] < k or nn[v1] < k:\n            res[i - 1] = nk\n            continue\n        if nn[u1] == k:\n            q.append(u1)\n            nn[u1] -= 1\n        if not q and nn[v1] == k:\n            q.append(v1)\n            nn[v1] -= 1\n\n        if not q:\n            nn[u1] -= 1\n            nn[v1] -= 1\n            adj[u1].remove(v1)\n            adj[v1].remove(u1)\n\n        while q:\n            v = q.popleft()\n            nk -= 1\n            for u in adj[v]:\n                nn[u] -= 1\n                if nn[u] == k - 1:\n                    q.append(u)\n        res[i - 1] = nk\n    return res\n\nn, m, k = map(int, input().split())\na = [set() for i in range(n)]\nuv = []\nfor i in range(m):\n    u, v = map(int, input().split())\n    a[u - 1].add(v - 1)\n    a[v - 1].add(u - 1)\n    uv.append((u-1, v-1))\n\nres = solve(a, m, k, uv)\nprint(str(res)[1:-1].replace(' ', '').replace(',', '\\n'))",
    "prob_desc_created_at": "1535898900",
    "tags": [
        "graphs"
    ],
    "hidden_unit_tests": ""
}