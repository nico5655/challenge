{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1\", \"0\"]",
    "src_uid": "04fd1a55027cce56a491b984ce3a1d6d",
    "prob_desc_notes": "NoteIn the first example, the given graph is not harmonious (for instance, $$$1 &lt; 6 &lt; 7$$$, node $$$1$$$ can reach node $$$7$$$ through the path $$$1 \\rightarrow 2 \\rightarrow 7$$$, but node $$$1$$$ can't reach node $$$6$$$). However adding the edge $$$(2, 4)$$$ is sufficient to make it harmonious.In the second example, the given graph is already harmonious.",
    "prob_desc_description": "You're given an undirected graph with $$$n$$$ nodes and $$$m$$$ edges. Nodes are numbered from $$$1$$$ to $$$n$$$.The graph is considered harmonious if and only if the following property holds:  For every triple of integers $$$(l, m, r)$$$ such that $$$1 \\le l &lt; m &lt; r \\le n$$$, if there exists a path going from node $$$l$$$ to node $$$r$$$, then there exists a path going from node $$$l$$$ to node $$$m$$$. In other words, in a harmonious graph, if from a node $$$l$$$ we can reach a node $$$r$$$ through edges ($$$l &lt; r$$$), then we should able to reach nodes $$$(l+1), (l+2), \\ldots, (r-1)$$$ too.What is the minimum number of edges we need to add to make the graph harmonious? ",
    "prob_desc_output_spec": "Print the minimum number of edges we have to add to the graph to make it harmonious.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$m$$$ ($$$3 \\le n \\le 200\\ 000$$$ and $$$1 \\le m \\le 200\\ 000$$$). The $$$i$$$-th of the next $$$m$$$ lines contains two integers $$$u_i$$$ and $$$v_i$$$ ($$$1 \\le u_i, v_i \\le n$$$, $$$u_i \\neq v_i$$$), that mean that there's an edge between nodes $$$u$$$ and $$$v$$$. It is guaranteed that the given graph is simple (there is no self-loop, and there is at most one edge between every pair of nodes).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_001.jsonl",
    "code_uid": "7a5e92338dedb167a8d1de5e39808bb0",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"14 8\\n1 2\\n2 7\\n3 4\\n6 3\\n5 7\\n3 8\\n6 8\\n11 12\", \"200000 3\\n7 9\\n9 8\\n4 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin\nfrom itertools import repeat\ndef main():\n    n, m = map(int, stdin.readline().split())\n    dat = map(int, stdin.read().split(), repeat(10, 2 * m))\n    par = range(n + 1)\n    st = []\n    pu = st.append\n    for i in xrange(m):\n        x, y = dat[i*2], dat[i*2+1]\n        while x != par[x]:\n            pu(x)\n            x = par[x]\n        pu(x)\n        while y != par[y]:\n            pu(y)\n            y = par[y]\n        for x in st:\n            par[x] = y\n        del st[:]\n    l = range(n + 1)\n    r = range(n + 1)\n    c = [0] * (n + 1)\n    s = set()\n    for i in xrange(1, n + 1):\n        x = i\n        while x != par[x]:\n            pu(x)\n            x = par[x]\n        for y in st:\n            par[y] = x\n        del st[:]\n        if l[x] > i:\n            l[x] = i\n        if r[x] < i:\n            r[x] = i\n        c[x] += 1\n        if x == i:\n            s.add(x)\n    ans = 0\n    f = 1\n    while f:\n        f = 0\n        t = s.copy()\n        for i in s:\n            if c[i] == r[i] - l[i] + 1 or i not in t:\n                continue\n            for j in xrange(l[i], r[i] + 1):\n                x = j\n                while x != par[x]:\n                    pu(x)\n                    x = par[x]\n                if x != i:\n                    f = 1\n                    if l[i] > l[x]:\n                        l[i] = l[x]\n                    if r[i] < r[x]:\n                        r[i] = r[x]\n                    c[i] += c[x]\n                    pu(x)\n                    ans += 1\n                    t.remove(x)\n                for y in st:\n                    par[y] = i\n                del st[:]\n        s = t\n    print ans\nmain()\n",
    "prob_desc_created_at": "1573914900",
    "tags": [
        "greedy",
        "graphs",
        "constructive algorithms",
        "dsu",
        "sortings",
        "dfs and similar"
    ],
    "hidden_unit_tests": ""
}