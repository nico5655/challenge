{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"acac\\nabc\\n-1\\nabaabaaab\"]",
    "src_uid": "6c51676bc12bce8ba6e36b64357ef9f0",
    "prob_desc_notes": "NoteIn the first test case \"acac\" is greater than or equal to $$$s$$$, and each letter appears $$$2$$$ or $$$0$$$ times in it, so it is beautiful.In the second test case each letter appears $$$0$$$ or $$$1$$$ times in $$$s$$$, so $$$s$$$ itself is the answer.We can show that there is no suitable string in the third test case.In the fourth test case each letter appears $$$0$$$, $$$3$$$, or $$$6$$$ times in \"abaabaaab\". All these integers are divisible by $$$3$$$.",
    "prob_desc_description": "You are given a string $$$s$$$ consisting of lowercase English letters and a number $$$k$$$. Let's call a string consisting of lowercase English letters beautiful if the number of occurrences of each letter in that string is divisible by $$$k$$$. You are asked to find the lexicographically smallest beautiful string of length $$$n$$$, which is lexicographically greater or equal to string $$$s$$$. If such a string does not exist, output $$$-1$$$.A string $$$a$$$ is lexicographically smaller than a string $$$b$$$ if and only if one of the following holds:   $$$a$$$ is a prefix of $$$b$$$, but $$$a \\ne b$$$;  in the first position where $$$a$$$ and $$$b$$$ differ, the string $$$a$$$ has a letter that appears earlier in the alphabet than the corresponding letter in $$$b$$$. ",
    "prob_desc_output_spec": "For each test case output in a separate line lexicographically smallest beautiful string of length $$$n$$$, which is greater or equal to string $$$s$$$, or $$$-1$$$ if such a string does not exist.",
    "prob_desc_input_spec": "The first line contains a single integer $$$T$$$ ($$$1 \\le T \\le 10\\,000$$$) — the number of test cases. The next $$$2 \\cdot T$$$ lines contain the description of test cases. The description of each test case consists of two lines. The first line of the description contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 10^5$$$) — the length of string $$$s$$$ and number $$$k$$$ respectively. The second line contains string $$$s$$$ consisting of lowercase English letters. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_105.jsonl",
    "code_uid": "8ba251a60d9717dec38f8ef15195c242",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n4 2\\nabcd\\n3 1\\nabc\\n4 3\\naaaa\\n9 3\\nabaabaaaa\"]",
    "exec_outcome": "PASSED",
    "source_code": "import threading\nimport sys\n\nthreading.stack_size(16*2048*2048)\nsys.setrecursionlimit(100010)\n\n\ndef getnext(index,fre,k,s,flag):\n    if sum(fre)>len(s)-index:\n        return \"ERROR\"\n\n\n#    print(index,fre,pre,flag)\n    if index==len(s): return \"\"\n    cur = ord(s[index])-97\n\n    if not flag:\n        nexts = \"\"\n        spare = (len(s)-index-sum(fre))\n        if spare%k==0:\n            nexts += 'a'*(spare//k*k)\n        for j in range(26):\n            if fre[j]>0:  nexts += chr(j+97)*fre[j]\n        return nexts\n\n        \n                    \n\n\n\n    nexts = \"ERROR\"\n    for j in range(cur,26):\n        if j>cur and flag: flag = False\n        fre[j] -= 1\n        if fre[j]<0: fre[j]+=k\n        temp = getnext(index+1,fre,k,s,flag)\n        if temp!=\"ERROR\": \n            nexts = chr(j+97)+temp\n            return nexts\n        fre[j] += 1\n        if fre[j]==k:  fre[j] = 0\n\n\n   #print(index,fre,nexts)\n            \n           \n    return nexts\n\n\n\n\ndef main():\n\n    T = int(input())\n    t = 1\n\n    while t<=T:\n        n,k = list(map(int,input().split()))\n        s = input()\n\n        \n\n        if n%k>0:\n            print(-1)\n            t += 1\n            continue\n\n        fre = [0]*26\n        ans = getnext(0,fre,k,s,True)\n\n        print(ans)\n        t += 1\n\n\n\nthreading.Thread(target=main).start()\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n",
    "prob_desc_created_at": "1615039500",
    "tags": [
        "binary search",
        "brute force",
        "constructive algorithms",
        "greedy",
        "strings"
    ],
    "hidden_unit_tests": ""
}