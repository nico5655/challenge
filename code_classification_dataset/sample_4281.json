{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\\n0\\nYES\\n2\\n3 1\\nNO\"]",
    "src_uid": "1f714ac601f6b5bdcb4fa32cdb56629d",
    "prob_desc_notes": "NoteIn the first example, the sequence contains only $$$0$$$s so we don't need to change anything.In the second example, we can transform $$$[1, 1, 1, 1, 0]$$$ to $$$[1, 1, 0, 0, 0]$$$ and then to $$$[0, 0, 0, 0, 0]$$$ by performing the operation on the third element of $$$a$$$ and then on the first element of $$$a$$$.In the third example, no matter whether we first perform the operation on the first or on the second element of $$$a$$$ we will get $$$[1, 1, 1, 1]$$$, which cannot be transformed to $$$[0, 0, 0, 0]$$$.",
    "prob_desc_description": "You are given a sequence $$$a$$$ of length $$$n$$$ consisting of $$$0$$$s and $$$1$$$s.You can perform the following operation on this sequence:   Pick an index $$$i$$$ from $$$1$$$ to $$$n-2$$$ (inclusive).  Change all of $$$a_{i}$$$, $$$a_{i+1}$$$, $$$a_{i+2}$$$ to $$$a_{i} \\oplus a_{i+1} \\oplus a_{i+2}$$$ simultaneously, where $$$\\oplus$$$ denotes the bitwise XOR operation  Find a sequence of at most $$$n$$$ operations that changes all elements of $$$a$$$ to $$$0$$$s or report that it's impossible.We can prove that if there exists a sequence of operations of any length that changes all elements of $$$a$$$ to $$$0$$$s, then there is also such a sequence of length not greater than $$$n$$$.",
    "prob_desc_output_spec": "For each test case, do the following:    if there is no way of making all the elements of $$$a$$$ equal to $$$0$$$ after performing the above operation some number of times, print \"NO\".  otherwise, in the first line print \"YES\", in the second line print $$$k$$$ ($$$0 \\le k \\le n$$$) — the number of operations that you want to perform on $$$a$$$, and in the third line print a sequence $$$b_1, b_2, \\dots, b_k$$$ ($$$1 \\le b_i \\le n - 2$$$) — the indices on which the operation should be applied.  If there are multiple solutions, you may print any.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^4$$$). The first line of each test case contains a single integer $$$n$$$ ($$$3 \\le n \\le 2\\cdot10^5$$$) — the length of $$$a$$$. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$a_i = 0$$$ or $$$a_i = 1$$$) — elements of $$$a$$$. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2500,
    "file_name": "train_094.jsonl",
    "code_uid": "b272251bdacb99a3b9e204f2c4c3b66d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n3\\n0 0 0\\n5\\n1 1 1 1 0\\n4\\n1 0 0 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "try:\r\n        import sys\r\n        from functools import lru_cache, cmp_to_key\r\n        from heapq import merge, heapify, heappop, heappush\r\n        # from math import *\r\n        from collections import defaultdict as dd, deque, Counter as C\r\n        from itertools import combinations as comb, permutations as perm\r\n        from bisect import bisect_left as bl, bisect_right as br, bisect, insort\r\n        from time import perf_counter\r\n        from fractions import Fraction\r\n        import copy\r\n        from copy import deepcopy\r\n        import time\r\n        starttime = time.time()\r\n        mod = int(pow(10, 9) + 7)\r\n        mod2 = 998244353\r\n\r\n        def data(): return sys.stdin.readline().strip()\r\n        def out(*var, end=\"\\n\"): sys.stdout.write(' '.join(map(str, var))+end)\r\n        def L(): return list(sp())\r\n        def sl(): return list(ssp())\r\n        def sp(): return map(int, data().split())\r\n        def ssp(): return map(str, data().split())\r\n        def l1d(n, val=0): return [val for i in range(n)]\r\n        def l2d(n, m, val=0): return [l1d(n, val) for j in range(m)]\r\n        def A2(n,m): return [[0]*m for i in range(n)]\r\n        def A(n):return [0]*n\r\n        # sys.setrecursionlimit(int(pow(10,6)))\r\n        # from sys import stdin\r\n        # input = stdin.buffer.readline\r\n        # I = lambda : list(map(int,input().split()))\r\n        # import sys\r\n        # input=sys.stdin.readline\r\n        \r\n\r\n        sys.stdin = open(\"input.txt\", \"r\")\r\n        sys.stdout = open(\"output.txt\", \"w\")\r\nexcept:\r\n        pass\r\n\r\nfor _ in range(L()[0]):\r\n        n = L()[0]\r\n        A = L()\r\n\r\n        x = 0 \r\n        for ele in A:\r\n                x^=ele \r\n        if x:\r\n                print(\"NO\")\r\n                continue\r\n\r\n\r\n        if n%2:\r\n                print(\"YES\")\r\n                ans = []\r\n                for i in range(1,n,2):\r\n                        ans.append(i)\r\n                for i in range(n-4,0,-2):\r\n                        ans.append(i)\r\n                print(len(ans))\r\n                print(*ans)\r\n        else:\r\n                x = 0\r\n                \r\n                for i,ele in enumerate(A):\r\n                        x^=ele \r\n                        if i%2==0 and x==0:\r\n                                print(\"YES\")\r\n                                ans = []\r\n                                for j in range(1,i+1,2):\r\n                                        ans.append(j)\r\n                                for j in range(i+1-4,0,-2):\r\n                                        ans.append(j)\r\n                                for j in range(i+2,n,2):\r\n                                        ans.append(j)\r\n                                for j in range(n-4,i+1,-2):\r\n                                        ans.append(j)\r\n                                print(len(ans))\r\n                                print(*ans)\r\n                                break\r\n                else:\r\n                        print(\"NO\")",
    "prob_desc_created_at": "1631975700",
    "tags": [
        "constructive algorithms"
    ],
    "hidden_unit_tests": ""
}