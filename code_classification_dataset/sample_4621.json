{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"10101\\n00000\\n10101\\n\\n0100\\n0001\\n1000\\n0010\\n\\n010101\\n000000\\n100001\\n000000\\n101010\"]",
    "src_uid": "730cc4be2656c1dcdbda220b8778cdbf",
    "prob_desc_notes": "NoteFor the first test case, example output contains the only way to put $$$6$$$ plates on the table.For the second test case, there are many ways to put $$$4$$$ plates on the table, example output contains one of them.Putting more than $$$6$$$ plates in the first test case or more than $$$4$$$ plates in the second test case is impossible.",
    "prob_desc_description": "To celebrate your birthday you have prepared a festive table! Now you want to seat as many guests as possible.The table can be represented as a rectangle with height $$$h$$$ and width $$$w$$$, divided into $$$h \\times w$$$ cells. Let $$$(i, j)$$$ denote the cell in the $$$i$$$-th row and the $$$j$$$-th column of the rectangle ($$$1 \\le i \\le h$$$; $$$1 \\le j \\le w$$$).Into each cell of the table you can either put a plate or keep it empty.As each guest has to be seated next to their plate, you can only put plates on the edge of the table — into the first or the last row of the rectangle, or into the first or the last column. Formally, for each cell $$$(i, j)$$$ you put a plate into, at least one of the following conditions must be satisfied: $$$i = 1$$$, $$$i = h$$$, $$$j = 1$$$, $$$j = w$$$.To make the guests comfortable, no two plates must be put into cells that have a common side or corner. In other words, if cell $$$(i, j)$$$ contains a plate, you can't put plates into cells $$$(i - 1, j)$$$, $$$(i, j - 1)$$$, $$$(i + 1, j)$$$, $$$(i, j + 1)$$$, $$$(i - 1, j - 1)$$$, $$$(i - 1, j + 1)$$$, $$$(i + 1, j - 1)$$$, $$$(i + 1, j + 1)$$$.Put as many plates on the table as possible without violating the rules above.",
    "prob_desc_output_spec": "For each test case, print $$$h$$$ lines containing $$$w$$$ characters each. Character $$$j$$$ in line $$$i$$$ must be equal to $$$1$$$ if you are putting a plate into cell $$$(i, j)$$$, and $$$0$$$ otherwise. If there are multiple answers, print any. All plates must be put on the edge of the table. No two plates can be put into cells that have a common side or corner. The number of plates put on the table under these conditions must be as large as possible. You are allowed to print additional empty lines.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. Each of the following $$$t$$$ lines describes one test case and contains two integers $$$h$$$ and $$$w$$$ ($$$3 \\le h, w \\le 20$$$) — the height and the width of the table.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_102.jsonl",
    "code_uid": "bff1ef98644d03c1d630bf3ec7f476f6",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n3 5\\n4 4\\n5 6\"]",
    "exec_outcome": "PASSED",
    "source_code": "from math import ceil\n\ndef solve():\n\th, w = map(int, input().split())\n\t# if h > w:\n\t# \th, w = w, h\n\n\tresult = str()\n\tvoid_str = (\"0\" * w) + \"\\n\"\n\n\ttop_str = \"10\" * (w // 2)\n\tif w % 2 == 1:\n\t\ttop_str += \"1\"\n\n\ttop_str += \"\\n\"\n\n\tif h % 2 == 0:\n\t\tbottom_str = \"0\" * w\n\telse:\n\t\tbottom_str = \"10\" * (w // 2)\n\t\tif w % 2 == 1:\n\t\t\tbottom_str += \"1\"\n\n\tbottom_str += \"\\n\"\n\n\tmiddle_str = \"1\" + (\"0\" * (w - 2)) + \"1\\n\"\n\n\tresult += top_str\n\n\tif h % 2 == 0:\n\t\tfor i in range(2, h - 1):\n\t\t\tif i % 2 == 0:\n\t\t\t\tresult += void_str\n\t\t\telse:\n\t\t\t\tresult += middle_str\n\n\t\tresult += void_str\n\t\tresult += top_str\n\n\telse:\n\t\tfor i in range(2, h):\n\t\t\tif i % 2 == 0:\n\t\t\t\tresult += void_str\n\t\t\telse:\n\t\t\t\tresult += middle_str\n\n\t\tresult += bottom_str\n\t\n\tprint(result.strip())\n\ndef main():\n\tfor _ in range(int(input())):\n\t\tsolve()\n\nif __name__ == '__main__':\n\tmain()\n",
    "prob_desc_created_at": "1626532500",
    "tags": [
        "constructive algorithms"
    ],
    "hidden_unit_tests": ""
}