{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"-\", \"ac\", \"abcba\"]",
    "src_uid": "89aef6720eac7376ce0a657d46c3c5b7",
    "prob_desc_notes": "NoteIn the first example strings a and b don't share any symbols, so the longest string that you can get is empty.In the second example ac is a subsequence of a, and at the same time you can obtain it by erasing consecutive symbols cepted from string b.",
    "prob_desc_description": "You are given two strings a and b. You have to remove the minimum possible number of consecutive (standing one after another) characters from string b in such a way that it becomes a subsequence of string a. It can happen that you will not need to remove any characters at all, or maybe you will have to remove all of the characters from b and make it empty.Subsequence of string s is any such string that can be obtained by erasing zero or more characters (not necessarily consecutive) from string s.",
    "prob_desc_output_spec": "On the first line output a subsequence of string a, obtained from b by erasing the minimum number of consecutive characters. If the answer consists of zero characters, output «-» (a minus sign).",
    "prob_desc_input_spec": "The first line contains string a, and the second line — string b. Both of these strings are nonempty and consist of lowercase letters of English alphabet. The length of each string is no bigger than 105 characters.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_035.jsonl",
    "code_uid": "0c952d7963baee5aaec05ec2f03c1e3f",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"hi\\nbob\", \"abca\\naccepted\", \"abacaba\\nabcdcba\"]",
    "exec_outcome": "PASSED",
    "source_code": "a, b = input(), input()\nn = len(b)\ndef f(a, b):\n    i, t = 0, [0]\n    for q in a:\n        if i < n and q == b[i]: i += 1\n        t.append(i)\n    return t\nu, v = f(a, b), f(a[::-1], b[::-1])[::-1]\nt = [x + y for x, y in zip(u, v)]\ni = t.index(max(t))\nx, y = u[i], v[i]\ns = b[:x] + b[max(x, n - y):]\nprint(s if s else '-')",
    "prob_desc_created_at": "1485354900",
    "tags": [
        "two pointers",
        "binary search",
        "hashing",
        "strings"
    ],
    "hidden_unit_tests": ""
}