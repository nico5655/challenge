{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1 \\n1 2 \\n2 1 3 \\n3 1 2 4 \\n2 4 1 3 5 \\n3 4 1 5 2 6\"]",
    "src_uid": "25fbe21a449c1ab3eb4bdd95a171d093",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given an array $$$a$$$ of length $$$n$$$ consisting of zeros. You perform $$$n$$$ actions with this array: during the $$$i$$$-th action, the following sequence of operations appears:  Choose the maximum by length subarray (continuous subsegment) consisting only of zeros, among all such segments choose the leftmost one;  Let this segment be $$$[l; r]$$$. If $$$r-l+1$$$ is odd (not divisible by $$$2$$$) then assign (set) $$$a[\\frac{l+r}{2}] := i$$$ (where $$$i$$$ is the number of the current action), otherwise (if $$$r-l+1$$$ is even) assign (set) $$$a[\\frac{l+r-1}{2}] := i$$$. Consider the array $$$a$$$ of length $$$5$$$ (initially $$$a=[0, 0, 0, 0, 0]$$$). Then it changes as follows:  Firstly, we choose the segment $$$[1; 5]$$$ and assign $$$a[3] := 1$$$, so $$$a$$$ becomes $$$[0, 0, 1, 0, 0]$$$;  then we choose the segment $$$[1; 2]$$$ and assign $$$a[1] := 2$$$, so $$$a$$$ becomes $$$[2, 0, 1, 0, 0]$$$;  then we choose the segment $$$[4; 5]$$$ and assign $$$a[4] := 3$$$, so $$$a$$$ becomes $$$[2, 0, 1, 3, 0]$$$;  then we choose the segment $$$[2; 2]$$$ and assign $$$a[2] := 4$$$, so $$$a$$$ becomes $$$[2, 4, 1, 3, 0]$$$;  and at last we choose the segment $$$[5; 5]$$$ and assign $$$a[5] := 5$$$, so $$$a$$$ becomes $$$[2, 4, 1, 3, 5]$$$. Your task is to find the array $$$a$$$ of length $$$n$$$ after performing all $$$n$$$ actions. Note that the answer exists and unique.You have to answer $$$t$$$ independent test cases.",
    "prob_desc_output_spec": "For each test case, print the answer — the array $$$a$$$ of length $$$n$$$ after performing $$$n$$$ actions described in the problem statement. Note that the answer exists and unique.",
    "prob_desc_input_spec": "The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. Then $$$t$$$ test cases follow. The only line of the test case contains one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the length of $$$a$$$. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$ ($$$\\sum n \\le 2 \\cdot 10^5$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_001.jsonl",
    "code_uid": "1fbcdac069a0543cf635b40c48cca5c5",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n1\\n2\\n3\\n4\\n5\\n6\"]",
    "exec_outcome": "PASSED",
    "source_code": "from heapq import heappush, heappop\nimport sys\nimport __pypy__\nimport os\nimport atexit\n_inp = sys.stdin.buffer.read().split(b'\\n')[::-1]\n\n\ndef input(): return _inp.pop().decode('ascii')\n\n\n_out = __pypy__.builders.BytesBuilder()\n\n\nclass dummy:\n    def flush(self):\n        pass\n\n    def write(self, s):\n        _out.append(s.encode('ascii'))\n\n\nsys.stdout = dummy()\natexit.register(lambda: os.write(1, _out.build()))\n\n\ndef inpint():\n    return int(input())\n\n\ndef main():\n    t = inpint()\n    for _ in range(t):\n        n = inpint()\n        li = [0]*n\n        l, r = 1, n\n        Q = [(-n, l)]\n        for i in range(1, n+1):\n            d = heappop(Q)\n            l, r = d[1], d[1]-d[0]-1\n            num = (l+r)//2 if (r-l+1) % 2 == 1 else (l+r-1)//2\n            li[num-1] = i\n            l1, r2 = l, r\n            r1, l2 = num-1, num+1\n            heappush(Q, (-r1+l1-1, l1))\n            heappush(Q, (-r2+l2-1, l2))\n        print(*li)\n\n\nif __name__ == '__main__':\n    main()\n",
    "prob_desc_created_at": "1589466900",
    "tags": [
        "data structures",
        "constructive algorithms",
        "sortings"
    ],
    "hidden_unit_tests": ""
}