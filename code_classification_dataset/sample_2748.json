{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\\n2\\n2 R\\n2 L\", \"NO\", \"YES\\n3\\n2 R\\n2 D\\n1 LLRR\", \"YES\\n1\\n3 RLD\", \"YES\\n8\\n3 R\\n3 L\\n1 D\\n3 R\\n1 D\\n1 U\\n3 L\\n1 D\"]",
    "src_uid": "a8c5ecf78a5442758441cd7c075b3d7e",
    "prob_desc_notes": "NoteThe moves Bashar is going to move in the first example are: \"RRLL\".It is not possible to run $$$1000000000$$$ kilometers in the second example because the total length of the roads is smaller and Bashar can't run the same road twice.The moves Bashar is going to move in the third example are: \"RRDDLLRR\".The moves Bashar is going to move in the fifth example are: \"RRRLLLDRRRDULLLD\". It is the picture of his run (the roads on this way are marked with red and numbered in the order of his running):",
    "prob_desc_description": "Bashar was practicing for the national programming contest. Because of sitting too much in front of the computer without doing physical movements and eating a lot Bashar became much fatter. Bashar is going to quit programming after the national contest and he is going to become an actor (just like his father), so he should lose weight.In order to lose weight, Bashar is going to run for $$$k$$$ kilometers. Bashar is going to run in a place that looks like a grid of $$$n$$$ rows and $$$m$$$ columns. In this grid there are two one-way roads of one-kilometer length between each pair of adjacent by side cells, one road is going from the first cell to the second one, and the other road is going from the second cell to the first one. So, there are exactly $$$(4 n m - 2n - 2m)$$$ roads.Let's take, for example, $$$n = 3$$$ and $$$m = 4$$$. In this case, there are $$$34$$$ roads. It is the picture of this case (arrows describe roads):Bashar wants to run by these rules:  He starts at the top-left cell in the grid;  In one move Bashar may go up (the symbol 'U'), down (the symbol 'D'), left (the symbol 'L') or right (the symbol 'R'). More formally, if he stands in the cell in the row $$$i$$$ and in the column $$$j$$$, i.e. in the cell $$$(i, j)$$$ he will move to:   in the case 'U' to the cell $$$(i-1, j)$$$;  in the case 'D' to the cell $$$(i+1, j)$$$;  in the case 'L' to the cell $$$(i, j-1)$$$;  in the case 'R' to the cell $$$(i, j+1)$$$;   He wants to run exactly $$$k$$$ kilometers, so he wants to make exactly $$$k$$$ moves;  Bashar can finish in any cell of the grid;  He can't go out of the grid so at any moment of the time he should be on some cell;  Bashar doesn't want to get bored while running so he must not visit the same road twice. But he can visit the same cell any number of times. Bashar asks you if it is possible to run by such rules. If it is possible, you should tell him how should he run.You should give him $$$a$$$ steps to do and since Bashar can't remember too many steps, $$$a$$$ should not exceed $$$3000$$$. In every step, you should give him an integer $$$f$$$ and a string of moves $$$s$$$ of length at most $$$4$$$ which means that he should repeat the moves in the string $$$s$$$ for $$$f$$$ times. He will perform the steps in the order you print them.For example, if the steps are $$$2$$$ RUD, $$$3$$$ UUL then the moves he is going to move are RUD $$$+$$$ RUD $$$+$$$ UUL $$$+$$$ UUL $$$+$$$ UUL $$$=$$$ RUDRUDUULUULUUL.Can you help him and give him a correct sequence of moves such that the total distance he will run is equal to $$$k$$$ kilometers or say, that it is impossible?",
    "prob_desc_output_spec": "If there is no possible way to run $$$k$$$ kilometers, print \"NO\" (without quotes), otherwise print \"YES\" (without quotes) in the first line. If the answer is \"YES\", on the second line print an integer $$$a$$$ ($$$1 \\leq a \\leq 3000$$$) — the number of steps, then print $$$a$$$ lines describing the steps. To describe a step, print an integer $$$f$$$ ($$$1 \\leq f \\leq 10^{9}$$$) and a string of moves $$$s$$$ of length at most $$$4$$$. Every character in $$$s$$$ should be 'U', 'D', 'L' or 'R'. Bashar will start from the top-left cell. Make sure to move exactly $$$k$$$ moves without visiting the same road twice and without going outside the grid. He can finish at any cell. We can show that if it is possible to run exactly $$$k$$$ kilometers, then it is possible to describe the path under such output constraints.",
    "prob_desc_input_spec": "The only line contains three integers $$$n$$$, $$$m$$$ and $$$k$$$ ($$$1 \\leq n, m \\leq 500$$$, $$$1 \\leq k \\leq 10 ^{9}$$$), which are the number of rows and the number of columns in the grid and the total distance Bashar wants to run.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_029.jsonl",
    "code_uid": "a5995db7e23ef087dd055ae811bc18d1",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 3 4\", \"3 3 1000000000\", \"3 3 8\", \"4 4 9\", \"3 4 16\"]",
    "exec_outcome": "PASSED",
    "source_code": "\"\"\"\n    This template is made by Satwik_Tiwari.\n    python programmers can use this template :)) .\n\"\"\"\n\n#===============================================================================================\n#importing some useful libraries.\n\nimport sys\nimport bisect\nimport heapq\nfrom math import *\nfrom collections import Counter as counter  # Counter(list)  return a dict with {key: count}\nfrom itertools import combinations as comb # if a = [1,2,3] then print(list(comb(a,2))) -----> [(1, 2), (1, 3), (2, 3)]\nfrom itertools import permutations as permutate\nfrom bisect import bisect_left as bl #\nfrom bisect import bisect_right as br\nfrom bisect import bisect\n\n#===============================================================================================\n#some shortcuts\n\nmod = pow(10, 9) + 7\ndef inp(): return sys.stdin.readline().strip() #for fast input\ndef out(var): sys.stdout.write(str(var))  #for fast output, always take string\ndef lis(): return list(map(int, inp().split()))\ndef stringlis(): return list(map(str, inp().split()))\ndef sep(): return map(int, inp().split())\ndef strsep(): return map(str, inp().split())\ndef graph(vertex): return [[] for i in range(0,vertex+1)]\ndef zerolist(n): return [0]*n\ndef nl(): out(\"\\n\")  #as stdout.write always print sring.\ndef testcase(t):\n    for p in range(t):\n        solve()\ndef printlist(a) :\n    for p in range(0,len(a)):\n        out(str(a[p]) + ' ')\ndef lcm(a,b): return (a*b)//gcd(a,b)\n\n\n#===============================================================================================\n# code here ;))\n\n\ndef func(n,m,k):\n    if((4*m*n)-(2*n)-(2*m) < k):\n        return True\n    else:\n        return False\n\ndef solve():\n    n,m,k = sep()\n    if(func(n,m,k)):\n        print('NO')\n    else:\n        print('YES')\n        ans = []\n        if(m-1 > 0):\n            ans.append([m-1,'R'])\n        for i in range(m-1):\n            # s1 = 'D'*(n-1) + ('U')*(n-1)\n            if(n-1 > 0):\n                ans.append([n-1,'DLR'])\n            # temp = n-1\n            # a = temp//4\n            # if(a>0):\n            #     ans.append([a,'DDDD'])\n            # temp = temp - (4*a)\n            # if(temp > 0):\n            #     ans.append([1,'D'*temp])\n            temp = n-1\n            a = temp//4\n            if(a>0):\n                ans.append([a,'UUUU'])\n            temp = temp - (4*a)\n            if(temp > 0):\n                ans.append([1,'U'*temp+'L'])\n            else:\n                ans.append([1,'L'])\n\n        temp = n-1\n        a = temp//4\n        if(a>0):\n            ans.append([a,'DDDD'])\n        temp = temp-(4*a)\n        if(temp > 0):\n            ans.append([1,'D'*temp])\n\n        temp = n-1\n        a = temp//4\n        if(a>0):\n            ans.append([a,'UUUU'])\n        temp = temp-(4*a)\n        if(temp > 0):\n            ans.append([1,'U'*temp])\n\n\n        # for i in range(n-1):\n        #     # ans.append([1,'D'])\n        #     help = (m-1) - (((m-1)//4)*4)\n        #     if(help > 0):\n        #         ans.append([1,'D'+'R'*help])\n        #     # s1 = 'R'*(m-1) + 'L'*(m-1)\n        #     temp = m-1-help\n        #     a = temp//4\n        #     if(a>0):\n        #         ans.append([a,'RRRR'])\n        #     temp = temp - (4*a)\n        #     if(temp > 0):\n        #         ans.append([1,'R'*temp])\n        #     temp = m-1\n        #     a = temp//4\n        #     if(a>0):\n        #         ans.append([a,'LLLL'])\n        #     temp = temp - (4*a)\n        #     if(temp > 0):\n        #         ans.append([1,'L'*temp])\n\n        ans.append([n-1,'U'*(n-1)])\n\n        finall = []\n        cnt = 0\n        index = 0\n        while(True):\n            if(cnt+len(ans[index][1])*ans[index][0] == k):\n                finall.append(ans[index])\n                break\n            if(cnt+len(ans[index][1])*ans[index][0]  < k):\n                finall.append(ans[index])\n                cnt += len(ans[index][1])*ans[index][0]\n                index+=1\n            else:\n                rem = k-cnt\n                if(ans[index][0] == 1):\n                    finall.append([1,ans[index][1][:rem]])\n                    break\n                else:\n\n                    b = rem//(len(ans[index][1]))\n                    if(b>0):\n                        finall.append([b,ans[index][1]])\n                    rem = rem - (len(ans[index][1])*b)\n                    if(rem > 0):\n                        finall.append([1,ans[index][1][:rem]])\n                    # temp = ans[index][1][:rem]\n                    # finall.append([1,temp])\n                    break\n\n        print(len(finall))\n        for i in range(0,len(finall)):\n            print(finall[i][0],finall[i][1])\n\n\n\ntestcase(1)\n# testcase(1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "prob_desc_created_at": "1581604500",
    "tags": [
        "constructive algorithms",
        "implementation",
        "graphs"
    ],
    "hidden_unit_tests": ""
}