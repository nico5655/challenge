{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1\\n4\\n2\"]",
    "src_uid": "fa761cd247a815f105668b716c20f0b4",
    "prob_desc_notes": "NoteThe first test case is described in the statement.In the second test case, the indices $$$i$$$ that result in palindrome after removing $$$s_i$$$ are $$$3, 4, 5, 6$$$. Hence the answer is $$$4$$$. In the third test case, removal of any of the indices results in \"d\" which is a palindrome. Hence the answer is $$$2$$$.",
    "prob_desc_description": "You are given a palindromic string $$$s$$$ of length $$$n$$$.You have to count the number of indices $$$i$$$ $$$(1 \\le i \\le n)$$$ such that the string after removing $$$s_i$$$ from $$$s$$$ still remains a palindrome. For example, consider $$$s$$$ = \"aba\"  If we remove $$$s_1$$$ from $$$s$$$, the string becomes \"ba\" which is not a palindrome.  If we remove $$$s_2$$$ from $$$s$$$, the string becomes \"aa\" which is a palindrome.  If we remove $$$s_3$$$ from $$$s$$$, the string becomes \"ab\" which is not a palindrome. A palindrome is a string that reads the same backward as forward. For example, \"abba\", \"a\", \"fef\" are palindromes whereas \"codeforces\", \"acd\", \"xy\" are not.",
    "prob_desc_output_spec": "For each test case, output a single integer  — the number of indices $$$i$$$ $$$(1 \\le i \\le n)$$$ such that the string after removing $$$s_i$$$ from $$$s$$$ still remains a palindrome. ",
    "prob_desc_input_spec": "The input consists of multiple test cases. The first line of the input contains a single integer $$$t$$$ $$$(1 \\leq t \\leq 10^3)$$$  — the number of test cases. Description of the test cases follows. The first line of each testcase contains a single integer $$$n$$$ $$$(2 \\leq n \\leq 10^5)$$$  — the length of string $$$s$$$. The second line of each test case contains a string $$$s$$$ consisting of lowercase English letters. It is guaranteed that $$$s$$$ is a palindrome. It is guaranteed that sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_101.jsonl",
    "code_uid": "eb16aebd7408f43cd0183327bb6bb9a7",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n\\n3\\n\\naba\\n\\n8\\n\\nacaaaaca\\n\\n2\\n\\ndd\"]",
    "exec_outcome": "PASSED",
    "source_code": "for _ in range(int(input())):\r\n    n=int(input())\r\n    s= input()\r\n    c=0\r\n    val = s[n//2]\r\n    for i in range(n//2-1, -1, -1):\r\n        if s[i]!=val:\r\n            break\r\n        c+=2\r\n    print(c+n%2)\r\n           ",
    "prob_desc_created_at": "1653230100",
    "tags": [
        "greedy",
        "strings"
    ],
    "hidden_unit_tests": ""
}