{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1 2 2 3 3 3\", \"-1\"]",
    "src_uid": "7dea96a7599946a5b5d0b389c7e76651",
    "prob_desc_notes": "NoteIn the first example, if $$$v_{1} = \\{ 1 \\}$$$, $$$v_{2} = \\{ 2, 3 \\}$$$, and $$$v_{3} = \\{ 4, 5, 6 \\}$$$ then vertex sets will satisfy all conditions. But you can assign vertices to vertex sets in a different way; Other answers like \"2 3 3 1 1 1\" will be accepted as well.  In the second example, it's impossible to make such vertex sets.",
    "prob_desc_description": "You have a simple undirected graph consisting of $$$n$$$ vertices and $$$m$$$ edges. The graph doesn't contain self-loops, there is at most one edge between a pair of vertices. The given graph can be disconnected.Let's make a definition.Let $$$v_1$$$ and $$$v_2$$$ be two some nonempty subsets of vertices that do not intersect. Let $$$f(v_{1}, v_{2})$$$ be true if and only if all the conditions are satisfied:  There are no edges with both endpoints in vertex set $$$v_1$$$.  There are no edges with both endpoints in vertex set $$$v_2$$$.  For every two vertices $$$x$$$ and $$$y$$$ such that $$$x$$$ is in $$$v_1$$$ and $$$y$$$ is in $$$v_2$$$, there is an edge between $$$x$$$ and $$$y$$$. Create three vertex sets ($$$v_{1}$$$, $$$v_{2}$$$, $$$v_{3}$$$) which satisfy the conditions below;  All vertex sets should not be empty.  Each vertex should be assigned to only one vertex set.  $$$f(v_{1}, v_{2})$$$, $$$f(v_{2}, v_{3})$$$, $$$f(v_{3}, v_{1})$$$ are all true. Is it possible to create such three vertex sets? If it's possible, print matching vertex set for each vertex.",
    "prob_desc_output_spec": "If the answer exists, print $$$n$$$ integers. $$$i$$$-th integer means the vertex set number (from $$$1$$$ to $$$3$$$) of $$$i$$$-th vertex. Otherwise, print $$$-1$$$. If there are multiple answers, print any.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$m$$$ ($$$3 \\le n \\le 10^{5}$$$, $$$0 \\le m \\le \\text{min}(3 \\cdot 10^{5}, \\frac{n(n-1)}{2})$$$) — the number of vertices and edges in the graph. The $$$i$$$-th of the next $$$m$$$ lines contains two integers $$$a_{i}$$$ and $$$b_{i}$$$ ($$$1 \\le a_{i} \\lt b_{i} \\le n$$$) — it means there is an edge between $$$a_{i}$$$ and $$$b_{i}$$$. The graph doesn't contain self-loops, there is at most one edge between a pair of vertices. The given graph can be disconnected.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_000.jsonl",
    "code_uid": "9c372f74ccc3656797e5d61fdee09156",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6 11\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n2 4\\n2 5\\n2 6\\n3 4\\n3 5\\n3 6\", \"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "# https://codeforces.com/contest/1228/problem/D\n# all neightbor in group --> pass 1\n# all neighbor not in group --> merge 0\n# invalid 2\n# WA\ndef type_(list_v, group):\n    cnt_0 = 0\n    cnt_1 = 0\n    \n    for v in list_v:\n        if v in group:\n            cnt_1 += 1\n        else:\n            cnt_0 += 1\n            \n    if cnt_1 == len(group):\n        return 1\n    \n    if cnt_0 == len(list_v):\n        return 0\n    \n    return 2\n    \ndef is_all_type_1(ex_index, list_group, v):\n    for i, group in list_group.items():\n        if i == ex_index:\n            continue\n            \n        if type_(g[v], group) != 1: \n            return False\n        \n    return True\n    \ndef check(v, list_group):\n    t = None\n    for i, group in list_group.items():\n        t  = type_(g[v], group)\n        \n        if t == 0 or t == 2:\n            if t == 0:\n                if is_all_type_1(i, list_group, v) == True:\n                    group[v] = 1\n                else:\n                    return 2\n            return t\n        \n    return t    \n    \ngroup = {}    \ndef process(g):    \n    for v in g:\n        if len(group) == 0:\n            group[0]    = {}\n            group[0][v] = 1\n            continue\n    \n        t = check(v, group)\n        \n        if t == 2:\n            return -1\n        \n        if t == 1:\n            if len(group) == 3:\n                return -1\n            \n            group[len(group)]    = {}\n            group[len(group)-1][v] = 1\n    return group\n\ng = {}\nn, m = map(int, input().split())\n\nfor _ in range(m):\n    u, v = map(int, input().split())\n    if u not in g:\n        g[u] = []\n    if v not in g:\n        g[v] = []\n        \n    g[u].append(v)    \n    g[v].append(u)\n    \nans = process(g)\n\nif ans == -1 or len(ans) < 3:\n    print(-1)\nelse:\n    pr  = [0] * n\n    \n    cnt = 0\n    for k, gr in group.items():\n        for v in gr:\n            cnt += 1\n            pr[v-1] = str(k+1)\n    \n    if cnt == n:\n        print(' '.join(pr))\n    else:\n        print(-1)\n# 1,2  3,4  5,6\n#6 12\n#1 3\n#1 4\n#2 3\n#2 4\n#1 5 \n#1 6\n#2 5\n#2 6\n#3 5\n#3 6\n#4 5\n#4 6",
    "prob_desc_created_at": "1569762300",
    "tags": [
        "hashing",
        "graphs",
        "constructive algorithms",
        "implementation",
        "brute force"
    ],
    "hidden_unit_tests": ""
}