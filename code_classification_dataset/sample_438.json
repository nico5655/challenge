{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"2\\n1 1\\n3 2\", \"3\\n1 1\\n2 2\\n3 3\"]",
    "src_uid": "c6bbb16b1a3946ce38e67dc4824ecf89",
    "prob_desc_notes": "NoteIn the first sample you need the vests' sizes to match perfectly: the first soldier gets the first vest (size 1), the third soldier gets the second vest (size 3). This sample allows another answer, which gives the second vest to the fourth soldier instead of the third one.In the second sample the vest size can differ from the desired size by at most 2 sizes, so all soldiers can be equipped.",
    "prob_desc_description": "The Two-dimensional kingdom is going through hard times... This morning the Three-Dimensional kingdom declared war on the Two-dimensional one. This (possibly armed) conflict will determine the ultimate owner of the straight line.The Two-dimensional kingdom has a regular army of n people. Each soldier registered himself and indicated the desired size of the bulletproof vest: the i-th soldier indicated size ai. The soldiers are known to be unpretentious, so the command staff assumes that the soldiers are comfortable in any vests with sizes from ai - x to ai + y, inclusive (numbers x, y ≥ 0 are specified). The Two-dimensional kingdom has m vests at its disposal, the j-th vest's size equals bj. Help mobilize the Two-dimensional kingdom's army: equip with vests as many soldiers as possible. Each vest can be used only once. The i-th soldier can put on the j-th vest, if ai - x ≤ bj ≤ ai + y.",
    "prob_desc_output_spec": "In the first line print a single integer k — the maximum number of soldiers equipped with bulletproof vests.  In the next k lines print k pairs, one pair per line, as \"ui vi\" (without the quotes). Pair (ui, vi) means that soldier number ui must wear vest number vi. Soldiers and vests are numbered starting from one in the order in which they are specified in the input. All numbers of soldiers in the pairs should be pairwise different, all numbers of vests in the pairs also should be pairwise different. You can print the pairs in any order. If there are multiple optimal answers, you are allowed to print any of them.",
    "prob_desc_input_spec": "The first input line contains four integers n, m, x and y (1 ≤ n, m ≤ 105, 0 ≤ x, y ≤ 109) — the number of soldiers, the number of vests and two numbers that specify the soldiers' unpretentiousness, correspondingly. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) in non-decreasing order, separated by single spaces — the desired sizes of vests.  The third line contains m integers b1, b2, ..., bm (1 ≤ bj ≤ 109) in non-decreasing order, separated by single spaces — the sizes of the available vests.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1300,
    "file_name": "train_002.jsonl",
    "code_uid": "f132ad3acb0185fa626529fc35147d18",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 3 0 0\\n1 2 3 3 4\\n1 3 5\", \"3 3 2 2\\n1 5 9\\n3 5 7\"]",
    "exec_outcome": "PASSED",
    "source_code": "n, m, x, y = map(int, raw_input().split(' '))\n\nw = map(int, raw_input().split(' '))\nb = map(int, raw_input().split(' '))\nres = []\ncnt = 0\nk2 = 0\nfor k1, j in enumerate(b):\n    while (k2 < n) and (w[k2] + y < j):\n        k2 += 1\n    if (k2 >= n):\n        break\n    if (w[k2] - x <= j):\n        res.append([k2 + 1, k1 + 1])\n        cnt +=1\n        k2 += 1\n\nprint cnt\nfor i in res:\n    print i[0], i[1]",
    "prob_desc_created_at": "1331478300",
    "tags": [
        "two pointers",
        "binary search",
        "greedy",
        "brute force"
    ],
    "hidden_unit_tests": ""
}