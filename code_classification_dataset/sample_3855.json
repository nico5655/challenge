{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"4\\n5\\n-1\\n1\"]",
    "src_uid": "7ac5f084c403bd26802e1b941105d34b",
    "prob_desc_notes": "NoteThe first test case is shown on the picture below:  As you can see from it, you may choose the subsegments $$$(2\\ 1\\ 3\\ 4)$$$ and $$$(3\\ 1\\ 5\\ 2)$$$, which are a harmonious pair. Their length is equal to $$$4$$$, so the answer is $$$4$$$.In the second test case, you need to take two subsegments: one with $$$l=1$$$ and $$$r=5$$$, and one with $$$l=2$$$ and $$$r=6$$$. It's not hard to observe that these segments are a harmonious pair and considered different even though they are both equal to $$$(1\\ 1\\ 1\\ 1\\ 1)$$$.In the third test case, you cannot make a harmonious pair, so the answer is $$$-1$$$.",
    "prob_desc_description": "Martians are actively engaged in interplanetary trade. Olymp City, the Martian city known for its spaceport, has become a place where goods from all the corners of our Galaxy come. To deliver even more freight from faraway planets, Martians need fast spaceships.A group of scientists conducts experiments to build a fast engine for the new spaceship. In the current experiment, there are $$$n$$$ elementary particles, the $$$i$$$-th of them has type $$$a_i$$$.Denote a subsegment of the particle sequence ($$$a_1, a_2, \\dots, a_n$$$) as a sequence ($$$a_l, a_{l+1}, \\dots, a_r$$$) for some left bound $$$l$$$ and right bound $$$r$$$ ($$$1 \\le l \\le r \\le n$$$). For instance, the sequence $$$(1\\ 4\\ 2\\ 8\\ 5\\ 7)$$$ for $$$l=2$$$ and $$$r=4$$$ has the sequence $$$(4\\ 2\\ 8)$$$ as a subsegment. Two subsegments are considered different if at least one bound of those subsegments differs.Note that the subsegments can be equal as sequences but still considered different. For example, consider the sequence $$$(1\\ 1\\ 1\\ 1\\ 1)$$$ and two of its subsegments: one with $$$l=1$$$ and $$$r=3$$$ and another with $$$l=2$$$ and $$$r=4$$$. Both subsegments are equal to $$$(1\\ 1\\ 1)$$$, but still considered different, as their left and right bounds differ.The scientists want to conduct a reaction to get two different subsegments of the same length. Denote this length $$$k$$$. The resulting pair of subsegments must be harmonious, i. e. for some $$$i$$$ ($$$1 \\le i \\le k$$$) it must be true that the types of particles on the $$$i$$$-th position are the same for these two subsegments. For example, the pair $$$(1\\ 7\\ 3)$$$ and $$$(4\\ 7\\ 8)$$$ is harmonious, as both subsegments have $$$7$$$ on the second position. The pair $$$(1\\ 2\\ 3)$$$ and $$$(3\\ 1\\ 2)$$$ is not harmonious.The longer are harmonious subsegments, the more chances for the scientists to design a fast engine. So, they asked you to calculate the maximal possible length of harmonious pair made of different subsegments.",
    "prob_desc_output_spec": "For each test, print a single integer, maximal possible length of harmonious pair made of different subsegments. If such pair does not exist, print $$$-1$$$ instead.",
    "prob_desc_input_spec": "The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. The following are descriptions of the test cases. The first line contains an integer $$$n$$$ ($$$2 \\le n \\le 150\\,000$$$) — the amount of elementary particles in the sequence. The second line contains $$$n$$$ integers $$$a_i$$$ ($$$1 \\le a_i \\le 150\\,000$$$) — types of elementary particles. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$3\\cdot10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_085.jsonl",
    "code_uid": "d8a44aacceeb549e02af5709cc218a03",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n7\\n3 1 5 2 1 3 4\\n6\\n1 1 1 1 1 1\\n6\\n1 4 2 8 5 7\\n2\\n15 15\"]",
    "exec_outcome": "PASSED",
    "source_code": "# Greedy one pass, at index i always line up with\n# the nearest same element to its right.\n# Store positions of nearest same element w/ map.\nfor case in range(int(input())):\n    n = int(input())\n    arr = list(input().split())\n\n    mp = {}\n    best = 0\n    for i in range(n):\n        if arr[i] in mp:\n            best = max(best, mp[arr[i]] + n - i)\n        mp[arr[i]] = i\n\n    if best == 0:\n        print(-1)\n    else:\n        print(best)\n\n",
    "prob_desc_created_at": "1641989100",
    "tags": [
        "brute force",
        "greedy",
        "sortings"
    ],
    "hidden_unit_tests": ""
}