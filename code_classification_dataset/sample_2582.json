{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"NO\", \"YES\"]",
    "src_uid": "0928e12caeb71d631a26912c5606b568",
    "prob_desc_notes": "NoteIn the first example you can't make any interesting problemset, because the first team knows all problems.In the second example you can choose the first and the third problems.",
    "prob_desc_description": "Snark and Philip are preparing the problemset for the upcoming pre-qualification round for semi-quarter-finals. They have a bank of n problems, and they want to select any non-empty subset of it as a problemset.k experienced teams are participating in the contest. Some of these teams already know some of the problems. To make the contest interesting for them, each of the teams should know at most half of the selected problems.Determine if Snark and Philip can make an interesting problemset!",
    "prob_desc_output_spec": "Print \"YES\" (quotes for clarity), if it is possible to make an interesting problemset, and \"NO\" otherwise. You can print each character either upper- or lowercase (\"YeS\" and \"yes\" are valid when the answer is \"YES\").",
    "prob_desc_input_spec": "The first line contains two integers n, k (1 ≤ n ≤ 105, 1 ≤ k ≤ 4) — the number of problems and the number of experienced teams. Each of the next n lines contains k integers, each equal to 0 or 1. The j-th number in the i-th line is 1 if j-th team knows i-th problem and 0 otherwise.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_025.jsonl",
    "code_uid": "337e3a9b25e0cf0c4fc911c727ad6243",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 3\\n1 0 1\\n1 1 0\\n1 0 0\\n1 0 0\\n1 0 0\", \"3 2\\n1 0\\n1 1\\n0 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "def main():\n    arr=input().split()\n    count=int(arr[0])\n    teams=int(arr[1])\n    arr=[False for x in range(2**teams)]\n    arr[0]=True\n    bo=False\n    for x in range(count):\n        string=input().split()\n        store=0\n        for y in range(teams):\n            if string[y]==\"0\":\n                store+=2**y\n        sub=False\n        for y in range(2**teams):\n            if y|store==2**teams-1 and arr[y]:\n                sub=True\n                break\n        if sub==True:\n            bo=True\n            break\n        else:\n            arr[store]=True\n    if bo:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \nmain()\n",
    "prob_desc_created_at": "1507187100",
    "tags": [
        "dp",
        "constructive algorithms",
        "bitmasks",
        "brute force"
    ],
    "hidden_unit_tests": ""
}