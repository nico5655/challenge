{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"10011\"]",
    "src_uid": "98e3182f047a7e7b10be7f207b219267",
    "prob_desc_notes": "NoteIn the first query we can achieve the result, for instance, by using transitions .The third query asks for changing AAB to A — but in this case we are not able to get rid of the character 'B'.",
    "prob_desc_description": "Alice has a string consisting of characters 'A', 'B' and 'C'. Bob can use the following transitions on any substring of our string in any order any number of times:   A  BC  B  AC  C  AB  AAA  empty string Note that a substring is one or more consecutive characters. For given queries, determine whether it is possible to obtain the target string from source.",
    "prob_desc_output_spec": "Print a string of Q characters, where the i-th character is '1' if the answer to the i-th query is positive, and '0' otherwise.",
    "prob_desc_input_spec": "The first line contains a string S (1 ≤ |S| ≤ 105). The second line contains a string T (1 ≤ |T| ≤ 105), each of these strings consists only of uppercase English letters 'A', 'B' and 'C'. The third line contains the number of queries Q (1 ≤ Q ≤ 105). The following Q lines describe queries. The i-th of these lines contains four space separated integers ai, bi, ci, di. These represent the i-th query: is it possible to create T[ci..di] from S[ai..bi] by applying the above transitions finite amount of times? Here, U[x..y] is a substring of U that begins at index x (indexed from 1) and ends at index y. In particular, U[1..|U|] is the whole string U. It is guaranteed that 1 ≤ a ≤ b ≤ |S| and 1 ≤ c ≤ d ≤ |T|.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2500,
    "file_name": "train_002.jsonl",
    "code_uid": "cef376a3ee4f241944d2c1baba6ecc82",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"AABCCBAAB\\nABCB\\n5\\n1 3 1 2\\n2 2 2 4\\n7 9 1 1\\n3 4 2 3\\n4 5 1 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "def read():\n    s = input()\n    l = len(s)\n    r = [[0] * (l + 1), [0] * (l + 1)]\n    for i in range(l):\n        r[0][i + 1] = (r[0][i] + 1) * (s[i] == 'A')\n        r[1][i + 1] = r[1][i] + (s[i] != 'A')\n    return r\ns, t = read(), read()\nq = int(input())\nr = ''\nfor i in range(q):\n    a, b, c, d = map(int, input().split())\n    sb = s[1][b] - s[1][a] + (s[0][a] == 0)\n    sa = s[0][b] - (s[0][a] - 1) * (sb == 0)\n    tb = t[1][d] - t[1][c] + (t[0][c] == 0)\n    ta = t[0][d] - (t[0][c] - 1) * (tb == 0)\n    if any([sb > tb, sa < ta, tb - sb & 1, sb == tb and (sa - ta) % 3, sa == ta and not sb and tb]):\n        r += '0'\n    else:\n        r += '1'\nprint(r)\n",
    "prob_desc_created_at": "1520696100",
    "tags": [
        "constructive algorithms",
        "implementation",
        "strings"
    ],
    "hidden_unit_tests": ""
}