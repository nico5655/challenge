{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"6\", \"2\"]",
    "src_uid": "4cda03e0a8a77f8ffb6672b7a3827907",
    "prob_desc_notes": "NoteIn the first example we can choose any segment and $$$k = 0$$$. The array will stay same.In the second example we can choose segment $$$[1, 3]$$$ and $$$k = -4$$$. The array will become $$$[2, -2, 2]$$$.",
    "prob_desc_description": "You are given array $$$a$$$ of length $$$n$$$. You can choose one segment $$$[l, r]$$$ ($$$1 \\le l \\le r \\le n$$$) and integer value $$$k$$$ (positive, negative or even zero) and change $$$a_l, a_{l + 1}, \\dots, a_r$$$ by $$$k$$$ each (i.e. $$$a_i := a_i + k$$$ for each $$$l \\le i \\le r$$$).What is the maximum possible number of elements with value $$$c$$$ that can be obtained after one such operation?",
    "prob_desc_output_spec": "Print one integer — the maximum possible number of elements with value $$$c$$$ which can be obtained after performing operation described above.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$c$$$ ($$$1 \\le n \\le 5 \\cdot 10^5$$$, $$$1 \\le c \\le 5 \\cdot 10^5$$$) — the length of array and the value $$$c$$$ to obtain. The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 5 \\cdot 10^5$$$) — array $$$a$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_052.jsonl",
    "code_uid": "3d8658780df5376f150545d8b6335382",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6 9\\n9 9 9 9 9 9\", \"3 2\\n6 2 6\"]",
    "exec_outcome": "PASSED",
    "source_code": "from __future__ import division\nfrom sys import stdin, stdout\nfrom collections import Counter\n\ndef write(x):\n    stdout.write(str(x) + \"\\n\")\n\n\nn, c = map(int, stdin.readline().split())\na = map(int, stdin.readline().split())\nassert len(a) == n\n\ntel = Counter()\ntarget_count_last = Counter()\ntargets = 0\nbest = 0\n\n\nfor num in a:\n    if num == c:\n        targets += 1\n    else:\n        since_last = targets - target_count_last[num]\n        target_count_last[num] = targets\n        tel[num] = max(0, tel[num] - since_last)\n        tel[num] += 1\n        best = max(best, tel[num])\n\nwrite(targets + best)\n",
    "prob_desc_created_at": "1543415700",
    "tags": [
        "dp",
        "binary search",
        "greedy"
    ],
    "hidden_unit_tests": ""
}