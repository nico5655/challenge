{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"3\\n2\\n1\\n1\\n3\\n1\\n2\\n1\\n2\\n3\\n2\"]",
    "src_uid": "b8833a679d2bbad682cd7865aed9c08c",
    "prob_desc_notes": "NoteOne of possible solutions to the example is shown below:  ",
    "prob_desc_description": "There are $$$n$$$ football teams in the world. The Main Football Organization (MFO) wants to host at most $$$m$$$ games. MFO wants the $$$i$$$-th game to be played between the teams $$$a_i$$$ and $$$b_i$$$ in one of the $$$k$$$ stadiums. Let $$$s_{ij}$$$ be the numbers of games the $$$i$$$-th team played in the $$$j$$$-th stadium. MFO does not want a team to have much more games in one stadium than in the others. Therefore, for each team $$$i$$$, the absolute difference between the maximum and minimum among $$$s_{i1}, s_{i2}, \\ldots, s_{ik}$$$ should not exceed $$$2$$$.Each team has $$$w_i$$$ — the amount of money MFO will earn for each game of the $$$i$$$-th team. If the $$$i$$$-th team plays $$$l$$$ games, MFO will earn $$$w_i \\cdot l$$$.MFO needs to find what games in what stadiums they need to host in order to earn as much money as possible, not violating the rule they set.However, this problem is too complicated for MFO. Therefore, they are asking you to help them.",
    "prob_desc_output_spec": "For each game in the same order, print $$$t_i$$$ ($$$1 \\leq t_i \\leq k$$$) — the number of the stadium, in which $$$a_i$$$ and $$$b_i$$$ will play the game. If the $$$i$$$-th game should not be played, $$$t_i$$$ should be equal to $$$0$$$. If there are multiple answers, print any.",
    "prob_desc_input_spec": "The first line contains three integers $$$n$$$, $$$m$$$, $$$k$$$ ($$$3 \\leq n \\leq 100$$$, $$$0 \\leq m \\leq 1\\,000$$$, $$$1 \\leq k \\leq 1\\,000$$$) — the number of teams, the number of games, and the number of stadiums. The second line contains $$$n$$$ integers $$$w_1, w_2, \\ldots, w_n$$$ ($$$1 \\leq w_i \\leq 1\\,000$$$) — the amount of money MFO will earn for each game of the $$$i$$$-th game. Each of the following $$$m$$$ lines contains two integers $$$a_i$$$ and $$$b_i$$$ ($$$1 \\leq a_i, b_i \\leq n$$$, $$$a_i \\neq b_i$$$) — the teams that can play the $$$i$$$-th game. It is guaranteed that each pair of teams can play at most one game.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 3100,
    "file_name": "train_043.jsonl",
    "code_uid": "537f76cf99d41c936c9f12ba88893688",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7 11 3\\n4 7 8 10 10 9 3\\n6 2\\n6 1\\n7 6\\n4 3\\n4 6\\n3 1\\n5 3\\n7 5\\n7 3\\n4 2\\n1 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "import random\nimport math\n\ndef set_color(game, color):\n    color_count[game[0]][game[2]] -= 1\n    color_count[game[1]][game[2]] -= 1\n    game[2] = color\n    color_count[game[0]][game[2]] += 1\n    color_count[game[1]][game[2]] += 1\n\ndef fix(node):\n    minimum = math.inf\n    maximum = 0\n\n    for i in range(k):\n        minimum = min(minimum, color_count[node][i])\n        maximum = max(maximum, color_count[node][i])\n\n    if maximum - minimum <= 2:\n        return False\n\n    rand = 0\n    for game in games:\n        if (game[0] == node or game[1] == node) and color_count[node][game[2]] == maximum:\n            rand = r(1,k)\n            set_color(game, rand % k)\n            return True\n\n    return False\n\nn, m, k = map(int,input().split())\ngames = [[0 for _ in range(4)] for _ in range(m)]\ncolor_count = [[0 for _ in range(k)] for _ in range(n)]\nanswers = [0 for _ in range(m)]\n_ = list(map(int,input().split()))\n\ncolor = 0\nr = lambda x,y : random.randint(x,y)\nfor i in range(m):\n    a, b = map(int,input().split())\n    color = r(1,k) % k\n    games[i] = [a-1,b-1,color,i]\n    color_count[games[i][0]][color] += 1\n    color_count[games[i][1]][color] += 1\n\nbad = True\n\nwhile bad:\n    random.shuffle(games)\n    bad = False\n\n    for i in range(n):\n        while(fix(i)):\n            bad = True\n\nfor game in games:\n    answers[game[3]] = game[2] + 1\n\nfor i in range(m):\n    print(answers[i])\n        \n\n    \n",
    "prob_desc_created_at": "1570374300",
    "tags": [
        "graphs"
    ],
    "hidden_unit_tests": ""
}