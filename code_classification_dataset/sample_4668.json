{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"0\\n21\\n9\\n6\\n0\"]",
    "src_uid": "66daa3864875e48d32a7acd23bd7a829",
    "prob_desc_notes": "NoteIn the first test case it is allowed to jump over all traps and take $$$0$$$ damage.In the second test case there are $$$5$$$ ways to jump over some traps:  Do not jump over any trap.Total damage: $$$5 + 10 + 11 + 5 = 31$$$. Jump over the $$$1$$$-st trap.Total damage: $$$\\underline{0} + (10 + 1) + (11 + 1) + (5 + 1) = 29$$$. Jump over the $$$2$$$-nd trap.Total damage: $$$5 + \\underline{0} + (11 + 1) + (5 + 1) = 23$$$. Jump over the $$$3$$$-rd trap.Total damage: $$$5 + 10 + \\underline{0} + (5 + 1) = 21$$$. Jump over the $$$4$$$-th trap.Total damage: $$$5 + 10 + 11 + \\underline{0} = 26$$$.To get minimal damage it is needed to jump over the $$$3$$$-rd trap, so the answer is $$$21$$$.In the third test case it is optimal to jump over the traps $$$1$$$, $$$3$$$, $$$4$$$, $$$5$$$, $$$7$$$:Total damage: $$$0 + (2 + 1) + 0 + 0 + 0 + (2 + 4) + 0 = 9$$$.",
    "prob_desc_description": "There are $$$n$$$ traps numbered from $$$1$$$ to $$$n$$$. You will go through them one by one in order. The $$$i$$$-th trap deals $$$a_i$$$ base damage to you.Instead of going through a trap, you can jump it over. You can jump over no more than $$$k$$$ traps. If you jump over a trap, it does not deal any damage to you. But there is an additional rule: if you jump over a trap, all next traps damages increase by $$$1$$$ (this is a bonus damage).Note that if you jump over a trap, you don't get any damage (neither base damage nor bonus damage). Also, the bonus damage stacks so, for example, if you go through a trap $$$i$$$ with base damage $$$a_i$$$, and you have already jumped over $$$3$$$ traps, you get $$$(a_i + 3)$$$ damage.You have to find the minimal damage that it is possible to get if you are allowed to jump over no more than $$$k$$$ traps.",
    "prob_desc_output_spec": "For each test case output a single integer — the minimal total damage that it is possible to get if you are allowed to jump over no more than $$$k$$$ traps.",
    "prob_desc_input_spec": "The input consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. Description of the test cases follows. The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$, $$$1 \\le k \\le n$$$) — the number of traps and the number of jump overs that you are allowed to make. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$) — base damage values of all traps. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_103.jsonl",
    "code_uid": "2b185b64c9d9b20ab03509783fc554cb",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n\\n4 4\\n\\n8 7 1 4\\n\\n4 1\\n\\n5 10 11 5\\n\\n7 5\\n\\n8 2 5 15 11 2 8\\n\\n6 3\\n\\n1 2 3 4 5 6\\n\\n1 1\\n\\n7\"]",
    "exec_outcome": "PASSED",
    "source_code": "def get_minimum_damage(trap_count: int, base_damage: list, jumps: int):\n    # check if all the traps can be jumped across\n    if trap_count <= jumps:\n        return 0\n    # store idx, val, profit/loss if jumped across = [(idx, value, profit)]\n    damage_loss_pairs = [(idx, val, val - (trap_count - idx) + 1) for idx, val in enumerate(base_damage)]\n\n    # sort based on profit\n    damage_loss_pairs.sort(key=lambda x: x[2], reverse=True)\n\n    # find the indices to be jumped across\n    jumbed_trap = damage_loss_pairs[:jumps]\n    other_trap = damage_loss_pairs[jumps:]\n    total_penalty = sum([trap_count - trap[0] - (jumps - idx ) for idx, trap in enumerate(jumbed_trap)])\n    # for i in range(jumps):\n    #     idx, _, _ = damage_loss_pairs.pop(0)  # pop the ones which give maximum profit\n    #     total_penalty += trap_count - idx - (jumps - i)\n    #     # skip_indices.add(idx)\n    damage_gained = sum(map(lambda x: x[1], other_trap)) + total_penalty\n\n    return damage_gained\n\nno_test  = int(input())\nfor _ in range(no_test):\n    num, no_of_jumsps = map(int, input().split())\n    numbers = list(map(int, input().split()))\n    damages = get_minimum_damage(num, numbers, no_of_jumsps)\n    print(damages)",
    "prob_desc_created_at": "1652970900",
    "tags": [
        "constructive algorithms",
        "greedy",
        "sortings"
    ],
    "hidden_unit_tests": ""
}