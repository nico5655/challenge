{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\\n1\\n0\"]",
    "src_uid": "8a6953a226abef41a44963c9b4998a25",
    "prob_desc_notes": null,
    "prob_desc_description": "There are $$$n$$$ programmers that you want to split into several non-empty teams. The skill of the $$$i$$$-th programmer is $$$a_i$$$. You want to assemble the maximum number of teams from them. There is a restriction for each team: the number of programmers in the team multiplied by the minimum skill among all programmers in the team must be at least $$$x$$$.Each programmer should belong to at most one team. Some programmers may be left without a team.Calculate the maximum number of teams that you can assemble.",
    "prob_desc_output_spec": "For each test case print one integer — the maximum number of teams that you can assemble. ",
    "prob_desc_input_spec": "The first line contains the integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases. The first line of each test case contains two integers $$$n$$$ and $$$x$$$ ($$$1 \\le n \\le 10^5; 1 \\le x \\le 10^9$$$) — the number of programmers and the restriction of team skill respectively. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots , a_n$$$ ($$$1 \\le a_i \\le 10^9$$$), where $$$a_i$$$ is the skill of the $$$i$$$-th programmer. The sum of $$$n$$$ over all inputs does not exceed $$$10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_015.jsonl",
    "code_uid": "c5677b31d21de164b9fc2b3aca44ea80",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n5 10\\n7 11 2 9 5\\n4 8\\n2 4 2 3\\n4 11\\n1 3 3 7\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\ndef rs(): return sys.stdin.readline().rstrip()\ndef ri(): return int(sys.stdin.readline())\ndef ria(): return list(map(int, sys.stdin.readline().split()))\ndef ws(s): sys.stdout.write(s); sys.stdout.write('\\n')\ndef wi(n): sys.stdout.write(str(n)); sys.stdout.write('\\n')\ndef wia(a, sep=' '): sys.stdout.write(sep.join([str(x) for x in a])); sys.stdout.write('\\n')\n\n\ndef can(t, n, x, a):\n    cnt = 0\n    mx = 10**9 + 1\n\n    c = 0\n    mn = mx\n    for i in range(n):\n        c += 1\n        mn = min(mn, a[i])\n        if c * mn >= x:\n            cnt += 1\n            c = 0\n            mn = mx\n            if cnt >= t:\n                return True\n    return False\n\n\ndef solve(n, x, a):\n    a = sorted(a, reverse=True)\n    lo = 0\n    hi = n + 1\n    while hi > lo + 1:\n        mid = (lo + hi) // 2\n        if can(mid, n, x, a):\n            lo = mid\n        else:\n            hi = mid\n    return lo\n\n\ndef main():\n    for _ in range(ri()):\n        n, x = ria()\n        a = ria()\n        wi(solve(n, x, a))\n\n\nif __name__ == '__main__':\n    main()\n",
    "prob_desc_created_at": "1594565100",
    "tags": [
        "dp",
        "greedy",
        "implementation",
        "sortings",
        "brute force"
    ],
    "hidden_unit_tests": ""
}