{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"6\", \"8\"]",
    "src_uid": "4695aa2b3590a0734ef2c6c580e471a9",
    "prob_desc_notes": "NoteConsider the first example.One option for Thanos is to burn the whole base $$$1-4$$$ with power $$$2 \\cdot 2 \\cdot 4 = 16$$$.Otherwise he can divide the base into two parts $$$1-2$$$ and $$$3-4$$$.For base $$$1-2$$$, he can either burn it with power $$$2 \\cdot 1 \\cdot 2 = 4$$$ or divide it into $$$2$$$ parts $$$1-1$$$ and $$$2-2$$$.For base $$$1-1$$$, he can burn it with power $$$2 \\cdot 1 \\cdot 1 = 2$$$. For $$$2-2$$$, he can destroy it with power $$$1$$$, as there are no avengers. So, the total power for destroying $$$1-2$$$ is $$$2 + 1 = 3$$$, which is less than $$$4$$$. Similarly, he needs $$$3$$$ power to destroy $$$3-4$$$. The total minimum power needed is $$$6$$$.",
    "prob_desc_description": "Thanos wants to destroy the avengers base, but he needs to destroy the avengers along with their base.Let we represent their base with an array, where each position can be occupied by many avengers, but one avenger can occupy only one position. Length of their base is a perfect power of $$$2$$$. Thanos wants to destroy the base using minimum power. He starts with the whole base and in one step he can do either of following:   if the current length is at least $$$2$$$, divide the base into $$$2$$$ equal halves and destroy them separately, or  burn the current base. If it contains no avenger in it, it takes $$$A$$$ amount of power, otherwise it takes his $$$B \\cdot n_a \\cdot l$$$ amount of power, where $$$n_a$$$ is the number of avengers and $$$l$$$ is the length of the current base. Output the minimum power needed by Thanos to destroy the avengers' base.",
    "prob_desc_output_spec": "Output one integer â€” the minimum power needed to destroy the avengers base.",
    "prob_desc_input_spec": "The first line contains four integers $$$n$$$, $$$k$$$, $$$A$$$ and $$$B$$$ ($$$1 \\leq n \\leq 30$$$, $$$1 \\leq k \\leq 10^5$$$, $$$1 \\leq A,B \\leq 10^4$$$), where $$$2^n$$$ is the length of the base, $$$k$$$ is the number of avengers and $$$A$$$ and $$$B$$$ are the constants explained in the question. The second line contains $$$k$$$ integers $$$a_{1}, a_{2}, a_{3}, \\ldots, a_{k}$$$ ($$$1 \\leq a_{i} \\leq 2^n$$$), where $$$a_{i}$$$ represents the position of avenger in the base.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_000.jsonl",
    "code_uid": "e7c3fd91e0f1a37d1a760cf4f3954780",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2 2 1 2\\n1 3\", \"3 2 1 2\\n1 7\"]",
    "exec_outcome": "PASSED",
    "source_code": "def inint():\n    return int(input())\ndef mp():\n    return map(int,input().split())\nfrom bisect import bisect,bisect_left\n    \ndef sol(i,j):\n    works=bisect(a,j)-bisect_left(a,i)\n    if works==0:return A\n    if i==j:return B*works\n    m=(i+j)>>1\n    return min(B*(j-i+1)*works,sol(i,m)+sol(m+1,j))    \n    \nn,k,A,B=mp()\na=list(mp())\na.sort()\n#print(a)\nprint(sol(1,2**n))\n",
    "prob_desc_created_at": "1549208100",
    "tags": [
        "binary search",
        "divide and conquer",
        "brute force",
        "math"
    ],
    "hidden_unit_tests": ""
}