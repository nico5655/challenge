{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"2\", \"1\", \"20\"]",
    "src_uid": "940dbb78c6a51276eebbd5e1491769e8",
    "prob_desc_notes": "NoteIn the first sample there are exactly two variants of arranging a beautiful fence of length 3:   As the first fence board use the board of the first type of length 1 and width 2. As the second board use board of the second type of length 2 and width 3.  Use one board of the second type after you turn it. That makes its length equal 3, and width — 2. ",
    "prob_desc_description": "Vasya has recently bought some land and decided to surround it with a wooden fence.He went to a company called \"Wooden board\" that produces wooden boards for fences. Vasya read in the catalog of products that the company has at its disposal n different types of wood. The company uses the i-th type of wood to produce a board of this type that is a rectangular ai by bi block.Vasya decided to order boards in this company and build a fence from them. It turned out that the storehouse of the company is so large that Vasya can order arbitrary number of boards of every type. Note that Vasya is allowed to turn the boards as he builds the fence. However, Vasya cannot turn square boards.Vasya is required to construct a fence of length l, however, an arbitrary fence won't do. Vasya wants his fence to look beautiful. We'll say that a fence is beautiful if and only if the following two conditions are fulfilled:  there are no two successive boards of the same type  the first board of the fence has an arbitrary length, and the length of each subsequent board equals the width of the previous one In other words, the fence is considered beautiful, if the type of the i-th board in the fence is different from the i - 1-th board's type; besides, the i-th board's length is equal to the i - 1-th board's width (for all i, starting from 2).Now Vasya wonders, how many variants of arranging a fence for his land exist. Your task is to count the number of different beautiful fences of length l.Two fences will be considered the same if the corresponding sequences of fence boards types and rotations are the same, otherwise the fences are different. Since the sought number can be large enough, you need to calculate the answer modulo 1000000007 (109 + 7).",
    "prob_desc_output_spec": "Print a single integer — the sought number of variants modulo 1000000007 (109 + 7).",
    "prob_desc_input_spec": "The first line contains two integers n and l (1 ≤ n ≤ 100, 1 ≤ l ≤ 3000) — the number of different board types and the fence length, correspondingly. Next n lines contain descriptions of board types: the i-th line contains two integers ai and bi (1 ≤ ai, bi ≤ 100) — the sizes of the board of the i-th type. All numbers on the lines are separated by spaces.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_063.jsonl",
    "code_uid": "26cd846542e5e36c650a4324433e674c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2 3\\n1 2\\n2 3\", \"1 2\\n2 2\", \"6 6\\n2 1\\n3 2\\n2 5\\n3 3\\n5 1\\n2 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin\n\nm = 1000000007\nn, l = map(int, stdin.readline().split())\ne = []\nfor i in xrange(n):\n    a, b = map(int, stdin.readline().split())\n    e.append((a, b, i))\n    if a != b: e.append((b, a, i))\nn = len(e)\ne.sort()\n\nu = [[] for i in xrange(101)]\nfor i in xrange(n):\n    u[e[i][1]].append((e[i][0], e[i][1], e[i][2], i))\n\nd = [[0] * n for i in xrange(l + 1)]\nfor i in xrange(l + 1):\n    for j in reversed(xrange(i)):\n        r = i - j\n        if r > 100: break\n        f = 0\n        while f < n:\n            if e[f][0] > r: break\n            if e[f][0] == r:\n                if j == 0:\n                    d[i][f] = 1\n                else:\n                    g = 0\n                    while g < len(u[r]):\n                        if e[f][2] != u[r][g][2]:\n                            d[i][f] = (d[i][f] + d[j][u[r][g][3]]) % m\n                        g += 1\n            f += 1\n\nprint sum(d[-1]) % m\n",
    "prob_desc_created_at": "1335280200",
    "tags": [
        "dp"
    ],
    "hidden_unit_tests": ""
}