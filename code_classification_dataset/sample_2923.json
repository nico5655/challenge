{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"0 0 0 6\", \"2 2 6 2 2 6 2 2\"]",
    "src_uid": "3203c1f242ddbaad03270705e1806fc4",
    "prob_desc_notes": "NoteIn the first test, each wise man knows each other, so every permutation will produce the string $$$11$$$.In the second test:  If $$$p = \\{1, 2, 3, 4\\}$$$, the produced string is $$$101$$$, because wise men $$$1$$$ and $$$2$$$ know each other, $$$2$$$ and $$$3$$$ don't know each other, and $$$3$$$ and $$$4$$$ know each other;  If $$$p = \\{4, 1, 2, 3\\}$$$, the produced string is $$$110$$$, because wise men $$$1$$$ and $$$4$$$ know each other, $$$1$$$ and $$$2$$$ know each other and $$$2$$$, and $$$3$$$ don't know each other;  If $$$p = \\{1, 3, 2, 4\\}$$$, the produced string is $$$000$$$, because wise men $$$1$$$ and $$$3$$$ don't know each other, $$$3$$$ and $$$2$$$ don't know each other, and $$$2$$$ and $$$4$$$ don't know each other. ",
    "prob_desc_description": "This is the easy version of the problem. The difference is constraints on the number of wise men and the time limit. You can make hacks only if all versions of this task are solved.$$$n$$$ wise men live in a beautiful city. Some of them know each other.For each of the $$$n!$$$ possible permutations $$$p_1, p_2, \\ldots, p_n$$$ of the wise men, let's generate a binary string of length $$$n-1$$$: for each $$$1 \\leq i &lt; n$$$ set $$$s_i=1$$$ if $$$p_i$$$ and $$$p_{i+1}$$$ know each other, and $$$s_i=0$$$ otherwise. For all possible $$$2^{n-1}$$$ binary strings, find the number of permutations that produce this binary string.",
    "prob_desc_output_spec": "Print $$$2^{n-1}$$$ space-separated integers. For each $$$0 \\leq x &lt; 2^{n-1}$$$:   Let's consider a string $$$s$$$ of length $$$n-1$$$, such that $$$s_i = \\lfloor \\frac{x}{2^{i-1}} \\rfloor \\bmod 2$$$ for all $$$1 \\leq i \\leq n - 1$$$.  The $$$(x+1)$$$-th number should be equal to the required answer for $$$s$$$. ",
    "prob_desc_input_spec": "The first line of input contains one integer $$$n$$$ ($$$2 \\leq n \\leq 14)$$$  — the number of wise men in the city. The next $$$n$$$ lines contain a binary string of length $$$n$$$ each, such that the $$$j$$$-th character of the $$$i$$$-th string is equal to '1' if wise man $$$i$$$ knows wise man $$$j$$$, and equals '0' otherwise. It is guaranteed that if the $$$i$$$-th man knows the $$$j$$$-th man, then the $$$j$$$-th man knows $$$i$$$-th man and no man knows himself.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2600,
    "file_name": "train_035.jsonl",
    "code_uid": "b757f3ccb06ac148079ce39ef4ed91ee",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n011\\n101\\n110\", \"4\\n0101\\n1000\\n0001\\n1010\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdout\n\nn = int(input())\n\n\nclass Person:\n\n    num = n - 1\n\n    def __init__(self, rel):\n        self.relationship = int(rel, 2)\n\n    def __getitem__(self, k):\n        return (self.relationship >> Person.num - k) & 1\n\n\nrel = [Person(input()) for _ in range(n)]\n\ndp = [[0] * n for _ in range(1 << n)]\n\nfor people in range(1, 1 << n):\n    ones = [i for i in range(n) if people & (1 << i)]\n    # print(f'ones: {ones}')\n    one_num = len(ones)\n\n    if one_num == 1:\n        dp[people][ones[0]] = [1]\n        continue\n\n    for i in ones:\n        dp[people][i] = [0] * (1 << one_num - 1)\n        pre_people = people ^ (1 << i)\n        for j in ones:\n            if j == i:\n                continue\n            for pre_s, times in enumerate(dp[pre_people][j]):\n                s = pre_s | (rel[j][i] << one_num - 2)\n                # print(f'dp[{people}][{i}][{s}]: {dp[people][i][s]}')\n                dp[people][i][s] += times\n\npeople = (1 << n) - 1\n\nfor s in range(1 << (n-1)):\n    ans = 0\n    for i in range(n):\n        ans += dp[people][i][s]\n    print(ans, end=' ')",
    "prob_desc_created_at": "1584628500",
    "tags": [
        "dp",
        "meet-in-the-middle",
        "bitmasks",
        "brute force"
    ],
    "hidden_unit_tests": ""
}