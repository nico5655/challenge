{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\\nNO\\nYES\\nNO\\nYES\\nNO\\nNO\"]",
    "src_uid": "6fbf41dc32d1c28351d78a9ec5fc0026",
    "prob_desc_notes": "NoteIn the first test case, one possible solution is $$$a_1=qw$$$ and $$$a_2=q$$$.In the third test case, one possible solution is $$$a_1=i$$$ and $$$a_2=o$$$.In the fifth test case, one possible solution is $$$a_1=dokidokiliteratureclub$$$.",
    "prob_desc_description": "Kawashiro Nitori is a girl who loves competitive programming.One day she found a string and an integer. As an advanced problem setter, she quickly thought of a problem.Given a string $$$s$$$ and a parameter $$$k$$$, you need to check if there exist $$$k+1$$$ non-empty strings $$$a_1,a_2...,a_{k+1}$$$, such that $$$$$$s=a_1+a_2+\\ldots +a_k+a_{k+1}+R(a_k)+R(a_{k-1})+\\ldots+R(a_{1}).$$$$$$ Here $$$+$$$ represents concatenation. We define $$$R(x)$$$ as a reversed string $$$x$$$. For example $$$R(abcd) = dcba$$$. Note that in the formula above the part $$$R(a_{k+1})$$$ is intentionally skipped.",
    "prob_desc_output_spec": "For each test case, print \"YES\" (without quotes), if it is possible to find $$$a_1,a_2,\\ldots,a_{k+1}$$$, and \"NO\" (without quotes) otherwise. You can print letters in any case (upper or lower).",
    "prob_desc_input_spec": "The input consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1\\le t\\le 100$$$)  — the number of test cases. The description of the test cases follows. The first line of each test case description contains two integers $$$n$$$, $$$k$$$ ($$$1\\le n\\le 100$$$, $$$0\\le k\\le \\lfloor \\frac{n}{2} \\rfloor$$$)  — the length of the string $$$s$$$ and the parameter $$$k$$$. The second line of each test case description contains a single string $$$s$$$ of length $$$n$$$, consisting of lowercase English letters.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 900,
    "file_name": "train_104.jsonl",
    "code_uid": "e4cb3baf5bbc56a627985e73b5d1c1e1",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7\\n5 1\\nqwqwq\\n2 1\\nab\\n3 1\\nioi\\n4 2\\nicpc\\n22 0\\ndokidokiliteratureclub\\n19 8\\nimteamshanghaialice\\n6 3\\naaaaaa\"]",
    "exec_outcome": "PASSED",
    "source_code": "ans_list = []\r\nfor i in range(int(input())):\r\n\tn, k = map(int, input().split())\r\n\tstrings = input()\r\n\r\n\tskip = False\r\n\tif(n == 2 * k):\r\n\t\tans_list.append(\"NO\")\r\n\t\tcontinue\r\n\r\n\tfor i in range(k):\r\n\t\tif(strings[i] == strings[n - 1 - i]):\r\n\t\t\tpass\r\n\t\telse:\r\n\t\t\tans_list.append(\"NO\")\r\n\t\t\tskip = True\r\n\t\t\tbreak\r\n\r\n\tif(skip == False):\r\n\t\tans_list.append(\"YES\")\r\n\r\nfor ans in ans_list:\r\n\tprint(ans)\r\n\r\n",
    "prob_desc_created_at": "1615377900",
    "tags": [
        "brute force",
        "constructive algorithms",
        "greedy",
        "strings"
    ],
    "hidden_unit_tests": ""
}