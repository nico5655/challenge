{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\\n3 3\\n3 2\", \"-1\", \"3\\n2 6\\n1 3\\n7 8\"]",
    "src_uid": "181199a0cf37c83cec1ba28d343b50ae",
    "prob_desc_notes": "NoteIn the first example two operations are enough. For example, you can swap the third letter in $$$s$$$ with the third letter in $$$t$$$. Then $$$s = $$$ \"abbb\", $$$t = $$$ \"aaab\". Then swap the third letter in $$$s$$$ and the second letter in $$$t$$$. Then both $$$s$$$ and $$$t$$$ are equal to \"abab\".In the second example it's impossible to make two strings equal.",
    "prob_desc_description": "Monocarp has got two strings $$$s$$$ and $$$t$$$ having equal length. Both strings consist of lowercase Latin letters \"a\" and \"b\". Monocarp wants to make these two strings $$$s$$$ and $$$t$$$ equal to each other. He can do the following operation any number of times: choose an index $$$pos_1$$$ in the string $$$s$$$, choose an index $$$pos_2$$$ in the string $$$t$$$, and swap $$$s_{pos_1}$$$ with $$$t_{pos_2}$$$.You have to determine the minimum number of operations Monocarp has to perform to make $$$s$$$ and $$$t$$$ equal, and print any optimal sequence of operations — or say that it is impossible to make these strings equal.",
    "prob_desc_output_spec": "If it is impossible to make these strings equal, print $$$-1$$$. Otherwise, in the first line print $$$k$$$ — the minimum number of operations required to make the strings equal. In each of the next $$$k$$$ lines print two integers — the index in the string $$$s$$$ and the index in the string $$$t$$$ that should be used in the corresponding swap operation. ",
    "prob_desc_input_spec": "The first line contains one integer $$$n$$$ $$$(1 \\le n \\le 2 \\cdot 10^{5})$$$ — the length of $$$s$$$ and $$$t$$$. The second line contains one string $$$s$$$ consisting of $$$n$$$ characters \"a\" and \"b\".  The third line contains one string $$$t$$$ consisting of $$$n$$$ characters \"a\" and \"b\". ",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_003.jsonl",
    "code_uid": "c75bb89eeffea54482414b1a09b8a43d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\nabab\\naabb\", \"1\\na\\nb\", \"8\\nbabbaabb\\nabababaa\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nimport collections\nimport bisect\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 6)\nimport math\nn = int(raw_input())\nS = raw_input()\nT = raw_input()\n\ncnt = collections.Counter(S) + collections.Counter(T)\nif not all(v & 1 == 0 for v in cnt.values()):\n    print('-1')\n    exit()\nwrong = collections.defaultdict(list)\nfor i in xrange(n):\n    if S[i] != T[i]:\n        wrong[S[i]].append(i)\n        \nres = []\nakeys = wrong['a']\nfor key in xrange(0, len(akeys), 2):\n    if key+1 < len(akeys):\n        res.append((akeys[key], akeys[key+1]))\nbkeys = wrong['b']\nfor key in xrange(0, len(bkeys), 2):\n    if key+1 < len(bkeys):\n        res.append((bkeys[key], bkeys[key+1]))\nif len(akeys) & 1 == 1:\n    res.append((akeys[-1], akeys[-1]))\n    res.append((akeys[-1], bkeys[-1]))\n\nprint(len(res))\nfor a, b in res:\n    print('%s %s' % (a+1, b+1))\n",
    "prob_desc_created_at": "1568543700",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "hidden_unit_tests": ""
}