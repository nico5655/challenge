{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"0\\n1\\n4 1 3 4 5 \\n1\\n3 3 5 6\"]",
    "src_uid": "f472f9df8b4d588c67b39df6865507ca",
    "prob_desc_notes": "NoteIn the first test case, the binary string is already sorted in non-decreasing order.In the second test case, we can perform the following operation:   $$$k = 4:$$$ choose the indices $$$\\{1, 3, 4, 5\\}$$$$$$\\underline{1}$$$ $$$0$$$ $$$\\underline{1}$$$ $$$\\underline{0}$$$ $$$\\underline{0}$$$ $$$\\rightarrow $$$ $$$\\underline{0}$$$ $$$0$$$ $$$\\underline{0}$$$ $$$\\underline{1}$$$ $$$\\underline{1}$$$ In the third test case, we can perform the following operation:  $$$k = 3:$$$ choose the indices $$$\\{3, 5, 6\\}$$$$$$0$$$ $$$0$$$ $$$\\underline{1}$$$ $$$0$$$ $$$\\underline{0}$$$ $$$\\underline{0}$$$ $$$\\rightarrow $$$ $$$0$$$ $$$0$$$ $$$\\underline{0}$$$ $$$0$$$ $$$\\underline{0}$$$ $$$\\underline{1}$$$",
    "prob_desc_description": "Ashish has a binary string $$$s$$$ of length $$$n$$$ that he wants to sort in non-decreasing order.He can perform the following operation:   Choose a subsequence of any length such that its elements are in non-increasing order. Formally, choose any $$$k$$$ such that $$$1 \\leq k \\leq n$$$ and any sequence of $$$k$$$ indices $$$1 \\le i_1 \\lt i_2 \\lt \\ldots \\lt i_k \\le n$$$ such that $$$s_{i_1} \\ge s_{i_2} \\ge \\ldots \\ge s_{i_k}$$$.  Reverse this subsequence in-place. Formally, swap $$$s_{i_1}$$$ with $$$s_{i_k}$$$, swap $$$s_{i_2}$$$ with $$$s_{i_{k-1}}$$$, $$$\\ldots$$$ and swap $$$s_{i_{\\lfloor k/2 \\rfloor}}$$$ with $$$s_{i_{\\lceil k/2 \\rceil + 1}}$$$ (Here $$$\\lfloor x \\rfloor$$$ denotes the largest integer not exceeding $$$x$$$, and $$$\\lceil x \\rceil$$$ denotes the smallest integer not less than $$$x$$$) Find the minimum number of operations required to sort the string in non-decreasing order. It can be proven that it is always possible to sort the given binary string in at most $$$n$$$ operations.",
    "prob_desc_output_spec": "For each test case output the following:   The minimum number of operations $$$m$$$ in the first line ($$$0 \\le m \\le n$$$).  Each of the following $$$m$$$ lines should be of the form: $$$k$$$ $$$i_1$$$ $$$i_2$$$ ... $$$i_{k}$$$, where $$$k$$$ is the length and $$$i_1 \\lt i_2 \\lt ... \\lt i_{k}$$$ are the indices of the chosen subsequence. For them the conditions from the statement must hold. ",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ $$$(1 \\le t \\le 1000)$$$  — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer $$$n$$$ $$$(1 \\le n \\le 1000)$$$  — the length of the binary string $$$s$$$. The second line of each test case contains a binary string $$$s$$$ of length $$$n$$$ containing only $$$0$$$s and $$$1$$$s. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$1000$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1000,
    "file_name": "train_097.jsonl",
    "code_uid": "c93ac37a1ad6504f944938ceef11deff",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n7\\n0011111\\n5\\n10100\\n6\\n001000\"]",
    "exec_outcome": "PASSED",
    "source_code": "for _ in range(int(input())):\r\n    n=int(input())\r\n    a=list(input())\r\n    if a==sorted(a):\r\n        print(0)\r\n    else:\r\n        for i in range(n-1,-1,-1):\r\n            if a[i]==\"0\":\r\n                temp=i\r\n                break\r\n        for i in range(n):\r\n            if a[i]==\"1\":\r\n                temp1=i\r\n                break\r\n        arr=a[:temp+1]\r\n        one=[];zero=[]\r\n        print(1)\r\n        for i in range(n):\r\n            if a[i]==\"0\" and i>=temp1 and i<=temp:\r\n                zero.append(i+1)\r\n            elif a[i]==\"1\" and i<=temp and i>=temp1:\r\n                one.append(i+1)\r\n        zero=list(reversed(zero))\r\n        le=len(zero)\r\n        fin=[]\r\n        for i in range(len(one)):\r\n            if i<=le-1 and one[i]<zero[i]:\r\n                fin.append(zero[i])\r\n                fin.append(one[i])\r\n        le=len(fin)\r\n        fin.sort()\r\n        print(le,end=\" \")\r\n        for i in fin:\r\n            print(i,end=\" \")\r\n        print(\"\\n\",end=\"\")",
    "prob_desc_created_at": "1636727700",
    "tags": [
        "greedy",
        "sortings"
    ],
    "hidden_unit_tests": ""
}