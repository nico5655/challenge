{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"0\\n1\\n2\"]",
    "src_uid": "58dfab2a45314bbf93c20604e047e7b7",
    "prob_desc_notes": "NoteIn the first test case, there is only one vertex, so you don't need any queries.In the second test case, you can ask a single query about the node $$$1$$$. Then, if $$$x = 1$$$, you will get $$$0$$$, otherwise you will get $$$1$$$.",
    "prob_desc_description": "The only difference between this problem and D1 is the bound on the size of the tree.You are given an unrooted tree with $$$n$$$ vertices. There is some hidden vertex $$$x$$$ in that tree that you are trying to find.To do this, you may ask $$$k$$$ queries $$$v_1, v_2, \\ldots, v_k$$$ where the $$$v_i$$$ are vertices in the tree. After you are finished asking all of the queries, you are given $$$k$$$ numbers $$$d_1, d_2, \\ldots, d_k$$$, where $$$d_i$$$ is the number of edges on the shortest path between $$$v_i$$$ and $$$x$$$. Note that you know which distance corresponds to which query.What is the minimum $$$k$$$ such that there exists some queries $$$v_1, v_2, \\ldots, v_k$$$ that let you always uniquely identify $$$x$$$ (no matter what $$$x$$$ is).Note that you don't actually need to output these queries.",
    "prob_desc_output_spec": "For each test case print a single nonnegative integer, the minimum number of queries you need, on its own line.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^4$$$). Description of the test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 2\\cdot10^5$$$)  — the number of vertices in the tree. Each of the next $$$n-1$$$ lines contains two integers $$$x$$$ and $$$y$$$ ($$$1 \\le x, y \\le n$$$), meaning there is an edges between vertices $$$x$$$ and $$$y$$$ in the tree. It is guaranteed that the given edges form a tree. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_089.jsonl",
    "code_uid": "0785a932dfd5fe17a37d293ec3fe7321",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n\\n1\\n\\n2\\n\\n1 2\\n\\n10\\n\\n2 4\\n\\n2 1\\n\\n5 7\\n\\n3 10\\n\\n8 6\\n\\n6 1\\n\\n1 3\\n\\n4 7\\n\\n9 6\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import deque;I=input\r\ndef f(x,pre):\r\n  q=deque([(x,pre)]);dp=[0]*(n+1);R=[]\r\n  while q:\r\n    u,p=q.popleft()\r\n    R.append((u))\r\n    for v in g[u]:\r\n        if v!=p:g[v].remove(u);q.append((v,u))\r\n  for u in R[::-1]:\r\n    z=c=0\r\n    for v in g[u]:\r\n      z+=dp[v]\r\n      if dp[v]==0:c+=1\r\n      dp[u]=z+max(0,c-1)\r\n  return dp[x]\r\nfor _ in [0]*int(I()):\r\n  n=int(I());g=[[] for _ in range(n+1)]\r\n  for _ in range(n-1):\r\n    u,v=map(int,I().split());g[u].append(v);g[v].append(u)\r\n  if n==1:z=0\r\n  else:\r\n    for u in range(1,n+1):\r\n      if len(g[u])>=3:z=f(u,0);break\r\n    else:z=1\r\n  print(z)",
    "prob_desc_created_at": "1655562900",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "dp",
        "greedy",
        "trees"
    ],
    "hidden_unit_tests": ""
}