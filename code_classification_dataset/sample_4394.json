{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\", \"3\"]",
    "src_uid": "c6c07ef23cf2def9f99cbfb6076c9810",
    "prob_desc_notes": "NoteIn the first example you can invite two students with levels $$$2$$$ and $$$11$$$. Then you can split the students into two stable groups:   $$$[1, 1, 2, 5, 8, 11, 12, 13]$$$,  $$$[20, 22]$$$. In the second example you are not allowed to invite new students, so you need $$$3$$$ groups:   $$$[1, 1, 5, 5, 20, 20]$$$  $$$[60, 70, 70, 70, 80, 90]$$$  $$$[420]$$$ ",
    "prob_desc_description": "There are $$$n$$$ students numerated from $$$1$$$ to $$$n$$$. The level of the $$$i$$$-th student is $$$a_i$$$. You need to split the students into stable groups. A group of students is called stable, if in the sorted array of their levels no two neighboring elements differ by more than $$$x$$$.For example, if $$$x = 4$$$, then the group with levels $$$[1, 10, 8, 4, 4]$$$ is stable (because $$$4 - 1 \\le x$$$, $$$4 - 4 \\le x$$$, $$$8 - 4 \\le x$$$, $$$10 - 8 \\le x$$$), while the group with levels $$$[2, 10, 10, 7]$$$ is not stable ($$$7 - 2 = 5 &gt; x$$$).Apart from the $$$n$$$ given students, teachers can invite at most $$$k$$$ additional students with arbitrary levels (at teachers' choice). Find the minimum number of stable groups teachers can form from all students (including the newly invited).For example, if there are two students with levels $$$1$$$ and $$$5$$$; $$$x = 2$$$; and $$$k \\ge 1$$$, then you can invite a new student with level $$$3$$$ and put all the students in one stable group.",
    "prob_desc_output_spec": "In the only line print a single integer: the minimum number of stable groups you can split the students into.",
    "prob_desc_input_spec": "The first line contains three integers $$$n$$$, $$$k$$$, $$$x$$$ ($$$1 \\le n \\le 200\\,000$$$, $$$0 \\le k \\le 10^{18}$$$, $$$1 \\le x \\le 10^{18}$$$) — the initial number of students, the number of students you can additionally invite, and the maximum allowed level difference. The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^{18}$$$) — the students levels.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1200,
    "file_name": "train_096.jsonl",
    "code_uid": "757032f8f71e34a4bb23b2893f4808c9",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"8 2 3\\n1 1 5 8 12 13 20 22\", \"13 0 37\\n20 20 80 70 70 70 420 5 1 5 1 60 90\"]",
    "exec_outcome": "PASSED",
    "source_code": "# python\r\nimport os\r\nimport sys; import math\r\nfrom io import BytesIO, IOBase\r\nfrom operator import itemgetter\r\n\r\ndef solve():\r\n    n,k,x = [int(x) for x in input().split()]\r\n    a = sorted([int(x) for x in input().split()])\r\n    diff = []\r\n    for i in range(n-1):\r\n        temp = abs(a[i]-a[i+1])\r\n        if temp > x:\r\n            diff.append(temp) \r\n    diff.sort(); #print(diff)\r\n    ans = len(diff) + 1\r\n    for i in range(len(diff)):\r\n        k -= (diff[i] - 1)//x\r\n        if kc(k) == False:\r\n            break\r\n        else:\r\n            ans -= 1\r\n    print(ans) \r\n\r\ndef kc(k):\r\n    if k < 0: return False\r\n    else: return True\r\n\r\n\r\ndef upperbound(arr,val):\r\n    start = 0; end = len(arr) - 1; ans = -1\r\n    while (start <= end):\r\n        mid = (start + end) // 2\r\n        if (arr[mid] <= val):\r\n            start = mid + 1\r\n        else:\r\n            ans = mid\r\n            end = mid - 1\r\n    return ans\r\ndef lowerbound(arr,val):\r\n    length = len(arr); answer = -1; start = 0; end = length - 1    \r\n    while start <= end:\r\n        middle = (start + end)//2    \r\n        if arr[middle] == val:\r\n            answer = middle\r\n            end = middle - 1\r\n        elif arr[middle] > val:\r\n            end = middle - 1    \r\n        else:\r\n            start = middle + 1\r\n    return answer\r\ndef D2B(n):\r\n    arr = []\r\n    while (n > 0):\r\n        temp = n; m = 0; p = 1\r\n        while (temp):\r\n            rem = temp % 10; temp = int(temp/10)\r\n            if (rem != 0):\r\n                m += p;\r\n            p *= 10;\r\n        arr.append(m); n = n - m;\r\n    return arr\r\ndef sort2D(arr,axis):\r\n    arr = sorted(arr, key = itemgetter(axis)); return arr\r\ndef DD(rows,cols):\r\n    arr = [[0 for i in range(cols)] for j in range(rows)]; return arr\r\n# region fastio\r\n\r\nBUFSIZE = 8192\r\n\r\n\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n\r\n# endregion\r\nif(os.path.exists('input.txt')):\r\n    sys.stdin = open(\"input.txt\",\"r\")\r\n    sys.stdout = open(\"output.txt\",\"w\")\r\n\r\nf = 0\r\n\r\nif __name__ == \"__main__\":\r\n    if f == 1:\r\n        t = int(input())\r\n        while(t):\r\n            solve(); t -= 1\r\n    else: solve()",
    "prob_desc_created_at": "1624183500",
    "tags": [
        "greedy",
        "sortings"
    ],
    "hidden_unit_tests": ""
}