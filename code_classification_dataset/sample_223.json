{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"40\", \"400\", \"160\"]",
    "src_uid": "2e6bf9154d9da6ac134b52144d5322ca",
    "prob_desc_notes": "NoteOne of the optimal sequence of actions in the first sample is:  First, remove part 3, cost of the action is 20.  Then, remove part 2, cost of the action is 10.  Next, remove part 4, cost of the action is 10.  At last, remove part 1, cost of the action is 0. So the total energy the child paid is 20 + 10 + 10 + 0 = 40, which is the minimum.In the second sample, the child will spend 400 no matter in what order he will remove the parts.",
    "prob_desc_description": "On Children's Day, the child got a toy from Delayyy as a present. However, the child is so naughty that he can't wait to destroy the toy.The toy consists of n parts and m ropes. Each rope links two parts, but every pair of parts is linked by at most one rope. To split the toy, the child must remove all its parts. The child can remove a single part at a time, and each remove consume an energy. Let's define an energy value of part i as vi. The child spend vf1 + vf2 + ... + vfk energy for removing part i where f1, f2, ..., fk are the parts that are directly connected to the i-th and haven't been removed.Help the child to find out, what is the minimum total energy he should spend to remove all n parts.",
    "prob_desc_output_spec": "Output the minimum total energy the child should spend to remove all n parts of the toy.",
    "prob_desc_input_spec": "The first line contains two integers n and m (1 ≤ n ≤ 1000; 0 ≤ m ≤ 2000). The second line contains n integers: v1, v2, ..., vn (0 ≤ vi ≤ 105). Then followed m lines, each line contains two integers xi and yi, representing a rope from part xi to part yi (1 ≤ xi, yi ≤ n; xi ≠ yi). Consider all the parts are numbered from 1 to n.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_001.jsonl",
    "code_uid": "b844a54d6f487f1eef372cc3c2fc9997",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 3\\n10 20 30 40\\n1 4\\n1 2\\n2 3\", \"4 4\\n100 100 100 100\\n1 2\\n2 3\\n2 4\\n3 4\", \"7 10\\n40 10 20 10 20 80 40\\n1 5\\n4 7\\n4 5\\n5 2\\n5 7\\n6 4\\n1 6\\n1 3\\n4 3\\n1 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "'''\nCreated on ٠١‏/٠١‏/٢٠١٥\n\n@author: mohamed265\n'''\nt = input().split()\nn = int(t[0])\nm = int(t[1])\nslon = 0\nnum = [int(x) for x in input().split()]\nfor i in range(m):\n    t = input().split()\n    slon += min(num[int(t[0])-1] , num[int(t[1])-1])\nprint(slon)",
    "prob_desc_created_at": "1401627600",
    "tags": [
        "sortings",
        "greedy",
        "graphs"
    ],
    "hidden_unit_tests": ""
}