{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\\n2\\n3 7 \\n5\\n7 4 3 2 1\", \"YES\\n1\\n3 \\n4\\n5 4 3 1\", \"NO\", \"YES\\n0\\n\\n5\\n4 3 2 1 0\"]",
    "src_uid": "cdb19d87ad3713dac104252737153411",
    "prob_desc_notes": null,
    "prob_desc_description": "Two integer sequences existed initially — one of them was strictly increasing, and the other one — strictly decreasing.Strictly increasing sequence is a sequence of integers $$$[x_1 &lt; x_2 &lt; \\dots &lt; x_k]$$$. And strictly decreasing sequence is a sequence of integers $$$[y_1 &gt; y_2 &gt; \\dots &gt; y_l]$$$. Note that the empty sequence and the sequence consisting of one element can be considered as increasing or decreasing.They were merged into one sequence $$$a$$$. After that sequence $$$a$$$ got shuffled. For example, some of the possible resulting sequences $$$a$$$ for an increasing sequence $$$[1, 3, 4]$$$ and a decreasing sequence $$$[10, 4, 2]$$$ are sequences $$$[1, 2, 3, 4, 4, 10]$$$ or $$$[4, 2, 1, 10, 4, 3]$$$.This shuffled sequence $$$a$$$ is given in the input.Your task is to find any two suitable initial sequences. One of them should be strictly increasing and the other one — strictly decreasing. Note that the empty sequence and the sequence consisting of one element can be considered as increasing or decreasing.If there is a contradiction in the input and it is impossible to split the given sequence $$$a$$$ to increasing and decreasing sequences, print \"NO\".",
    "prob_desc_output_spec": "If there is a contradiction in the input and it is impossible to split the given sequence $$$a$$$ to increasing and decreasing sequences, print \"NO\" in the first line. Otherwise print \"YES\" in the first line and any two suitable sequences. Note that the empty sequence and the sequence consisting of one element can be considered as increasing or decreasing. In the second line print $$$n_i$$$ — the number of elements in the strictly increasing sequence. $$$n_i$$$ can be zero, in this case the increasing sequence is empty. In the third line print $$$n_i$$$ integers $$$inc_1, inc_2, \\dots, inc_{n_i}$$$ in the increasing order of its values ($$$inc_1 &lt; inc_2 &lt; \\dots &lt; inc_{n_i}$$$) — the strictly increasing sequence itself. You can keep this line empty if $$$n_i = 0$$$ (or just print the empty line). In the fourth line print $$$n_d$$$ — the number of elements in the strictly decreasing sequence. $$$n_d$$$ can be zero, in this case the decreasing sequence is empty. In the fifth line print $$$n_d$$$ integers $$$dec_1, dec_2, \\dots, dec_{n_d}$$$ in the decreasing order of its values ($$$dec_1 &gt; dec_2 &gt; \\dots &gt; dec_{n_d}$$$) — the strictly decreasing sequence itself. You can keep this line empty if $$$n_d = 0$$$ (or just print the empty line). $$$n_i + n_d$$$ should be equal to $$$n$$$ and the union of printed sequences should be a permutation of the given sequence (in case of \"YES\" answer).",
    "prob_desc_input_spec": "The first line of the input contains one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the number of elements in $$$a$$$. The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$0 \\le a_i \\le 2 \\cdot 10^5$$$), where $$$a_i$$$ is the $$$i$$$-th element of $$$a$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1000,
    "file_name": "train_034.jsonl",
    "code_uid": "8bf28a1233333b6f7e6eed2e4dc36147",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7\\n7 2 7 3 3 1 4\", \"5\\n4 3 1 5 3\", \"5\\n1 1 2 1 2\", \"5\\n0 1 2 3 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "n=int(raw_input())\nif n == 1:\n    a=map(int,raw_input().split())\n    print \"YES\"\n    print 1\n    print a[0]\n    print 0\n    print \"\"\nelse:\n    check = {}\n    a=map(int,raw_input().split())\n    a = sorted(a)\n    for i in a:\n        if i not in check:\n            check.update({i:1})\n        else:\n            check.update({i:check[i]+1})\n    flag = 0\n    for i in check:\n        if check[i] > 2:\n            flag = -1\n            break\n    if flag == -1:\n        print \"NO\"\n    else:\n        print \"YES\"\n        p=[]\n        q=[]\n        for i in check:\n            if check[i] == 1:\n                p.append(i)\n            else:\n                p.append(i)\n                q.append(i)\n        p=sorted(p)\n        q= sorted(q)\n        q=q[::-1]\n        print len(p)\n        print \" \".join(map(str,p))\n        print len(q)\n        print \" \".join(map(str,q))\n        ",
    "prob_desc_created_at": "1554041100",
    "tags": [
        "constructive algorithms",
        "sortings"
    ],
    "hidden_unit_tests": ""
}