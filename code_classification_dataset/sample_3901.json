{
    "prob_desc_time_limit": "5 seconds",
    "prob_desc_sample_outputs": "[\"2\\n0\\n1\\n0\"]",
    "src_uid": "5984e49e7e03c16d7b20ad85288b62b8",
    "prob_desc_notes": "NoteIn the first test case, removing $$$7$$$ and $$$14$$$ will make array $$$a$$$ beautiful.In the second test case, the array $$$a$$$ is already beautiful.In the third test case, removing one of the elements $$$45$$$ or $$$18$$$ will make the array $$$a$$$ beautiful.In the fourth test case, the array $$$a$$$ is beautiful.",
    "prob_desc_description": "Polycarp found on the street an array $$$a$$$ of $$$n$$$ elements.Polycarp invented his criterion for the beauty of an array. He calls an array $$$a$$$ beautiful if at least one of the following conditions must be met for each different pair of indices $$$i \\ne j$$$:   $$$a_i$$$ is divisible by $$$a_j$$$;  or $$$a_j$$$ is divisible by $$$a_i$$$. For example, if:   $$$n=5$$$ and $$$a=[7, 9, 3, 14, 63]$$$, then the $$$a$$$ array is not beautiful (for $$$i=4$$$ and $$$j=2$$$, none of the conditions above is met);  $$$n=3$$$ and $$$a=[2, 14, 42]$$$, then the $$$a$$$ array is beautiful;  $$$n=4$$$ and $$$a=[45, 9, 3, 18]$$$, then the $$$a$$$ array is not beautiful (for $$$i=1$$$ and $$$j=4$$$ none of the conditions above is met); Ugly arrays upset Polycarp, so he wants to remove some elements from the array $$$a$$$ so that it becomes beautiful. Help Polycarp determine the smallest number of elements to remove to make the array $$$a$$$ beautiful.",
    "prob_desc_output_spec": "For each test case output one integer — the minimum number of elements that must be removed to make the array $$$a$$$ beautiful.",
    "prob_desc_input_spec": "The first line contains one integer $$$t$$$ ($$$1 \\leq t \\leq 10$$$) — the number of test cases. Then $$$t$$$ test cases follow. The first line of each test case contains one integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) — the length of the array $$$a$$$. The second line of each test case contains $$$n$$$ numbers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 2 \\cdot 10^5$$$) — elements of the array $$$a$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_086.jsonl",
    "code_uid": "73ec761a17ca0d448de2556b4d08a33d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n5\\n7 9 3 14 63\\n3\\n2 14 42\\n4\\n45 9 3 18\\n3\\n2 2 8\"]",
    "exec_outcome": "PASSED",
    "source_code": "import os,sys\r\nfrom random import randint, shuffle\r\nfrom io import BytesIO, IOBase\r\n\r\nfrom collections import defaultdict,deque,Counter\r\nfrom bisect import bisect_left,bisect_right\r\nfrom heapq import heappush,heappop\r\nfrom functools import lru_cache\r\nfrom itertools import accumulate, permutations\r\nimport math\r\n\r\n# Fast IO Region\r\nBUFSIZE = 8192\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n\r\n# for _ in range(int(input())):\r\n#     n = int(input())\r\n#     a = list(map(int, input().split()))\r\n\r\n# for _ in range(int(input())):\r\n#     n = int(input())\r\n#     while n % 2 == 0:\r\n#         n //= 2\r\n#     if n == 1:\r\n#         print('NO')\r\n#     else:\r\n#         print('YES')\r\n\r\n# for _ in range(int(input())):\r\n#     n = int(input())\r\n#     k = n // 2020\r\n#     res = n % 2020\r\n#     if res <= k:\r\n#         print('YES')\r\n#     else:\r\n#         print('NO')\r\n\r\n# for _ in range(int(input())):\r\n#     a, b, k = list(map(int, input().split()))\r\n#     c = list(map(int, input().split()))\r\n#     d = list(map(int, input().split()))\r\n#     cnt1 = [0] * (a + 1)\r\n#     cnt2 = [0] * (b + 1)\r\n#     for i in range(k):\r\n#         cnt1[c[i]] += 1\r\n#         cnt2[d[i]] += 1\r\n#     ans = k * (k - 1) // 2\r\n#     for i in range(a + 1):\r\n#         ans -= cnt1[i] * (cnt1[i] - 1) // 2\r\n#     for i in range(b + 1):\r\n#         ans -= cnt2[i] * (cnt2[i] - 1) // 2\r\n#     cnt = Counter()\r\n#     for i in range(k):\r\n#         cnt[(c[i], d[i])] += 1\r\n#     for i in cnt:\r\n#         ans += (cnt[i] - 1) * cnt[i] // 2\r\n#     print(ans)\r\n\r\n# mod = 10 ** 9 + 7\r\n# N = 500010\r\n# fac = [1] * N\r\n# for i in range(2, N):\r\n#     fac[i] = fac[i - 1] * i % mod\r\n# invfac = [1] * N\r\n# invfac[N - 1] = pow(fac[N - 1], mod - 2, mod)\r\n# for i in range(N - 1)[::-1]:\r\n#     invfac[i] = invfac[i + 1] * (i + 1) % mod\r\n# def c(i, j):\r\n#     if i < j: return 0\r\n#     return fac[i] * invfac[j] * invfac[i - j] % mod\r\n\r\n# for _ in range(int(input())):\r\n#     n, k = list(map(int, input().split()))\r\n#     a = list(map(int, input().split()))\r\n#     a.sort(reverse=True)\r\n#     x = y = 0\r\n#     for i in range(n):\r\n#         if a[i] == a[k - 1]:\r\n#             if i < k:\r\n#                 x += 1\r\n#             else:\r\n#                 y += 1\r\n#     print(c(x + y, x))\r\n\r\n# for _ in range(int(input())):\r\n#     n, m = list(map(int, input().split()))\r\n#     a = list(map(int, input().split()))\r\n#     b = list(map(int, input().split()))\r\n#     if sum(a) < m:\r\n#         print(-1)\r\n#         continue\r\n#     c, d = [], []\r\n#     for i in range(n):\r\n#         if b[i] == 1:\r\n#             c.append(a[i])\r\n#         else:\r\n#             d.append(a[i])\r\n#     c.sort(reverse=True)\r\n#     d.sort(reverse=True)\r\n#     if not c:\r\n#         t = 0\r\n#         ans = 0\r\n#         for i in range(n):\r\n#             t += d[i]\r\n#             ans += 2\r\n#             if t >= m:\r\n#                 print(ans)\r\n#                 break\r\n#     elif not d:\r\n#         t = 0\r\n#         ans = 0\r\n#         for i in range(n):\r\n#             t += c[i]\r\n#             ans += 1\r\n#             if t >= m:\r\n#                 print(ans)\r\n#                 break\r\n#     else:\r\n#         j = len(d) - 1\r\n#         ans = len(d) * 2\r\n#         t = sum(d)\r\n#         while j >= 0 and t - d[j] >= m:\r\n#             t -= d[j]\r\n#             ans -= 2\r\n#             j -= 1\r\n#         mn = float('inf')\r\n#         if t >= m:\r\n#             mn = ans\r\n#         for i in range(len(c)):\r\n#             t += c[i]\r\n#             ans += 1\r\n#             while j >= 0 and t - d[j] >= m:\r\n#                 t -= d[j]\r\n#                 ans -= 2\r\n#                 j -= 1\r\n#             if t >= m:\r\n#                 mn = min(ans, mn)\r\n#         print(mn)\r\n\r\n# for _ in range(int(input())):\r\n#     n = int(input())\r\n#     a = [list(map(int, input())) for _ in range(n)]\r\n#     input()\r\n#     b = [list(map(int, input())) for _ in range(n)]\r\n#     for i in range(n):\r\n#         for j in range(n):\r\n#             if b[i][j]:\r\n#                 b[i][j] = 0\r\n#                 a[i][j] ^= 1\r\n#     for i in range(n):\r\n#         if a[i][0] == 1:\r\n#             for j in range(n):\r\n#                 a[i][j] ^= 1\r\n#     for j in range(n):\r\n#         if a[0][j] == 1:\r\n#             for i in range(n):\r\n#                 a[i][j] ^= 1\r\n#     if a == b:\r\n#         print('YES')\r\n#     else:\r\n#         print('NO')\r\n\r\nN = 200005\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    mx = max(a) + 1\r\n    cnt = [0] * mx\r\n    for i in range(n):\r\n        cnt[a[i]] += 1\r\n    dp = [0] * mx\r\n    for i in range(1, mx):\r\n        dp[i] += cnt[i]\r\n        for j in range(2 * i, mx, i):\r\n            dp[j] = max(dp[j], dp[i])\r\n    print(n - max(dp))\r\n\r\n\r\n",
    "prob_desc_created_at": "1611586800",
    "tags": [
        "dp",
        "math",
        "number theory",
        "sortings"
    ],
    "hidden_unit_tests": ""
}