{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"5\", \"12\", \"15\"]",
    "src_uid": "9ba374e20305d93ba42ef152e2cad5b5",
    "prob_desc_notes": "NoteIn the first test case, the numbers of the days in a year are (indices of days in a corresponding month) $$$\\{1,1,2,3,1\\}$$$. Coronavirus-chan will hug you the most if you come on the third day of the year: $$$2+3=5$$$ hugs.In the second test case, the numbers of the days are $$$\\{1,2,3,1,2,3,1,2,3\\}$$$. You will get the most hugs if you arrive on the third day of the year: $$$3+1+2+3+1+2=12$$$ hugs.In the third test case, the numbers of the days are $$$\\{1,2,3,4,1,2, 1,2,3, 1, 1,2,3\\}$$$. You will get the most hugs if you come on the twelfth day of the year: your friend will hug you $$$2+3+1+2+3+4=15$$$ times. ",
    "prob_desc_description": "You've been in love with Coronavirus-chan for a long time, but you didn't know where she lived until now. And just now you found out that she lives in a faraway place called Naha. You immediately decided to take a vacation and visit Coronavirus-chan. Your vacation lasts exactly $$$x$$$ days and that's the exact number of days you will spend visiting your friend. You will spend exactly $$$x$$$ consecutive (successive) days visiting Coronavirus-chan.They use a very unusual calendar in Naha: there are $$$n$$$ months in a year, $$$i$$$-th month lasts exactly $$$d_i$$$ days. Days in the $$$i$$$-th month are numbered from $$$1$$$ to $$$d_i$$$. There are no leap years in Naha.The mood of Coronavirus-chan (and, accordingly, her desire to hug you) depends on the number of the day in a month. In particular, you get $$$j$$$ hugs if you visit Coronavirus-chan on the $$$j$$$-th day of the month.You know about this feature of your friend and want to plan your trip to get as many hugs as possible (and then maybe you can win the heart of Coronavirus-chan). Please note that your trip should not necessarily begin and end in the same year.",
    "prob_desc_output_spec": "Print one integer — the maximum number of hugs that you can get from Coronavirus-chan during the best vacation in your life.",
    "prob_desc_input_spec": "The first line of input contains two integers $$$n$$$ and $$$x$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the number of months in the year and the number of days you can spend with your friend. The second line contains $$$n$$$ integers $$$d_1, d_2, \\ldots, d_n$$$, $$$d_i$$$ is the number of days in the $$$i$$$-th month ($$$1 \\le d_i \\le 10^6$$$). It is guaranteed that $$$1 \\le x \\le d_1 + d_2 + \\ldots + d_n$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_024.jsonl",
    "code_uid": "53f55b8fe44e6d148f60b7f81909a760",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 2\\n1 3 1\", \"3 6\\n3 3 3\", \"5 6\\n4 2 3 1 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "def rangesum(i, j):\n    # inclusive\n    return int((j-i+1)*(i+j)/2)\n\nn,x = list(map(int, input().split(' ')))\nD = list(map(int, input().split(' ')))\nmaximum = max(D)\nhugs = 0\ni = 0\ni_days = None\nwhile True:\n    if D[i] >= x:\n        hugs += int((D[i] + (D[i]-x+1))/2*x)\n        i_days = x\n        break\n    else:\n        hugs += int(D[i]*(D[i]+1)/2)\n        x -= D[i]\n        i -= 1\nmaxHugs = hugs\nfor j in range(1, n):\n    hugs += int(D[j]*(D[j]+1)/2)\n    if i_days >= D[j]:\n        hugs -= rangesum(D[i]-i_days+1, D[i]-i_days+D[j])\n        i_days -= D[j]\n    else:\n        hugs -= rangesum(D[i]-i_days+1, D[i])\n        i += 1\n        y = D[j] - i_days\n        while True:\n            if D[i] >= y:\n                i_days = D[i]-y\n                hugs -= rangesum(1,y)\n                break\n            else:\n                y -= D[i]\n                hugs -= rangesum(1,D[i])\n                i += 1\n    maxHugs = max(hugs, maxHugs)\nprint(int(maxHugs))",
    "prob_desc_created_at": "1590503700",
    "tags": [
        "greedy",
        "two pointers",
        "implementation",
        "binary search",
        "brute force"
    ],
    "hidden_unit_tests": ""
}