{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\\n1\\n0\", \"0\\n0\\n1\"]",
    "src_uid": "2cd91be317328fec207da6773ead4541",
    "prob_desc_notes": "NoteThe first example illustrates an example from the statement.$$$f([7, 3, 1, 7]) = 1$$$: sequence of operations is $$$[7, 3, 1, 7] \\to [(7 + 3)\\bmod 10, (1 + 7)\\bmod 10]$$$ $$$=$$$ $$$[0, 8]$$$ and one candy as $$$7 + 3 \\ge 10$$$ $$$\\to$$$ $$$[(0 + 8) \\bmod 10]$$$ $$$=$$$ $$$[8]$$$, so we get only $$$1$$$ candy.$$$f([9]) = 0$$$ as we don't perform operations with it.",
    "prob_desc_description": "Consider a sequence of digits of length $$$2^k$$$ $$$[a_1, a_2, \\ldots, a_{2^k}]$$$. We perform the following operation with it: replace pairs $$$(a_{2i+1}, a_{2i+2})$$$ with $$$(a_{2i+1} + a_{2i+2})\\bmod 10$$$ for $$$0\\le i&lt;2^{k-1}$$$. For every $$$i$$$ where $$$a_{2i+1} + a_{2i+2}\\ge 10$$$ we get a candy! As a result, we will get a sequence of length $$$2^{k-1}$$$.Less formally, we partition sequence of length $$$2^k$$$ into $$$2^{k-1}$$$ pairs, each consisting of 2 numbers: the first pair consists of the first and second numbers, the second of the third and fourth $$$\\ldots$$$, the last pair consists of the ($$$2^k-1$$$)-th and ($$$2^k$$$)-th numbers. For every pair such that sum of numbers in it is at least $$$10$$$, we get a candy. After that, we replace every pair of numbers with a remainder of the division of their sum by $$$10$$$ (and don't change the order of the numbers).Perform this operation with a resulting array until it becomes of length $$$1$$$. Let $$$f([a_1, a_2, \\ldots, a_{2^k}])$$$ denote the number of candies we get in this process. For example: if the starting sequence is $$$[8, 7, 3, 1, 7, 0, 9, 4]$$$ then:After the first operation the sequence becomes $$$[(8 + 7)\\bmod 10, (3 + 1)\\bmod 10, (7 + 0)\\bmod 10, (9 + 4)\\bmod 10]$$$ $$$=$$$ $$$[5, 4, 7, 3]$$$, and we get $$$2$$$ candies as $$$8 + 7 \\ge 10$$$ and $$$9 + 4 \\ge 10$$$.After the second operation the sequence becomes $$$[(5 + 4)\\bmod 10, (7 + 3)\\bmod 10]$$$ $$$=$$$ $$$[9, 0]$$$, and we get one more candy as $$$7 + 3 \\ge 10$$$. After the final operation sequence becomes $$$[(9 + 0) \\bmod 10]$$$ $$$=$$$ $$$[9]$$$. Therefore, $$$f([8, 7, 3, 1, 7, 0, 9, 4]) = 3$$$ as we got $$$3$$$ candies in total.You are given a sequence of digits of length $$$n$$$ $$$s_1, s_2, \\ldots s_n$$$. You have to answer $$$q$$$ queries of the form $$$(l_i, r_i)$$$, where for $$$i$$$-th query you have to output $$$f([s_{l_i}, s_{l_i+1}, \\ldots, s_{r_i}])$$$. It is guaranteed that $$$r_i-l_i+1$$$ is of form $$$2^k$$$ for some nonnegative integer $$$k$$$.",
    "prob_desc_output_spec": "Output $$$q$$$ lines, in $$$i$$$-th line output single integer — $$$f([s_{l_i}, s_{l_i + 1}, \\ldots, s_{r_i}])$$$, answer to the $$$i$$$-th query.",
    "prob_desc_input_spec": "The first line contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$) — the length of the sequence. The second line contains $$$n$$$ digits $$$s_1, s_2, \\ldots, s_n$$$ ($$$0 \\le s_i \\le 9$$$). The third line contains a single integer $$$q$$$ ($$$1 \\le q \\le 10^5$$$) — the number of queries. Each of the next $$$q$$$ lines contains two integers $$$l_i$$$, $$$r_i$$$ ($$$1 \\le l_i \\le r_i \\le n$$$) — $$$i$$$-th query. It is guaranteed that $$$r_i-l_i+1$$$ is a nonnegative integer power of $$$2$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_011.jsonl",
    "code_uid": "0f1b7d072884b3b1ff95035d569a8df9",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"8\\n8 7 3 1 7 0 9 4\\n3\\n1 8\\n2 5\\n7 7\", \"6\\n0 1 2 3 3 5\\n3\\n1 2\\n1 4\\n3 6\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\n#sys.stdin = open('in', 'r')\nn = int(input())\na = [int(x) for x in input().split()]\nq = int(input())\nsm = [0]\nfor i in range(n):\n    sm.append(sm[-1]+a[i])\nfor qi in range(q):\n    l,r = map(int, input().split())\n    print((sm[r]-sm[l-1]) // 10)\n    \n    \n\n\n#sys.stdout.write('YES\\n')\n#sys.stdout.write(f'{res}\\n')\n#sys.stdout.write(f'{y1} {x1} {y2} {x2}\\n')\n",
    "prob_desc_created_at": "1562339100",
    "tags": [
        "dp",
        "implementation",
        "data structures",
        "math"
    ],
    "hidden_unit_tests": ""
}