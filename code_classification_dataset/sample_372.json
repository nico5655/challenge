{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\\nNO\\nYES\\nYES\\nNO\\nNO\"]",
    "src_uid": "2d1db83f1eb921f830cc9c709f9327fa",
    "prob_desc_notes": "NoteIn the first test case, $$$[2,3,1,4]=\\mathrm{merge}([3,1],[2,4])$$$.In the second test case, we can show that $$$[3,1,2,4]$$$ is not the merge of two arrays of length $$$2$$$.In the third test case, $$$[3,2,6,1,5,7,8,4]=\\mathrm{merge}([3,2,8,4],[6,1,5,7])$$$.In the fourth test case, $$$[1,2,3,4,5,6]=\\mathrm{merge}([1,3,6],[2,4,5])$$$, for example.",
    "prob_desc_description": "Let $$$a$$$ and $$$b$$$ be two arrays of lengths $$$n$$$ and $$$m$$$, respectively, with no elements in common. We can define a new array $$$\\mathrm{merge}(a,b)$$$ of length $$$n+m$$$ recursively as follows:  If one of the arrays is empty, the result is the other array. That is, $$$\\mathrm{merge}(\\emptyset,b)=b$$$ and $$$\\mathrm{merge}(a,\\emptyset)=a$$$. In particular, $$$\\mathrm{merge}(\\emptyset,\\emptyset)=\\emptyset$$$.  If both arrays are non-empty, and $$$a_1&lt;b_1$$$, then $$$\\mathrm{merge}(a,b)=[a_1]+\\mathrm{merge}([a_2,\\ldots,a_n],b)$$$. That is, we delete the first element $$$a_1$$$ of $$$a$$$, merge the remaining arrays, then add $$$a_1$$$ to the beginning of the result.  If both arrays are non-empty, and $$$a_1&gt;b_1$$$, then $$$\\mathrm{merge}(a,b)=[b_1]+\\mathrm{merge}(a,[b_2,\\ldots,b_m])$$$. That is, we delete the first element $$$b_1$$$ of $$$b$$$, merge the remaining arrays, then add $$$b_1$$$ to the beginning of the result. This algorithm has the nice property that if $$$a$$$ and $$$b$$$ are sorted, then $$$\\mathrm{merge}(a,b)$$$ will also be sorted. For example, it is used as a subroutine in merge-sort. For this problem, however, we will consider the same procedure acting on non-sorted arrays as well. For example, if $$$a=[3,1]$$$ and $$$b=[2,4]$$$, then $$$\\mathrm{merge}(a,b)=[2,3,1,4]$$$.A permutation is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array) and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array).There is a permutation $$$p$$$ of length $$$2n$$$. Determine if there exist two arrays $$$a$$$ and $$$b$$$, each of length $$$n$$$ and with no elements in common, so that $$$p=\\mathrm{merge}(a,b)$$$.",
    "prob_desc_output_spec": "For each test case, output \"YES\" if there exist arrays $$$a$$$, $$$b$$$, each of length $$$n$$$ and with no common elements, so that $$$p=\\mathrm{merge}(a,b)$$$. Otherwise, output \"NO\".",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1\\le t\\le 1000$$$)  — the number of test cases. Next $$$2t$$$ lines contain descriptions of test cases.  The first line of each test case contains a single integer $$$n$$$ ($$$1\\le n\\le 2000$$$). The second line of each test case contains $$$2n$$$ integers $$$p_1,\\ldots,p_{2n}$$$ ($$$1\\le p_i\\le 2n$$$). It is guaranteed that $$$p$$$ is a permutation. It is guaranteed that the sum of $$$n$$$ across all test cases does not exceed $$$2000$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_001.jsonl",
    "code_uid": "cc2bfee753505292d948c6997eafa53a",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n2\\n2 3 1 4\\n2\\n3 1 2 4\\n4\\n3 2 6 1 5 7 8 4\\n3\\n1 2 3 4 5 6\\n4\\n6 1 3 7 4 5 8 2\\n6\\n4 3 2 5 1 11 9 12 8 6 10 7\"]",
    "exec_outcome": "PASSED",
    "source_code": "def main():\n    n = int(input())\n    p = [int(e) for e in input().split()]\n\n    prev = 0\n    items = [0]\n    for i in range(1, 2 * n):\n        if p[i] > p[prev]:\n            items.append(i - prev)\n            prev = i\n\n    weights = {0}\n    for item in items:\n        new_weights = set(weight + item for weight in weights if weight + item <= n)\n        weights = weights.union(new_weights)\n        if n in weights:\n            print(\"YES\")\n            return\n    \n    print(\"NO\")\n\n\nfor _ in range(int(input())):\n    main()\n",
    "prob_desc_created_at": "1595342100",
    "tags": [
        "dp"
    ],
    "hidden_unit_tests": ""
}