{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"Yes\\n7 2\\n2 3\\n5 1\\n10 4\", \"No\", \"Yes\\n-10 2\\n-20 1\"]",
    "src_uid": "f9fd4b42aa1ea3a44a1d05b068a959ba",
    "prob_desc_notes": "NoteIn the first sample, Ujan can put the number $$$7$$$ in the $$$2$$$nd box, the number $$$2$$$ in the $$$3$$$rd box, the number $$$5$$$ in the $$$1$$$st box and keep the number $$$10$$$ in the same $$$4$$$th box. Then the boxes will contain numbers $$$\\{1,5,4\\}$$$, $$$\\{3, 7\\}$$$, $$$\\{8,2\\}$$$ and $$$\\{10\\}$$$. The sum in each box then is equal to $$$10$$$.In the second sample, it is not possible to pick and redistribute the numbers in the required way.In the third sample, one can swap the numbers $$$-20$$$ and $$$-10$$$, making the sum in each box equal to $$$-10$$$.",
    "prob_desc_description": "Ujan has a lot of numbers in his boxes. He likes order and balance, so he decided to reorder the numbers.There are $$$k$$$ boxes numbered from $$$1$$$ to $$$k$$$. The $$$i$$$-th box contains $$$n_i$$$ integer numbers. The integers can be negative. All of the integers are distinct. Ujan is lazy, so he will do the following reordering of the numbers exactly once. He will pick a single integer from each of the boxes, $$$k$$$ integers in total. Then he will insert the chosen numbers — one integer in each of the boxes, so that the number of integers in each box is the same as in the beginning. Note that he may also insert an integer he picked from a box back into the same box.Ujan will be happy if the sum of the integers in each box is the same. Can he achieve this and make the boxes perfectly balanced, like all things should be?",
    "prob_desc_output_spec": "If Ujan cannot achieve his goal, output \"No\" in a single line. Otherwise in the first line output \"Yes\", and then output $$$k$$$ lines. The $$$i$$$-th of these lines should contain two integers $$$c_i$$$ and $$$p_i$$$. This means that Ujan should pick the integer $$$c_i$$$ from the $$$i$$$-th box and place it in the $$$p_i$$$-th box afterwards. If there are multiple solutions, output any of those. You can print each letter in any case (upper or lower).",
    "prob_desc_input_spec": "The first line contains a single integer $$$k$$$ ($$$1 \\leq k \\leq 15$$$), the number of boxes.  The $$$i$$$-th of the next $$$k$$$ lines first contains a single integer $$$n_i$$$ ($$$1 \\leq n_i \\leq 5\\,000$$$), the number of integers in box $$$i$$$. Then the same line contains $$$n_i$$$ integers $$$a_{i,1}, \\ldots, a_{i,n_i}$$$ ($$$|a_{i,j}| \\leq 10^9$$$), the integers in the $$$i$$$-th box.  It is guaranteed that all $$$a_{i,j}$$$ are distinct.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_030.jsonl",
    "code_uid": "814411766c87e15ba8e3375eafe532f7",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n3 1 7 4\\n2 3 2\\n2 8 5\\n1 10\", \"2\\n2 3 -2\\n2 -1 5\", \"2\\n2 -10 10\\n2 0 -20\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nreader = (s.rstrip() for s in sys.stdin)\ninput = reader.__next__\n\nk = int(input())\nd = {}\naa = []\nsa = []\nfor i in range(k):\n    ni, *a = map(int, input().split())\n    for ai in a:\n        d[ai] = i\n    aa.append(a)\n    sa.append(sum(a))\n\ns = sum(sa)\nif s%k != 0:\n    print(\"No\")\n    exit()\ns //= k\n\ndef calc_next(i, aij):\n    bij = s-sa[i]+aij\n    if bij not in d:\n        return -1, bij\n    else:\n        return d[bij], bij\n\ndef loop_to_num(loop):\n    ret = 0\n    for i in reversed(range(k)):\n        ret <<= 1\n        ret += loop[i]\n    return ret\n\nloop_dict = {}\nused = set()\nfor i in range(k):\n    for aij in aa[i]:\n        if aij in used:\n            continue\n\n        loop = [0]*k\n        num = [float(\"Inf\")]*k\n        start_i = i\n        start_aij = aij\n        j = i\n\n        loop[j] = 1\n        num[j] = aij\n        used.add(aij)\n\n        exist = False\n        for _ in range(100):\n            j, aij = calc_next(j, aij)\n            if j == -1:\n                break\n            #used.add(aij)\n            if loop[j] == 0:\n                loop[j] = 1\n                num[j] = aij\n            else:\n                if j == start_i and aij == start_aij:\n                    exist = True\n                break\n        if exist:\n            m = loop_to_num(loop)\n            loop_dict[m] = tuple(num)\n            for numi in num:\n                if numi != float(\"inf\"):\n                    used.add(numi)\n\nmask = 1<<k\nfor state in range(1, mask):\n    if state in loop_dict:\n        continue\n    j = (state-1)&state\n    while j:\n        i = state^j\n        if i in loop_dict and j in loop_dict:\n            tp = tuple(min(loop_dict[i][l], loop_dict[j][l]) for l in range(k))\n            loop_dict[state] = tp\n            break\n        j = (j-1)&state\n\nif mask-1 not in loop_dict:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n    t = loop_dict[mask-1]\n    ns = [sa[i]-t[i] for i in range(k)]\n    need = [s - ns[i] for i in range(k)]\n    for i in range(k):\n        print(t[i], need.index(t[i])+1)",
    "prob_desc_created_at": "1573052700",
    "tags": [
        "dp",
        "graphs",
        "bitmasks",
        "implementation",
        "dfs and similar"
    ],
    "hidden_unit_tests": ""
}