{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"8\\n-1 2 6 4 0 3\", \"7\\n5 -2 4 -1 2\"]",
    "src_uid": "3a3666609b120d208c3e8366b186d89b",
    "prob_desc_notes": null,
    "prob_desc_description": "There are $$$n$$$ Christmas trees on an infinite number line. The $$$i$$$-th tree grows at the position $$$x_i$$$. All $$$x_i$$$ are guaranteed to be distinct.Each integer point can be either occupied by the Christmas tree, by the human or not occupied at all. Non-integer points cannot be occupied by anything.There are $$$m$$$ people who want to celebrate Christmas. Let $$$y_1, y_2, \\dots, y_m$$$ be the positions of people (note that all values $$$x_1, x_2, \\dots, x_n, y_1, y_2, \\dots, y_m$$$ should be distinct and all $$$y_j$$$ should be integer). You want to find such an arrangement of people that the value $$$\\sum\\limits_{j=1}^{m}\\min\\limits_{i=1}^{n}|x_i - y_j|$$$ is the minimum possible (in other words, the sum of distances to the nearest Christmas tree for all people should be minimized).In other words, let $$$d_j$$$ be the distance from the $$$j$$$-th human to the nearest Christmas tree ($$$d_j = \\min\\limits_{i=1}^{n} |y_j - x_i|$$$). Then you need to choose such positions $$$y_1, y_2, \\dots, y_m$$$ that $$$\\sum\\limits_{j=1}^{m} d_j$$$ is the minimum possible.",
    "prob_desc_output_spec": "In the first line print one integer $$$res$$$ — the minimum possible value of $$$\\sum\\limits_{j=1}^{m}\\min\\limits_{i=1}^{n}|x_i - y_j|$$$ (in other words, the sum of distances to the nearest Christmas tree for all people). In the second line print $$$m$$$ integers $$$y_1, y_2, \\dots, y_m$$$ ($$$-2 \\cdot 10^9 \\le y_j \\le 2 \\cdot 10^9$$$), where $$$y_j$$$ is the position of the $$$j$$$-th human. All $$$y_j$$$ should be distinct and all values $$$x_1, x_2, \\dots, x_n, y_1, y_2, \\dots, y_m$$$ should be distinct. If there are multiple answers, print any of them.",
    "prob_desc_input_spec": "The first line of the input contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n, m \\le 2 \\cdot 10^5$$$) — the number of Christmas trees and the number of people. The second line of the input contains $$$n$$$ integers $$$x_1, x_2, \\dots, x_n$$$ ($$$-10^9 \\le x_i \\le 10^9$$$), where $$$x_i$$$ is the position of the $$$i$$$-th Christmas tree. It is guaranteed that all $$$x_i$$$ are distinct.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_010.jsonl",
    "code_uid": "27d49b3b27d3eddae992ee5d9175f38e",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2 6\\n1 5\", \"3 5\\n0 3 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import heapq\n\nn, m = map(int, input().split())\nx = list(map(int, input().split()))\n\ny = []\ntotal_distance = 0\n\noccupied = set(x)\n\nQ = [(1, tree + d) for tree in x for d in (1, -1)]\n\nwhile len(y) < m:\n    distance, position = heapq.heappop(Q)\n    if position not in occupied:\n        y.append(position)\n        total_distance += distance\n        occupied.add(position)\n        heapq.heappush(Q, (distance + 1, position + 1))\n        heapq.heappush(Q, (distance + 1, position - 1))\n\nprint(total_distance)\nprint(*y)\n",
    "prob_desc_created_at": "1577552700",
    "tags": [
        "graphs",
        "greedy",
        "shortest paths"
    ],
    "hidden_unit_tests": ""
}