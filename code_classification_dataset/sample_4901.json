{
    "prob_desc_time_limit": "6 seconds",
    "prob_desc_sample_outputs": "[\"5\\n2\\n1\\n4\\n0\\n4\"]",
    "src_uid": "c7f0fefd9616e4ba2d309a7c5c8a8a0a",
    "prob_desc_notes": "NoteThe tree in the first example is shown in the following picture:  Answers to the queries are obtained as follows:  $$$v=1,k=0$$$: you can delete vertices $$$7$$$ and $$$3$$$, so the vertex $$$1$$$ has $$$5$$$ children (vertices $$$2$$$, $$$4$$$, $$$5$$$, $$$6$$$, and $$$8$$$), and the score is $$$5 - 2 \\cdot 0 = 5$$$;  $$$v=1,k=2$$$: you can delete the vertex $$$7$$$, so the vertex $$$1$$$ has $$$4$$$ children (vertices $$$3$$$, $$$4$$$, $$$5$$$, and $$$6$$$), and the score is $$$4 - 1 \\cdot 2 = 2$$$.  $$$v=1,k=3$$$: you shouldn't delete any vertices, so the vertex $$$1$$$ has only one child (vertex $$$7$$$), and the score is $$$1 - 0 \\cdot 3 = 1$$$;  $$$v=7,k=1$$$: you can delete the vertex $$$3$$$, so the vertex $$$7$$$ has $$$5$$$ children (vertices $$$2$$$, $$$4$$$, $$$5$$$, $$$6$$$, and $$$8$$$), and the score is $$$5 - 1 \\cdot 1 = 4$$$;  $$$v=5,k=0$$$: no matter what you do, the vertex $$$5$$$ will have no children, so the score is $$$0$$$;  $$$v=7,k=200000$$$: you shouldn't delete any vertices, so the vertex $$$7$$$ has $$$4$$$ children (vertices $$$3$$$, $$$4$$$, $$$5$$$, and $$$6$$$), and the score is $$$4 - 0 \\cdot 200000 = 4$$$. ",
    "prob_desc_description": "You are given a tree consisting of $$$n$$$ vertices. Recall that a tree is an undirected connected acyclic graph. The given tree is rooted at the vertex $$$1$$$.You have to process $$$q$$$ queries. In each query, you are given a vertex of the tree $$$v$$$ and an integer $$$k$$$.To process a query, you may delete any vertices from the tree in any order, except for the root and the vertex $$$v$$$. When a vertex is deleted, its children become the children of its parent. You have to process a query in such a way that maximizes the value of $$$c(v) - m \\cdot k$$$ (where $$$c(v)$$$ is the resulting number of children of the vertex $$$v$$$, and $$$m$$$ is the number of vertices you have deleted). Print the maximum possible value you can obtain.The queries are independent: the changes you make to the tree while processing a query don't affect the tree in other queries.",
    "prob_desc_output_spec": "For each query, print one integer — the maximum value of $$$c(v) - m \\cdot k$$$ you can achieve.",
    "prob_desc_input_spec": "The first line contains one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the number of vertices in the tree. Then $$$n-1$$$ lines follow, the $$$i$$$-th of them contains two integers $$$x_i$$$ and $$$y_i$$$ ($$$1 \\le x_i, y_i \\le n$$$; $$$x_i \\ne y_i$$$) — the endpoints of the $$$i$$$-th edge. These edges form a tree. The next line contains one integer $$$q$$$ ($$$1 \\le q \\le 2 \\cdot 10^5$$$) — the number of queries. Then $$$q$$$ lines follow, the $$$j$$$-th of them contains two integers $$$v_j$$$ and $$$k_j$$$ ($$$1 \\le v_j \\le n$$$; $$$0 \\le k_j \\le 2 \\cdot 10^5$$$) — the parameters of the $$$j$$$-th query.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2800,
    "file_name": "train_108.jsonl",
    "code_uid": "d344a982851d811dfb4757119fd51e33",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"8\\n6 7\\n3 2\\n8 3\\n5 7\\n7 4\\n7 1\\n7 3\\n6\\n1 0\\n1 2\\n1 3\\n7 1\\n5 0\\n7 200000\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys, collections\r\nn = int(sys.stdin.readline())\r\ne = [[] for i in range(n+1)]\r\nfor i in range(n-1):\r\n    a, b = [int(i) for i in sys.stdin.readline().split()]\r\n    e[a].append(b)\r\n    e[b].append(a)\r\no = [len(e[i])-1 for i in range(0, n+1)]\r\no[1]+=1\r\nr = [[] for i in range(n+1)]\r\nst = collections.deque([1])\r\nd = [0]*(n+1)\r\np = [0]*(n+1)\r\nwhile st:\r\n    x = st.popleft()\r\n    for i in e[x]:\r\n        if i != p[x]: st.append(i); d[i] = d[x]+1; p[i] = x\r\nd = [(d[i], i) for i in range(1,n+1)]\r\nd.sort(key=lambda x:x[0], reverse=True)\r\nfor _, v in d:\r\n    r[v] = [o[v]]*max(max(len(r[i]) for i in e[v]), o[v]-1)\r\n    for i in e[v]:\r\n        if i == p: continue\r\n        for idx, x in enumerate(r[i]):\r\n            r[v][idx]+=max(x-idx-1, 0)\r\nfor q in range(int(sys.stdin.readline())):\r\n    v, k = [int(i) for i in sys.stdin.readline().split()]\r\n    if k >= len(r[v]): print(o[v])\r\n    else: print(r[v][k])\r\n",
    "prob_desc_created_at": "1635518100",
    "tags": [
        "brute force",
        "dp",
        "trees"
    ],
    "hidden_unit_tests": ""
}