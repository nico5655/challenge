{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"10\\n0\\n990\\n7\\n4\"]",
    "src_uid": "943ce230777aca97266c272bdb9b364c",
    "prob_desc_notes": "Note In the first test case, we can rotate the subarray from index $$$3$$$ to index $$$6$$$ by an amount of $$$2$$$ (i.e. choose $$$l = 3$$$, $$$r = 6$$$ and $$$k = 2$$$) to get the optimal array: $$$$$$[1, 3, \\underline{9, 11, 5, 7}] \\longrightarrow [1, 3, \\underline{5, 7, 9, 11}]$$$$$$ So the answer is $$$a_n - a_1 = 11 - 1 = 10$$$. In the second testcase, it is optimal to rotate the subarray starting and ending at index $$$1$$$ and rotating it by an amount of $$$2$$$. In the fourth testcase, it is optimal to rotate the subarray starting from index $$$1$$$ to index $$$4$$$ and rotating it by an amount of $$$3$$$. So the answer is $$$8 - 1 = 7$$$.",
    "prob_desc_description": "Mainak has an array $$$a_1, a_2, \\ldots, a_n$$$ of $$$n$$$ positive integers. He will do the following operation to this array exactly once:  Pick a subsegment of this array and cyclically rotate it by any amount.  Formally, he can do the following exactly once:  Pick two integers $$$l$$$ and $$$r$$$, such that $$$1 \\le l \\le r \\le n$$$, and any positive integer $$$k$$$.  Repeat this $$$k$$$ times: set $$$a_l=a_{l+1}, a_{l+1}=a_{l+2}, \\ldots, a_{r-1}=a_r, a_r=a_l$$$ (all changes happen at the same time). Mainak wants to maximize the value of $$$(a_n - a_1)$$$ after exactly one such operation. Determine the maximum value of $$$(a_n - a_1)$$$ that he can obtain.",
    "prob_desc_output_spec": "For each test case, output a single integer — the maximum value of $$$(a_n - a_1)$$$ that Mainak can obtain by doing the operation exactly once.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 50$$$) — the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 2000$$$). The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 999$$$). It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2000$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 900,
    "file_name": "train_106.jsonl",
    "code_uid": "8ff7a9ecfa540990f70763b4449a2aa3",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n\\n6\\n\\n1 3 9 11 5 7\\n\\n1\\n\\n20\\n\\n3\\n\\n9 99 999\\n\\n4\\n\\n2 1 8 1\\n\\n3\\n\\n2 1 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "q = int(input())\r\n\r\nminak = []\r\n\r\ndef findMax(n) :\r\n    if (n == 1) :\r\n        return 0 \r\n\r\n    mxin = minak.index(max(minak))\r\n    mnin = minak.index(min(minak))\r\n    mx = 0\r\n    l = len(minak)\r\n    for i in range(l-1) :\r\n        mx = max(mx, minak[i]-minak[i+1])\r\n\r\n    mx = max(mx, max(minak[mxin]-minak[0], minak[n-1]-minak[mnin]))\r\n\r\n    return mx\r\n    \r\nfor i in range(q) :\r\n    n = int(input())\r\n    minak = [int(x) for x in input().split()]\r\n    print (findMax(n))\r\n    minak.clear()",
    "prob_desc_created_at": "1662474900",
    "tags": [
        "greedy",
        "math"
    ],
    "hidden_unit_tests": ""
}