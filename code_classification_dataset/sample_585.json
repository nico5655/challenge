{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"6\", \"11\", \"1\", \"789\"]",
    "src_uid": "69090abd03e01dae923194e50d528216",
    "prob_desc_notes": "NoteFor the first sample, the 6 possible strings T are: aab, aac, aba, aca, baa, caa. For the second sample, the 11 possible strings T are: aaa, aac, aba, abb, abc, aca, acb, baa, bab, caa, cab.For the third sample, the only possible string T is b.",
    "prob_desc_description": "You are given a string S of length n with each character being one of the first m lowercase English letters. Calculate how many different strings T of length n composed from the first m lowercase English letters exist such that the length of LCS (longest common subsequence) between S and T is n - 1.Recall that LCS of two strings S and T is the longest string C such that C both in S and T as a subsequence.",
    "prob_desc_output_spec": "Print the only line containing the answer.",
    "prob_desc_input_spec": "The first line contains two numbers n and m denoting the length of string S and number of first English lowercase characters forming the character set for strings (1 ≤ n ≤ 100 000, 2 ≤ m ≤ 26). The second line contains string S.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2700,
    "file_name": "train_003.jsonl",
    "code_uid": "5c4197d00e934d81e06cc2e549eeb1d1",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 3\\naaa\", \"3 3\\naab\", \"1 2\\na\", \"10 9\\nabacadefgh\"]",
    "exec_outcome": "PASSED",
    "source_code": "n, m = map(int, input().split())\ns = input()\np = c = 0\nfor i in range(1, n):\n    if s[i] == s[i - 1]:\n        c += n * (m - 1)\n        p = i\n    elif s[i] != s[i - 2]:\n        p = i - 1\n    c += i - p\nans = n * n * (m - 1) - c\nprint(ans)\n",
    "prob_desc_created_at": "1442416500",
    "tags": [
        "dp",
        "greedy"
    ],
    "hidden_unit_tests": ""
}