{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"4 4 1 4 4 2 2\"]",
    "src_uid": "a7e75ff150d300b2a8494dca076a3075",
    "prob_desc_notes": null,
    "prob_desc_description": "In some social network, there are $$$n$$$ users communicating with each other in $$$m$$$ groups of friends. Let's analyze the process of distributing some news between users.Initially, some user $$$x$$$ receives the news from some source. Then he or she sends the news to his or her friends (two users are friends if there is at least one group such that both of them belong to this group). Friends continue sending the news to their friends, and so on. The process ends when there is no pair of friends such that one of them knows the news, and another one doesn't know.For each user $$$x$$$ you have to determine what is the number of users that will know the news if initially only user $$$x$$$ starts distributing it. ",
    "prob_desc_output_spec": "Print $$$n$$$ integers. The $$$i$$$-th integer should be equal to the number of users that will know the news if user $$$i$$$ starts distributing it.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n, m \\le 5 \\cdot 10^5$$$) — the number of users and the number of groups of friends, respectively. Then $$$m$$$ lines follow, each describing a group of friends. The $$$i$$$-th line begins with integer $$$k_i$$$ ($$$0 \\le k_i \\le n$$$) — the number of users in the $$$i$$$-th group. Then $$$k_i$$$ distinct integers follow, denoting the users belonging to the $$$i$$$-th group. It is guaranteed that $$$\\sum \\limits_{i = 1}^{m} k_i \\le 5 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_005.jsonl",
    "code_uid": "85547c63cb47b60b13670848592de960",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7 5\\n3 2 5 4\\n0\\n2 1 2\\n1 1\\n2 6 7\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys,bisect\n\nfrom sys  import stdin,stdout\n\nfrom bisect import bisect_left,bisect_right,bisect,insort,insort_left,insort_right\n\nfrom math import gcd,ceil,floor,sqrt\n\nfrom collections import Counter,defaultdict,deque,OrderedDict\n\nfrom queue import Queue,PriorityQueue\n\nfrom string import ascii_lowercase\n\nfrom heapq import *\n\nfrom itertools import islice\n\n\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 998244353\nmod = 10**9+7\n\ndef st():\n    return list(stdin.readline().strip())\n\ndef inp():\n    return int(stdin.readline())\n\ndef li():\n    return list(map(int,stdin.readline().split()))\n\ndef mp():\n    return map(int,stdin.readline().split())\n\ndef solve():\n    n,m=mp()\n    d={i:[] for i in range(1,n+1)}\n    for _ in range(m):\n        l=li()\n        x=l[0]\n        if x>1:\n            for i in range(1,x):\n                d[l[i]].append(l[i+1])\n                d[l[i+1]].append(l[i])\n\n    \n                \n    ans=[-1 for i in range(n+1)]\n    vi=[-1 for i in range(n+1)]\n    for i in range(1,n+1):\n        \n        if vi[i]==-1:\n            \n            vi[i]=i\n            stack=[i]\n            ans[i]=1\n            while stack:\n                a=stack.pop()\n                for x in d[a]:\n                    if vi[x]==-1:\n                        ans[i]+=1\n                        vi[x]=i\n                        stack.append(x)\n                    \n\n    print(' '.join((str(ans[vi[i]]) for i in range(1,n+1))))\n    \n\nfor _ in range(1):\n    solve()\n##    print(\"Case #{}:\".format(_+1),c)\n##    \n",
    "prob_desc_created_at": "1557930900",
    "tags": [
        "dsu",
        "dfs and similar",
        "graphs"
    ],
    "hidden_unit_tests": ""
}