{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"160\", \"645\"]",
    "src_uid": "f9c53d180868776b6a2ee3f57c3b3a21",
    "prob_desc_notes": "NotePossible partitions in the first sample:  {{1, 2, 3}, {4}}, W(R) = 3·(w1 + w2 + w3) + 1·w4 = 24;  {{1, 2, 4}, {3}}, W(R) = 26;  {{1, 3, 4}, {2}}, W(R) = 24;  {{1, 2}, {3, 4}}, W(R) = 2·(w1 + w2) + 2·(w3 + w4) = 20;  {{1, 3}, {2, 4}}, W(R) = 20;  {{1, 4}, {2, 3}}, W(R) = 20;  {{1}, {2, 3, 4}}, W(R) = 26; Possible partitions in the second sample:  {{1, 2, 3, 4}, {5}}, W(R) = 45;  {{1, 2, 3, 5}, {4}}, W(R) = 48;  {{1, 2, 4, 5}, {3}}, W(R) = 51;  {{1, 3, 4, 5}, {2}}, W(R) = 54;  {{2, 3, 4, 5}, {1}}, W(R) = 57;  {{1, 2, 3}, {4, 5}}, W(R) = 36;  {{1, 2, 4}, {3, 5}}, W(R) = 37;  {{1, 2, 5}, {3, 4}}, W(R) = 38;  {{1, 3, 4}, {2, 5}}, W(R) = 38;  {{1, 3, 5}, {2, 4}}, W(R) = 39;  {{1, 4, 5}, {2, 3}}, W(R) = 40;  {{2, 3, 4}, {1, 5}}, W(R) = 39;  {{2, 3, 5}, {1, 4}}, W(R) = 40;  {{2, 4, 5}, {1, 3}}, W(R) = 41;  {{3, 4, 5}, {1, 2}}, W(R) = 42. ",
    "prob_desc_description": "You are given a set of n elements indexed from 1 to n. The weight of i-th element is wi. The weight of some subset of a given set is denoted as . The weight of some partition R of a given set into k subsets is  (recall that a partition of a given set is a set of its subsets such that every element of the given set belongs to exactly one subset in partition).Calculate the sum of weights of all partitions of a given set into exactly k non-empty subsets, and print it modulo 109 + 7. Two partitions are considered different iff there exist two elements x and y such that they belong to the same set in one of the partitions, and to different sets in another partition.",
    "prob_desc_output_spec": "Print one integer — the sum of weights of all partitions of a given set into k non-empty subsets, taken modulo 109 + 7.",
    "prob_desc_input_spec": "The first line contains two integers n and k (1 ≤ k ≤ n ≤ 2·105) — the number of elements and the number of subsets in each partition, respectively. The second line contains n integers wi (1 ≤ wi ≤ 109)— weights of elements of the set.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2700,
    "file_name": "train_024.jsonl",
    "code_uid": "a3d24fe5ccf6a3bfc6cd9d4da3d32767",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 2\\n2 3 2 3\", \"5 2\\n1 2 3 4 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "n, k = map(int, input().split())\n\nMOD = 10**9+7\n\n\ndef fast_modinv(up_to, M):\n    ''' Fast modular inverses of 1..up_to   modulo M. '''\n    modinv = [-1 for _ in range(up_to + 1)]\n    modinv[1] = 1\n    for x in range(2, up_to + 1):\n        modinv[x] = (-(M//x) * modinv[M%x])%M\n    return modinv\n\nmaxn = 2*10**5 + 10\nmodinv = fast_modinv(maxn, MOD)\nfact, factinv = [1], [1]\nfor i in range(1, maxn):\n    fact.append(fact[-1]*i % MOD)\n    factinv.append(factinv[-1]*modinv[i] % MOD)\n\n\ndef Stirling(n, k):\n    '''The Stirling number of second kind (number of nonempty partitions). '''\n    if k > n:\n        return 0\n    result = 0\n    for j in range(k+1):\n        result += (-1 if (k-j)&1 else 1) * fact[k] * factinv[j] * factinv[k - j] * pow(j, n, MOD) % MOD\n        result %= MOD\n    result *= factinv[k]\n    return result % MOD\n\nW = sum(map(int, input().split())) % MOD\nprint((Stirling(n, k) + (n - 1) * Stirling(n - 1, k))* W % MOD)\n",
    "prob_desc_created_at": "1522850700",
    "tags": [
        "combinatorics",
        "number theory",
        "math"
    ],
    "hidden_unit_tests": ""
}