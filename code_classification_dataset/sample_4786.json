{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\\n2\\n3\\n3\"]",
    "src_uid": "6280a3373ab8fc34bb41fd98648019a6",
    "prob_desc_notes": "NoteSample explanation:In the first test case, the graph constructed from the bracket sequence (), is just a graph containing nodes $$$1$$$ and $$$2$$$ connected by a single edge. In the second test case, the graph constructed from the bracket sequence ()(()) would be the following (containing two connected components):  Definition of Underlined Terms: A sequence of brackets is called balanced if one can turn it into a valid math expression by adding characters $$$+$$$ and $$$1$$$. For example, sequences (())(), (), and (()(())) are balanced, while )(, ((), and (()))( are not. The subsegment $$$s[l \\ldots r]$$$ denotes the sequence $$$[s_l, s_{l + 1}, \\ldots, s_r]$$$. A connected component is a set of vertices $$$X$$$ such that for every two vertices from this set there exists at least one path in the graph connecting these vertices, but adding any other vertex to $$$X$$$ violates this rule.",
    "prob_desc_description": "Last summer, Feluda gifted Lalmohan-Babu a balanced bracket sequence $$$s$$$ of length $$$2 n$$$.Topshe was bored during his summer vacations, and hence he decided to draw an undirected graph of $$$2 n$$$ vertices using the balanced bracket sequence $$$s$$$. For any two distinct vertices $$$i$$$ and $$$j$$$ ($$$1 \\le i &lt; j \\le 2 n$$$), Topshe draws an edge (undirected and unweighted) between these two nodes if and only if the subsegment $$$s[i \\ldots j]$$$ forms a balanced bracket sequence.Determine the number of connected components in Topshe's graph.See the Notes section for definitions of the underlined terms.",
    "prob_desc_output_spec": "For each test case, output a single integer — the number of connected components in Topshe's graph.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^5$$$) — the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$) — the number of opening brackets in string $$$s$$$. The second line of each test case contains a string $$$s$$$ of length $$$2 n$$$ — a balanced bracket sequence consisting of $$$n$$$ opening brackets \"(\", and $$$n$$$ closing brackets \")\". It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1300,
    "file_name": "train_106.jsonl",
    "code_uid": "cff1ed2636535a3247b2b608a1bf5168",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n\\n1\\n\\n()\\n\\n3\\n\\n()(())\\n\\n3\\n\\n((()))\\n\\n4\\n\\n(())(())\"]",
    "exec_outcome": "PASSED",
    "source_code": "\r\n\r\nn = int(input())\r\nfor i in range(n):\r\n    trash = int(input())\r\n    miew = input()\r\n    balance = 0\r\n    groups = 0\r\n    recently_closed = False\r\n    for j in range(len(miew)):\r\n        char = miew[j]\r\n        if char == '(':\r\n            balance += 1\r\n            recently_closed = False\r\n        else:\r\n            if balance > 0 and recently_closed:\r\n                groups += 1\r\n            if balance > 0:\r\n                balance -= 1\r\n                recently_closed = True\r\n            else:\r\n                groups += 1\r\n        # print(groups, j)\r\n    groups += balance + 1\r\n    print(groups)\r\n\r\n\r\n\r\n",
    "prob_desc_created_at": "1662474900",
    "tags": [
        "data structures",
        "dsu",
        "graphs",
        "greedy"
    ],
    "hidden_unit_tests": ""
}