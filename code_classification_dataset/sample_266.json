{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\\n1 3\", \"0\"]",
    "src_uid": "3fc0ac711b113fa98f41740536dad44f",
    "prob_desc_notes": null,
    "prob_desc_description": "Little Susie, thanks to her older brother, likes to play with cars. Today she decided to set up a tournament between them. The process of a tournament is described in the next paragraph.There are n toy cars. Each pair collides. The result of a collision can be one of the following: no car turned over, one car turned over, both cars turned over. A car is good if it turned over in no collision. The results of the collisions are determined by an n × n matrix А: there is a number on the intersection of the і-th row and j-th column that describes the result of the collision of the і-th and the j-th car:    - 1: if this pair of cars never collided.  - 1 occurs only on the main diagonal of the matrix.  0: if no car turned over during the collision.  1: if only the i-th car turned over during the collision.  2: if only the j-th car turned over during the collision.  3: if both cars turned over during the collision. Susie wants to find all the good cars. She quickly determined which cars are good. Can you cope with the task?",
    "prob_desc_output_spec": "Print the number of good cars and in the next line print their space-separated indices in the increasing order.",
    "prob_desc_input_spec": "The first line contains integer n (1 ≤ n ≤ 100) — the number of cars. Each of the next n lines contains n space-separated integers that determine matrix A.  It is guaranteed that on the main diagonal there are  - 1, and  - 1 doesn't appear anywhere else in the matrix. It is guaranteed that the input is correct, that is, if Aij = 1, then Aji = 2, if Aij = 3, then Aji = 3, and if Aij = 0, then Aji = 0.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 900,
    "file_name": "train_001.jsonl",
    "code_uid": "ab1a6579f1eee2a9c737c54fdce48bf1",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n-1 0 0\\n0 -1 1\\n0 2 -1\", \"4\\n-1 3 3 3\\n3 -1 3 3\\n3 3 -1 3\\n3 3 3 -1\"]",
    "exec_outcome": "PASSED",
    "source_code": "def isFallen(n, matrix):\n\tfallen = [1 for i in range(n)]\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tif i != j:\n\t\t\t\tif matrix[i][j] == 3:\n\t\t\t\t\tfallen[i] = 0\n\t\t\t\tif matrix[i][j] == 1:\n\t\t\t\t\tfallen[i] = 0\n\tsurvived = []\n\tfor i in range(len(fallen)):\n\t\tif fallen[i] == 1:\n\t\t\tsurvived.append(i)\n\treturn (survived)\n\ndef plus(x):\n\treturn str(x + 1)\n\na = int(raw_input())\nnew = []\nfor i in range(a):\n\tb = raw_input()\n\tnew.append(map(int, b.split(\" \")))\nans = isFallen(a, new)\nprint len(ans)\nans = map(plus, ans)\nprint \" \".join(ans)\n",
    "prob_desc_created_at": "1432053000",
    "tags": [
        "implementation"
    ],
    "hidden_unit_tests": ""
}