{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1 3\\n2\", \"1 4\\n1\", \"5 0\\n1 2 3 4 5\"]",
    "src_uid": "da517ae908ba466da8ded87cec12a9fa",
    "prob_desc_notes": "NoteIn the first sample the pair of numbers is right, as numbers 6, 9, 3 are divisible by 3.In the second sample all numbers are divisible by number 1.In the third sample all numbers are prime, so conditions 1 and 2 are true only for pairs of numbers (1, 1), (2, 2), (3, 3), (4, 4), (5, 5).",
    "prob_desc_description": "Simon has an array a1, a2, ..., an, consisting of n positive integers. Today Simon asked you to find a pair of integers l, r (1 ≤ l ≤ r ≤ n), such that the following conditions hold:  there is integer j (l ≤ j ≤ r), such that all integers al, al + 1, ..., ar are divisible by aj;  value r - l takes the maximum value among all pairs for which condition 1 is true; Help Simon, find the required pair of numbers (l, r). If there are multiple required pairs find all of them.",
    "prob_desc_output_spec": "Print two integers in the first line — the number of required pairs and the maximum value of r - l. On the following line print all l values from optimal pairs in increasing order.",
    "prob_desc_input_spec": "The first line contains integer n (1 ≤ n ≤ 3·105). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 106).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_071.jsonl",
    "code_uid": "5d33e4b2afcf37b9bfe8edd258861d19",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n4 6 9 3 6\", \"5\\n1 3 5 7 9\", \"5\\n2 3 5 7 11\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input()) + 1\nt = [1] + list(map(int, input().split())) + [1]\np = [True] * n\ns, q = 0, list(range(1, n))\nfor i in range(1, n):\n    if p[i]:\n        a = b = i\n        d = t[i]\n        if d == 1: \n            s, q = n - 2, [1]\n            break\n        while t[a - 1] % d == 0: a -= 1\n        while t[b + 1] % d == 0:\n            b += 1\n            p[b] = False\n        d = b - a\n        if d > s: s, q = d, [a]\n        elif d == s != 0: q.append(a)\nprint(len(q), s)\nprint(' '.join(map(str, q)))",
    "prob_desc_created_at": "1383379200",
    "tags": [
        "two pointers",
        "math",
        "data structures",
        "binary search",
        "brute force"
    ],
    "hidden_unit_tests": ""
}