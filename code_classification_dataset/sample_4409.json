{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"0\\n1\\n2\\n2\\n1\\n3\\n3\\n0\\n1\"]",
    "src_uid": "ff3216bcb009cb963d7e734ceb0e9722",
    "prob_desc_notes": "NoteIn the first test case, the GCD of the entire array is already equal to $$$1$$$, so there is no need to perform operations.In the second test case, select $$$i = 1$$$. After this operation, $$$a_1 = \\gcd(2, 1) = 1$$$. The cost of this operation is $$$1$$$.In the third test case, you can select $$$i = 1$$$, after that the array $$$a$$$ will be equal to $$$[1, 4]$$$. The GCD of this array is $$$1$$$, and the total cost is $$$2$$$.In the fourth test case, you can select $$$i = 2$$$, after that the array $$$a$$$ will be equal to $$$[3, 2, 9]$$$. The GCD of this array is $$$1$$$, and the total cost is $$$2$$$.In the sixth test case, you can select $$$i = 4$$$ and $$$i = 5$$$, after that the array $$$a$$$ will be equal to $$$[120, 60, 80, 4, 5]$$$. The GCD of this array is $$$1$$$, and the total cost is $$$3$$$.",
    "prob_desc_description": "You are given an array $$$a$$$ consisting of $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$. Friends asked you to make the greatest common divisor (GCD) of all numbers in the array equal to $$$1$$$. In one operation, you can do the following: Select an arbitrary index in the array $$$1 \\leq i \\leq n$$$; Make $$$a_i = \\gcd(a_i, i)$$$, where $$$\\gcd(x, y)$$$ denotes the GCD of integers $$$x$$$ and $$$y$$$. The cost of such an operation is $$$n - i + 1$$$.You need to find the minimum total cost of operations we need to perform so that the GCD of the all array numbers becomes equal to $$$1$$$.",
    "prob_desc_output_spec": "For each test case, output a single integer — the minimum total cost of operations that will need to be performed so that the GCD of all numbers in the array becomes equal to $$$1$$$. We can show that it's always possible to do so.",
    "prob_desc_input_spec": "Each test consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 5\\,000$$$) — the number of test cases. The description of test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 20$$$) — the length of the array. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the elements of the array.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1000,
    "file_name": "train_097.jsonl",
    "code_uid": "90e6d61f401849a53de7fbd8c8879809",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"9\\n\\n1\\n\\n1\\n\\n1\\n\\n2\\n\\n2\\n\\n2 4\\n\\n3\\n\\n3 6 9\\n\\n4\\n\\n5 10 15 20\\n\\n5\\n\\n120 60 80 40 80\\n\\n6\\n\\n150 90 180 120 60 30\\n\\n6\\n\\n2 4 6 9 12 18\\n\\n6\\n\\n30 60 90 120 125 125\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys,math\r\ninput=sys.stdin.readline\r\nfor _ in range(int(input())):\r\n    n=int(input())\r\n    lst=list(map(int,input().split()))\r\n    gd=lst[0]\r\n    for i in lst[1:]: gd=math.gcd(gd,i)\r\n    if gd==1: print(0)\r\n    elif math.gcd(gd,n)==1: print(1)\r\n    elif math.gcd(gd,n-1)==1: print(2)\r\n    else: print(3)\r\n\r\n\r\n ",
    "prob_desc_created_at": "1666519500",
    "tags": [
        "brute force",
        "combinatorics",
        "constructive algorithms",
        "implementation",
        "math",
        "number theory"
    ],
    "hidden_unit_tests": ""
}