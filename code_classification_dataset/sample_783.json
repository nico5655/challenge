{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\", \"5\", \"1\", \"-1\"]",
    "src_uid": "f6ad39fba01389799fddc2bd7a287138",
    "prob_desc_notes": "NoteIn the first test, Naman can choose the subsequence corresponding to indices $$$\\{2, 6\\}$$$ and rotate it once to convert $$$s$$$ into $$$t$$$.In the second test, he can rotate the subsequence corresponding to all indices $$$5$$$ times. It can be proved, that it is the minimum required number of operations.In the last test, it is impossible to convert $$$s$$$ into $$$t$$$.",
    "prob_desc_description": "Naman has two binary strings $$$s$$$ and $$$t$$$ of length $$$n$$$ (a binary string is a string which only consists of the characters \"0\" and \"1\"). He wants to convert $$$s$$$ into $$$t$$$ using the following operation as few times as possible.In one operation, he can choose any subsequence of $$$s$$$ and rotate it clockwise once.For example, if $$$s = 1\\textbf{1}101\\textbf{00}$$$, he can choose a subsequence corresponding to indices ($$$1$$$-based) $$$\\{2, 6, 7 \\}$$$ and rotate them clockwise. The resulting string would then be $$$s = 1\\textbf{0}101\\textbf{10}$$$.A string $$$a$$$ is said to be a subsequence of string $$$b$$$ if $$$a$$$ can be obtained from $$$b$$$ by deleting some characters without changing the ordering of the remaining characters.To perform a clockwise rotation on a sequence $$$c$$$ of size $$$k$$$ is to perform an operation which sets $$$c_1:=c_k, c_2:=c_1, c_3:=c_2, \\ldots, c_k:=c_{k-1}$$$ simultaneously.Determine the minimum number of operations Naman has to perform to convert $$$s$$$ into $$$t$$$ or say that it is impossible. ",
    "prob_desc_output_spec": "If it is impossible to convert $$$s$$$ to $$$t$$$ after any number of operations, print $$$-1$$$. Otherwise, print the minimum number of operations required.",
    "prob_desc_input_spec": "The first line contains a single integer $$$n$$$ $$$(1 \\le n \\le 10^6)$$$ — the length of the strings. The second line contains the binary string $$$s$$$ of length $$$n$$$. The third line contains the binary string $$$t$$$ of length $$$n$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_004.jsonl",
    "code_uid": "8df1b66545fcf3b063e7b5ffab1c57f5",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n010000\\n000001\", \"10\\n1111100000\\n0000011111\", \"8\\n10101010\\n01010101\", \"10\\n1111100000\\n1111100001\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import Counter, defaultdict, deque\nimport bisect\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math\n\n# sys.stdin = open('input')\n\ndef inp(force_list=False):\n    re = map(int, raw_input().split())\n    if len(re) == 1 and not force_list:\n        return re[0]\n    return re\n\ndef inst():\n    return raw_input().strip()\n\ndef gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\n\ndef my_main():\n    t = 1\n    for _ in range(t):\n        n = inp()\n        a = inst()\n        b = inst()\n        da = []\n        for i in range(n):\n            if a[i]!=b[i]:\n                da.append(0 if a[i]=='0' else 1)\n        ml = 1\n        k = 0\n        last = -1\n        # print da\n        if not da:\n            print 0\n            return\n        if len(da)%2==1 or sum(da) != len(da)/2:\n            print -1\n            return\n        mp = [1, -1]\n        mi = 0\n        now = 0\n        for i in da:\n            now += mp[i]\n            mi = min(mi, now)\n            ml = max(ml, now - mi)\n        mp = [-1, 1]\n        mi = 0\n        now = 0\n        for i in da:\n            now += mp[i]\n            mi = min(mi, now)\n            ml = max(ml, now - mi)\n        print ml\n\nmy_main()\n",
    "prob_desc_created_at": "1592663700",
    "tags": [
        "data structures",
        "constructive algorithms",
        "binary search",
        "greedy"
    ],
    "hidden_unit_tests": ""
}