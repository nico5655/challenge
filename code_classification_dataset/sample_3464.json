{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"19.0000000000\", \"-1\"]",
    "src_uid": "8eda3e355d2823b0c8f92e1628dc1b69",
    "prob_desc_notes": null,
    "prob_desc_description": "Vasya lagged behind at the University and got to the battlefield. Just joking! He's simply playing some computer game. The field is a flat platform with n trenches dug on it. The trenches are segments on a plane parallel to the coordinate axes. No two trenches intersect.There is a huge enemy laser far away from Vasya. The laser charges for a seconds, and then shoots continuously for b seconds. Then, it charges for a seconds again. Then it shoots continuously for b seconds again and so on. Vasya knows numbers a and b. He also knows that while the laser is shooting, Vasya must be in the trench, but while the laser is charging, Vasya can safely move around the field. The main thing is to have time to hide in the trench before the shot. If Vasya reaches the trench exactly at the moment when the laser starts shooting, we believe that Vasya managed to hide. Coincidentally, the length of any trench in meters numerically does not exceed b.Initially, Vasya is at point A. He needs to get to point B. Vasya moves at speed 1 meter per second in either direction. You can get in or out of the trench at any its point. Getting in or out of the trench takes no time. It is also possible to move in the trench, without leaving it.What is the minimum time Vasya needs to get from point A to point B, if at the initial time the laser has just started charging? If Vasya cannot get from point A to point B, print -1. If Vasya reaches point B at the moment when the laser begins to shoot, it is believed that Vasya managed to reach point B.",
    "prob_desc_output_spec": "If Vasya can get from point A to point B, print the minimum time he will need for it. Otherwise, print number -1. The answer will be considered correct if the absolute or relative error does not exceed 10 - 4",
    "prob_desc_input_spec": "The first line contains two space-separated integers: a and b (1 ≤ a, b ≤ 1000), — the duration of charging and the duration of shooting, in seconds. The second line contains four space-separated integers: Ax, Ay, Bx, By ( - 104 ≤ Ax, Ay, Bx, By ≤ 104) — the coordinates of points А and B. It is guaranteed that points A and B do not belong to any trench. The third line contains a single integer: n (1 ≤ n ≤ 1000), — the number of trenches.  Each of the following n lines contains four space-separated integers: x1, y1, x2, y2 ( - 104 ≤ xi, yi ≤ 104) — the coordinates of ends of the corresponding trench. All coordinates are given in meters. It is guaranteed that for any trench either x1 = x2, or y1 = y2. No two trenches intersect. The length of any trench in meters doesn't exceed b numerically.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_061.jsonl",
    "code_uid": "3352b1902067fa6b8c0010b33c65bc73",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2 4\\n0 5 6 5\\n3\\n0 0 0 4\\n1 1 4 1\\n6 0 6 4\", \"5 10\\n0 0 10 10\\n1\\n5 0 5 9\"]",
    "exec_outcome": "PASSED",
    "source_code": "import math\nR = lambda: map(int, raw_input().split())\na, b = R()\nAx, Ay, Bx, By = R()\nn = R()[0]\nx1, y1, x2, y2 = [Ax],[Ay],[Ax],[Ay]\n\nfor i in range(n):\n\t_t1, _t2, _t3, _t4 = R()\n\tif (_t1 > _t3): _t1, _t3 = _t3, _t1\t\t\n\tif (_t2 > _t4):_t2, _t4 = _t4, _t2\n\tx1.append(_t1)\n\ty1.append(_t2)\n\tx2.append(_t3)\n\ty2.append(_t4)\n\t\nx1.append(Bx)\ny1.append(By)\nx2.append(Bx)\ny2.append(By)\n\nkc = lambda x1, y1, x2, y2: (x1 - x2)**2 + (y1-y2)**2\nkc2 = lambda x, y: x*x + y*y\n\ndef can_go2(i, j):\n\td = min(kc(x1[i],y1[i], x1[j], y1[j]), kc(x1[i],y1[i], x2[j], y2[j]), kc(x1[i],y1[i], x1[j], y2[j]), kc(x1[i],y1[i], x2[j], y1[j]),\n\t\t\tkc(x1[i],y2[i], x1[j], y1[j]), kc(x1[i],y2[i], x2[j], y2[j]), kc(x1[i],y2[i], x1[j], y2[j]), kc(x1[i],y2[i], x2[j], y1[j]),\n\t\t\tkc(x2[i],y1[i], x1[j], y1[j]), kc(x2[i],y1[i], x2[j], y2[j]), kc(x2[i],y1[i], x1[j], y2[j]), kc(x2[i],y1[i], x2[j], y1[j]),\n\t\t\tkc(x2[i],y2[i], x1[j], y1[j]), kc(x2[i],y2[i], x2[j], y2[j]), kc(x2[i],y2[i], x1[j], y2[j]), kc(x2[i],y2[i], x2[j], y1[j]))\n\tif (x1[i]-x1[j]) * (x2[j]-x1[i]) >= 0 or (x2[i] - x1[j]) * (x2[j] - x2[i]) >=0:\n\t\td = min(d, math.fabs(y1[i] - y2[j]), math.fabs(y1[i] - y1[j]), math.fabs(y2[i] - y1[j]), math.fabs(y2[i] - y2[j]))\n\tif (y1[i]-y1[j]) * (y2[j]-y1[i]) >= 0 or (y2[i] - y1[j]) * (y2[j] - y2[i]) >=0:\n\t\td = min(d, math.fabs(x1[i] - x2[j]), math.fabs(x1[i] - x1[j]), math.fabs(x2[i] - x1[j]), math.fabs(x2[i] - x2[j]))\n\tif d <= a ** 2: return d\n\telse: return 0\n\t\ndef can_go(i, j):\n\td = kc2(max(0, max(x1[i],x1[j]) - min(x2[i], x2[j])), max(0, max(y1[i], y1[j]) - min(y2[i], y2[j])))\n\tif d <= a ** 2: return d\n\telse: return 0\n\ndres = [-1 for i in range(0, n+2)]\ndres[0] = 0\nq = [0]\nfirst, last = 0, 0\n\nwhile first <= last:\n\ti = q[first]\n\t#print \"BFS from %d\" % i\n\tfirst += 1\n\tfor j in range(1, n+1): \n\t\tif dres[j] == -1:\n\t\t\tif can_go(i, j) > 0:\t\n\t\t\t\t#print \"---Visit %d\" % j\n\t\t\t\tlast += 1\n\t\t\t\tq.append(j)\n\t\t\t\tdres[j] = dres[i] + 1\n\nres = 1000000000.0\nif can_go(0, n + 1) > 0: res = math.sqrt(kc(Ax, Ay, Bx, By))\n\nfor i in range(1, n + 1):\n\tif dres[i] > 0:\n\t\ttmp = can_go(i, n + 1)\n\t\tif tmp > 0: res = min(res, dres[i] * (a + b) + math.sqrt(tmp))\n\t\t\nif res == 1000000000.0: print \"-1\"\nelse: print \"%.10f\" % res",
    "prob_desc_created_at": "1335280200",
    "tags": [
        "graphs",
        "implementation",
        "geometry",
        "shortest paths"
    ],
    "hidden_unit_tests": ""
}