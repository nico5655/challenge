{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1 2 1 \\n1 3 2 3 \\n1\"]",
    "src_uid": "afb43928545743b497b1a9975768f8e5",
    "prob_desc_notes": "NoteIn the second test case, the lexicographically minimum cycle looks like: $$$1, 2, 1, 3, 2, 3, 1$$$.In the third test case, it's quite obvious that the cycle should start and end in vertex $$$1$$$.",
    "prob_desc_description": "You are given a complete directed graph $$$K_n$$$ with $$$n$$$ vertices: each pair of vertices $$$u \\neq v$$$ in $$$K_n$$$ have both directed edges $$$(u, v)$$$ and $$$(v, u)$$$; there are no self-loops.You should find such a cycle in $$$K_n$$$ that visits every directed edge exactly once (allowing for revisiting vertices).We can write such cycle as a list of $$$n(n - 1) + 1$$$ vertices $$$v_1, v_2, v_3, \\dots, v_{n(n - 1) - 1}, v_{n(n - 1)}, v_{n(n - 1) + 1} = v_1$$$ — a visiting order, where each $$$(v_i, v_{i + 1})$$$ occurs exactly once.Find the lexicographically smallest such cycle. It's not hard to prove that the cycle always exists.Since the answer can be too large print its $$$[l, r]$$$ segment, in other words, $$$v_l, v_{l + 1}, \\dots, v_r$$$.",
    "prob_desc_output_spec": "For each test case print the segment $$$v_l, v_{l + 1}, \\dots, v_r$$$ of the lexicographically smallest cycle that visits every edge exactly once.",
    "prob_desc_input_spec": "The first line contains the single integer $$$T$$$ ($$$1 \\le T \\le 100$$$) — the number of test cases. Next $$$T$$$ lines contain test cases — one per line. The first and only line of each test case contains three integers $$$n$$$, $$$l$$$ and $$$r$$$ ($$$2 \\le n \\le 10^5$$$, $$$1 \\le l \\le r \\le n(n - 1) + 1$$$, $$$r - l + 1 \\le 10^5$$$) — the number of vertices in $$$K_n$$$, and segment of the cycle to print. It's guaranteed that the total sum of $$$n$$$ doesn't exceed $$$10^5$$$ and the total sum of $$$r - l + 1$$$ doesn't exceed $$$10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_002.jsonl",
    "code_uid": "85ba21ba1cf20679f6b2fa61b85b452e",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n2 1 3\\n3 3 6\\n99995 9998900031 9998900031\"]",
    "exec_outcome": "PASSED",
    "source_code": "def solve():\n    n, l, r = [int(i) for i in input().split()]\n\n    seq = []\n    \n    i = 1\n    while l <= r:\n        while l > 2 * n - 2:\n            if l == 3:\n                i = 1\n                break\n            l -= 2 * n - 2\n            r -= 2 * n - 2\n            n -= 1\n            i += 1\n       \n        if l%2 == 0:\n            seq.append(l // 2 + i)\n        else:\n            seq.append(i)\n        \n        l += 1\n        \n    return \" \".join(str(i) for i in seq)\n\nT = int(input())\nfor _ in range(T):\n    print(solve())\n",
    "prob_desc_created_at": "1586529300",
    "tags": [
        "constructive algorithms",
        "implementation",
        "greedy",
        "graphs"
    ],
    "hidden_unit_tests": ""
}