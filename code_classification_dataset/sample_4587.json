{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"cc\\ncbaabc\\naa\\nbb\"]",
    "src_uid": "dd7faacff9f57635f8e00c2f8f5a4650",
    "prob_desc_notes": "NoteIn the first test case choose $$$k = 1$$$ to obtain \"cc\".In the second test case choose $$$k = 3$$$ to obtain \"cbaabc\".In the third test case choose $$$k = 1$$$ to obtain \"aa\".In the fourth test case choose $$$k = 1$$$ to obtain \"bb\".",
    "prob_desc_description": "You have a string $$$s_1 s_2 \\ldots s_n$$$ and you stand on the left of the string looking right. You want to choose an index $$$k$$$ ($$$1 \\le k \\le n$$$) and place a mirror after the $$$k$$$-th letter, so that what you see is $$$s_1 s_2 \\ldots s_k s_k s_{k - 1} \\ldots s_1$$$. What is the lexicographically smallest string you can see?A string $$$a$$$ is lexicographically smaller than a string $$$b$$$ if and only if one of the following holds:   $$$a$$$ is a prefix of $$$b$$$, but $$$a \\ne b$$$;  in the first position where $$$a$$$ and $$$b$$$ differ, the string $$$a$$$ has a letter that appears earlier in the alphabet than the corresponding letter in $$$b$$$. ",
    "prob_desc_output_spec": "For each test case print the lexicographically smallest string you can see.",
    "prob_desc_input_spec": "The first line of input contains one integer $$$t$$$ ($$$1 \\leq t \\leq 10\\,000$$$): the number of test cases. The next $$$t$$$ lines contain the description of the test cases, two lines per a test case. In the first line you are given one integer $$$n$$$ ($$$1 \\leq n \\leq 10^5$$$): the length of the string. The second line contains the string $$$s$$$ consisting of $$$n$$$ lowercase English characters. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_101.jsonl",
    "code_uid": "9ba2a3d400e2452bc13b5360b2f2e884",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n10\\ncodeforces\\n9\\ncbacbacba\\n3\\naaa\\n4\\nbbaa\"]",
    "exec_outcome": "PASSED",
    "source_code": "for s in[*open(0)][2::2]:\n a=*map(ord,s[:-1]),123;i=1\n while(i>1)+a[i-1]>a[i]:i+=1\n s=s[:i];print(s+s[::-1])",
    "prob_desc_created_at": "1640792100",
    "tags": [
        "greedy",
        "strings"
    ],
    "hidden_unit_tests": ""
}