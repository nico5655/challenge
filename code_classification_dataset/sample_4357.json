{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2 1\\n2 2\\n1 2\\n3 3\\n6 5\"]",
    "src_uid": "cffcbdd58cc02f96d70d0819fef5131d",
    "prob_desc_notes": "NoteIn the first test case the two black cells have coordinates $$$(1,1)$$$ and $$$(3,2)$$$. The four optimal cells are $$$(1,2)$$$, $$$(2,1)$$$, $$$(2,2)$$$ and $$$(3,1)$$$. It can be shown that no other cell minimizes the maximum Manhattan distance to every black cell.In the second test case it is optimal to choose the black cell $$$(2,2)$$$ with maximum Manhattan distance being $$$2$$$.",
    "prob_desc_description": "Lena is a beautiful girl who likes logical puzzles.As a gift for her birthday, Lena got a matrix puzzle!The matrix consists of $$$n$$$ rows and $$$m$$$ columns, and each cell is either black or white. The coordinates $$$(i,j)$$$ denote the cell which belongs to the $$$i$$$-th row and $$$j$$$-th column for every $$$1\\leq i \\leq n$$$ and $$$1\\leq j \\leq m$$$. To solve the puzzle, Lena has to choose a cell that minimizes the Manhattan distance to the farthest black cell from the chosen cell.More formally, let there be $$$k \\ge 1$$$ black cells in the matrix with coordinates $$$(x_i,y_i)$$$ for every $$$1\\leq i \\leq k$$$. Lena should choose a cell $$$(a,b)$$$ that minimizes $$$$$$\\max_{i=1}^{k}(|a-x_i|+|b-y_i|).$$$$$$As Lena has no skill, she asked you for help. Will you tell her the optimal cell to choose? ",
    "prob_desc_output_spec": "For each test case, output the optimal cell $$$(a,b)$$$ to choose. If multiple answers exist, output any.",
    "prob_desc_input_spec": "There are several test cases in the input data. The first line contains a single integer $$$t$$$ ($$$1\\leq t\\leq 10\\,000$$$) — the number of test cases. This is followed by the test cases description. The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$2\\leq n,m \\leq 1000$$$)  — the dimensions of the matrix.  The following $$$n$$$ lines contain $$$m$$$ characters each, each character is either 'W' or 'B'. The $$$j$$$-th character in the $$$i$$$-th of these lines is 'W' if the cell $$$(i,j)$$$ is white, and 'B' if the cell $$$(i,j)$$$ is black.  It is guaranteed that at least one black cell exists. It is guaranteed that the sum of $$$n\\cdot m$$$ does not exceed $$$10^6$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_095.jsonl",
    "code_uid": "8b96b01620473febe8b72da20bba8eaf",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n3 2\\nBW\\nWW\\nWB\\n3 3\\nWWB\\nWBW\\nBWW\\n2 3\\nBBB\\nBBB\\n5 5\\nBWBWB\\nWBWBW\\nBWBWB\\nWBWBW\\nBWBWB\\n9 9\\nWWWWWWWWW\\nWWWWWWWWW\\nBWWWWWWWW\\nWWWWWWWWW\\nWWWWBWWWW\\nWWWWWWWWW\\nWWWWWWWWW\\nWWWWWWWWW\\nWWWWWWWWB\"]",
    "exec_outcome": "PASSED",
    "source_code": "from __future__ import division, print_function\r\nimport math\r\nimport sys\r\nimport os\r\nfrom io import BytesIO, IOBase\r\nfrom collections import deque, Counter, OrderedDict, defaultdict\r\nimport heapq\r\n# ceil,floor,log,sqrt,factorial,pow,pi,gcd\r\n# import bisect\r\nfrom bisect import bisect_left,bisect_right\r\n\r\nBUFSIZE = 8192\r\n\r\n\r\nclass FastIO(IOBase):\r\n\tnewlines = 0\r\n\r\n\tdef __init__(self, file):\r\n\t\tself._fd = file.fileno()\r\n\t\tself.buffer = BytesIO()\r\n\t\tself.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n\t\tself.write = self.buffer.write if self.writable else None\r\n\r\n\tdef read(self):\r\n\t\twhile True:\r\n\t\t\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n\t\t\tif not b:\r\n\t\t\t\tbreak\r\n\t\t\tptr = self.buffer.tell()\r\n\t\t\tself.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n\t\tself.newlines = 0\r\n\t\treturn self.buffer.read()\r\n\r\n\tdef readline(self):\r\n\t\twhile self.newlines == 0:\r\n\t\t\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n\t\t\tself.newlines = b.count(b\"\\n\") + (not b)\r\n\t\t\tptr = self.buffer.tell()\r\n\t\t\tself.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n\t\tself.newlines -= 1\r\n\t\treturn self.buffer.readline()\r\n\r\n\tdef flush(self):\r\n\t\tif self.writable:\r\n\t\t\tos.write(self._fd, self.buffer.getvalue())\r\n\t\t\tself.buffer.truncate(0), self.buffer.seek(0)\r\n\r\n\r\nclass IOWrapper(IOBase):\r\n\tdef __init__(self, file):\r\n\t\tself.buffer = FastIO(file)\r\n\t\tself.flush = self.buffer.flush\r\n\t\tself.writable = self.buffer.writable\r\n\t\tself.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n\t\tself.read = lambda: self.buffer.read().decode(\"ascii\")\r\n\t\tself.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\n\r\ndef print(*args, **kwargs):\r\n\t\"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\r\n\tsep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\r\n\tat_start = True\r\n\tfor x in args:\r\n\t\tif not at_start:\r\n\t\t\tfile.write(sep)\r\n\t\tfile.write(str(x))\r\n\t\tat_start = False\r\n\tfile.write(kwargs.pop(\"end\", \"\\n\"))\r\n\tif kwargs.pop(\"flush\", False):\r\n\t\tfile.flush()\r\n\r\n\r\nif sys.version_info[0] < 3:\r\n\tsys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\r\nelse:\r\n\tsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\n\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n\r\ndef inp():\r\n    return(int(input()))\r\ndef inps():\r\n    return input().strip()\r\ndef inlt():\r\n    return(list(map(int,input().split())))\r\ndef insr():\r\n    s = input().strip()\r\n    return(list(s[:len(s)]))\r\ndef invr():\r\n    return(map(int,input().split()))\r\n\r\nfrom types import GeneratorType\r\ndef bootstrap(f, stack=[]):\r\n    def wrappedfunc(*args, **kwargs):\r\n        if stack:\r\n            return f(*args, **kwargs)\r\n        else:\r\n            to = f(*args, **kwargs)\r\n            while True:\r\n                if type(to) is GeneratorType:\r\n                    stack.append(to)\r\n                    to = next(to)\r\n                else:\r\n                    stack.pop()\r\n                    if not stack:\r\n                        break\r\n                    to = stack[-1].send(to)\r\n            return to\r\n \r\n    return wrappedfunc\r\n\r\ndef check(x,y):\r\n    if x<=0 or x>n or y<0 or y>m:\r\n        return sys.maxsize\r\n    else:\r\n        val=0\r\n        # print(x,y)\r\n        for a,b in blck:\r\n            val=max(val,abs(a-x)+abs(b-y))\r\n        # print(val,x,y,blck)\r\n        return val\r\n\r\nfor _ in range(inp()):\r\n    n,m=invr()\r\n    l=[]\r\n    for i in range(n):\r\n        l.append(insr())\r\n    mnx,mxx,mny,mxy=sys.maxsize,-sys.maxsize,sys.maxsize,-sys.maxsize\r\n    for i in range(n):\r\n        for j in range(m):\r\n            if l[i][j]=='B':\r\n                x=i+j\r\n                y=i-j\r\n                mnx=min(x,mnx)\r\n                mxx=max(x,mxx)\r\n                mny=min(y,mny)\r\n                mxy=max(y,mxy)\r\n    val=sys.maxsize\r\n    ax,ay=sys.maxsize,sys.maxsize\r\n    for i in range(n):\r\n        for j in range(m):\r\n            a=i+j\r\n            b=i-j\r\n            v=max(abs(mxx-a),abs(mnx-a),abs(mny-b),abs(mxy-b))\r\n            # print(a,b,v,val)\r\n            if v<val:\r\n                val=v\r\n                ax,ay=i+1,j+1\r\n    print(ax,ay)\r\n\r\n ",
    "prob_desc_created_at": "1654878900",
    "tags": [
        "data structures",
        "dp",
        "geometry",
        "shortest paths"
    ],
    "hidden_unit_tests": ""
}