{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\\n1\\n2\\n2\\n3\", \"No solution\"]",
    "src_uid": "a83fe44e7a53294fcfba93bb7b690b88",
    "prob_desc_notes": "NoteConsider the first sample. The user who sent the first request was online from 17:05:53 to 17:06:02, the user who sent the second request was online from 17:05:58 to 17:06:07, the user who sent the third request, was online from 17:06:01 to 17:06:10. Thus, these IDs cannot belong to three distinct users, because in that case all these users would be online, for example, at 17:06:01. That is impossible, because M = 2. That means that some two of these queries belonged to the same user. One of the correct variants is given in the answer to the sample. For it user 1 was online from 17:05:53 to 17:06:02, user 2 — from 17:05:58 to 17:06:10 (he sent the second and third queries), user 3 — from 22:39:47 to 22:39:56.In the second sample there is only one query. So, only one user visited the network within the 24-hour period and there couldn't be two users online on the network simultaneously. (The time the user spent online is the union of time intervals for requests, so users who didn't send requests could not be online in the network.) ",
    "prob_desc_description": "Polycarpus got an internship in one well-known social network. His test task is to count the number of unique users who have visited a social network during the day. Polycarpus was provided with information on all user requests for this time period. For each query, we know its time... and nothing else, because Polycarpus has already accidentally removed the user IDs corresponding to the requests from the database. Thus, it is now impossible to determine whether any two requests are made by the same person or by different people.But wait, something is still known, because that day a record was achieved — M simultaneous users online! In addition, Polycarpus believes that if a user made a request at second s, then he was online for T seconds after that, that is, at seconds s, s + 1, s + 2, ..., s + T - 1. So, the user's time online can be calculated as the union of time intervals of the form [s, s + T - 1] over all times s of requests from him.Guided by these thoughts, Polycarpus wants to assign a user ID to each request so that:  the number of different users online did not exceed M at any moment,  at some second the number of distinct users online reached value M,  the total number of users (the number of distinct identifiers) was as much as possible. Help Polycarpus cope with the test.",
    "prob_desc_output_spec": "In the first line print number R — the largest possible number of distinct users. The following n lines should contain the user IDs for requests in the same order in which the requests are given in the input. User IDs must be integers from 1 to R. The requests of the same user must correspond to the same identifiers, the requests of distinct users must correspond to distinct identifiers. If there are multiple solutions, print any of them. If there is no solution, print \"No solution\" (without the quotes).",
    "prob_desc_input_spec": "The first line contains three integers n, M and T (1 ≤ n, M ≤ 20 000, 1 ≤ T ≤ 86400) — the number of queries, the record number of online users and the time when the user was online after a query was sent. Next n lines contain the times of the queries in the format \"hh:mm:ss\", where hh are hours, mm are minutes, ss are seconds. The times of the queries follow in the non-decreasing order, some of them can coincide. It is guaranteed that all the times and even all the segments of type [s, s + T - 1] are within one 24-hour range (from 00:00:00 to 23:59:59). ",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_049.jsonl",
    "code_uid": "6fe292afcc115284db2c38a57350add4",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 2 10\\n17:05:53\\n17:05:58\\n17:06:01\\n22:39:47\", \"1 2 86400\\n00:00:00\"]",
    "exec_outcome": "PASSED",
    "source_code": "def main():\n    mode=\"filee\"\n    if mode==\"file\":f=open(\"test.txt\",\"r\")\n    get = lambda :[int(x) for x in (f.readline() if mode==\"file\" else input()).split()]\n    gets = lambda :[str(x) for x in (f.readline()[:-1] if mode==\"file\" else input()).split(\":\")]\n    [n,m,t]=get()\n    [a,b]=[[0]*20002,[0]*20002]\n    if n<m:\n        print(\"No solution\")\n        return\n    for i in range(1,n+1):\n        g = gets()\n        a[i] = int(g[-1]) + int(g[1])*60 + int(g[0])*3600\n    [p,count,sim,ist] = [1,0,0,False]\n    for i in range(1,n+1):\n        while p<i and a[i] - t + 1>a[p]:\n            p+=1\n            if b[p]!=b[p-1]:\n                sim = max(sim-1,0)\n        if a[i]<a[p]+t and sim<m:\n            [count,sim] = [count+1,sim+1]\n        if sim==m:\n            ist=True\n        b[i] = count\n    if ist==False:\n        print(\"No solution\")\n        return\n    print(count)\n    for i in range(1,n+1):\n        print(b[i],end=' ')\n\n    if mode==\"file\":f.close()\n\n\nif __name__==\"__main__\":\n    main()\n\n",
    "prob_desc_created_at": "1426946400",
    "tags": [
        "two pointers",
        "greedy"
    ],
    "hidden_unit_tests": ""
}