{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"0\\n1\\n2\\n2\\n1\\n2\\n1\\n2\\n2\\n2\\n2\\n2\"]",
    "src_uid": "b431e4af99eb78e2c6e53d5d08bb0bc4",
    "prob_desc_notes": "NoteLet's consider the state of the string after each query:   $$$s = $$$\"aaaaccccc\". In this case the string does not contain \"abc\" as a subsequence and no replacements are needed. $$$s = $$$\"aaabccccc\". In this case 1 replacements can be performed to get, for instance, string $$$s = $$$\"aaaaccccc\". This string does not contain \"abc\" as a subsequence. $$$s = $$$\"ababccccc\". In this case 2 replacements can be performed to get, for instance, string $$$s = $$$aaaaccccc\". This string does not contain \"abc\" as a subsequence. $$$s = $$$\"ababacccc\". In this case 2 replacements can be performed to get, for instance, string $$$s = $$$\"aaaaacccc\". This string does not contain \"abc\" as a subsequence. $$$s = $$$\"bbabacccc\". In this case 1 replacements can be performed to get, for instance, string $$$s = $$$\"bbacacccc\". This string does not contain \"abc\" as a subsequence. $$$s = $$$\"bbababccc\". In this case 2 replacements can be performed to get, for instance, string $$$s = $$$\"bbacacccc\". This string does not contain \"abc\" as a subsequence. $$$s = $$$\"bbabcbccc\". In this case 1 replacements can be performed to get, for instance, string $$$s = $$$\"bbcbcbccc\". This string does not contain \"abc\" as a subsequence. $$$s = $$$\"baabcbccc\". In this case 2 replacements can be performed to get, for instance, string $$$s = $$$\"bbbbcbccc\". This string does not contain \"abc\" as a subsequence. $$$s = $$$\"aaabcbccc\". In this case 2 replacements can be performed to get, for instance, string $$$s = $$$\"aaacccccc\". This string does not contain \"abc\" as a subsequence. $$$s = $$$\"aaababccc\". In this case 2 replacements can be performed to get, for instance, string $$$s = $$$\"aaacacccc\". This string does not contain \"abc\" as a subsequence. $$$s = $$$\"aaababccc\". In this case 2 replacements can be performed to get, for instance, string $$$s = $$$\"aaacacccc\". This string does not contain \"abc\" as a subsequence. $$$s = $$$\"aaababbcc\". In this case 2 replacements can be performed to get, for instance, string $$$s = $$$\"aaababbbb\". This string does not contain \"abc\" as a subsequence.",
    "prob_desc_description": "  Before becoming a successful trader William got a university degree. During his education an interesting situation happened, after which William started to listen to homework assignments much more attentively. What follows is a formal description of the homework assignment as William heard it:You are given a string $$$s$$$ of length $$$n$$$ only consisting of characters \"a\", \"b\" and \"c\". There are $$$q$$$ queries of format ($$$pos, c$$$), meaning replacing the element of string $$$s$$$ at position $$$pos$$$ with character $$$c$$$. After each query you must output the minimal number of characters in the string, which have to be replaced, so that the string doesn't contain string \"abc\" as a subsequence. A valid replacement of a character is replacing it with \"a\", \"b\" or \"c\".A string $$$x$$$ is said to be a subsequence of string $$$y$$$ if $$$x$$$ can be obtained from $$$y$$$ by deleting some characters without changing the ordering of the remaining characters.",
    "prob_desc_output_spec": "For each query output the minimal number of characters that would have to be replaced so that the string doesn't contain \"abc\" as a subsequence.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$q$$$ $$$(1 \\le n, q \\le 10^5)$$$, the length of the string and the number of queries, respectively. The second line contains the string $$$s$$$, consisting of characters \"a\", \"b\" and \"c\". Each of the next $$$q$$$ lines contains an integer $$$i$$$ and character $$$c$$$ $$$(1 \\le i \\le n)$$$, index and the value of the new item in the string, respectively. It is guaranteed that character's $$$c$$$ value is \"a\", \"b\" or \"c\".",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_110.jsonl",
    "code_uid": "789fd632b2fc404f78f0fa2136061f2e",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"9 12\\naaabccccc\\n4 a\\n4 b\\n2 b\\n5 a\\n1 b\\n6 b\\n5 c\\n2 a\\n1 a\\n5 a\\n6 b\\n7 b\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\nn, q = [int(i) for i in sys.stdin.readline().split()]\r\ns = sys.stdin.readline().strip()\r\nN = 2**n.bit_length()\r\nd = [[0]*6 for i in range(N<<1)]\r\ndef upd(i, c):\r\n    i += N\r\n    d[i] = [0]*6\r\n    d[i][c] = 1\r\n    while (i > 1): \r\n        i >>= 1\r\n        a,b = d[i+i], d[i+i+1]\r\n        d[i] = [a[0]+b[0], a[1]+b[1], a[2]+b[2], min(a[3]+b[1], a[0]+b[3]), min(a[4]+b[2], a[1]+b[4]), min(a[0]+b[5], a[5]+b[2], a[3]+b[4])]\r\nfor i,c in enumerate(s):\r\n    upd(i, ord(c)-97)\r\nfor _ in range(q):\r\n    i, c = sys.stdin.readline().split()\r\n    upd(int(i)-1, ord(c)-97)\r\n    print(d[1][5])",
    "prob_desc_created_at": "1638110100",
    "tags": [
        "bitmasks",
        "data structures",
        "dp",
        "matrices"
    ],
    "hidden_unit_tests": ""
}