{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"0\\n1\\n16\\n1\"]",
    "src_uid": "b5985b619652e606ac96554ecfb9346a",
    "prob_desc_notes": "NoteIn the first test case, we don't need to add any element because the arithmetic mean of the array is already $$$1$$$, so the answer is $$$0$$$.In the second test case, the arithmetic mean is not $$$1$$$ initially so we need to add at least one more number. If we add $$$0$$$ then the arithmetic mean of the whole array becomes $$$1$$$, so the answer is $$$1$$$.In the third test case, the minimum number of elements that need to be added is $$$16$$$ since only non-negative integers can be added.In the fourth test case, we can add a single integer $$$4$$$. The arithmetic mean becomes $$$\\frac{-2+4}{2}$$$ which is equal to $$$1$$$.",
    "prob_desc_description": "An array $$$b$$$ of length $$$k$$$ is called good if its arithmetic mean is equal to $$$1$$$. More formally, if $$$$$$\\frac{b_1 + \\cdots + b_k}{k}=1.$$$$$$Note that the value $$$\\frac{b_1+\\cdots+b_k}{k}$$$ is not rounded up or down. For example, the array $$$[1,1,1,2]$$$ has an arithmetic mean of $$$1.25$$$, which is not equal to $$$1$$$.You are given an integer array $$$a$$$ of length $$$n$$$. In an operation, you can append a non-negative integer to the end of the array. What's the minimum number of operations required to make the array good?We have a proof that it is always possible with finitely many operations.",
    "prob_desc_output_spec": "For each test case, output a single integer — the minimum number of non-negative integers you have to append to the array so that the arithmetic mean of the array will be exactly $$$1$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases. Then $$$t$$$ test cases follow. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 50$$$) — the length of the initial array $$$a$$$. The second line of each test case contains $$$n$$$ integers $$$a_1,\\ldots,a_n$$$ ($$$-10^4\\leq a_i \\leq 10^4$$$), the elements of the array.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_084.jsonl",
    "code_uid": "c78ab82d9f2ea4425a25d262cd9256d9",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n3\\n1 1 1\\n2\\n1 2\\n4\\n8 4 6 2\\n1\\n-2\"]",
    "exec_outcome": "PASSED",
    "source_code": "from functools import reduce\r\nimport sys\r\nfrom os import path\r\nif(path.exists('input.txt')):\r\n    sys.stdin = open(\"input.txt\", 'r')\r\n    sys.stdout = open(\"output.txt\", 'w')\r\n\r\n\r\ninput = iter(sys.stdin.readlines())\r\n\r\nn = int(next(input))\r\n\r\nfor _ in range(n):\r\n    l = int(next(input))\r\n    a = (int(i) for i in next(input).split())\r\n    sum1 = sum(a)\r\n    ar = sum1 / l\r\n\r\n    if ar == 1:\r\n        sys.stdout.write('0\\n')\r\n    elif ar < 1:\r\n        sys.stdout.write('1\\n')\r\n    else:\r\n        sys.stdout.write(str(sum1-l)+'\\n')\r\n\r\n\r\nsys.stdout.flush()\r\n",
    "prob_desc_created_at": "1624026900",
    "tags": [
        "greedy",
        "math"
    ],
    "hidden_unit_tests": ""
}