{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"? 0 0\\n? 1 1\\n? 1 2\\n? 0 2\\n? 2 1\\n? 2 0\\n!\\n1\\n0 1 2\", \"? 0 1\\n? 1 2\\n? 2 3\\n? 3 3\\n? 3 2\\n? 2 1\\n? 1 0\\n? 0 0\\n!\\n2\\n3 1 2 0\"]",
    "src_uid": "77b30da2a1df31ae74c07ab2002f0c71",
    "prob_desc_notes": "Notexor operation, or bitwise exclusive OR, is an operation performed over two integers, in which the i-th digit in binary representation of the result is equal to 1 if and only if exactly one of the two integers has the i-th digit in binary representation equal to 1. For more information, see here.In the first example p = [0, 1, 2], thus b = [0, 1, 2], the values  are correct for the given i, j. There are no other permutations that give the same answers for the given queries.The answers for the queries are:   ,  ,  ,  ,  ,  . In the second example p = [3, 1, 2, 0], and b = [3, 1, 2, 0], the values  match for all pairs i, j. But there is one more suitable permutation p = [0, 2, 1, 3], b = [0, 2, 1, 3] that matches all n2 possible queries as well. All other permutations do not match even the shown queries.",
    "prob_desc_description": "This is an interactive problem.Jury has hidden a permutation p of integers from 0 to n - 1. You know only the length n. Remind that in permutation all integers are distinct.Let b be the inverse permutation for p, i.e. pbi = i for all i. The only thing you can do is to ask xor of elements pi and bj, printing two indices i and j (not necessarily distinct). As a result of the query with indices i and j you'll get the value , where  denotes the xor operation. You can find the description of xor operation in notes.Note that some permutations can remain indistinguishable from the hidden one, even if you make all possible n2 queries. You have to compute the number of permutations indistinguishable from the hidden one, and print one of such permutations, making no more than 2n queries.The hidden permutation does not depend on your queries.",
    "prob_desc_output_spec": "When your program is ready to print the answer, print three lines. In the first line print \"!\". In the second line print single integer answers_cnt — the number of permutations indistinguishable from the hidden one, including the hidden one.  In the third line print n integers p0, p1, ..., pn - 1 (0 ≤ pi &lt; n, all pi should be distinct) — one of the permutations indistinguishable from the hidden one. Your program should terminate after printing the answer.",
    "prob_desc_input_spec": "The first line contains single integer n (1 ≤ n ≤ 5000) — the length of the hidden permutation. You should read this integer first.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_029.jsonl",
    "code_uid": "e9972a50a32660ff67cd526739d0ecba",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n0\\n0\\n3\\n2\\n3\\n2\", \"4\\n2\\n3\\n2\\n0\\n2\\n3\\n2\\n0\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nimport time\ndef is_valid_permutation(perm):\n    N = len(perm)\n    s = set()\n    for x in perm:\n        if x >= N or x in s:\n            return False\n        s.add(x)\n    return True\ndef assert_query_results(p, b, query_results_0i):\n    for i in range(len(query_results_0i)):\n        if p[0] ^ b[i] != query_results_0i[i]:\n            return False\n    return True\nn = int(raw_input())\nxors_0i = []\nxors_i0 = []\nfor i in range(n):\n    print \"? %i %i\" % (0, i)\n    sys.stdout.flush()\n    xors_0i.append(int(raw_input()))\n    print \"? %i %i\" % (i, 0)\n    sys.stdout.flush()\n    xors_i0.append(int(raw_input()))\nstart = time.time()\np, b = [0] * n, [0] * n\np_final = []\ncount = 0\nfor i in range(0, n):\n    p[0] = i\n    for j in range(1, n):\n        p[j] = p[0] ^ xors_i0[0] ^ xors_i0[j]\n\n    if not is_valid_permutation(p):\n        continue\n\n    for j in range(n):\n        b[p[j]] = j\n\n    if assert_query_results(p, b, xors_0i):\n        count += 1\n        p_final = list(p)\n\nprint \"!\"\nprint count\nif count > 0:\n    print ' '.join([str(x) for x in p_final])\n\nend = time.time()",
    "prob_desc_created_at": "1508054700",
    "tags": [
        "implementation",
        "brute force",
        "interactive"
    ],
    "hidden_unit_tests": ""
}