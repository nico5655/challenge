{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"YES\\n1\\n1\\n0\", \"NO\", \"YES\\n1\\n2\\n0\", \"YES\\n1\\n4\\n1\\n156\"]",
    "src_uid": "0ef5e0621f13107d0c8786766ae2ac56",
    "prob_desc_notes": null,
    "prob_desc_description": "Berland scientists noticed long ago that the world around them depends on Berland population. Due to persistent research in this area the scientists managed to find out that the Berland chronology starts from the moment when the first two people came to that land (it is considered to have happened in the first year). After one Berland year after the start of the chronology the population had already equaled 13 people (the second year). However, tracing the population number during the following years was an ultimately difficult task, still it was found out that if di — the number of people in Berland in the year of i, then either di = 12di - 2, or di = 13di - 1 - 12di - 2. Of course no one knows how many people are living in Berland at the moment, but now we can tell if there could possibly be a year in which the country population equaled A. That's what we ask you to determine. Also, if possible, you have to find out in which years it could be (from the beginning of Berland chronology). Let's suppose that it could be in the years of a1, a2, ..., ak. Then you have to define how many residents could be in the country during those years apart from the A variant. Look at the examples for further explanation.",
    "prob_desc_output_spec": "On the first output line print YES, if there could be a year in which the total population of the country equaled A, otherwise print NO.  If the answer is YES, then you also have to print number k — the number of years in which the population could equal A. On the next line you have to output precisely k space-separated numbers — a1, a2, ..., ak. Those numbers have to be output in the increasing order. On the next line you should output number p — how many variants of the number of people could be in the years of a1, a2, ..., ak, apart from the A variant. On each of the next p lines you have to print one number — the sought number of residents. Those number also have to go in the increasing order.  If any number (or both of them) k or p exceeds 1000, then you have to print 1000 instead of it and only the first 1000 possible answers in the increasing order. The numbers should have no leading zeros.",
    "prob_desc_input_spec": "The first line contains integer A (1 ≤ A &lt; 10300). It is guaranteed that the number doesn't contain leading zeros.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2600,
    "file_name": "train_006.jsonl",
    "code_uid": "3c215cb03465bf6ce217e8bfe929c854",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\", \"3\", \"13\", \"1729\"]",
    "exec_outcome": "PASSED",
    "source_code": "a = int(input())\nans = set()\ndef work(i, z, y):\n    z.add(y)\n    # print(\">>\", i, y)\n    if y == a:\n        ans.add(i)\n    if len(z) > 1000:\n        z.remove(max(z))\n\npos = [set(), set([2])]\nfor i in range(2):\n    for x in pos[i]:\n        if x == a:\n            ans.add(i)\n\ndef dfs(i, last, cur):\n    if i > 988:\n        return\n    while len(pos) - 1 < i:\n        pos.append(set())\n    if len(pos[i]) == 0 and cur > a:\n        return\n    if cur in pos[i]:\n        return\n    work(i, pos[i], cur)\n    dfs(i + 1, cur, last * 12)\n    dfs(i + 1, cur, cur * 13 - last * 12)\n\ndfs(2, 2, 13)\n\nif len(ans) == 0:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    count = 0\n    print(min(1000, len(ans)))\n    z = set()\n    for i in sorted(ans):\n        if count < 1000:\n            print(i)\n            count += 1\n        for y in pos[i]:\n            if y != a:\n                z.add(y)\n            if len(z) > 1000:\n                z.remove(max(z))\n    count = 0\n    print(min(1000, len(z)))\n    for i in sorted(z):\n        print(i)\n        count += 1\n        if count >= 1000:\n            break",
    "prob_desc_created_at": "1288972800",
    "tags": [
        "math"
    ],
    "hidden_unit_tests": ""
}