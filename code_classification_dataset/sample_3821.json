{
    "prob_desc_time_limit": "1.5 seconds",
    "prob_desc_sample_outputs": "[\"NO\\nYES\\nNO\\nYES\\nNO\\nYES\"]",
    "src_uid": "c47d999006d4738868f58168c7e2df2b",
    "prob_desc_notes": "NoteTest case $$$1$$$: $$$n&gt;m$$$, so they can not sit down.Test case $$$2$$$: the first person can sit $$$2$$$-nd and the second person can sit in the $$$0$$$-th chair. Both of them want at least $$$1$$$ empty chair on both sides, chairs $$$1$$$ and $$$3$$$ are free, so this is a good solution.Test case $$$3$$$: if the second person sits down somewhere, he needs $$$2$$$ empty chairs, both on his right and on his left side, so it is impossible to find a place for the first person, because there are only $$$5$$$ chairs.Test case $$$4$$$: they can sit in the $$$1$$$-st, $$$4$$$-th, $$$7$$$-th chairs respectively.",
    "prob_desc_description": "$$$m$$$ chairs are arranged in a circle sequentially. The chairs are numbered from $$$0$$$ to $$$m-1$$$. $$$n$$$ people want to sit in these chairs. The $$$i$$$-th of them wants at least $$$a[i]$$$ empty chairs both on his right and left side. More formally, if the $$$i$$$-th person sits in the $$$j$$$-th chair, then no one else should sit in the following chairs: $$$(j-a[i]) \\bmod m$$$, $$$(j-a[i]+1) \\bmod m$$$, ... $$$(j+a[i]-1) \\bmod m$$$, $$$(j+a[i]) \\bmod m$$$.Decide if it is possible to sit down for all of them, under the given limitations.",
    "prob_desc_output_spec": "For each test case print \"YES\" (without quotes) if it is possible for everyone to sit down and fulfil the restrictions, and \"NO\" (without quotes) otherwise. You may print every letter in any case you want (so, for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will all be recognized as positive answers).",
    "prob_desc_input_spec": "The input consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 5 \\cdot 10^4$$$) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\leq n \\leq 10^5$$$, $$$1 \\leq m \\leq 10^9$$$) — the number of people and the number of chairs. The next line contains $$$n$$$ integers, $$$a_1$$$, $$$a_2$$$, ... $$$a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the minimum number of empty chairs, on both sides of the $$$i$$$-th person. It is guaranteed that the sum of $$$n$$$ over all test cases will not exceed $$$10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 900,
    "file_name": "train_084.jsonl",
    "code_uid": "1c0536f7f35ee72300c107d00744a7b7",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n3 2\\n1 1 1\\n2 4\\n1 1\\n2 5\\n2 1\\n3 8\\n1 2 1\\n4 12\\n1 2 1 3\\n4 19\\n1 2 1 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin\r\nfrom math import gcd\r\nfrom collections import deque, defaultdict\r\nfrom heapq import heappush, heappop\r\nt = int(stdin.readline())\r\nfor _ in range(t):\r\n    n, m = map(int, stdin.readline().split())\r\n    a = list(map(int, stdin.readline().split()))\r\n    s = 0\r\n    min_val = 10e9\r\n    max_val = 0\r\n    for i in range(n):\r\n        s += a[i]\r\n        min_val = min(a[i], min_val)\r\n        max_val = max(a[i], max_val)\r\n    print('Yes' if n+s+(max_val - min_val) <= m else 'NO')",
    "prob_desc_created_at": "1650378900",
    "tags": [
        "greedy",
        "math",
        "sortings"
    ],
    "hidden_unit_tests": ""
}