{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"7\", \"15\", \"2136015810\", \"2\"]",
    "src_uid": "5e7c24c79468794358e5e270268f3ecf",
    "prob_desc_notes": "NoteIn the first sample, you can place the shop (coloured orange in the picture below) $$$150$$$ meters to the right of the first hut (for example) so that it is the closest shop to the first two huts, which have $$$2$$$ and $$$5$$$ people, for a total of $$$7$$$ sold ice creams.  In the second sample, you can place the shop $$$170$$$ meters to the right of the first hut (for example) so that it is the closest shop to the last two huts, which have $$$7$$$ and $$$8$$$ people, for a total of $$$15$$$ sold ice creams.  ",
    "prob_desc_description": "On a beach there are $$$n$$$ huts in a perfect line, hut $$$1$$$ being at the left and hut $$$i+1$$$ being $$$100$$$ meters to the right of hut $$$i$$$, for all $$$1 \\le i \\le n - 1$$$. In hut $$$i$$$ there are $$$p_i$$$ people.There are $$$m$$$ ice cream sellers, also aligned in a perfect line with all the huts. The $$$i$$$-th ice cream seller has their shop $$$x_i$$$ meters to the right of the first hut. All ice cream shops are at distinct locations, but they may be at the same location as a hut.You want to open a new ice cream shop and you wonder what the best location for your shop is. You can place your ice cream shop anywhere on the beach (not necessarily at an integer distance from the first hut) as long as it is aligned with the huts and the other ice cream shops, even if there is already another ice cream shop or a hut at that location. You know that people would come to your shop only if it is strictly closer to their hut than any other ice cream shop.If every person living in the huts wants to buy exactly one ice cream, what is the maximum number of ice creams that you can sell if you place the shop optimally?",
    "prob_desc_output_spec": "Print the maximum number of ice creams that can be sold by choosing optimally the location of the new shop.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\le n \\le 200\\,000$$$, $$$1 \\le m \\le 200\\,000$$$) — the number of huts and the number of ice cream sellers. The second line contains $$$n$$$ integers $$$p_1, p_2, \\ldots, p_n$$$ ($$$1 \\le p_i \\le 10^9$$$) — the number of people in each hut. The third line contains $$$m$$$ integers $$$x_1, x_2, \\ldots, x_m$$$ ($$$0 \\le x_i \\le 10^9$$$, $$$x_i \\ne x_j$$$ for $$$i \\ne j$$$) — the location of each ice cream shop.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": -1,
    "file_name": "train_085.jsonl",
    "code_uid": "2da15956798be402cd5ffadf5c527ce8",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 1\\n2 5 6\\n169\", \"4 2\\n1 2 7 8\\n35 157\", \"4 1\\n272203905 348354708 848256926 939404176\\n20\", \"3 2\\n1 1 1\\n300 99\"]",
    "exec_outcome": "PASSED",
    "source_code": "import bisect\nimport functools\nimport heapq\nimport itertools\nimport math\nimport operator\nimport re\nimport sys\nimport typing\nfrom collections import Counter, defaultdict, deque\nfrom functools import reduce\nimport sys\ninput=sys.stdin.readline\n'''\nINF = 1 << 31\nr,g,b=map(int,input().split())\ndp = [[INF] * 901 for _ in range(1000)]\nfor i in range(900):\n    dp[i][0] = 0\nfor i in range(1000):\n    pos = i - 500\n    for j in range(1,r+g+b+1):\n        if j <= r:\n            dp[i][j] = min(dp[i][j],dp[i-1][j-1]+abs(pos+100))\n        elif j <= r + g:\n            dp[i][j] = min(dp[i][j],dp[i-1])\n'''\nimport sys\nimport os\nfrom io import BytesIO, IOBase\nBUFSIZE = 8192\nclass FastIO(IOBase):\n    newlines = 0\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nn,m=map(int,input().split())\np=list(map(int,input().split()))\ncumsum = list(itertools.accumulate(p))\nx=list(map(int,input().split()))\nx.sort()\nans = 0\nfor i in range(m+1):\n    if i == 0:\n        pos = (x[0] - 1) // 100\n        ans = max(ans,sum(p[:min(pos+1,n)]))\n        #print(ans)\n    elif i == m:\n        pos = x[-1] // 100\n        ans = max(ans,cumsum[-1]-cumsum[min(pos,n-1)])\n    else:\n        dis = x[i] - x[i-1]\n        f = (dis - 1) // 2\n        ff = f // 100\n        pre = x[i-1] // 100\n        suf = (x[i] - 1) // 100\n        for j in range(pre,suf):\n            ans = max(ans,cumsum[min(n-1,suf,j+ff+1)]-cumsum[min(n-1,j)])\n\nprint(ans)\n",
    "prob_desc_created_at": "1650798300",
    "tags": [
        "brute force",
        "implementation",
        "sortings"
    ],
    "hidden_unit_tests": ""
}