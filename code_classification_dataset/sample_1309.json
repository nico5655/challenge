{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"5\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\", \"13\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n1 5\\n2 5\\n1 6\\n2 6\\n1 7\\n1 8\\n5 8\\n7 8\"]",
    "src_uid": "17d29a0c2ab4e4be14fe3bdeb10d1e55",
    "prob_desc_notes": "NoteThe first example was described in the statement.In the second example, the degrees of vertices are $$$[7, 5, 2, 2, 3, 2, 2, 3]$$$. Each of these numbers is prime. Additionally, the number of edges, $$$13$$$, is also a prime number, hence both conditions are satisfied.  ",
    "prob_desc_description": "Every person likes prime numbers. Alice is a person, thus she also shares the love for them. Bob wanted to give her an affectionate gift but couldn't think of anything inventive. Hence, he will be giving her a graph. How original, Bob! Alice will surely be thrilled!When building the graph, he needs four conditions to be satisfied:   It must be a simple undirected graph, i.e. without multiple (parallel) edges and self-loops.  The number of vertices must be exactly $$$n$$$ — a number he selected. This number is not necessarily prime.  The total number of edges must be prime.  The degree (i.e. the number of edges connected to the vertex) of each vertex must be prime. Below is an example for $$$n = 4$$$. The first graph (left one) is invalid as the degree of vertex $$$2$$$ (and $$$4$$$) equals to $$$1$$$, which is not prime. The second graph (middle one) is invalid as the total number of edges is $$$4$$$, which is not a prime number. The third graph (right one) is a valid answer for $$$n = 4$$$.   Note that the graph can be disconnected.Please help Bob to find any such graph!",
    "prob_desc_output_spec": "If there is no graph satisfying the conditions, print a single line containing the integer $$$-1$$$. Otherwise, first print a line containing a prime number $$$m$$$ ($$$2 \\leq m \\leq \\frac{n(n-1)}{2}$$$) — the number of edges in the graph. Then, print $$$m$$$ lines, the $$$i$$$-th of which containing two integers $$$u_i$$$, $$$v_i$$$ ($$$1 \\leq u_i, v_i \\leq n$$$) — meaning that there is an edge between vertices $$$u_i$$$ and $$$v_i$$$. The degree of each vertex must be prime. There must be no multiple (parallel) edges or self-loops. If there are multiple solutions, you may print any of them. Note that the graph can be disconnected.",
    "prob_desc_input_spec": "The input consists of a single integer $$$n$$$ ($$$3 \\leq n \\leq 1\\,000$$$) — the number of vertices.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_008.jsonl",
    "code_uid": "427ed96879eab9aafc25e725e39f1a35",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\", \"8\"]",
    "exec_outcome": "PASSED",
    "source_code": "prime = [-1]*(2001)\nfor i in range(2,2001):\n\tif prime[i]==-1:\n\t\tfor j in range(i,2001,i):\n\t\t\tprime[j] = i\nn = int(input())\ne = []\nfor i in range(n):\n\te.append((i,(i+1)%n))\nif prime[n]==n:\n\tprint (len(e))\n\tfor i in e:\n\t\tprint (i[0]+1,i[1]+1)\nelse:\n\ti = 1\n\tj = n-1\n\twhile prime[n]!=n:\n\t\te.append((i,j))\n\t\ti += 1\n\t\tj -= 1\n\t\tn += 1\n\tprint (len(e))\n\tfor i in e:\n\t\tprint (i[0]+1,i[1]+1)\n",
    "prob_desc_created_at": "1563636900",
    "tags": [
        "constructive algorithms",
        "number theory",
        "greedy",
        "math"
    ],
    "hidden_unit_tests": ""
}