{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1.6E1\", \"1.234\", \"1E-1\", \"1E2\"]",
    "src_uid": "b1eebb3928925b84a95b9f1e5a31e4f3",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given a positive decimal number x.Your task is to convert it to the \"simple exponential notation\".Let x = a·10b, where 1 ≤ a &lt; 10, then in general case the \"simple exponential notation\" looks like \"aEb\". If b equals to zero, the part \"Eb\" should be skipped. If a is an integer, it should be written without decimal point. Also there should not be extra zeroes in a and b.",
    "prob_desc_output_spec": "Print the only line — the \"simple exponential notation\" of the given number x.",
    "prob_desc_input_spec": "The only line contains the positive decimal number x. The length of the line will not exceed 106. Note that you are given too large number, so you can't use standard built-in data types \"float\", \"double\" and other.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_009.jsonl",
    "code_uid": "039bf47e81c255ce23e3e9637d0f9535",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"16\", \"01.23400\", \".100\", \"100.\"]",
    "exec_outcome": "PASSED",
    "source_code": "#############<------------  Xorcestor_X ---------------->############\n\nfrom math import *\n\n\ndef is_even(p):\n    n=len(p)\n    count=0\n    for i in range(n):\n        index=p.index(i,i,n)\n        if i==index:\n            pass\n        else:\n            count+=1\n            temp=p[i]\n            p[i]=p[index]\n            p[index]=temp\n    # print(p)\n    if count%2==0:\n        return True\n    else:\n        return False\n\n\n\nprime=[]\n\ndef SieveOfEratosthenes():\n    global prime\n    prime=[1]*2000010\n    prime[1]=0\n    p=2\n    while p*p<=2000001:\n        if prime[p]:\n            for i in range(p*p,2000002,p):\n                prime[i]=0\n\nlpf=[]\n\ndef precompute():\n    global lpf\n    lpf=[0]*1000001\n    for i in range(2,1000001):\n        if not lpf[i]:\n            for j in range(i,1000001,i):\n                if not lpf[j]:\n                    lpf[j]=i\n\n\ndef binpow(a,b):\n    res=1\n    while b>0:\n        if b&1:\n            res*=a\n        a*=a\n        b>>=1\n    return res\n\n\ndef modpow(a,b,x):\n    res=1\n    while b>0:\n        if b&1:\n            res*=a\n            res%=x\n        a*=a\n        a%=x\n        b>>=1\n    return res\n\ncont=[]\n\ndef f(x):\n    global cont\n    total=0\n    for i in cont:\n        total+=abs(i-x)\n    return total\n\n\ndef bs(low,high,target):\n    while low+3<high:\n        mid=(low+high)/2\n        if arr[mid]<target:\n            low=mid\n        else:\n            high=mid-1\n    for i in range(high,low-1,-1):\n        if arr[o]<target:\n            return i\n    return -1\n\n\ndef ternary_search(l,r):\n    while r-l>10:\n        m1=l+(r-l)/3\n        m2=r-(r-l)/3\n        f1=f(m1)\n        f2=f(m2)\n        if f1>f2:\n            l=m1\n        else:\n            r=m2\n\n    mino=f(l)\n\n    for i in range(l,r+1):\n        mino=min(mino,f(i))\n\n    return mino\ns=input()\ns=s.replace('0',' ')\ns=s.lstrip()\ns=s.replace(' ','0')\nl=s.find('.')\nif l==-1:\n    sz=len(s)\n    tr=s[0]+'.'+s[1:]\n    tr=tr.replace('0',' ')\n    tr=tr.rstrip()\n    tr=tr.replace(' ','0')\n    if tr[-1]=='.':\n        tr=tr[0:-1]\n    if sz==1:\n        print(tr)\n    else:\n        tr+=\"E\"+str(sz-1)\n        print(tr)\nelse:\n    if l==0:\n        s=s[1:]\n        sz=len(s)\n        s=s.replace('0',' ')\n        s=s.lstrip()\n        s=s.replace(' ','0')\n        new_sz=len(s)\n        counter=-1\n        counter-=(sz-new_sz)\n        s=s.replace('0',' ')\n        s=s.rstrip()\n        s=s.replace(' ','0')\n        tr=s[0]+'.'+s[1:]\n        if tr[-1]=='.':\n            tr=tr[0:-1]\n        tr+=\"E\"+str(counter)\n        print(tr)\n    else:\n        diff=l-1\n        s=s.replace('0',' ')\n        s=s.rstrip()\n        s=s.replace(' ','0')\n        if diff==0:\n            if s[-1]==\".\":\n                s=s[0:-1]\n            print(s)\n        else:\n            tr=s[0]+\".\"+s[1:l]+s[l+1:]\n            tr=tr.replace('0',' ')\n            tr=tr.rstrip()\n            tr=tr.replace(' ','0')\n            if tr[-1]=='.':\n                tr=tr[0:-1]\n            tr+=\"E\"+str(diff)\n            print(tr)\n",
    "prob_desc_created_at": "1468425600",
    "tags": [
        "implementation",
        "strings"
    ],
    "hidden_unit_tests": ""
}