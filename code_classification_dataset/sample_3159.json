{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"0\\n1\\n0\", \"0\\n1\\n2\\n1\\n0\"]",
    "src_uid": "e7a07efba27f2b1f9ec7c4a8fb997b00",
    "prob_desc_notes": "NoteIn the first sample the colony consists of the one ant, so nothing happens at all.In the second sample the colony consists of 6 ants. At the first minute 4 ants scatter from (0, 0) to the neighbouring junctions. After that the process stops.",
    "prob_desc_description": "It has been noted that if some ants are put in the junctions of the graphene integer lattice then they will act in the following fashion: every minute at each junction (x, y) containing at least four ants a group of four ants will be formed, and these four ants will scatter to the neighbouring junctions (x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1) — one ant in each direction. No other ant movements will happen. Ants never interfere with each other.Scientists have put a colony of n ants into the junction (0, 0) and now they wish to know how many ants will there be at some given junctions, when the movement of the ants stops.",
    "prob_desc_output_spec": "Print t integers, one per line — the number of ants at the corresponding junctions when the movement of the ants stops.",
    "prob_desc_input_spec": "First input line contains integers n (0 ≤ n ≤ 30000) and t (1 ≤ t ≤ 50000), where n is the number of ants in the colony and t is the number of queries. Each of the next t lines contains coordinates of a query junction: integers xi, yi ( - 109 ≤ xi, yi ≤ 109). Queries may coincide. It is guaranteed that there will be a certain moment of time when no possible movements can happen (in other words, the process will eventually end).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_044.jsonl",
    "code_uid": "31dc8e6a9053bac0b4cbcac84971c31d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1 3\\n0 1\\n0 0\\n0 -1\", \"6 5\\n0 -2\\n0 -1\\n0 0\\n0 1\\n0 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import *\nf = lambda: map(int, stdin.readline().split())\nn, t = f()\n\nm = 65\nr = range(1, m)\np = [[0] * m for i in range(m)]\np[1][0] = n // 4\np[0][0] = n % 4\n\ns = k = 1\nwhile s:\n    s = 0\n\n    for x in r[:k]:\n        if p[x][0] > 3:\n            s = 1\n            d = p[x][0] // 4\n            p[x][0] %= 4\n\n            p[x + 1][0] += d\n            p[x][1] += d\n\n            if x != 1:\n                p[x - 1][0] += d\n            else:\n                p[1][1] += d\n                p[1][0] += d\n        for y in r[:x - 1]:\n            if p[x][y] > 3:\n                s = 1\n                d = p[x][y] // 4\n                p[x][y] %= 4\n\n                p[x + 1][y] += d\n                p[x - 1][y] += d\n                p[x][y + 1] += d\n                p[x][y - 1] += d\n\n                if x == y + 1:\n                    p[x][x] += d\n                    p[y][y] += d\n                if y == 1: p[x][0] += d\n        if p[x][x] > 3:\n            s = 1\n            d = p[x][x] // 4\n            p[x][x] %= 4\n\n            p[x + 1][x] += d\n            p[x][x - 1] += d\n\n            if x == 1: p[1][0] += d\n    k += 1\n\ns = []\nfor j in range(t):\n    x, y = f()\n    x, y = abs(x), abs(y)\n    if x < y: x, y = y, x\n    s.append(p[x][y] if x < m else 0)\n\nstdout.write('\\n'.join(map(str, s)))",
    "prob_desc_created_at": "1371223800",
    "tags": [
        "dfs and similar"
    ],
    "hidden_unit_tests": ""
}