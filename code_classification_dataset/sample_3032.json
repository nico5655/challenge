{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\\n0\\n3\", \"3\\n3\\n5\\n0\"]",
    "src_uid": "4efb7bc87bdba2b7fd33ce1734754a50",
    "prob_desc_notes": "NoteLet's consider the first example.At the first view, you can see only the first star. At moment 2 its brightness is 3, so the answer is 3.At the second view, you can see only the second star. At moment 0 its brightness is 0, so the answer is 0.At the third view, you can see both stars. At moment 5 brightness of the first is 2, and brightness of the second is 1, so the answer is 3.",
    "prob_desc_description": "The Cartesian coordinate system is set in the sky. There you can see n stars, the i-th has coordinates (xi, yi), a maximum brightness c, equal for all stars, and an initial brightness si (0 ≤ si ≤ c).Over time the stars twinkle. At moment 0 the i-th star has brightness si. Let at moment t some star has brightness x. Then at moment (t + 1) this star will have brightness x + 1, if x + 1 ≤ c, and 0, otherwise.You want to look at the sky q times. In the i-th time you will look at the moment ti and you will see a rectangle with sides parallel to the coordinate axes, the lower left corner has coordinates (x1i, y1i) and the upper right — (x2i, y2i). For each view, you want to know the total brightness of the stars lying in the viewed rectangle.A star lies in a rectangle if it lies on its border or lies strictly inside it.",
    "prob_desc_output_spec": "For each view print the total brightness of the viewed stars.",
    "prob_desc_input_spec": "The first line contains three integers n, q, c (1 ≤ n, q ≤ 105, 1 ≤ c ≤ 10) — the number of the stars, the number of the views and the maximum brightness of the stars. The next n lines contain the stars description. The i-th from these lines contains three integers xi, yi, si (1 ≤ xi, yi ≤ 100, 0 ≤ si ≤ c ≤ 10) — the coordinates of i-th star and its initial brightness. The next q lines contain the views description. The i-th from these lines contains five integers ti, x1i, y1i, x2i, y2i (0 ≤ ti ≤ 109, 1 ≤ x1i &lt; x2i ≤ 100, 1 ≤ y1i &lt; y2i ≤ 100) — the moment of the i-th view and the coordinates of the viewed rectangle.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_039.jsonl",
    "code_uid": "36eec4e943af9ac941f6f142b92f42e5",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2 3 3\\n1 1 1\\n3 2 0\\n2 1 1 2 2\\n0 2 1 4 5\\n5 1 1 5 5\", \"3 4 5\\n1 1 2\\n2 3 0\\n3 3 1\\n0 1 1 100 100\\n1 2 2 4 4\\n2 2 1 4 7\\n1 50 50 51 51\"]",
    "exec_outcome": "PASSED",
    "source_code": "\nimport sys\n\na=[int(i) for i in sys.stdin.readline().split()]\ncc=a[2]\nst=[]\ns=[]\nch=[[[0,0,0,0,0,0,0,0,0,0,0] for i in range(101)] for j in range(101)]\nfor i in range(a[0]):\n    c=[int(j) for j in sys.stdin.readline().split()]\n    st.append((c[0],c[1]))\n    s.append(c[2])\n    ch[c[0]][c[1]][c[2]]+=1\ndp=[[[0,0,0,0,0,0,0,0,0,0,0] for i in range(102)] for j in range(102)]\nfor i in range(1,102):\n    for j in range(1,102):\n        for k in range(11):\n            dp[i][j][k] = dp[i-1][j][k] + dp[i][j-1][k] - dp[i-1][j-1][k]\n        for k in range(11):\n            dp[i][j][k] +=ch[i-1][j-1][k]\nanss=[]\nfor i in range(a[1]):\n    ans=0\n    l=[int(j) for j in sys.stdin.readline().split()]\n    pp=l[0]\n    i1=l[1]\n    j1=l[2]\n    i2=l[3]\n    j2=l[4]\n    count = [dp[i2+1][j2+1][k] + dp[i1][j1][k] - dp[i2+1][j1][k] - dp[i1][j2+1][k] for k in range(11)]\n    t=l[0]\n    for m in range(11):\n        lk=(m+t)%(cc+1)\n        ans+=(count[m]*lk)\n        #print(m,lk,ans)\n    anss.append(str(ans))\nprint(\"\\n\".join(anss))\n    #break\n",
    "prob_desc_created_at": "1501511700",
    "tags": [
        "dp",
        "implementation"
    ],
    "hidden_unit_tests": ""
}