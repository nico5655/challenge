{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"8 4 2 1 \\n5 2 1 3 4 5 5 \\n101 1 \\n4 3 2 2 3 4 \\n7 1 4 2 3 4 5 1\"]",
    "src_uid": "64458fc3c2bf40ca911b566092f544e8",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given an array $$$a$$$ consisting of $$$n$$$ nonnegative integers. Let's define the prefix OR array $$$b$$$ as the array $$$b_i = a_1~\\mathsf{OR}~a_2~\\mathsf{OR}~\\dots~\\mathsf{OR}~a_i$$$, where $$$\\mathsf{OR}$$$ represents the bitwise OR operation. In other words, the array $$$b$$$ is formed by computing the $$$\\mathsf{OR}$$$ of every prefix of $$$a$$$.You are asked to rearrange the elements of the array $$$a$$$ in such a way that its prefix OR array is lexicographically maximum.An array $$$x$$$ is lexicographically greater than an array $$$y$$$ if in the first position where $$$x$$$ and $$$y$$$ differ, $$$x_i &gt; y_i$$$.",
    "prob_desc_output_spec": "For each test case print $$$n$$$ integers — any rearrangement of the array $$$a$$$ that obtains the lexicographically maximum prefix OR array.",
    "prob_desc_input_spec": "The first line of the input contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. The description of test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) — the length of the array $$$a$$$. The second line of each test case contains $$$n$$$ nonnegative integers $$$a_1, \\ldots, a_n$$$ ($$$0 \\leq a_i \\leq 10^9$$$). It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_099.jsonl",
    "code_uid": "309763d395e83373324228c487df8ea2",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n\\n4\\n\\n1 2 4 8\\n\\n7\\n\\n5 1 2 3 4 5 5\\n\\n2\\n\\n1 101\\n\\n6\\n\\n2 3 4 2 3 4\\n\\n8\\n\\n1 4 2 3 4 5 7 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()\r\n\r\n#  -----------------------  #\r\n\r\ndef main():\r\n  n = int(input())\r\n  A = tuple(map(int, input().split()))\r\n  B = []\r\n  seen = [False] * n\r\n  ok_bit = set()\r\n  for i in range(29, -1, -1):\r\n    if i in ok_bit:\r\n      continue\r\n    bits = [[a, j] for j, a in enumerate(A) if a >> i & 1]\r\n    for j in ok_bit:\r\n      for k in range(len(bits)):\r\n        bits[k][0] &= ~(1<<j)\r\n    for a, v in sorted(bits, key=lambda x: bin(x[0]))[::-1]:\r\n      if a >> i & 1 == 0:\r\n        break\r\n      if seen[v]:\r\n        continue\r\n      B.append(A[v])\r\n      for k in range(A[v].bit_length()):\r\n        if A[v] >> k & 1:\r\n          ok_bit.add(k)\r\n      seen[v] = True\r\n      break\r\n  B.extend([A[i] for i in range(n) if not seen[i]])\r\n  return ' '.join(map(str, B))\r\n\r\nprint('\\n'.join(str(main()) for _ in range(int(input()))))\r\n\r\n",
    "prob_desc_created_at": "1665671700",
    "tags": [
        "bitmasks",
        "brute force",
        "greedy",
        "math",
        "sortings"
    ],
    "hidden_unit_tests": ""
}