{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"cfmailru\", \"NO\"]",
    "src_uid": "02fe37c2e31ca4e278d493fc2e3e35e0",
    "prob_desc_notes": "NoteOne can show that in the first sample only two good strings with minimum length exist: \"cfmailru\" and \"mailrucf\". The first string is lexicographically minimum.",
    "prob_desc_description": "A substring of some string is called the most frequent, if the number of its occurrences is not less than number of occurrences of any other substring.You are given a set of strings. A string (not necessarily from this set) is called good if all elements of the set are the most frequent substrings of this string. Restore the non-empty good string with minimum length. If several such strings exist, restore lexicographically minimum string. If there are no good strings, print \"NO\" (without quotes).A substring of a string is a contiguous subsequence of letters in the string. For example, \"ab\", \"c\", \"abc\" are substrings of string \"abc\", while \"ac\" is not a substring of that string.The number of occurrences of a substring in a string is the number of starting positions in the string where the substring occurs. These occurrences could overlap.String a is lexicographically smaller than string b, if a is a prefix of b, or a has a smaller letter at the first position where a and b differ.",
    "prob_desc_output_spec": "Print the non-empty good string with minimum length. If several good strings exist, print lexicographically minimum among them. Print \"NO\" (without quotes) if there are no good strings.",
    "prob_desc_input_spec": "The first line contains integer n (1 ≤ n ≤ 105) — the number of strings in the set. Each of the next n lines contains a non-empty string consisting of lowercase English letters. It is guaranteed that the strings are distinct. The total length of the strings doesn't exceed 105.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_017.jsonl",
    "code_uid": "bdef7a376f448f5856521e8115c34918",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\nmail\\nai\\nlru\\ncf\", \"3\\nkek\\npreceq\\ncheburek\"]",
    "exec_outcome": "PASSED",
    "source_code": "def cm(s1,s2):\n    for i in range(1, len(s1)):\n        if s1[:i] == s2[-i:] :\n            s = s2 + s1[i:]\n            if len(s) == len(set(list(s))):\n                return s\n        if s2[:i] == s1[-i:]:\n            s = s1 + s2[i:]\n            if len(s) == len(set(list(s))):\n                return s\n    return None\n\nn = int(input())\na = []\nfor i in range(n):\n    na = []\n    s = input()\n    if len(s) != len(set(list(s))):\n        print('NO')\n        exit()\n    for sa in a:\n        if len(set(list(s)).intersection(set(list(sa)))) == 0:\n            na.append(sa)\n        else:\n            if s in sa:\n                s = sa\n            elif sa in s:\n                pass\n            else:\n                ms = cm(s, sa)\n                if ms is None:\n                    print('NO')\n                    exit()\n                else:\n                    s = ms\n    a = na + [s]\n    #print(a)\nprint(''.join(sorted(a)))",
    "prob_desc_created_at": "1510502700",
    "tags": [
        "greedy",
        "graphs",
        "strings"
    ],
    "hidden_unit_tests": ""
}