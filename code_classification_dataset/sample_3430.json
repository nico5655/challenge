{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\", \"2\", \"-1\"]",
    "src_uid": "07600ef3a0e1d216699648b2d17189e8",
    "prob_desc_notes": "NoteIn the first sample the tree is split into $$$\\{1\\},\\ \\{2\\},\\ \\{3\\}$$$.In the second sample the tree is split into $$$\\{1,\\ 2\\},\\ \\{3\\}$$$ or $$$\\{1,\\ 3\\},\\ \\{2\\}$$$.In the third sample it is impossible to split the tree.",
    "prob_desc_description": "You are given a rooted tree on $$$n$$$ vertices, its root is the vertex number $$$1$$$. The $$$i$$$-th vertex contains a number $$$w_i$$$. Split it into the minimum possible number of vertical paths in such a way that each path contains no more than $$$L$$$ vertices and the sum of integers $$$w_i$$$ on each path does not exceed $$$S$$$. Each vertex should belong to exactly one path.A vertical path is a sequence of vertices $$$v_1, v_2, \\ldots, v_k$$$ where $$$v_i$$$ ($$$i \\ge 2$$$) is the parent of $$$v_{i - 1}$$$.",
    "prob_desc_output_spec": "Output one number  — the minimum number of vertical paths. If it is impossible to split the tree, output $$$-1$$$.",
    "prob_desc_input_spec": "The first line contains three integers $$$n$$$, $$$L$$$, $$$S$$$ ($$$1 \\le n \\le 10^5$$$, $$$1 \\le L \\le 10^5$$$, $$$1 \\le S \\le 10^{18}$$$) — the number of vertices, the maximum number of vertices in one path and the maximum sum in one path. The second line contains $$$n$$$ integers $$$w_1, w_2, \\ldots, w_n$$$ ($$$1 \\le w_i \\le 10^9$$$) — the numbers in the vertices of the tree. The third line contains $$$n - 1$$$ integers $$$p_2, \\ldots, p_n$$$ ($$$1 \\le p_i &lt; i$$$), where $$$p_i$$$ is the parent of the $$$i$$$-th vertex in the tree.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_059.jsonl",
    "code_uid": "5112c44c5a4f5f64d2f1154cebd5954f",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 1 3\\n1 2 3\\n1 1\", \"3 3 6\\n1 2 3\\n1 1\", \"1 1 10000\\n10001\"]",
    "exec_outcome": "PASSED",
    "source_code": "def solve(n, l, s, www, children):\n    ans = 0\n    dp = [{} for _ in range(n)]\n    for v in range(n - 1, -1, -1):\n        cv = children[v]\n        if not cv:\n            dp[v][1] = www[v]\n            continue\n        ans += len(cv) - 1\n        wv = www[v]\n        if wv > s:\n            return -1\n        dv = dp[v]\n        for c in cv:\n            for lc, wc in dp[c].items():\n                if lc == l:\n                    continue\n                wt = wc + wv\n                if wt > s:\n                    continue\n                if lc + 1 not in dv:\n                    dv[lc + 1] = wt\n                else:\n                    dv[lc + 1] = min(dv[lc + 1], wt)\n        if not dv:\n            ans += 1\n            dv[1] = wv\n\n    return ans + 1\n\n\nn, l, s = list(map(int, input().split()))\nwww = list(map(int, input().split()))\nif n == 1:\n    print(-1 if www[0] > s else 1)\n    exit()\nchildren = [set() for _ in range(n)]\nfor i, p in enumerate(map(int, input().split())):\n    children[p - 1].add(i + 1)\nprint(solve(n, l, s, www, children))\n",
    "prob_desc_created_at": "1538750100",
    "tags": [
        "dp",
        "greedy",
        "data structures",
        "binary search",
        "trees"
    ],
    "hidden_unit_tests": ""
}