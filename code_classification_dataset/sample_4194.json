{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"101\\n00100\"]",
    "src_uid": "01e728192b092cac9e0833353a3ed3f0",
    "prob_desc_notes": "NoteIn the first test case there is one group of students with average age $$$\\frac{25+16+37}{3}=26$$$ and one teacher with age $$$30$$$. There exists only one assignment that allows to start lessons.If the student with age $$$16$$$ will refuse to study, the average age of students in this group will become $$$\\frac{25+37}{2}=31$$$ so there won't be any assignment that allows to start lessons.In the second test case it is impossible to start lessons initially. However, if the $$$3$$$-rd student with age $$$111$$$ will refuse to study, the average ages of groups will become $$$\\frac{4 + 5}{2}=4.5$$$ and $$$\\frac{11+11}{2} = 11$$$ correspondingly. Then it is possible to assing the first group to the first teacher and the second group to the third teacher.",
    "prob_desc_description": "You have decided to open a new school. You have already found $$$n$$$ teachers and $$$m$$$ groups of students. The $$$i$$$-th group of students consists of $$$k_i \\geq 2$$$ students. You know age of each teacher and each student. The ages of teachers are $$$a_1, a_2, \\ldots, a_n$$$ and the ages of students of the $$$i$$$-th group are $$$b_{i, 1}, b_{i, 2}, \\ldots, b_{i, k_i}$$$.To start lessons you should assign the teacher to each group of students. Such assignment should satisfy the following requirements:  To each group exactly one teacher assigned.  To each teacher at most $$$1$$$ group of students assigned.  The average of students' ages in each group doesn't exceed the age of the teacher assigned to this group. The average of set $$$x_1, x_2, \\ldots, x_k$$$ of $$$k$$$ integers is $$$\\frac{x_1 + x_2 + \\ldots + x_k}{k}$$$.Recently you have heard that one of the students will refuse to study in your school. After this, the size of one group will decrease by $$$1$$$ while all other groups will remain unchanged.You don't know who will refuse to study. For each student determine if you can start lessons in case of his refusal.Note, that it is not guaranteed that it is possible to start lessons before any refusal.",
    "prob_desc_output_spec": "For each test case output string of symbols $$$0$$$ and $$$1$$$ of length $$$k_1 + k_2 + \\ldots + k_m$$$. The $$$i$$$-th symbol of this string should be equals $$$1$$$ if it is possible to start lessons in case of the $$$i$$$-th student refuse and it should be equals $$$0$$$ otherwise. Students are numbered by integers from $$$1$$$ to $$$k_1 + k_2 + \\ldots + k_m$$$ in the order they appear in the input. Thus, students of the $$$1$$$-st group are numbered by integers $$$1$$$, $$$2$$$, $$$\\ldots$$$, $$$k_1$$$, students of the $$$2$$$-nd group are numbered by integers $$$k_1 + 1$$$, $$$k_1 + 2$$$, $$$\\ldots$$$, $$$k_1 + k_2$$$ and so on.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases. The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq m \\leq n \\leq 10^5$$$) — the number of teachers and the number of groups of students. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 10^5$$$) — the ages of teachers. The next $$$2m$$$ lines contains descriptions of groups.  The first line of description of group contains a single integer $$$k_i$$$ ($$$2 \\leq k_i \\leq 10^5$$$) — the number of students in this group.  The second line of description of group contains $$$k_i$$$ integers $$$b_{i, 1}, b_{i, 2}, \\ldots, b_{i, k_i}$$$ ($$$1 \\leq b_{i, j} \\leq 10^5$$$) — the ages of students of this group. It is guaranteed that the total sum of $$$n$$$ over all test cases doesn't exceed $$$10^5$$$ and that the total sum of $$$k_1 + k_2 + \\ldots + k_m$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_092.jsonl",
    "code_uid": "a49992c61ca195bdd8b3eac99ef91d84",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n\\n1 1\\n\\n30\\n\\n3\\n\\n25 16 37\\n\\n4 2\\n\\n9 12 12 6\\n\\n2\\n\\n4 5\\n\\n3\\n\\n111 11 11\"]",
    "exec_outcome": "PASSED",
    "source_code": "import os\r\nimport sys\r\nfrom io import BytesIO, IOBase\r\n\r\nBUFSIZE = 8192\r\n \r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n \r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n \r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n \r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n \r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n \r\n \r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n \r\n \r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n\r\n\r\nclass SegmentTree:\r\n    def __init__(self, size):\r\n        count = 1\r\n        while count < size:\r\n            count *= 2\r\n\r\n        self.size = size\r\n        self.count = count\r\n\r\n        self.T = [0] * (count)\r\n        self.V = [0] * (2*count)\r\n\r\n    def __apply(self, e, v):\r\n        if e < self.count:\r\n            self.T[e] += v\r\n\r\n        self.V[e] += v\r\n\r\n    def __merge(vl, vr):\r\n        return min(vl, vr)\r\n\r\n    def __push(self, e):\r\n        t = self.T[e]\r\n        if t == 0:\r\n            return\r\n        \r\n        self.__apply(2*e, t)\r\n        self.__apply(2*e + 1, t)\r\n\r\n        self.T[e] = 0\r\n\r\n    def __updateCore(self, e, tl, tr, l, r, v):\r\n        if r <= tl or tr <= l or l >= r:\r\n            return\r\n\r\n        if l <= tl and tr <= r:\r\n            self.__apply(e, v)\r\n        else:\r\n            self.__push(e)\r\n\r\n            tm = (tl + tr)//2\r\n            self.__updateCore(2*e,     tl, tm,         l, min(tm, r), v)\r\n            self.__updateCore(2*e + 1, tm, tr, max(l, tm),         r, v)\r\n\r\n            self.V[e] = SegmentTree.__merge(self.V[2*e], self.V[2*e + 1])\r\n\r\n    def update(self, l, r, v):\r\n        self.__updateCore(1, 0, self.size, l, r + 1, v)\r\n\r\n    def __queryCore(self, e, tl, tr, l, r):\r\n        if r <= tl or tr <= l or l >= r:\r\n            return 10**10\r\n\r\n        if l <= tl and tr <= r:\r\n            return self.V[e]\r\n        else:\r\n            self.__push(e)\r\n     \r\n            tm = (tl + tr)//2\r\n            lv = self.__queryCore(2*e,     tl, tm,          l, min(tm, r))\r\n            rv = self.__queryCore(2*e + 1, tm, tr, max(l, tm),         r)\r\n\r\n            return SegmentTree.__merge(lv, rv)\r\n        \r\n    def query(self, l, r):\r\n        return self.__queryCore(1, 0, self.size, l, r + 1)\r\n\r\n    def clear(self, new = False):\r\n        if new:\r\n            self.T = [0] * self.count\r\n            self.V = [0] * (2*self.count)\r\n        else:\r\n            for i in range(self.count):\r\n                self.T[i] = self.V[i] = 0\r\n\r\n            for i in range(self.count + 1, 2*self.count):\r\n                self.V[i] = 0\r\n\r\n\r\nLimit = 10**5\r\nST = SegmentTree(Limit + 1)\r\n\r\nQ = int(input())\r\nfor _ in range(Q):\r\n    n, m = map(int, input().split(' '))\r\n    A = list(map(int, input().split(' ')))\r\n    A.sort()\r\n\r\n    K = []\r\n    for i in range(m):\r\n        input()\r\n        K.append(list(map(int, input().split(' '))))\r\n\r\n    for a in A[-m:]:\r\n        ST.update(0, a, 1)\r\n\r\n    SK, LK = [], []\r\n    for k in K:\r\n        sk = sum(k)\r\n        SK.append(sk)\r\n\r\n        lk = len(k)\r\n        LK.append(lk)\r\n\r\n        ST.update(0, (sk + lk - 1)//lk, -1)\r\n\r\n    if ST.query(0, Limit) >= 1:\r\n        print(\"\".join(\"1\" * lk for lk in LK))\r\n    else:\r\n        initial = ST.query(0, Limit) >= 0\r\n\r\n        for i in range(len(K)):\r\n            sk = SK[i]\r\n            lk = LK[i]\r\n            mk = (sk + lk - 1)//lk\r\n            ST.update(0, mk, 1)\r\n        \r\n            for h in K[i]:\r\n                if initial and h <= mk or not initial and h >= mk:\r\n                    mk1 = (sk - h + lk - 2)//(lk - 1)\r\n                    ST.update(0, mk1, -1)\r\n                    print('1' if ST.query(0, Limit) >= 0 else '0', end = '')\r\n                    ST.update(0, mk1, 1)\r\n                else:\r\n                    print('1' if initial else '0', end = '')\r\n\r\n            ST.update(0, mk, -1)\r\n        print()\r\n\r\n    for a in A[-m:]:\r\n        ST.update(0, a, -1)\r\n \r\n    for i in range(len(K)):\r\n        sk = SK[i]\r\n        lk = LK[i]\r\n        ST.update(0, (sk + lk - 1)//lk, 1)\r\n",
    "prob_desc_created_at": "1641220500",
    "tags": [
        "binary search",
        "data structures",
        "dp",
        "greedy",
        "implementation",
        "sortings"
    ],
    "hidden_unit_tests": ""
}