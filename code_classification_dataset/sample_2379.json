{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"20\\n3 6 7 4 5\"]",
    "src_uid": "8c23fcc84c6921bc2a95ff0586516321",
    "prob_desc_notes": "NoteLet us consider sample test. If Helen just moves all flights 2 minutes later preserving the order, the total cost of delaying the flights would be (3 - 1)·4 + (4 - 2)·2 + (5 - 3)·1 + (6 - 4)·10 + (7 - 5)·2 = 38 burles. However, the better schedule is shown in the sample answer, its cost is (3 - 1)·4 + (6 - 2)·2 + (7 - 3)·1 + (4 - 4)·10 + (5 - 5)·2 = 20 burles.",
    "prob_desc_description": "Helen works in Metropolis airport. She is responsible for creating a departure schedule. There are n flights that must depart today, the i-th of them is planned to depart at the i-th minute of the day.Metropolis airport is the main transport hub of Metropolia, so it is difficult to keep the schedule intact. This is exactly the case today: because of technical issues, no flights were able to depart during the first k minutes of the day, so now the new departure schedule must be created.All n scheduled flights must now depart at different minutes between (k + 1)-th and (k + n)-th, inclusive. However, it's not mandatory for the flights to depart in the same order they were initially scheduled to do so — their order in the new schedule can be different. There is only one restriction: no flight is allowed to depart earlier than it was supposed to depart in the initial schedule.Helen knows that each minute of delay of the i-th flight costs airport ci burles. Help her find the order for flights to depart in the new schedule that minimizes the total cost for the airport.",
    "prob_desc_output_spec": "The first line must contain the minimum possible total cost of delaying the flights. The second line must contain n different integers t1, t2, ..., tn (k + 1 ≤ ti ≤ k + n), here ti is the minute when the i-th flight must depart. If there are several optimal schedules, print any of them.",
    "prob_desc_input_spec": "The first line contains two integers n and k (1 ≤ k ≤ n ≤ 300 000), here n is the number of flights, and k is the number of minutes in the beginning of the day that the flights did not depart. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 107), here ci is the cost of delaying the i-th flight for one minute.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_021.jsonl",
    "code_uid": "6173fc93ae5acdc13311bd6ff95809f3",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"5 2\\n4 2 1 10 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin, stdout\nfrom itertools import repeat\nfrom heapq import heappushpop, heapify\ndef main():\n    n, k = map(int, stdin.readline().split())\n    a = map(int, stdin.readline().split(), repeat(10, n))\n    q = [(-a[i], i) for i in xrange(k)]\n    heapify(q)\n    ans = 0\n    pos = [0] * n\n    for i in xrange(k, n):\n        x, j = heappushpop(q, (-a[i], i))\n        ans -= x * (i - j)\n        pos[j] = i + 1\n    q.sort()\n    for i in xrange(k):\n        x, j = q[i]\n        ans -= x * (i + n - j)\n        pos[j] = i + n + 1\n    print ans\n    stdout.write(\" \".join(map(str, pos)))\nmain()\n",
    "prob_desc_created_at": "1504702500",
    "tags": [
        "greedy"
    ],
    "hidden_unit_tests": ""
}