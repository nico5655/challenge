{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\\n1\\n0\\n3\\n17\\n1111\"]",
    "src_uid": "e8f12eb9144ac2ea1c18fbfb15a84a0e",
    "prob_desc_notes": "NoteIn query one the suitable numbers are 1 and 4. ",
    "prob_desc_description": "You're given Q queries of the form (L, R). For each query you have to find the number of such x that L ≤ x ≤ R and there exist integer numbers a &gt; 0, p &gt; 1 such that x = ap.",
    "prob_desc_output_spec": "Output Q lines — the answers to the queries.",
    "prob_desc_input_spec": "The first line contains the number of queries Q (1 ≤ Q ≤ 105). The next Q lines contains two integers L, R each (1 ≤ L ≤ R ≤ 1018).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_005.jsonl",
    "code_uid": "ebd2486e36fcde356f15297619cc17b8",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n1 4\\n9 9\\n5 7\\n12 29\\n137 591\\n1 1000000\"]",
    "exec_outcome": "PASSED",
    "source_code": "import math\nfrom sys import stdin, stdout \nq = int(stdin.readline())\nD = set()\n#v.append(1)\nmv = int(1e18)\nfor i in range(2,1000001):\n    j = i*i*i\n    while(j<=mv):\n        y = int(math.sqrt(j))\n        if(y*y == j):\n            j=j*i\n            continue\n        D.add(j)\n        j = j*i\nv=[]\nfor key in D:\n    v.append(key)\nv.sort()\nfinal=[]\nwhile(q):\n    q-=1\n    L = (stdin.readline()).split()\n    l = int(L[0])\n    r = int(L[1])\n    root_r = int(math.sqrt(r))\n    root_l = int(math.sqrt(l-1))\n    if(root_r*root_r > r):\n        root_r-=1\n    if(root_l*root_l > (l-1) ):\n        root_l -= 1\n    #print(root_l,root_r)\n    ans = root_r-root_l\n    #print(ans)\n    be = 0\n    en = len(v)-1\n    ind = -1\n    while(be<=en):\n        mid = (be+en)/2\n        if(v[mid]<=r):\n            ind=mid\n            be=mid+1\n        else:\n            en=mid-1\n    if(ind==-1):\n        final.append(ans)\n        continue\n    in2 = -1\n    be = 0\n    en = len(v)-1\n    while(be<=en):\n        mid = (be+en)/2\n        if(v[mid]>=l):\n            in2 = mid\n            en=mid-1\n        else:\n            be=mid+1\n    if(in2==-1):\n        final.append(ans)\n        continue\n#    print(ind,v[ind],in2,v[in2])\n    ans += (ind-in2+1)\n    final.append(ans)\n\nfor i in final:\n    stdout.write(str(i)+'\\n')\n",
    "prob_desc_created_at": "1521822900",
    "tags": [
        "binary search",
        "number theory",
        "math"
    ],
    "hidden_unit_tests": ""
}