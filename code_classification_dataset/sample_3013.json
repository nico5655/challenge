{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1 1 2\", \"1 1 1 1\", \"2 2 4\"]",
    "src_uid": "dfa484cecb07e195f5cc46e04cc68ab4",
    "prob_desc_notes": null,
    "prob_desc_description": "Bob has a rectangular chocolate bar of the size W × H. He introduced a cartesian coordinate system so that the point (0, 0) corresponds to the lower-left corner of the bar, and the point (W, H) corresponds to the upper-right corner. Bob decided to split the bar into pieces by breaking it. Each break is a segment parallel to one of the coordinate axes, which connects the edges of the bar. More formally, each break goes along the line x = xc or y = yc, where xc and yc are integers. It should divide one part of the bar into two non-empty parts. After Bob breaks some part into two parts, he breaks the resulting parts separately and independently from each other. Also he doesn't move the parts of the bar. Bob made n breaks and wrote them down in his notebook in arbitrary order. At the end he got n + 1 parts. Now he wants to calculate their areas. Bob is lazy, so he asks you to do this task.",
    "prob_desc_output_spec": "Output n + 1 numbers — areas of the resulting parts in the increasing order.",
    "prob_desc_input_spec": "The first line contains 3 integers W, H and n (1 ≤ W, H, n ≤ 100) — width of the bar, height of the bar and amount of breaks. Each of the following n lines contains four integers xi, 1, yi, 1, xi, 2, yi, 2 — coordinates of the endpoints of the i-th break (0 ≤ xi, 1 ≤ xi, 2 ≤ W, 0 ≤ yi, 1 ≤ yi, 2 ≤ H, or xi, 1 = xi, 2, or yi, 1 = yi, 2). Breaks are given in arbitrary order. It is guaranteed that the set of breaks is correct, i.e. there is some order of the given breaks that each next break divides exactly one part of the bar into two non-empty parts.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_038.jsonl",
    "code_uid": "391410a35d17ea9800f86970e5cdcab6",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2 2 2\\n1 0 1 2\\n0 1 1 1\", \"2 2 3\\n1 0 1 2\\n0 1 1 1\\n1 1 2 1\", \"2 4 2\\n0 1 2 1\\n0 3 2 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "WHn = [[0,0]]\n# WHn[0].extend(list(map(int, input().split(' '))))\nWHn[0].extend([int(x) for x in input().split(' ')])\n\nn = range(WHn[0][-1])\nlines = []\nlines_aux = []\n\nfor i in n:\n    lines.append( [int(x) for x in input().split(' ')] )\n    lines_aux.append(True)\n\nwhile any(lines_aux):\n    \n    for i in n:\n\n        if lines_aux[i]:\n\n            for unidad in WHn:\n\n                rangex = range(unidad[0], unidad[2]+1)\n                rangey = range(unidad[1], unidad[3]+1)\n                \n                if (lines[i][0] in rangex) and (lines[i][3] in rangey) and (lines[i][2] in rangex) and (lines[i][1] in rangey) and\\\n                    ( (lines[i][0:3:2] == unidad[0:3:2]) or (lines[i][1:4:2] == unidad[1:4:2]) ):\n\n                    WHn.append([unidad[0],unidad[1],lines[i][2],lines[i][3]])\n                    WHn.append([lines[i][0],lines[i][1],unidad[2],unidad[3]])\n                    WHn.remove(unidad)\n                    lines_aux[i] = False\n                    break\n\nfor i,unidad in enumerate(WHn):\n    WHn[i] = (unidad[2] - unidad[0])*(unidad[3] - unidad[1])\n\nWHn.sort()\nresult = ''\nfor i in WHn:\n    result += '{} '\n\nprint(result[:-1].format(*WHn))\n",
    "prob_desc_created_at": "1285599600",
    "tags": [
        "implementation",
        "dfs and similar"
    ],
    "hidden_unit_tests": ""
}