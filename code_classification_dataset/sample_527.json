{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\\n6\"]",
    "src_uid": "787a45f427c2db98b2ddb78925e0e0f1",
    "prob_desc_notes": "NoteIn the first test case, Phoenix has two coins with weights $$$2$$$ and $$$4$$$. No matter how he divides the coins, the difference will be $$$4-2=2$$$.In the second test case, Phoenix has four coins of weight $$$2$$$, $$$4$$$, $$$8$$$, and $$$16$$$. It is optimal for Phoenix to place coins with weights $$$2$$$ and $$$16$$$ in one pile, and coins with weights $$$4$$$ and $$$8$$$ in another pile. The difference is $$$(2+16)-(4+8)=6$$$.",
    "prob_desc_description": "Phoenix has $$$n$$$ coins with weights $$$2^1, 2^2, \\dots, 2^n$$$. He knows that $$$n$$$ is even.He wants to split the coins into two piles such that each pile has exactly $$$\\frac{n}{2}$$$ coins and the difference of weights between the two piles is minimized. Formally, let $$$a$$$ denote the sum of weights in the first pile, and $$$b$$$ denote the sum of weights in the second pile. Help Phoenix minimize $$$|a-b|$$$, the absolute value of $$$a-b$$$.",
    "prob_desc_output_spec": "For each test case, output one integer — the minimum possible difference of weights between the two piles.",
    "prob_desc_input_spec": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. The first line of each test case contains an integer $$$n$$$ ($$$2 \\le n \\le 30$$$; $$$n$$$ is even) — the number of coins that Phoenix has. ",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_002.jsonl",
    "code_uid": "7d3dee2a0554a46c4963daeaf61c361e",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n2\\n4\"]",
    "exec_outcome": "PASSED",
    "source_code": "no=int(input())\nj=[]\nfor r in range(no):\n    weights=[]\n    n=int(input())\n    for each in range(1,n+ 1):\n        weights.append(pow(2,each))\n    ans=sum(weights[:n//2])\n    j.append(ans)\nfor r in j:\n    print(r)\n\n",
    "prob_desc_created_at": "1588343700",
    "tags": [
        "greedy",
        "math"
    ],
    "hidden_unit_tests": ""
}