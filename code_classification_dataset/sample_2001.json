{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"5 2 \\n8 2 1 3 \\n9 3 8 \\n100 50 25 75 64 \\n42 \\n128 96 80 88 52 7 \\n17 2 4 8 16\"]",
    "src_uid": "bdd1974e46f99eff3d03ed4174158dd9",
    "prob_desc_notes": "NoteIn the first test case of the example, there are only two possible permutations $$$b$$$  — $$$[2, 5]$$$ and $$$[5, 2]$$$: for the first one $$$c=[2, 1]$$$, for the second one $$$c=[5, 1]$$$.In the third test case of the example, number $$$9$$$ should be the first in $$$b$$$, and $$$GCD(9, 3)=3$$$, $$$GCD(9, 8)=1$$$, so the second number of $$$b$$$ should be $$$3$$$.In the seventh test case of the example, first four numbers pairwise have a common divisor (a power of two), but none of them can be the first in the optimal permutation $$$b$$$.",
    "prob_desc_description": "Alexander is a well-known programmer. Today he decided to finally go out and play football, but with the first hit he left a dent on the new Rolls-Royce of the wealthy businessman Big Vova. Vladimir has recently opened a store on the popular online marketplace \"Zmey-Gorynych\", and offers Alex a job: if he shows his programming skills by solving a task, he'll work as a cybersecurity specialist. Otherwise, he'll be delivering some doubtful products for the next two years.You're given $$$n$$$ positive integers $$$a_1, a_2, \\dots, a_n$$$. Using each of them exactly at once, you're to make such sequence $$$b_1, b_2, \\dots, b_n$$$ that sequence $$$c_1, c_2, \\dots, c_n$$$ is lexicographically maximal, where $$$c_i=GCD(b_1,\\dots,b_i)$$$ - the greatest common divisor of the first $$$i$$$ elements of $$$b$$$. Alexander is really afraid of the conditions of this simple task, so he asks you to solve it.A sequence $$$a$$$ is lexicographically smaller than a sequence $$$b$$$ if and only if one of the following holds: $$$a$$$ is a prefix of $$$b$$$, but $$$a \\ne b$$$; in the first position where $$$a$$$ and $$$b$$$ differ, the sequence $$$a$$$ has a smaller element than the corresponding element in $$$b$$$.",
    "prob_desc_output_spec": "For each test case output the answer in a single line  — the desired sequence $$$b$$$. If there are multiple answers, print any.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^3$$$). Description of the test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^3$$$)  — the length of the sequence $$$a$$$. The second line of each test case contains $$$n$$$ integers $$$a_1,\\dots,a_n$$$ ($$$1 \\le a_i \\le 10^3$$$)  — the sequence $$$a$$$. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^3$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1300,
    "file_name": "train_015.jsonl",
    "code_uid": "ec7dd9492b6309e80129e40cc2248f55",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7\\n2\\n2 5\\n4\\n1 8 2 3\\n3\\n3 8 9\\n5\\n64 25 75 100 50\\n1\\n42\\n6\\n96 128 88 80 52 7\\n5\\n2 4 8 16 17\"]",
    "exec_outcome": "PASSED",
    "source_code": "import math\ndef get_int():\n    return int(input())\ndef get_int_list():\n    return list(map(int, input().split()))\ndef get_char_list():\n    return list(input())\n\ndef gcd(x, y):\n    if x < y:\n        return gcd(y, x)\n    \n    z = x % y\n    if z == 0:\n        return y\n    else:\n        return gcd(y, z)\n\ncases = get_int()\nfor _ in range(cases):\n    n = get_int()\n    ints = get_int_list()\n    v = max(ints)\n    result = [v]\n    visited = set()\n    visited.add(ints.index(v))\n    while len(visited) < n:\n        md = 0\n        t = None\n        for i, d in enumerate(ints):\n            if i in visited:\n                continue\n            cd = gcd(v, d)\n            if cd > md:\n                md = cd\n                t = i\n        \n        v = md\n        result.append(ints[t])\n        visited.add(t)\n    print(*result)",
    "prob_desc_created_at": "1599575700",
    "tags": [
        "number theory",
        "greedy",
        "math",
        "brute force"
    ],
    "hidden_unit_tests": ""
}