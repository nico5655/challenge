{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\", \"3\"]",
    "src_uid": "108bba3127b34c6482bb502456dd4910",
    "prob_desc_notes": null,
    "prob_desc_description": "You have a multiset containing several integers. Initially, it contains $$$a_1$$$ elements equal to $$$1$$$, $$$a_2$$$ elements equal to $$$2$$$, ..., $$$a_n$$$ elements equal to $$$n$$$.You may apply two types of operations:  choose two integers $$$l$$$ and $$$r$$$ ($$$l \\le r$$$), then remove one occurrence of $$$l$$$, one occurrence of $$$l + 1$$$, ..., one occurrence of $$$r$$$ from the multiset. This operation can be applied only if each number from $$$l$$$ to $$$r$$$ occurs at least once in the multiset;  choose two integers $$$i$$$ and $$$x$$$ ($$$x \\ge 1$$$), then remove $$$x$$$ occurrences of $$$i$$$ from the multiset. This operation can be applied only if the multiset contains at least $$$x$$$ occurrences of $$$i$$$. What is the minimum number of operations required to delete all elements from the multiset?",
    "prob_desc_output_spec": "Print one integer â€” the minimum number of operations required to delete all elements from the multiset.",
    "prob_desc_input_spec": "The first line contains one integer $$$n$$$ ($$$1 \\le n \\le 5000$$$). The second line contains $$$n$$$ integers $$$a_1$$$, $$$a_2$$$, ..., $$$a_n$$$ ($$$0 \\le a_i \\le 10^9$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_057.jsonl",
    "code_uid": "9b2d36d1854fdde7303f77e7d112b59d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n1 4 1 1\", \"5\\n1 0 1 0 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nrange = xrange\ninput = raw_input\n\n#def solve(A, b):\n#    n = j = len(A)\n#    if n == 0:\n#        return 0\n#    a = min(A)\n#    s = a - b\n#    for i in reversed(range(n)):\n#        if A[i] == a:\n#            s += solve(A[i + 1:j], a)\n#            j = i\n#    s += solve(A[0:j], a)\n#    return min(n, s)\n\nn = int(input())\nA = [int(x) for x in input().split()]\n\narrays = [A]\nB = [0]\nstack = [0]\nans = [0]\n\nwhile stack:\n    state = stack.pop()\n    if state >= 0:\n        A = arrays[state]\n        b = B[state]\n        \n        n = j = len(A)\n        if n == 0:\n            continue\n        \n        a = min(A)\n        \n        stack.append(~state)\n        ans.append(a - b)\n        for i in reversed(range(n)):\n            if A[i] == a:\n                stack.append(len(arrays))\n                arrays.append(A[i + 1:j])\n                B.append(a)\n                j = i\n        \n        stack.append(len(arrays))\n        arrays.append(A[0:j])\n        B.append(a)\n    else:\n        s = ans.pop()\n        ans[-1] += min(s, len(arrays[~state]))\n\nprint ans[0]",
    "prob_desc_created_at": "1598366100",
    "tags": [
        "dp",
        "divide and conquer",
        "greedy",
        "data structures"
    ],
    "hidden_unit_tests": ""
}