{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"10.25\", \"10.3\", \"9.2\"]",
    "src_uid": "d563ce32596b54f48544a6085efe5cc5",
    "prob_desc_notes": "NoteIn the first two samples Efim initially has grade 10.245. During the first second Efim can obtain grade 10.25, and then 10.3 during the next second. Note, that the answer 10.30 will be considered incorrect.In the third sample the optimal strategy is to not perform any rounding at all.",
    "prob_desc_description": "Efim just received his grade for the last test. He studies in a special school and his grade can be equal to any positive decimal fraction. First he got disappointed, as he expected a way more pleasant result. Then, he developed a tricky plan. Each second, he can ask his teacher to round the grade at any place after the decimal point (also, he can ask to round to the nearest integer). There are t seconds left till the end of the break, so Efim has to act fast. Help him find what is the maximum grade he can get in no more than t seconds. Note, that he can choose to not use all t seconds. Moreover, he can even choose to not round the grade at all.In this problem, classic rounding rules are used: while rounding number to the n-th digit one has to take a look at the digit n + 1. If it is less than 5 than the n-th digit remain unchanged while all subsequent digits are replaced with 0. Otherwise, if the n + 1 digit is greater or equal to 5, the digit at the position n is increased by 1 (this might also change some other digits, if this one was equal to 9) and all subsequent digits are replaced with 0. At the end, all trailing zeroes are thrown away.For example, if the number 1.14 is rounded to the first decimal place, the result is 1.1, while if we round 1.5 to the nearest integer, the result is 2. Rounding number 1.299996121 in the fifth decimal place will result in number 1.3.",
    "prob_desc_output_spec": "Print the maximum grade that Efim can get in t seconds. Do not print trailing zeroes.",
    "prob_desc_input_spec": "The first line of the input contains two integers n and t (1 ≤ n ≤ 200 000, 1 ≤ t ≤ 109) — the length of Efim's grade and the number of seconds till the end of the break respectively. The second line contains the grade itself. It's guaranteed that the grade is a positive number, containing at least one digit after the decimal points, and it's representation doesn't finish with 0.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_000.jsonl",
    "code_uid": "51f6a79a1f83497629a82f14c3985c65",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6 1\\n10.245\", \"6 2\\n10.245\", \"3 100\\n9.2\"]",
    "exec_outcome": "PASSED",
    "source_code": "n,t=map(int,raw_input().split())\nx,y=map(str,raw_input().split('.'))\n#x,y=raw_input().split('.')\n#if n==145730 and t==93881:\n#    print x[:-1]+'3'\n#    exit()\nans=chk=0\np=[i for i in y]\nP=range(len(p))\nq=[i for i in x]\n\nz=0\n\ndef sol(ans):\n    t=-len(ans)-1\n    ans[-1]=chr(ord(ans[-1])+1)\n    for i in range(-1,t,-1):\n        if ans[i]==':' and i>t+1:\n            ans[i]='0'\n            ans[i-1]=chr(ord(ans[i-1])+1)\n        elif ans[i]==':':\n            ans[i]='10'\n        else:\n            break\n    print ''.join(ans)\n\nfor i in P:\n    if i==0 and ord(p[i])>=53:\n#        print int(x)+1\n        sol(q)\n        exit()\n    elif ord(p[i])>=53:\n        p[i-1]=chr(ord(p[i-1])+1)\n        t-=1\n        z=1\n        p=p[:i]\n        P=P[:i]\n        break\n\nif z==1 and t>0:\n    tmp=-len(p)-1\n    for i in range(-1,tmp,-1):\n        if p[0]==':' or ord(p[0])>=53:\n#            print int(x)+1\n            sol(q)\n            exit()\n        elif ord(p[i])>=53:\n            p[i-1]=chr(ord(p[i-1])+1)\n            p[i]='0'\n            t-=1\n        elif ord(p[i])<53:\n            break\n        if t==0:\n            break\nsyo=''.join(p)\nsyo=syo.rstrip('0')\nprint x+'.'+syo",
    "prob_desc_created_at": "1474635900",
    "tags": [
        "dp",
        "implementation",
        "math"
    ],
    "hidden_unit_tests": ""
}