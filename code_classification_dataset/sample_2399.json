{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"4\", \"5\"]",
    "src_uid": "1f8d438f9273459c0491194bc7fe29dd",
    "prob_desc_notes": "NoteIn the first example subsequences [1, 2] and [4, 5] give length 4 in total.In the second example subsequences [62, 48, 49] and [60, 61] give length 5 in total. If you choose subsequence [62, 61] in the first place then the second melody will have maximum length 2, that gives the result of 4, which is not maximal.",
    "prob_desc_description": "Alice is a beginner composer and now she is ready to create another masterpiece. And not even the single one but two at the same time! Alice has a sheet with n notes written on it. She wants to take two such non-empty non-intersecting subsequences that both of them form a melody and sum of their lengths is maximal.Subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.Subsequence forms a melody when each two adjacent notes either differs by 1 or are congruent modulo 7.You should write a program which will calculate maximum sum of lengths of such two non-empty non-intersecting subsequences that both of them form a melody.",
    "prob_desc_output_spec": "Print maximum sum of lengths of such two non-empty non-intersecting subsequences that both of them form a melody.",
    "prob_desc_input_spec": "The first line contains one integer number n (2 ≤ n ≤ 5000). The second line contains n integer numbers a1, a2, ..., an (1 ≤ ai ≤ 105) — notes written on a sheet.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2600,
    "file_name": "train_022.jsonl",
    "code_uid": "e3487488dd25bca8d0e9831988158451",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n1 2 4 5\", \"6\\n62 22 60 61 48 49\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\n\nn = int(input()) + 1\na = [0] + list(map(int, input().split()))\nmod7 = [x % 7 for x in a]\n\ndp = [[0]*n for _ in range(n)]\nmaxnum = [0]*(10**5+10)\nans = 0\n\nfor i in range(n):\n    maxmod = [0]*7\n\n    for j in range(n):\n        maxnum[a[j]] = 0\n\n    for j in range(i):\n        maxnum[a[j]] = max(maxnum[a[j]], dp[j][i])\n        maxmod[mod7[j]] = max(maxmod[mod7[j]], dp[j][i])\n\n    for j in range(i+1, n):\n        dp[i][j] = max(\n            maxnum[a[j]-1],\n            maxnum[a[j]+1],\n            maxmod[mod7[j]],\n            dp[0][i]\n        ) + 1\n\n        maxnum[a[j]] = max(maxnum[a[j]], dp[i][j])\n        maxmod[mod7[j]] = max(maxmod[mod7[j]], dp[i][j])\n        ans = max(ans, dp[i][j])\n\nprint(ans)\n",
    "prob_desc_created_at": "1496675100",
    "tags": [
        "dp",
        "flows"
    ],
    "hidden_unit_tests": ""
}