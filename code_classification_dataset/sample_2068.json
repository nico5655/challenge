{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\\n2\\n0\\n2\"]",
    "src_uid": "05177408414e4056cd6b1ea46d1ac499",
    "prob_desc_notes": "NoteIn the first test case, you first need to move 3, and then 2 to the beginning of the array. Therefore, the desired sequence of operations: $$$[4, 7, 2, 3, 9] \\rightarrow [3, 4, 7, 2, 9] \\rightarrow [2, 3, 4, 7, 9]$$$.In the second test case, you need to move the 1 to the beginning of the array, and the 8 — to the end. Therefore, the desired sequence of operations: $$$[3, 5, 8, 1, 7] \\rightarrow [1, 3, 5, 8, 7] \\rightarrow [1, 3, 5, 7, 8]$$$.In the third test case, the array is already sorted.",
    "prob_desc_description": "This is an easy version of the problem. In this version, all numbers in the given array are distinct and the constraints on $$$n$$$ are less than in the hard version of the problem.You are given an array $$$a$$$ of $$$n$$$ integers (there are no equals elements in the array). You can perform the following operations on array elements:  choose any index $$$i$$$ ($$$1 \\le i \\le n$$$) and move the element $$$a[i]$$$ to the begin of the array;  choose any index $$$i$$$ ($$$1 \\le i \\le n$$$) and move the element $$$a[i]$$$ to the end of the array. For example, if $$$n = 5$$$, $$$a = [4, 7, 2, 3, 9]$$$, then the following sequence of operations can be performed:   after performing the operation of the first type to the second element, the array $$$a$$$ will become $$$[7, 4, 2, 3, 9]$$$;  after performing the operation of the second type to the second element, the array $$$a$$$ will become $$$[7, 2, 3, 9, 4]$$$. You can perform operations of any type any number of times in any order.Find the minimum total number of operations of the first and second type that will make the $$$a$$$ array sorted in non-decreasing order. In other words, what is the minimum number of operations that must be performed so the array satisfies the inequalities $$$a[1] \\le a[2] \\le \\ldots \\le a[n]$$$.",
    "prob_desc_output_spec": "For each test case output one integer — the minimum total number of operations of the first and second type, which will make the array sorted in non-decreasing order.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases in the test. Then $$$t$$$ test cases follow. Each test case starts with a line containing an integer $$$n$$$ ($$$1 \\le n \\le 3000$$$) — length of the array $$$a$$$. Then follow $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\le a_i \\le 10^9$$$) — an array that needs to be sorted by the given operations. All numbers in the given array are distinct. The sum of $$$n$$$ for all test cases in one test does not exceed $$$3000$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_016.jsonl",
    "code_uid": "b71dcff8866b9328177a9a0ccecf6712",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n5\\n4 7 2 3 9\\n5\\n3 5 8 1 7\\n5\\n1 4 5 7 12\\n4\\n0 2 1 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "# f = open('test.py')\n# def input():\n# \treturn f.readline().replace('\\n','')\n\t\ndef read_list():\n\treturn list(map(int,input().strip().split(' ')))\ndef print_list(l):\n\tprint(' '.join(map(str,l)))\n\n\nN = int(input())\nfor _ in range(N):\n\tn = int(input())\n\tnums = read_list()\n\tdic = {}\n\tfor i in range(n):\n\t\tdic[nums[i]] = i\n\tnums.sort()\n\tres = 0\n\ttmp = 1\n\tfor i in range(1,n):\n\t\tif dic[nums[i]]<dic[nums[i-1]]:\n\t\t\tres = max(res,tmp)\n\t\t\ttmp = 1\n\t\telse:\n\t\t\ttmp+=1\n\tres = max(res,tmp)\n\tprint(n-res)\n",
    "prob_desc_created_at": "1592318100",
    "tags": [
        "dp",
        "two pointers",
        "greedy"
    ],
    "hidden_unit_tests": ""
}