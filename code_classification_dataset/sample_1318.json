{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"-1 -1 3 2 1 \\n-1 4 4 4 2 \\n-1 -1 1 1 1 1\"]",
    "src_uid": "b7abfb1103bb1796c8f89653c303d7dc",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given an array $$$a$$$ consisting of $$$n$$$ integers numbered from $$$1$$$ to $$$n$$$.Let's define the $$$k$$$-amazing number of the array as the minimum number that occurs in all of the subsegments of the array having length $$$k$$$ (recall that a subsegment of $$$a$$$ of length $$$k$$$ is a contiguous part of $$$a$$$ containing exactly $$$k$$$ elements). If there is no integer occuring in all subsegments of length $$$k$$$ for some value of $$$k$$$, then the $$$k$$$-amazing number is $$$-1$$$.For each $$$k$$$ from $$$1$$$ to $$$n$$$ calculate the $$$k$$$-amazing number of the array $$$a$$$.",
    "prob_desc_output_spec": "For each test case print $$$n$$$ integers, where the $$$i$$$-th integer is equal to the $$$i$$$-amazing number of the array.",
    "prob_desc_input_spec": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases. Then $$$t$$$ test cases follow. The first line of each test case contains one integer $$$n$$$ ($$$1 \\le n \\le 3 \\cdot 10^5$$$) — the number of elements in the array. The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le n$$$) — the elements of the array.  It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$3 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_008.jsonl",
    "code_uid": "3eb98c654e736cb557c1166a083a5a2a",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n5\\n1 2 3 4 5\\n5\\n4 4 4 4 2\\n6\\n1 3 1 5 3 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "# -*- coding: utf-8 -*-\nimport sys\nfrom collections import deque, defaultdict, namedtuple\nimport heapq\nfrom math import sqrt, factorial, gcd, ceil, atan, pi\nfrom itertools import permutations\n# def input(): return sys.stdin.readline().strip() \n# def input(): return sys.stdin.buffer.readline()[:-1] # warning bytes\n# def input(): return sys.stdin.buffer.readline().strip() # warning bytes\ndef input(): return sys.stdin.buffer.readline().decode('utf-8').strip()\nimport string\nimport operator\nimport random\n# string.ascii_lowercase\nfrom bisect import bisect_left, bisect_right\nfrom functools import lru_cache, reduce\nMOD = int(1e9)+7\nINF = float('inf')\n\n# sys.setrecursionlimit(MOD)\n\ndef solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    d = defaultdict(lambda : -1)\n    m = defaultdict(int)\n    for i in range(n):\n        x = a[i]\n        m[x] = max(m[x], i - d[x])\n        d[x] = i\n        \n    for i in range(n):\n        x = a[i]\n        m[x] = max(m[x], n - d[x])\n\n    rm = defaultdict(lambda : INF)\n    for k in m:\n        rm[m[k]] = min(rm[m[k]], k)\n\n    ans = INF\n    for i in range(1, n+1):\n        ans = min(rm[i], ans)\n        if ans == INF:\n            print(-1, end=' ')\n        else:\n            print(ans, end=' ')\n    print()\n    \n\nT = 1\nT = int(input())\nfor case in range(1,T+1):\n    ans = solve()\n\n\n\"\"\"\n\n1 1 1 1 2 2 2 3 3 5 6 6 8 8 11\n2 2 2 1 2 2 1\n\n1 1 1 1 1 2 1\n\n\n\n\"\"\"\n",
    "prob_desc_created_at": "1601219100",
    "tags": [
        "data structures",
        "two pointers",
        "implementation",
        "binary search"
    ],
    "hidden_unit_tests": ""
}