{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"NO\\nYES\\nNO\\nYES\\nYES\", \"NO\\nYES\\nNO\\nNO\\nNO\"]",
    "src_uid": "6ed24fef3b7f0f0dc040fc5bed535209",
    "prob_desc_notes": "NoteIn the second case of the first sample, the array $$$[4]$$$ will generate an OmkArray of $$$[4]$$$, as the median of the first element is $$$4$$$.In the fourth case of the first sample, the array $$$[3, 2, 5]$$$ will generate an OmkArray of $$$[3, 3]$$$, as the median of $$$3$$$ is $$$3$$$ and the median of $$$2, 3, 5$$$ is $$$3$$$.In the fifth case of the first sample, the array $$$[2, 1, 0, 3, 4, 4, 3]$$$ will generate an OmkArray of $$$[2, 1, 2, 3]$$$ as   the median of $$$2$$$ is $$$2$$$  the median of $$$0, 1, 2$$$ is $$$1$$$  the median of $$$0, 1, 2, 3, 4$$$ is $$$2$$$  and the median of $$$0, 1, 2, 3, 3, 4, 4$$$ is $$$3$$$. In the second case of the second sample, the array $$$[1, 0, 4, 3, 5, -2, -2, -2, -4, -3, -4, -1, 5]$$$ will generate an OmkArray of $$$[1, 1, 3, 1, 0, -2, -1]$$$, as   the median of $$$1$$$ is $$$1$$$  the median of $$$0, 1, 4$$$ is $$$1$$$  the median of $$$0, 1, 3, 4, 5$$$ is $$$3$$$  the median of $$$-2, -2, 0, 1, 3, 4, 5$$$ is $$$1$$$  the median of $$$-4, -2, -2, -2, 0, 1, 3, 4, 5$$$ is $$$0$$$  the median of $$$-4, -4, -3, -2, -2, -2, 0, 1, 3, 4, 5$$$ is $$$-2$$$  and the median of $$$-4, -4, -3, -2, -2, -2, -1, 0, 1, 3, 4, 5, 5$$$ is $$$-1$$$ For all cases where the answer is NO, it can be proven that it is impossible to find an array $$$a$$$ such that $$$b$$$ is the OmkArray of $$$a$$$.",
    "prob_desc_description": "Uh oh! Ray lost his array yet again! However, Omkar might be able to help because he thinks he has found the OmkArray of Ray's array. The OmkArray of an array $$$a$$$ with elements $$$a_1, a_2, \\ldots, a_{2k-1}$$$, is the array $$$b$$$ with elements $$$b_1, b_2, \\ldots, b_{k}$$$ such that $$$b_i$$$ is equal to the median of $$$a_1, a_2, \\ldots, a_{2i-1}$$$ for all $$$i$$$. Omkar has found an array $$$b$$$ of size $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$, $$$-10^9 \\leq b_i \\leq 10^9$$$). Given this array $$$b$$$, Ray wants to test Omkar's claim and see if $$$b$$$ actually is an OmkArray of some array $$$a$$$. Can you help Ray?The median of a set of numbers $$$a_1, a_2, \\ldots, a_{2i-1}$$$ is the number $$$c_{i}$$$ where $$$c_{1}, c_{2}, \\ldots, c_{2i-1}$$$ represents $$$a_1, a_2, \\ldots, a_{2i-1}$$$ sorted in nondecreasing order. ",
    "prob_desc_output_spec": "For each test case, output one line containing YES if there exists an array $$$a$$$ such that $$$b_i$$$ is the median of $$$a_1, a_2, \\dots, a_{2i-1}$$$ for all $$$i$$$, and NO otherwise. The case of letters in YES and NO do not matter (so yEs and No will also be accepted).",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases. Description of the test cases follows. The first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) — the length of the array $$$b$$$. The second line contains $$$n$$$ integers $$$b_1, b_2, \\ldots, b_n$$$ ($$$-10^9 \\leq b_i \\leq 10^9$$$) — the elements of $$$b$$$. It is guaranteed the sum of $$$n$$$ across all test cases does not exceed $$$2 \\cdot 10^5$$$. ",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_094.jsonl",
    "code_uid": "59858ba9462d9ebefb5a1b3588004b25",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n4\\n6 2 1 3\\n1\\n4\\n5\\n4 -8 5 6 -7\\n2\\n3 3\\n4\\n2 1 2 3\", \"5\\n8\\n-8 2 -6 -5 -4 3 3 2\\n7\\n1 1 3 1 0 -2 -1\\n7\\n6 12 8 6 2 6 10\\n6\\n5 1 2 3 6 7\\n5\\n1 3 4 3 0\"]",
    "exec_outcome": "PASSED",
    "source_code": "def solve(n, a):\r\n    prev = a[0]\r\n    r = [10 ** 9]\r\n    l = [-r[0]]\r\n    for i in range(1, n):\r\n        if a[i] < prev:\r\n            if a[i] < l[-1]:\r\n                return False\r\n            elif a[i] == l[-1]:\r\n                l.pop()\r\n            r.append(prev)\r\n        elif a[i] > prev:\r\n            if a[i] > r[-1]:\r\n                return False\r\n            elif a[i] == r[-1]:\r\n                r.pop()\r\n            l.append(prev)\r\n        prev = a[i]\r\n    return True\r\n\r\n\r\nt = int(input())\r\nfor w in range(t):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    if solve(n, a):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
    "prob_desc_created_at": "1622990100",
    "tags": [
        "data structures",
        "greedy",
        "implementation"
    ],
    "hidden_unit_tests": ""
}