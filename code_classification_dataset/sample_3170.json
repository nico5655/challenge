{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\\n2\\n-1\\n1\", \"0\\n1\\n0\\n-1\", \"-1\\n-1\\n-1\", \"-1\"]",
    "src_uid": "883f728327aea19993089a65d452b79f",
    "prob_desc_notes": null,
    "prob_desc_description": "Why I have to finish so many assignments???Jamie is getting very busy with his school life. He starts to forget the assignments that he has to do. He decided to write the things down on a to-do list. He assigns a value priority for each of his assignment (lower value means more important) so he can decide which he needs to spend more time on.After a few days, Jamie finds out the list is too large that he can't even manage the list by himself! As you are a good friend of Jamie, help him write a program to support the following operations on the to-do list:  set ai xi — Add assignment ai to the to-do list if it is not present, and set its priority to xi. If assignment ai is already in the to-do list, its priority is changed to xi.  remove ai — Remove assignment ai from the to-do list if it is present in it.  query ai — Output the number of assignments that are more important (have a smaller priority value) than assignment ai, so Jamie can decide a better schedule. Output  - 1 if ai is not in the to-do list.  undo di — Undo all changes that have been made in the previous di days (not including the day of this operation) At day 0, the to-do list is empty. In each of the following q days, Jamie will do exactly one out of the four operations. If the operation is a query, you should output the result of the query before proceeding to the next day, or poor Jamie cannot make appropriate decisions.",
    "prob_desc_output_spec": "For each query operation, output a single integer — the number of assignments that have a priority lower than assignment ai, or  - 1 if ai is not in the to-do list.",
    "prob_desc_input_spec": "The first line consists of a single integer q (1 ≤ q ≤ 105) — the number of operations. The following q lines consists of the description of the operations. The i-th line consists of the operation that Jamie has done in the i-th day. The query has the following format: The first word in the line indicates the type of operation. It must be one of the following four: set, remove, query, undo.   If it is a set operation, a string ai and an integer xi follows (1 ≤ xi ≤ 109). ai is the assignment that need to be set to priority xi.  If it is a remove operation, a string ai follows. ai is the assignment that need to be removed.  If it is a query operation, a string ai follows. ai is the assignment that needs to be queried.  If it is a undo operation, an integer di follows (0 ≤ di &lt; i). di is the number of days that changes needed to be undone.  All assignment names ai only consists of lowercase English letters and have a length 1 ≤ |ai| ≤ 15. It is guaranteed that the last operation is a query operation.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_044.jsonl",
    "code_uid": "932ccde0446ccee0b75faadf77810094",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"8\\nset chemlabreport 1\\nset physicsexercise 2\\nset chinesemockexam 3\\nquery physicsexercise\\nquery chinesemockexam\\nremove physicsexercise\\nquery physicsexercise\\nquery chinesemockexam\", \"8\\nset physicsexercise 2\\nset chinesemockexam 3\\nset physicsexercise 1\\nquery physicsexercise\\nquery chinesemockexam\\nundo 4\\nquery physicsexercise\\nquery chinesemockexam\", \"5\\nquery economicsessay\\nremove economicsessay\\nquery economicsessay\\nundo 2\\nquery economicsessay\", \"5\\nset economicsessay 1\\nremove economicsessay\\nundo 1\\nundo 1\\nquery economicsessay\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys, os, __pypy__\nfrom collections import defaultdict\nfrom cStringIO import StringIO\nfrom io import IOBase\nrange = xrange\ninput = raw_input\n \nL = []\nR = []\nA = [0]\n\n__pypy__.resizelist_hint(L, 50*10**5)\n__pypy__.resizelist_hint(R, 50*10**5)\n__pypy__.resizelist_hint(A, 50*10**5)\n\n\ndef create():\n    L.append(-1)\n    R.append(-1)\n    A.append(0)\n    return len(L) - 1\n \ndef copy(ind):\n    L.append(L[ind])\n    R.append(R[ind])\n    A[-1] = A[ind]\n    A.append(0)\n    return len(L) - 1\n \ndef adder(i, n, ind, x):\n    ind0 = ind = copy(ind) if ind >= 0 else create()\n    while n != 1:\n        A[ind] += x\n        n = n >> 1\n        if i < n:\n            L[ind] = ind = copy(L[ind]) if L[ind] >= 0 else create()\n        else:\n            R[ind] = ind = copy(R[ind]) if R[ind] >= 0 else create()\n            i -= n\n    A[ind] += x\n    return ind0\n \ndef getter(l, r, n, ind):\n    ans = 0\n    while ind >= 0 and 0 < r and l < n:\n        if l <= 0 and r >= n:\n            ans += A[ind]\n            break\n        n = n >> 1\n        ans += getter(l - n, r - n, n, R[ind])\n        ind = L[ind]\n    return ans\n\ndef getteri(i, n, ind):\n    ans = 0\n    while ind >= 0:\n        if n == 1:\n            return A[ind]\n        n = n >> 1\n        if i < n:\n            ind = L[ind]\n        else:\n            i -= n\n            ind = R[ind]\n    return 0\n \nmapper = {'set':0, 'remove':1, 'query':2, 'undo':3}\nN = 1 << 30\nM = 1 << 17\n \ndef main():\n    curbucket = -1\n    curprio   = -1\n    Tbucket = [curbucket]\n    Tprio   = [curprio]\n    identifier = defaultdict(lambda: len(identifier))\n \n    q = int(input())\n    for curd in range(q):\n        inp = sys.stdin.readline().split(); ii = 0\n        cas = mapper[inp[ii]]; ii += 1\n        if cas == 0:\n            aind = identifier[inp[ii]]; ii += 1\n            new_prio = int(inp[ii]); ii += 1\n \n            prio = getteri(aind, M, curprio)\n            curprio = adder(aind, M, curprio, new_prio - prio)\n            if prio:\n                curbucket = adder(prio, N, curbucket, -1)\n            if new_prio:\n                curbucket = adder(new_prio, N, curbucket, 1)\n        elif cas == 1:\n            aind = identifier[inp[ii]]; ii += 1\n            prio = getteri(aind, M, curprio)\n            if prio:\n                curbucket = adder(prio, N, curbucket, -1)\n                curprio = adder(aind, M, curprio, -prio)\n        elif cas == 2:\n            aind = identifier[inp[ii]]; ii += 1\n            prio = getteri(aind, M, curprio)\n            ans = getter(0, prio, N, curbucket) if prio else -1\n            os.write(1, str(ans) + '\\n')\n        else: #  cas == 3\n            d = int(inp[ii]); ii += 1\n            curbucket = Tbucket[curd - d]\n            curprio   = Tprio[curd - d]\n        Tbucket.append(curbucket)\n        Tprio.append(curprio)\n \n# region fastio\n \nBUFSIZE = 8192\n \nclass FastI(IOBase):\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self._buffer = StringIO()\n        self.newlines = 0\n \n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self._buffer.seek(0, 2), self._buffer.write(b), self._buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n \n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(\"\\n\") + (not b)\n            ptr = self._buffer.tell()\n            self._buffer.seek(0, 2), self._buffer.write(b), self._buffer.seek(ptr)\n        self.newlines -= 1\n        return self._buffer.readline()\n \n \nclass FastO(IOBase):\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self._buffer = __pypy__.builders.StringBuilder()\n        self.write = lambda s: self._buffer.append(s)\n \n    def flush(self):\n        os.write(self._fd, self._buffer.build())\n        self._buffer = __pypy__.builders.StringBuilder()\n \nsys.stdin, sys.stdout = FastI(sys.stdin), FastO(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n \n# endregion\n \nif __name__ == \"__main__\":\n    main()\n",
    "prob_desc_created_at": "1516372500",
    "tags": [
        "data structures",
        "trees",
        "interactive"
    ],
    "hidden_unit_tests": ""
}