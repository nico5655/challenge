{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"5\\n6\\n0\\n6\"]",
    "src_uid": "48946ede1147b630992157ffcc9403e1",
    "prob_desc_notes": "NoteFor the first test case the pairs that differ in exactly one position are: (\"ab\", \"cb\"), (\"ab\", \"db\"), (\"ab\", \"aa\"), (\"cb\", \"db\") and (\"cb\", \"cc\").For the second test case the pairs that differ in exactly one position are: (\"aa\", \"ac\"), (\"aa\", \"ca\"), (\"cc\", \"ac\"), (\"cc\", \"ca\"), (\"ac\", \"aa\") and (\"ca\", \"aa\").For the third test case, the are no pairs satisfying the conditions.",
    "prob_desc_description": "Given $$$n$$$ strings, each of length $$$2$$$, consisting of lowercase Latin alphabet letters from 'a' to 'k', output the number of pairs of indices $$$(i, j)$$$ such that $$$i &lt; j$$$ and the $$$i$$$-th string and the $$$j$$$-th string differ in exactly one position.In other words, count the number of pairs $$$(i, j)$$$ ($$$i &lt; j$$$) such that the $$$i$$$-th string and the $$$j$$$-th string have exactly one position $$$p$$$ ($$$1 \\leq p \\leq 2$$$) such that $$${s_{i}}_{p} \\neq {s_{j}}_{p}$$$.The answer may not fit into 32-bit integer type, so you should use 64-bit integers like long long in C++ to avoid integer overflow.",
    "prob_desc_output_spec": "For each test case, print a single integer — the number of pairs $$$(i, j)$$$ ($$$i &lt; j$$$) such that the $$$i$$$-th string and the $$$j$$$-th string have exactly one position $$$p$$$ ($$$1 \\leq p \\leq 2$$$) such that $$${s_{i}}_{p} \\neq {s_{j}}_{p}$$$.  Please note, that the answer for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language (like long long for C++).",
    "prob_desc_input_spec": "The first line of the input contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. The description of test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$) — the number of strings. Then follows $$$n$$$ lines, the $$$i$$$-th of which containing a single string $$$s_i$$$ of length $$$2$$$, consisting of lowercase Latin letters from 'a' to 'k'. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1200,
    "file_name": "train_084.jsonl",
    "code_uid": "82d7d03b80bd2d8e511865d80dff63f7",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n6\\nab\\ncb\\ndb\\naa\\ncc\\nef\\n7\\naa\\nbb\\ncc\\nac\\nca\\nbb\\naa\\n4\\nkk\\nkk\\nab\\nab\\n5\\njf\\njf\\njk\\njk\\njk\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import Counter\r\n\r\n\r\nfor cases in range(int(input())):\r\n    n=int(input())\r\n    ls=[]\r\n    k=0\r\n    for i in range(n):\r\n        ls.append(input())\r\n    t=Counter (ls)  \r\n    s=list(set(ls))\r\n    for i in range(0,len(s)-1):\r\n        for j in range(i+1,len(s)):\r\n            if(s[i]!=s[j] and(s[i][0]==s[j][0] or s[i][1]==s[j][1])):\r\n                k+=t[s[i]]*t[s[j]]        \r\n\r\n    print(k)\r\n\r\n",
    "prob_desc_created_at": "1650551700",
    "tags": [
        "data structures",
        "math",
        "strings"
    ],
    "hidden_unit_tests": ""
}