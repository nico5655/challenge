{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"3\", \"2\", \"-1\", \"3\"]",
    "src_uid": "001d8aca7c8421c3e54863f3fb706f0d",
    "prob_desc_notes": "NoteIn the first example the heater at the position $$$2$$$ warms up elements $$$[1; 3]$$$, the heater at the position $$$3$$$ warms up elements $$$[2, 4]$$$ and the heater at the position $$$6$$$ warms up elements $$$[5; 6]$$$ so the answer is $$$3$$$.In the second example the heater at the position $$$1$$$ warms up elements $$$[1; 3]$$$ and the heater at the position $$$5$$$ warms up elements $$$[3; 5]$$$ so the answer is $$$2$$$.In the third example there are no heaters so the answer is -1.In the fourth example the heater at the position $$$3$$$ warms up elements $$$[1; 5]$$$, the heater at the position $$$6$$$ warms up elements $$$[4; 8]$$$ and the heater at the position $$$10$$$ warms up elements $$$[8; 10]$$$ so the answer is $$$3$$$.",
    "prob_desc_description": "Vova's house is an array consisting of $$$n$$$ elements (yeah, this is the first problem, I think, where someone lives in the array). There are heaters in some positions of the array. The $$$i$$$-th element of the array is $$$1$$$ if there is a heater in the position $$$i$$$, otherwise the $$$i$$$-th element of the array is $$$0$$$.Each heater has a value $$$r$$$ ($$$r$$$ is the same for all heaters). This value means that the heater at the position $$$pos$$$ can warm up all the elements in range $$$[pos - r + 1; pos + r - 1]$$$.Vova likes to walk through his house while he thinks, and he hates cold positions of his house. Vova wants to switch some of his heaters on in such a way that each element of his house will be warmed up by at least one heater. Vova's target is to warm up the whole house (all the elements of the array), i.e. if $$$n = 6$$$, $$$r = 2$$$ and heaters are at positions $$$2$$$ and $$$5$$$, then Vova can warm up the whole house if he switches all the heaters in the house on (then the first $$$3$$$ elements will be warmed up by the first heater and the last $$$3$$$ elements will be warmed up by the second heater).Initially, all the heaters are off.But from the other hand, Vova didn't like to pay much for the electricity. So he wants to switch the minimum number of heaters on in such a way that each element of his house is warmed up by at least one heater.Your task is to find this number of heaters or say that it is impossible to warm up the whole house.",
    "prob_desc_output_spec": "Print one integer — the minimum number of heaters needed to warm up the whole house or -1 if it is impossible to do it.",
    "prob_desc_input_spec": "The first line of the input contains two integers $$$n$$$ and $$$r$$$ ($$$1 \\le n, r \\le 1000$$$) — the number of elements in the array and the value of heaters. The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$0 \\le a_i \\le 1$$$) — the Vova's house description.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_011.jsonl",
    "code_uid": "2032b557667483fb09e5d8b0b071d18d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6 2\\n0 1 1 0 0 1\", \"5 3\\n1 0 0 0 1\", \"5 10\\n0 0 0 0 0\", \"10 3\\n0 0 1 1 0 1 0 0 0 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "from __future__ import print_function # for PyPy2\nfrom collections import Counter, OrderedDict\nfrom itertools import permutations as perm\nfrom collections import deque\nfrom sys import stdin\nfrom bisect import *\nfrom heapq import *\nimport math\n \ng   = lambda : stdin.readline().strip()\ngl  = lambda : g().split()\ngil = lambda : [int(var) for var in gl()]\ngfl = lambda : [float(var) for var in gl()]\ngcl = lambda : list(g())\ngbs = lambda : [int(var) for var in g()]\nmod = int(1e9)+7\ninf = float(\"inf\")\n\nn, r = gil()\na = gil()\n\n# n, r = 999, 19\n# a = [1]*n\n\npairs = []\n\nfor i in range(n):\n\tif a[i]:\n\t\tpairs.append((max(0, i-r+1), min(n-1, i+r-1)))\n\npairs.sort(key=lambda x: [x[0], -x[1]], reverse=True)\n\n# print(pairs)\n\nflag = True if pairs else False\nend = 0\ncnt = 0\nprev = -1\n# print(pairs)\n# print(0)\nwhile pairs:\n\te = -1\n\twhile pairs and pairs[-1][0] <= end:\n\t\te = max(e, pairs.pop()[1])\n\n\tif e < 0:\n\t\tflag = False\n\t\tbreak\n\telse:\n\t\tcnt += 1\n\t\t# print(e)\n\t\tend = e+1\n\t\tprev = e\n\t\tif e == n-1: break\n\nprint(cnt if flag and prev >= n-1 else -1)\n",
    "prob_desc_created_at": "1539354900",
    "tags": [
        "two pointers",
        "greedy"
    ],
    "hidden_unit_tests": ""
}