{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"If you want to call a taxi, you should call: Rogulenko.\\nIf you want to order a pizza, you should call: Fedorov, Rogulenko, Kaluzhin.\\nIf you want to go to a cafe with a wonderful girl, you should call: Melnikov.\", \"If you want to call a taxi, you should call: Gleb.\\nIf you want to order a pizza, you should call: Gleb, Serega.\\nIf you want to go to a cafe with a wonderful girl, you should call: Melnik.\", \"If you want to call a taxi, you should call: Pachocki.\\nIf you want to order a pizza, you should call: Kulczynski, Pachocki.\\nIf you want to go to a cafe with a wonderful girl, you should call: Kulczynski.\"]",
    "src_uid": "4791a795119c185b3aec91b6f8af8f03",
    "prob_desc_notes": "NoteIn the first sample you are given four friends. Fedorov's phone book contains one taxi number and one pizza delivery number, Melnikov's phone book only has 3 numbers of girls, Rogulenko's one has 6 taxi numbers and one pizza delivery number, Kaluzhin's one contains 2 taxi numbers and one pizza delivery number.Thus, if you need to order a taxi, you should obviously call Rogulenko, if you need to order a pizza you should call anybody of the following: Rogulenko, Fedorov, Kaluzhin (each of them has one number). Melnikov has maximal number of phone numbers of girls. ",
    "prob_desc_description": "Winters are just damn freezing cold in Nvodsk! That's why a group of n friends prefers to take a taxi, order a pizza and call girls. The phone numbers in the city consist of three pairs of digits (for example, 12-34-56). Each friend has a phonebook of size si (that's the number of phone numbers). We know that taxi numbers consist of six identical digits (for example, 22-22-22), the numbers of pizza deliveries should necessarily be decreasing sequences of six different digits (for example, 98-73-21), all other numbers are the girls' numbers.You are given your friends' phone books. Calculate which friend is best to go to when you are interested in each of those things (who has maximal number of phone numbers of each type). If the phone book of one person contains some number two times, you should count it twice. That is, each number should be taken into consideration the number of times it occurs in the phone book.",
    "prob_desc_output_spec": "In the first line print the phrase \"If you want to call a taxi, you should call: \". Then print names of all friends whose phone books contain maximal number of taxi phone numbers.  In the second line print the phrase \"If you want to order a pizza, you should call: \". Then print names of all friends who have maximal number of pizza phone numbers.  In the third line print the phrase \"If you want to go to a cafe with a wonderful girl, you should call: \". Then print names of all friends who have maximal number of girls' phone numbers.  Print the names in the order in which they are given in the input data. Separate two consecutive names with a comma and a space. Each line should end with exactly one point. For clarifications concerning the output form, see sample tests. It is necessary that you follow the output form strictly. Extra spaces are not allowed.",
    "prob_desc_input_spec": "The first line contains an integer n (1 ≤ n ≤ 100) — the number of friends.  Then follow n data blocks that describe each friend's phone books. Each block is presented in the following form: first goes the line that contains integer si and string namei (0 ≤ si ≤ 100) — the number of phone numbers in the phone book of the i-th friend and the name of the i-th friend. The name is a non-empty sequence of uppercase and lowercase Latin letters, containing no more than 20 characters. Next si lines contain numbers as \"XX-XX-XX\", where X is arbitrary digits from 0 to 9.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1200,
    "file_name": "train_019.jsonl",
    "code_uid": "e11dc1c39e5cee04db3290968cf6113e",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n2 Fedorov\\n22-22-22\\n98-76-54\\n3 Melnikov\\n75-19-09\\n23-45-67\\n99-99-98\\n7 Rogulenko\\n22-22-22\\n11-11-11\\n33-33-33\\n44-44-44\\n55-55-55\\n66-66-66\\n95-43-21\\n3 Kaluzhin\\n11-11-11\\n99-99-99\\n98-65-32\", \"3\\n5 Gleb\\n66-66-66\\n55-55-55\\n01-01-01\\n65-43-21\\n12-34-56\\n3 Serega\\n55-55-55\\n87-65-43\\n65-55-21\\n5 Melnik\\n12-42-12\\n87-73-01\\n36-04-12\\n88-12-22\\n82-11-43\", \"3\\n3 Kulczynski\\n22-22-22\\n65-43-21\\n98-12-00\\n4 Pachocki\\n11-11-11\\n11-11-11\\n11-11-11\\n98-76-54\\n0 Smietanka\"]",
    "exec_outcome": "PASSED",
    "source_code": "n=int(input())\nt,p,c=[0,0,0]\nT=''\nP=''\nC=''\nfor i in range(n):\n    a,n=input().split()\n    x,y,z=[0,0,0]\n    for j in range(int(a)):\n        s=input()\n        s=s.replace('-','')\n        if len(set(s))==1:\n            x=x+1\n        else:\n            f=1\n            for k in range(1,len(s)):\n                if int(s[k])>=int(s[k-1]):\n                    f=0\n                    break\n            if f:\n                y=y+1\n            else:\n                z=z+1\n    if x==t:\n        if T=='':\n            T=n\n        else:\n            \n            T=T+', '+n\n    if y==p:\n        if P=='':\n            P=n\n        else:\n            \n            P=P+', '+n\n    if z==c:\n        if C=='':\n            C=n\n        else:\n            \n            C=C+', '+n\n    if x>t:\n        t=x\n        T=n\n    if y>p:\n        p=y\n        P=n\n    if z>c:\n        c=z\n        C=n\nprint(\"If you want to call a taxi, you should call: \"+T+'.')\nprint(\"If you want to order a pizza, you should call: \"+P+'.')\nprint(\"If you want to go to a cafe with a wonderful girl, you should call: \"+C+'.')",
    "prob_desc_created_at": "1329490800",
    "tags": [
        "implementation",
        "strings"
    ],
    "hidden_unit_tests": ""
}