{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\", \"2\"]",
    "src_uid": "ed75bd272f6d3050426548435423ca92",
    "prob_desc_notes": "NoteFor the first sample case, there are four contiguous substrings of b of length |a|: \"00\", \"01\", \"11\", and \"11\". The distance between \"01\" and \"00\" is |0 - 0| + |1 - 0| = 1. The distance between \"01\" and \"01\" is |0 - 0| + |1 - 1| = 0. The distance between \"01\" and \"11\" is |0 - 1| + |1 - 1| = 1. Last distance counts twice, as there are two occurrences of string \"11\". The sum of these edit distances is 1 + 0 + 1 + 1 = 3.The second sample case is described in the statement.",
    "prob_desc_description": "Genos needs your help. He was asked to solve the following programming problem by Saitama:The length of some string s is denoted |s|. The Hamming distance between two strings s and t of equal length is defined as , where si is the i-th character of s and ti is the i-th character of t. For example, the Hamming distance between string \"0011\" and string \"0110\" is |0 - 0| + |0 - 1| + |1 - 1| + |1 - 0| = 0 + 1 + 0 + 1 = 2.Given two binary strings a and b, find the sum of the Hamming distances between a and all contiguous substrings of b of length |a|.",
    "prob_desc_output_spec": "Print a single integer — the sum of Hamming distances between a and all contiguous substrings of b of length |a|.",
    "prob_desc_input_spec": "The first line of the input contains binary string a (1 ≤ |a| ≤ 200 000). The second line of the input contains binary string b (|a| ≤ |b| ≤ 200 000). Both strings are guaranteed to consist of characters '0' and '1' only.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_015.jsonl",
    "code_uid": "72995be1b9d80834cac5cb85686b9625",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"01\\n00111\", \"0011\\n0110\"]",
    "exec_outcome": "PASSED",
    "source_code": "a, b, c = input(), input(), 0\np = [[0] * (len(b) + 1), [0] * (len(b) + 1)]\nfor i in range(0, len(b)):\n    p[0][i + 1] = p[0][i] + int(b[i] == '0')\n    p[1][i + 1] = p[1][i] + int(b[i] != '0')\nfor i in range(len(a)):\n    cr = int(a[i] == '1')\n    for j in range(2):\n        c += abs(cr - j) * (p[j][len(b) - len(a) + i + 1] - p[j][i])\nprint(c)\n",
    "prob_desc_created_at": "1450888500",
    "tags": [
        "combinatorics",
        "strings"
    ],
    "hidden_unit_tests": ""
}