{
    "prob_desc_time_limit": "1.5 seconds",
    "prob_desc_sample_outputs": "[\"4\\n168\\n10\\n1000000000\\n9\\n1000000000\"]",
    "src_uid": "d1c2caeec0fe1ac33a6735b03d7c75ce",
    "prob_desc_notes": "NoteIn the first test case, one of the optimal arrays is $$$[2,4,5]$$$.The graph built on this array:   $$$\\operatorname{d}(1, 2) = \\operatorname{d}(1, 3) = 2$$$ and $$$\\operatorname{d}(2, 3) = 4$$$, so the diameter is equal to $$$\\max(2,2,4) = 4$$$.",
    "prob_desc_description": " — Do you have a wish?  — I want people to stop gifting each other arrays.O_o and Another Young BoyAn array of $$$n$$$ positive integers $$$a_1,a_2,\\ldots,a_n$$$ fell down on you from the skies, along with a positive integer $$$k \\le n$$$.You can apply the following operation at most $$$k$$$ times:   Choose an index $$$1 \\le i \\le n$$$ and an integer $$$1 \\le x \\le 10^9$$$. Then do $$$a_i := x$$$ (assign $$$x$$$ to $$$a_i$$$). Then build a complete undirected weighted graph with $$$n$$$ vertices numbered with integers from $$$1$$$ to $$$n$$$, where edge $$$(l, r)$$$ ($$$1 \\le l &lt; r \\le n$$$) has weight $$$\\min(a_{l},a_{l+1},\\ldots,a_{r})$$$.You have to find the maximum possible diameter of the resulting graph after performing at most $$$k$$$ operations.The diameter of a graph is equal to $$$\\max\\limits_{1 \\le u &lt; v \\le n}{\\operatorname{d}(u, v)}$$$, where $$$\\operatorname{d}(u, v)$$$ is the length of the shortest path between vertex $$$u$$$ and vertex $$$v$$$.",
    "prob_desc_output_spec": "For each test case print one integer — the maximum possible diameter of the graph after performing at most $$$k$$$ operations.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^4$$$). Description of the test cases follows. The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$2 \\le n \\le 10^5$$$, $$$1 \\le k \\le n$$$). The second line of each test case contains $$$n$$$ positive integers $$$a_1,a_2,\\ldots,a_n$$$ ($$$1 \\le a_i \\le 10^9$$$). It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_102.jsonl",
    "code_uid": "887bc0efe60a97bbc6d3abad5811070b",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n\\n3 1\\n\\n2 4 1\\n\\n3 2\\n\\n1 9 84\\n\\n3 1\\n\\n10 2 6\\n\\n3 2\\n\\n179 17 1000000000\\n\\n2 1\\n\\n5 9\\n\\n2 2\\n\\n4 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "import collections\r\nimport math\r\n#import bisect\r\n#import itertools\r\ndef solve():\r\n    n, k = list(map(int, input().split()))\r\n    arr = list(map(int, input().split()))\r\n    if n == k:\r\n        print(10 ** 9)\r\n        return\r\n    new_arr = []\r\n    for i in range(n):\r\n        new_arr.append((arr[i], i))\r\n    new_arr.sort()\r\n    i = 0\r\n    k -= 1\r\n    while k:\r\n        arr[new_arr[i][1]] = 10 ** 9\r\n        i += 1\r\n        k -= 1\r\n    \r\n    min_idx = set([0])\r\n    curr = arr[0]\r\n    l = 0\r\n    for i in range(1, n):\r\n        l = max(l, min(arr[i-1], arr[i]))\r\n        temp = arr[i]\r\n        if temp < curr:\r\n            min_idx = set([i])\r\n            curr = temp\r\n        elif temp == curr:\r\n            min_idx.add(i)\r\n\r\n    edge = curr\r\n    if len(min_idx) == 1:\r\n        sub_min = math.inf\r\n        for i in range(n):\r\n            if i not in min_idx:\r\n                sub_min = min(sub_min, arr[i])\r\n\r\n    if arr[0] < arr[1]:\r\n        e = edge\r\n        if 0 in min_idx and len(min_idx) == 1:\r\n                e = sub_min\r\n        ans = min(max(l, arr[1]), 2 * e)\r\n    else:\r\n        ans = min(l, 2 * edge)\r\n\r\n    for i in range(1, n - 1):\r\n        if arr[i] < arr[i-1] or arr[i] < arr[i+1]:\r\n            e = edge\r\n            if i in min_idx and len(min_idx) == 1:\r\n                e = sub_min\r\n            ans = max(ans, min(max(l, arr[i-1], arr[i+1]), 2 * e))\r\n\r\n    if arr[n-1] < arr[n-2]:\r\n        e = edge\r\n        if n - 1 in min_idx and len(min_idx) == 1:\r\n            e = sub_min\r\n        ans = max(ans, min(max(l, arr[n-2]), 2 * e))\r\n\r\n    print(ans)\r\n    \r\nt = int(input())\r\nfor _ in range(t):\r\n    solve()",
    "prob_desc_created_at": "1660401300",
    "tags": [
        "binary search",
        "constructive algorithms",
        "data structures",
        "greedy",
        "shortest paths"
    ],
    "hidden_unit_tests": ""
}