{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\\n3\\n5\\n3\"]",
    "src_uid": "a2d4f0182456cedbe85dff97ec0f477e",
    "prob_desc_notes": "NoteIn the first test case, Phoenix can pay $$$2$$$ dollars to:   recolor sock $$$1$$$ to color $$$2$$$  recolor sock $$$3$$$ to color $$$2$$$  There are now $$$3$$$ matching pairs. For example, pairs $$$(1, 4)$$$, $$$(2, 5)$$$, and $$$(3, 6)$$$ are matching.In the second test case, Phoenix can pay $$$3$$$ dollars to:   turn sock $$$6$$$ from a right sock to a left sock  recolor sock $$$3$$$ to color $$$1$$$  recolor sock $$$4$$$ to color $$$1$$$  There are now $$$3$$$ matching pairs. For example, pairs $$$(1, 3)$$$, $$$(2, 4)$$$, and $$$(5, 6)$$$ are matching.",
    "prob_desc_description": "To satisfy his love of matching socks, Phoenix has brought his $$$n$$$ socks ($$$n$$$ is even) to the sock store. Each of his socks has a color $$$c_i$$$ and is either a left sock or right sock. Phoenix can pay one dollar to the sock store to either:   recolor a sock to any color $$$c'$$$ $$$(1 \\le c' \\le n)$$$  turn a left sock into a right sock  turn a right sock into a left sock  The sock store may perform each of these changes any number of times. Note that the color of a left sock doesn't change when it turns into a right sock, and vice versa. A matching pair of socks is a left and right sock with the same color. What is the minimum cost for Phoenix to make $$$n/2$$$ matching pairs? Each sock must be included in exactly one matching pair.",
    "prob_desc_output_spec": "For each test case, print one integer — the minimum cost for Phoenix to make $$$n/2$$$ matching pairs. Each sock must be included in exactly one matching pair.",
    "prob_desc_input_spec": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases. The first line of each test case contains three integers $$$n$$$, $$$l$$$, and $$$r$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$; $$$n$$$ is even; $$$0 \\le l, r \\le n$$$; $$$l+r=n$$$) — the total number of socks, and the number of left and right socks, respectively. The next line contains $$$n$$$ integers $$$c_i$$$ ($$$1 \\le c_i \\le n$$$) — the colors of the socks. The first $$$l$$$ socks are left socks, while the next $$$r$$$ socks are right socks. It is guaranteed that the sum of $$$n$$$ across all the test cases will not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_097.jsonl",
    "code_uid": "56dfb26d0c9c09298d5a2e11e6027c58",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n6 3 3\\n1 2 3 2 2 2\\n6 2 4\\n1 1 2 2 2 2\\n6 5 1\\n6 5 4 3 2 1\\n4 0 4\\n4 4 4 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "t=int(input())\r\n# if (t==1):\r\n#     try :\r\n#         for i in range(t):\r\n#             n,l,r=map(int,input().split())\r\n#             xx=list(map(int,input().split()))\r\n#             score=0\r\n#             if(i==529):\r\n#                 print(i)\r\n#                 print(l)\r\n\r\n#                 print(r)\r\n#                 print(xx)\r\n#             if(l==0):\r\n#                 xx.sort()\r\n#                 for j in range(r-1):\r\n#                     if(xx[j]==xx[j+1]):\r\n#                         xx[j]=xx[j+1]=0\r\n#                         score+=1\r\n#                 score=(len(xx)-score)\r\n#             elif(r==0):\r\n#                 xx.sort()\r\n#                 for j in range(l-1):\r\n#                     if(xx[j]==xx[j+1]):\r\n#                         xx[j]=xx[j+1]=0\r\n#                         score+=1\r\n#                 score=(len(xx)-score)\r\n#             elif(l>=r):\r\n#                 left=xx[:l]\r\n#                 right=xx[l:]\r\n#                 left.sort()\r\n#                 right.sort()\r\n#                 li=0\r\n#                 ri=0\r\n#                 score1=0\r\n#                 score2=0\r\n#                 while(ri<r and li<l):\r\n#                     if(left[li]==right[ri]):\r\n#                         left[li]=right[ri]=0\r\n#                         score1+=1\r\n#                         li+=1\r\n#                         ri+=1\r\n#                     elif(left[li]>right[ri]):\r\n#                         ri+=1\r\n#                     else:\r\n#                         li+=1\r\n#                 for j in range(l-1):\r\n#                     if(left[j]!=0 and left[j]==left[j+1]):\r\n#                     # score+=1\r\n#                         score2+=1\r\n#                         left[j]=left[j+1]=0\r\n#                     if(score2==(abs(l-r)/2)):\r\n#                         break\r\n#                 score+=(l-score2-score1)\r\n#             elif(r>l):\r\n#                 left=xx[:l]\r\n#                 right=xx[l:]\r\n#                 left.sort()\r\n#                 right.sort()\r\n#                 li=0\r\n#                 ri=0\r\n#                 score1=0\r\n#                 score2=0\r\n#                 while(li<l and ri<r):\r\n#                     if(left[li]==right[ri]):\r\n#                         left[li]=right[ri]=0\r\n#                         score1+=1\r\n#                         li+=1\r\n#                         ri+=1\r\n#                     elif(left[li]>right[ri]):\r\n#                         ri+=1\r\n#                     else:\r\n#                         li+=1\r\n#                 for j in range(r-1):\r\n#                     if(right[j]!=0 and right[j]==right[j+1]):\r\n#                     # score+=1\r\n#                         score2+=1\r\n#                         right[j]=right[j+1]=0\r\n#                     if(score2==(abs(l-r)/2)):\r\n#                         break\r\n#                 score+=(r-score2-score1)\r\n        \r\n#     except:\r\n#         # print(t)\r\n#         tjh=0   \r\n      \r\n        \r\nfor i in range(t):\r\n    n,l,r=map(int,input().split())\r\n    xx=list(map(int,input().split()))\r\n    score=0\r\n    if(l==0):\r\n        xx.sort()\r\n        for j in range(r-1):\r\n            if(xx[j]==xx[j+1]):\r\n                xx[j]=xx[j+1]=0\r\n                score+=1\r\n        score=(len(xx)-score)\r\n    elif(r==0):\r\n        xx.sort()\r\n        for j in range(l-1):\r\n            if(xx[j]==xx[j+1]):\r\n                xx[j]=xx[j+1]=0\r\n                score+=1\r\n        score=(len(xx)-score)\r\n    elif(l>=r):\r\n        left=xx[:l]\r\n        right=xx[l:]\r\n        left.sort()\r\n        right.sort()\r\n        li=0\r\n        ri=0\r\n        score1=0\r\n        score2=0\r\n        while(ri<r and li<l):\r\n            if(left[li]==right[ri]):\r\n                left[li]=right[ri]=0\r\n                score1+=1\r\n                li+=1\r\n                ri+=1\r\n            elif(left[li]>right[ri]):\r\n                ri+=1\r\n            else:\r\n                li+=1\r\n        for j in range(l-1):\r\n            if(left[j]!=0 and left[j]==left[j+1] and l!=r):\r\n                # score+=1\r\n                score2+=1\r\n                left[j]=left[j+1]=0\r\n            if(score2==(abs(l-r)/2)):\r\n                break\r\n        score+=(l-score2-score1)\r\n    elif(r>l):\r\n        left=xx[:l]\r\n        right=xx[l:]\r\n        left.sort()\r\n        right.sort()\r\n        li=0\r\n        ri=0\r\n        score1=0\r\n        score2=0\r\n        while(li<l and ri<r):\r\n            if(left[li]==right[ri]):\r\n                left[li]=right[ri]=0\r\n                score1+=1\r\n                li+=1\r\n                ri+=1\r\n            elif(left[li]>right[ri]):\r\n                ri+=1\r\n            else:\r\n                li+=1\r\n        for j in range(r-1):\r\n            if(right[j]!=0 and right[j]==right[j+1]):\r\n                # score+=1\r\n                score2+=1\r\n                right[j]=right[j+1]=0\r\n            if(score2==(abs(l-r)/2)):\r\n                break\r\n        score+=(r-score2-score1)\r\n    \r\n    print(score)",
    "prob_desc_created_at": "1619966100",
    "tags": [
        "greedy",
        "sortings",
        "two pointers"
    ],
    "hidden_unit_tests": ""
}