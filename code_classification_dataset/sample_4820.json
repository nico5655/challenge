{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\", \"8\"]",
    "src_uid": "609c531258612e58c4911c650e90891c",
    "prob_desc_notes": null,
    "prob_desc_description": "Kuzya started going to school. He was given math homework in which he was given an array $$$a$$$ of length $$$n$$$ and an array of symbols $$$b$$$ of length $$$n$$$, consisting of symbols '*' and '/'.Let's denote a path of calculations for a segment $$$[l; r]$$$ ($$$1 \\le l \\le r \\le n$$$) in the following way:   Let $$$x=1$$$ initially. For every $$$i$$$ from $$$l$$$ to $$$r$$$ we will consequently do the following: if $$$b_i=$$$ '*', $$$x=x*a_i$$$, and if $$$b_i=$$$ '/', then $$$x=\\frac{x}{a_i}$$$. Let's call a path of calculations for the segment $$$[l; r]$$$ a list of all $$$x$$$ that we got during the calculations (the number of them is exactly $$$r - l + 1$$$). For example, let $$$a=[7,$$$ $$$12,$$$ $$$3,$$$ $$$5,$$$ $$$4,$$$ $$$10,$$$ $$$9]$$$, $$$b=[/,$$$ $$$*,$$$ $$$/,$$$ $$$/,$$$ $$$/,$$$ $$$*,$$$ $$$*]$$$, $$$l=2$$$, $$$r=6$$$, then the path of calculations for that segment is $$$[12,$$$ $$$4,$$$ $$$0.8,$$$ $$$0.2,$$$ $$$2]$$$.Let's call a segment $$$[l;r]$$$ simple if the path of calculations for it contains only integer numbers. Kuzya needs to find the number of simple segments $$$[l;r]$$$ ($$$1 \\le l \\le r \\le n$$$). Since he obviously has no time and no interest to do the calculations for each option, he asked you to write a program to get to find that number!",
    "prob_desc_output_spec": "Print a single integer â€” the number of simple segments $$$[l;r]$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$n$$$ ($$$2 \\le n \\le 10^6$$$). The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 10^6$$$). The third line contains $$$n$$$ symbols without spaces between them â€” the array $$$b_1, b_2 \\ldots b_n$$$ ($$$b_i=$$$ '/' or $$$b_i=$$$ '*' for every $$$1 \\le i \\le n$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2600,
    "file_name": "train_106.jsonl",
    "code_uid": "869da5d6c010f857b6d363df21d28fb6",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n1 2 3\\n*/*\", \"7\\n6 4 10 1 2 15 1\\n*/*/*//\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys,math\r\nfrom collections import defaultdict\r\nN = 1000005\r\nmaxf = [0] * N\r\nfor i in range(2,int(math.sqrt(N))+2):\r\n    if maxf[i] == 0:\r\n        for j in range(i+i, N, i):\r\n            maxf[j] = i\r\nfor i in range(2, N):\r\n    if maxf[i] == 0: maxf[i] = i\r\nn = int(sys.stdin.readline())\r\na = [int(i) for i in sys.stdin.readline().split()]\r\np = defaultdict(list)\r\nl = [0]*n\r\nr = 0\r\nfor idx, i in enumerate(sys.stdin.readline().strip()):\r\n    x = a[idx]\r\n    l[idx] = idx+1\r\n    if i == '*':\r\n        while x > 1:\r\n            p[maxf[x]].append(idx+1)\r\n            x//=maxf[x]\r\n    else:\r\n        while x > 1:\r\n            l[idx] = min(l[idx], p[maxf[x]].pop()) if p[maxf[x]] else 0\r\n            x//=maxf[x]\r\nst = []\r\nfor i in range(n):\r\n    st.append(i+1)\r\n    while st and st[-1] > l[i]: st.pop()\r\n    r+=len(st)\r\nprint(r)\r\n",
    "prob_desc_created_at": "1635069900",
    "tags": [
        "data structures",
        "number theory"
    ],
    "hidden_unit_tests": ""
}