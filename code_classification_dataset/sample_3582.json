{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"1\\n-1\\n2\", \"2\\n2\\n3\\n-1\\n2\"]",
    "src_uid": "358da9c353708ba834d0348ba88c2d0c",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given sequence a1, a2, ..., an and m queries lj, rj (1 ≤ lj ≤ rj ≤ n). For each query you need to print the minimum distance between such pair of elements ax and ay (x ≠ y), that:  both indexes of the elements lie within range [lj, rj], that is, lj ≤ x, y ≤ rj;  the values of the elements are equal, that is ax = ay. The text above understands distance as |x - y|.",
    "prob_desc_output_spec": "Print m integers — the answers to each query. If there is no valid match for some query, please print -1 as an answer to this query.",
    "prob_desc_input_spec": "The first line of the input contains a pair of integers n, m (1 ≤ n, m ≤ 5·105) — the length of the sequence and the number of queries, correspondingly.  The second line contains the sequence of integers a1, a2, ..., an ( - 109 ≤ ai ≤ 109).  Next m lines contain the queries, one per line. Each query is given by a pair of numbers lj, rj (1 ≤ lj ≤ rj ≤ n) — the indexes of the query range limits.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_071.jsonl",
    "code_uid": "1ac951c8c2561977a24dcf0905847859",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 3\\n1 1 2 3 2\\n1 5\\n2 4\\n3 5\", \"6 5\\n1 2 1 3 2 3\\n4 6\\n1 3\\n2 5\\n2 4\\n1 6\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\n\ntry:\n  xrange\nexcept NameError:\n  xrange = range\n\n\nclass SegmentTree(object):\n  def __init__(self, n):\n    self.n = n\n    self.N = 2 * n + 1\n    self.a = [10**9 for i in xrange(0, self.N)]\n\n  def put(self, pos, val):\n    pos += self.n - 1\n    while pos > 0:\n      self.a[pos] = min(self.a[pos], val)\n      pos //= 2\n\n  def get(self, l, r):\n    l += self.n - 1\n    r += self.n - 1\n    al = self.a[l]\n    ar = self.a[r]\n    G = self.a[1]\n    while r > l + 1:\n      if (l % 2 == 0) and (al > self.a[l + 1]):\n        al = self.a[l + 1]\n      if (r % 2 == 1) and (ar > self.a[r - 1]):\n        ar = self.a[r - 1]\n      l //= 2\n      r //= 2\n      if al == G or ar == G:\n        break\n    return min(al, ar)\n\nclass FenwickTree(object):\n  def __init__(self, n):\n    self.n = n\n    self.a = [10**9 for i in xrange(n)]\n    self.global_opt = 10**9\n\n  def put(self, i, val):\n    self.global_opt = min(self.global_opt, val)\n    while i < self.n:\n      self.a[i] = min(self.a[i], val)\n      i = (i | (i + 1))\n\n  def get(self, r):\n    res = 10**9\n    while r >= 0:\n      if res > self.a[r]:\n        res = self.a[r]\n      if res == self.global_opt:\n        break\n      r = (r & (r + 1)) - 1\n    return res\n\nn, m = [int(x) for x in raw_input().split()]\na = [int(x) for x in raw_input().split()]\n#n, m = map(int, input().split())\n#a = list(map(int, input().split()))\nsys.stderr.write('1\\n')\n\nprev = [-1 for i in xrange(0, len(a))]\nprev_map = {}\nfor i in xrange(0, len(a)):\n  if a[i] in prev_map:\n    prev[i] = prev_map[a[i]]\n  prev_map[a[i]] = i\n\nsys.stderr.write('2\\n')\n\ndata = sys.stdin.readlines()\n#queries = [None for i in xrange(m)]\nqueries = [[] for i in xrange(n)]\nsys.stderr.write('2.1\\n')\nfor i in xrange(m):\n  #l, r = [int(x) for x in raw_input().split()]\n  #l, r = list(map(int, input().split()))\n  l, r = data[i].split()  \n  #queries[i] = ((int(r) - 1, int(l) - 1, i))\n  queries[int(r) - 1].append((int(l) - 1, i))\n\n#sys.stderr.write('2.25\\n')\n#queries = sorted(queries)\n#queries.sort()\nsys.stderr.write('2.5\\n')\n#tree = SegmentTree(2 ** 19)\ntree = FenwickTree(2 ** 19)\nR = -1\nres = [None for i in xrange(0, m)]\n\nsys.stderr.write('3\\n')\nL = -1\n#for (r, l, ind) in queries:\nfor r in xrange(n):\n  for i in xrange(R + 1, r + 1):\n    if prev[i] != -1:\n      tree.put(500000 - prev[i] + 1, i - prev[i])\n      #sys.stderr.write('put ' + str(500000 - prev[i] + 1) + ' ' + str(i - prev[i]) + '\\n')\n      L = max(L, prev[i])\n  R = r\n\n  for (l, ind) in queries[r]:\n    if l > L:\n      res[ind] = -1\n      #sys.stderr.write('skip ' + str(l) + ' ' + str(L) + '\\n')\n      continue\n    val = tree.get(500000 - l + 1) #tree.get(l + 1, r + 1)\n    #sys.stderr.write('get ' + str(500000 - l + 1) + ' ' + str(val) + '\\n')\n    if val == 10**9:\n      val = -1\n    res[ind] = val\nsys.stderr.write('4\\n')\nprint('\\n'.join(str(val) for val in res))\n\n",
    "prob_desc_created_at": "1425740400",
    "tags": [
        "data structures",
        "*special"
    ],
    "hidden_unit_tests": ""
}