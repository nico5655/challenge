{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1.5000000000\", \"10.2222222222\"]",
    "src_uid": "f404720fd6624174c33d93af6349e561",
    "prob_desc_notes": "NoteIn the first sample, Niwel has three bears. Two bears can choose the path , while one bear can choose the path . Even though the bear that goes on the path  can carry one unit of weight, in the interest of fairness, he is restricted to carry 0.5 units of weight. Thus, the total weight is 1.5 units overall. Note that even though Niwel can deliver more weight with just 2 bears, he must use exactly 3 bears on this day.",
    "prob_desc_description": "Niwel is a little golden bear. As everyone knows, bears live in forests, but Niwel got tired of seeing all the trees so he decided to move to the city.In the city, Niwel took on a job managing bears to deliver goods. The city that he lives in can be represented as a directed graph with n nodes and m edges. Each edge has a weight capacity. A delivery consists of a bear carrying weights with their bear hands on a simple path from node 1 to node n. The total weight that travels across a particular edge must not exceed the weight capacity of that edge.Niwel has exactly x bears. In the interest of fairness, no bear can rest, and the weight that each bear carries must be exactly the same. However, each bear may take different paths if they like.Niwel would like to determine, what is the maximum amount of weight he can deliver (it's the sum of weights carried by bears). Find the maximum weight.",
    "prob_desc_output_spec": "Print one real value on a single line — the maximum amount of weight Niwel can deliver if he uses exactly x bears. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 6. Namely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct if .",
    "prob_desc_input_spec": "The first line contains three integers n, m and x (2 ≤ n ≤ 50, 1 ≤ m ≤ 500, 1 ≤ x ≤ 100 000) — the number of nodes, the number of directed edges and the number of bears, respectively. Each of the following m lines contains three integers ai, bi and ci (1 ≤ ai, bi ≤ n, ai ≠ bi, 1 ≤ ci ≤ 1 000 000). This represents a directed edge from node ai to bi with weight capacity ci. There are no self loops and no multiple edges from one city to the other city. More formally, for each i and j that i ≠ j it's guaranteed that ai ≠ aj or bi ≠ bj. It is also guaranteed that there is at least one path from node 1 to node n.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_051.jsonl",
    "code_uid": "88233b56744fe41b4fe1fcc8149e2b33",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 4 3\\n1 2 2\\n2 4 1\\n1 3 1\\n3 4 2\", \"5 11 23\\n1 2 3\\n2 3 4\\n3 4 5\\n4 5 6\\n1 3 4\\n2 4 5\\n3 5 6\\n1 4 2\\n2 5 3\\n1 5 2\\n3 2 30\"]",
    "exec_outcome": "PASSED",
    "source_code": "from queue import Queue\n\ndef addEdge(s, t, flow):\n    E[s].append((len(E[t]), t, flow))\n    E[t].append((len(E[s])-1, s, 0))\n\ndef mkLevel():\n    global src, des, E, lvl\n    for i in range(n):\n        lvl[i] = -1\n    lvl[src] = 0\n    \n    q = Queue()\n    q.put(src)\n    while (not q.empty()):\n        cur = q.get()\n        for j in range(len(E[cur])):\n            to = E[cur][j][1]\n            if (lvl[to] < 0 and E[cur][j][2] > 0):\n                lvl[to] = lvl[cur] + 1\n                q.put(to)\n                if (to == des):\n                    return True\n    return False\n\ndef extend(cur, lim):\n    global des, E\n    if (lim == 0 or cur == des):\n        return lim\n    flow = 0\n    for j in range(len(E[cur])):\n        if (flow >= lim):\n            break\n        to = E[cur][j][1]\n        lim0 = min(lim-flow, E[cur][j][2])\n        if (E[cur][j][2] > 0 and lvl[to] == lvl[cur] + 1):\n            newf = extend(to, lim0)\n            if (newf > 0):\n                E[cur][j] = (E[cur][j][0], E[cur][j][1], E[cur][j][2] - newf)\n                jj = E[cur][j][0]\n                E[to][jj] = (E[to][jj][0], E[to][jj][1], E[to][jj][2] + newf)\n                flow += newf\n    if (flow == 0):\n        lvl[cur] = -1\n    return flow\n\ndef Dinic():\n#    for i in range(len(E)):\n#        print('i = {} : {}'.format(i, E[i]), flush = True)\n    flow = 0\n    newf = 0\n    while (mkLevel()):\n        newf = extend(src, INF)\n        while (newf > 0):\n            flow += newf\n            newf = extend(src, INF)\n    return flow\n\ndef check(mid):\n    global E\n    E = [[] for i in range(n)]\n    for i in range(m):\n        if (w[i] - bears * mid > 0):\n            addEdge(u[i], v[i], bears)\n        else:\n            addEdge(u[i], v[i], int(w[i] / mid))\n    return (Dinic() >= bears)\n\nn,m,bears = map(int, input().split())\n#print(n, m, bears, flush = True)\nINF = 0x3f3f3f3f\nsrc = 0\ndes = n-1\n\nlo = 0.0\nhi = 0.0\n\nu = [0 for i in range(m)]\nv = [0 for i in range(m)]\nw = [0 for i in range(m)]\nfor i in range(m):\n    u[i],v[i],w[i] = map(int, input().split())\n    #print(u[i], v[i], w[i], flush = True)\n    u[i] -= 1\n    v[i] -= 1\n    hi = max(hi, w[i])\n\nE = [[] for i in range(n)]\nlvl = [0 for i in range(n)]\nfor i in range(100):\n    mid = (lo + hi) / 2\n    #print('mid = {:.3f}'.format(mid), flush = True)\n    if (check(mid)):\n        lo = mid\n    else:\n        hi = mid\n\nprint('{:.10f}'.format(mid * bears))\n",
    "prob_desc_created_at": "1458376500",
    "tags": [
        "binary search",
        "flows",
        "graphs"
    ],
    "hidden_unit_tests": ""
}