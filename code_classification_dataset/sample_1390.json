{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"26\", \"0\"]",
    "src_uid": "9cd17c2617b6cde593ef12b2a0a807fb",
    "prob_desc_notes": "NoteIn the first sample test all strings of form \"ioioi?\" where the question mark replaces arbitrary English letter satisfy.Here |x| denotes the length of string x.Please note that it's possible that there is no such string (answer is 0).",
    "prob_desc_description": "Tavas is a strange creature. Usually \"zzz\" comes out of people's mouth while sleeping, but string s of length n comes out from Tavas' mouth instead.  Today Tavas fell asleep in Malekas' place. While he was sleeping, Malekas did a little process on s. Malekas has a favorite string p. He determined all positions x1 &lt; x2 &lt; ... &lt; xk where p matches s. More formally, for each xi (1 ≤ i ≤ k) he condition sxisxi + 1... sxi + |p| - 1 = p is fullfilled.Then Malekas wrote down one of subsequences of x1, x2, ... xk (possibly, he didn't write anything) on a piece of paper. Here a sequence b is a subsequence of sequence a if and only if we can turn a into b by removing some of its elements (maybe no one of them or all).After Tavas woke up, Malekas told him everything. He couldn't remember string s, but he knew that both p and s only contains lowercase English letters and also he had the subsequence he had written on that piece of paper.Tavas wonders, what is the number of possible values of s? He asked SaDDas, but he wasn't smart enough to solve this. So, Tavas asked you to calculate this number for him.Answer can be very large, so Tavas wants you to print the answer modulo 109 + 7.",
    "prob_desc_output_spec": "In a single line print the answer modulo 1000 000 007.",
    "prob_desc_input_spec": "The first line contains two integers n and m, the length of s and the length of the subsequence Malekas wrote down (1 ≤ n ≤ 106 and 0 ≤ m ≤ n - |p| + 1). The second line contains string p (1 ≤ |p| ≤ n). The next line contains m space separated integers y1, y2, ..., ym, Malekas' subsequence (1 ≤ y1 &lt; y2 &lt; ... &lt; ym ≤ n - |p| + 1).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_008.jsonl",
    "code_uid": "ad26e658856607edd1d011030c3f6763",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6 2\\nioi\\n1 3\", \"5 2\\nioi\\n1 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "# -*- coding: utf-8 -*-\n\n\n\n\n\ndef solve():\n\n    n, m = map(int, input().split())\n\n    p = input()\n\n    if m == 0:\n\n        return powmod(n)\n\n    delta = len(p) - 1\n\n    ys = map(int, input().split())\n\n    tail = 0\n\n    free_chars = 0\n\n    for y in ys:\n\n        if y > tail:\n\n            free_chars += y - tail - 1\n\n        elif not is_consistent(p, tail - y + 1):\n\n            return 0\n\n        tail = y + delta\n\n    free_chars += n - tail\n\n    return powmod(free_chars)\n\n\n\nok_set = set()\n\ndef is_consistent(p, margin):\n\n    global ok_set\n\n    if margin in ok_set:\n\n        return True\n\n    elif p[:margin] == p[-margin:]:\n\n        ok_set.add(margin)\n\n        return True\n\n    else:\n\n        return False\n\n\n\n\n\ndef powmod(p):\n\n    mod = 10**9 + 7\n\n    pbin = bin(p)[2:][-1::-1]\n\n    result = 26 if pbin[0] == '1' else 1\n\n    tmp = 26\n\n    for bit in pbin[1:]:\n\n        tmp *= tmp\n\n        tmp %= mod\n\n        if bit == '1':\n\n            result *= tmp\n\n            result %= mod\n\n    return result\n\n\n\n\n\nprint(solve())\n\n\n\n\n\n# Made By Mostafa_Khaled",
    "prob_desc_created_at": "1429029300",
    "tags": [
        "hashing",
        "string suffix structures",
        "strings"
    ],
    "hidden_unit_tests": ""
}