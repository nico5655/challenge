{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1\\n5\\n3\"]",
    "src_uid": "10f4fc5cc2fcec02ebfb7f34d83debac",
    "prob_desc_notes": "NoteFor the sample input:  The worms with labels from [1, 2] are in the first pile.  The worms with labels from [3, 9] are in the second pile.  The worms with labels from [10, 12] are in the third pile.  The worms with labels from [13, 16] are in the fourth pile.  The worms with labels from [17, 25] are in the fifth pile. ",
    "prob_desc_description": "It is lunch time for Mole. His friend, Marmot, prepared him a nice game for lunch.Marmot brought Mole n ordered piles of worms such that i-th pile contains ai worms. He labeled all these worms with consecutive integers: worms in first pile are labeled with numbers 1 to a1, worms in second pile are labeled with numbers a1 + 1 to a1 + a2 and so on. See the example for a better understanding.Mole can't eat all the worms (Marmot brought a lot) and, as we all know, Mole is blind, so Marmot tells him the labels of the best juicy worms. Marmot will only give Mole a worm if Mole says correctly in which pile this worm is contained.Poor Mole asks for your help. For all juicy worms said by Marmot, tell Mole the correct answers.",
    "prob_desc_output_spec": "Print m lines to the standard output. The i-th line should contain an integer, representing the number of the pile where the worm labeled with the number qi is.",
    "prob_desc_input_spec": "The first line contains a single integer n (1 ≤ n ≤ 105), the number of piles. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 103, a1 + a2 + ... + an ≤ 106), where ai is the number of worms in the i-th pile. The third line contains single integer m (1 ≤ m ≤ 105), the number of juicy worms said by Marmot. The fourth line contains m integers q1, q2, ..., qm (1 ≤ qi ≤ a1 + a2 + ... + an), the labels of the juicy worms.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1200,
    "file_name": "train_004.jsonl",
    "code_uid": "3554337c4d052d288bb7f355861e0a0d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n2 7 3 4 9\\n3\\n1 25 11\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\n\ndef search(Max,new,num):\n\tif new[0]>num:\n\t\treturn 1\n\tMin =0\n\tMid = int((Max+Min)/2)\n\twhile Min<=Max:\n\t\tif new[Mid]==num:\n\t\t\treturn Mid+1\n\t\t\tbreak\n\t\telif new[Min]==num:\n\t\t\treturn Min+1\n\t\t\tbreak\n\t\telif new[Mid]<num and new[Mid+1]>num:\n\t\t\treturn Mid+2\n\t\t\tbreak\n\t\telif new[Mid]<num:\n\t\t\tMin=Mid+1\n\t\telse:\n\t\t\tMax=Mid-1\n\t\tMid = Min + (Max-Min) //2\n\n\n\nn =int(sys.stdin.readline())\na=map(int, sys.stdin.readline().split())\nm= int(sys.stdin.readline())\nmq=map(int, sys.stdin.readline().split())\nnew=[a[0]]\nfor x in xrange(1,n):\n\tnew.append(new[x-1]+a[x])\n#print new\n#print mq\nfor x in mq:\n\tprint(search(n,new,x))",
    "prob_desc_created_at": "1412609400",
    "tags": [
        "binary search",
        "implementation"
    ],
    "hidden_unit_tests": ""
}