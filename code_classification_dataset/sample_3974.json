{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"4\\n3\\n0\\n640\\n530866\"]",
    "src_uid": "96b0879628b233173d54e3ed9e2c4fce",
    "prob_desc_notes": "NoteIn the first test case, the sequence is $$$3 \\oplus 0, 3 \\oplus 1, 3 \\oplus 2, 3 \\oplus 3, 3 \\oplus 4, 3 \\oplus 5$$$, or $$$3, 2, 1, 0, 7, 6$$$. The smallest non-negative integer which isn't present in the sequence i. e. the $$$\\operatorname{MEX}$$$ of the sequence is $$$4$$$.In the second test case, the sequence is $$$4 \\oplus 0, 4 \\oplus 1, 4 \\oplus 2, 4 \\oplus 3, 4 \\oplus 4, 4 \\oplus 5, 4 \\oplus 6$$$, or $$$4, 5, 6, 7, 0, 1, 2$$$. The smallest non-negative integer which isn't present in the sequence i. e. the $$$\\operatorname{MEX}$$$ of the sequence is $$$3$$$.In the third test case, the sequence is $$$3 \\oplus 0, 3 \\oplus 1, 3 \\oplus 2$$$, or $$$3, 2, 1$$$. The smallest non-negative integer which isn't present in the sequence i. e. the $$$\\operatorname{MEX}$$$ of the sequence is $$$0$$$.",
    "prob_desc_description": "You are given two integers $$$n$$$ and $$$m$$$. Find the $$$\\operatorname{MEX}$$$ of the sequence $$$n \\oplus 0, n \\oplus 1, \\ldots, n \\oplus m$$$. Here, $$$\\oplus$$$ is the bitwise XOR operator.$$$\\operatorname{MEX}$$$ of the sequence of non-negative integers is the smallest non-negative integer that doesn't appear in this sequence. For example, $$$\\operatorname{MEX}(0, 1, 2, 4) = 3$$$, and $$$\\operatorname{MEX}(1, 2021) = 0$$$. ",
    "prob_desc_output_spec": "For each test case, print a single integer  — the answer to the problem.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 30\\,000$$$)  — the number of test cases. The first and only line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$0 \\le n, m \\le 10^9$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_087.jsonl",
    "code_uid": "02afd2a796f61b4d853b5f6c91bf308a",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n3 5\\n4 6\\n3 2\\n69 696\\n123456 654321\"]",
    "exec_outcome": "PASSED",
    "source_code": "for t in range(int(input())):\r\n    n,m=map(int,input().split())\r\n    if  m<n:\r\n        print(0)\r\n    elif n==0:\r\n        print(m+1)\r\n    else:\r\n\r\n        bit_m=bin(m)[2:]\r\n        bit_n=(m.bit_length()-n.bit_length())*\"0\"+bin(n)[2:]\r\n        lens=m.bit_length()\r\n        bit_result=\"\"\r\n        coef=2**lens\r\n        its_n=False\r\n        copy_it=False\r\n        z_i=None\r\n        for i in range(lens):\r\n            if bit_m[i]==\"0\":z_i=i\r\n            if bit_n[i]==\"1\":its_n=True\r\n            if not its_n:\r\n                bit_result+=bit_m[i]\r\n            else:\r\n                if copy_it:\r\n                    bit_result+=bit_n[i]\r\n                else:\r\n                    if bit_n[i]==\"1\" and bit_m[i]==\"0\":\r\n                        copy_it=True\r\n                        bit_result+=bit_n[i]\r\n                    else:\r\n                        bit_result+=bit_m[i]\r\n        if not copy_it:\r\n            if z_i==None:\r\n                bit_result=\"1\"+bit_n\r\n                coef*=2\r\n            else:\r\n                bit_result=bit_result=bit_m[:z_i]+\"1\"+bit_n[z_i+1:]\r\n        result=0\r\n        for x in bit_result:\r\n            coef//=2\r\n            result+=int(x)*coef\r\n        print(result^n)",
    "prob_desc_created_at": "1627569300",
    "tags": [
        "binary search",
        "bitmasks",
        "greedy",
        "implementation"
    ],
    "hidden_unit_tests": ""
}