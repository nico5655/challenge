{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"-\\n-\\n? 1 1\\n1\\n2\\n-\\n! 2\\n-\\n? 1 1\\n1\\n2\\n-\\n? 2 3\\n4 2\\n1 3 5\\n-\\n? 1 1\\n4\\n5\\n-\\n! 1\"]",
    "src_uid": "d800ab6fa7c7bad7c1c637acc43f4cfc",
    "prob_desc_notes": "NoteAdditional separators \"–\" in the sample are used only to increase the readability of the sample. Don't print any unnecessary symbols or line breaks in your solution when you send it to the system.Hacks are forbidden in this task.",
    "prob_desc_description": "This is an interactive problem. Don't forget to flush output after printing queries using cout.flush() or fflush(stdout) in C++ or similar functions in other programming languages.There are $$$n$$$ gift boxes in a row, numbered from $$$1$$$ to $$$n$$$ from left to right. It's known that exactly $$$k$$$ of them contain valuable gifts — other boxes contain just lucky stones. All boxes look the same and differ only in weight. All boxes with stones have the same weight and are strictly heavier than boxes with valuable items. But valuable gifts may be different, so the boxes with valuable items may have different weights.You can ask no more than $$$50$$$ queries (printing an answer doesn't count). By each query you can compare total weights of two non-intersecting subsets of boxes $$$a_1, a_2, \\dots, a_{k_a}$$$ and $$$b_1, b_2, \\dots, b_{k_b}$$$. In return you'll get one of four results:  FIRST, if subset $$$a_1, a_2, \\dots, a_{k_a}$$$ is strictly heavier;  SECOND, if subset $$$b_1, b_2, \\dots, b_{k_b}$$$ is strictly heavier;  EQUAL, if subsets have equal total weights;  WASTED, if the query is incorrect or the limit of queries is exceeded. Using such queries (or, maybe, intuition) find the box with a valuable gift with the minimum index.",
    "prob_desc_output_spec": "For each test case print the minimum index among all boxes with a valuable gift in the following format: \"! $$$x$$$\" where $$$x$$$ ($$$1 \\le x \\le n$$$) — the index of the box.",
    "prob_desc_input_spec": "The input consists of several cases. In the beginning, you receive the integer $$$T$$$ ($$$1 \\le T \\le 500$$$) — the number of test cases. At the beginning of each test case, you receive two integers $$$n$$$ and $$$k$$$ ($$$2 \\le n \\le 1000$$$, $$$1 \\le k \\le \\frac{n}{2}$$$) — the number of boxes in a row and the number of boxes with valuable gifts. It's guaranteed that the order of boxes is fixed beforehand and that the sum of $$$n$$$ in one test doesn't exceed $$$1000$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2600,
    "file_name": "train_056.jsonl",
    "code_uid": "e4c6ad70671c935bb098577d77f5aaa4",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n2 1\\n-\\n-\\n-\\nFIRST\\n-\\n5 2\\n-\\n-\\n-\\nFIRST\\n-\\n-\\n-\\nSECOND\\n-\\n-\\n-\\nEQUAL\\n-\"]",
    "exec_outcome": "PASSED",
    "source_code": "from random import randrange\n\ndef ask(a0,b0,L):\n    print(\"?\",L,L,flush=True)\n    aa=[i for i in range(a0,a0+L)]\n    print(*aa,flush=True)\n    aa=[i for i in range(b0,b0+L)]\n    print(*aa,flush=True)\n    return input()\n\ndef main():\n    for _ in range(int(input())):\n        n,k=map(int,input().split())\n        isfirst=False\n        for _ in range(30):\n            if ask(1,randrange(2,n+1),1)==\"SECOND\":\n                isfirst=True\n        if isfirst:\n            print(\"! 1\",flush=True)\n            continue\n\n        ln=1\n        while 1:\n            ret=ask(1,1+ln,ln)\n            if ret==\"FIRST\":\n                l,r=1+ln,1+ln*2\n                break\n            if ln*4>n:\n                l,r=1+ln*2,n+1\n                break\n            ln*=2\n\n        while l+1<r:\n            m=(l+r)//2\n            if ask(1,l,m-l)==\"EQUAL\":l=m\n            else:r=m\n\n        print(\"!\",l,flush=True)\n\nmain()\n",
    "prob_desc_created_at": "1589707200",
    "tags": [
        "binary search",
        "probabilities",
        "interactive"
    ],
    "hidden_unit_tests": ""
}