{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"? 4\\n0 0\\n2 0\\n2 3\\n0 3\\n\\n? 4\\n0 0\\n0 1\\n3 1\\n3 0\\n\\n! 1.5 0.5\"]",
    "src_uid": "7921be2d165d9430cedfeadb6e934314",
    "prob_desc_notes": "NoteIn the first test from the statement, the aliens poisoned a square of corn with vertices at points with coordinates $$$(1.5, 0.5)$$$, $$$(1.5, 1.5)$$$, $$$(2.5, 1.5)$$$, $$$(2.5, 0.5)$$$. In the picture, it is red, the polygon selected in the query is blue, and their intersection is green.Picture for the first query:  Picture for the second query:  ",
    "prob_desc_description": "This is an interactive problem.Farmer Stanley grows corn on a rectangular field of size $$$ n \\times m $$$ meters with corners in points $$$(0, 0)$$$, $$$(0, m)$$$, $$$(n, 0)$$$, $$$(n, m)$$$. This year the harvest was plentiful and corn covered the whole field.The night before harvest aliens arrived and poisoned the corn in a single $$$1 \\times 1$$$ square with sides parallel to field borders. The corn inside the square must not be eaten, but you cannot distinguish it from ordinary corn by sight. Stanley can only collect a sample of corn from an arbitrary polygon and bring it to the laboratory, where it will be analyzed and Stanley will be told the amount of corn in the sample that was poisoned. Since the harvest will soon deteriorate, such a study can be carried out no more than $$$5$$$ times.More formally, it is allowed to make no more than $$$5$$$ queries, each of them calculates the area of intersection of a chosen polygon with a square of poisoned corn. It is necessary to find out the coordinates of the lower-left corner of the drawn square (the vertex of the square with the smallest $$$x$$$ and $$$y$$$ coordinates).",
    "prob_desc_output_spec": null,
    "prob_desc_input_spec": "First line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n, m \\le 100$$$) — field sizes.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2700,
    "file_name": "train_082.jsonl",
    "code_uid": "e9d757e6b2150cb1dfe0773e0ad444bb",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 3\\n\\n\\n\\n\\n\\n0.5\\n\\n\\n\\n\\n\\n0.5\"]",
    "exec_outcome": "PASSED",
    "source_code": "MIN = '0.000000000000001';n,m=[int(i) for i in input().split()]; print(f'? {2*m+1}',flush=True);print(0,0);\r\nfor i in range(m):\r\n    print(n,i,flush=True);print(MIN,i+1,flush=True)\r\nhx=float(input());print(f'? {2*n+1}',flush=True);print(0,0)\r\nfor i in range(n):\r\n    print(i,m,flush=True);print(i+1,MIN,flush=True)\r\nhy = float(input());x=max(n*(1-hx)-0.5,0);y=max(m*(1-hy)-0.5,0);print('!','{:.9f}'.format(x),'{:.9f}'.format(y),flush=True)",
    "prob_desc_created_at": "1661006100",
    "tags": [
        "constructive algorithms",
        "geometry",
        "interactive",
        "math"
    ],
    "hidden_unit_tests": ""
}