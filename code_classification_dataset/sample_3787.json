{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"16\", \"750759115\"]",
    "src_uid": "e0d4eca7dfc1086f09f86a87ad1b7c91",
    "prob_desc_notes": "NoteIn the first example, the following are all possible pairs of $$$B$$$ and $$$f(B)$$$:  $$$B=$$$ {}, $$$f(B)=0$$$.  $$$B=$$$ {-}, $$$f(B)=0$$$.  $$$B=$$$ {+ 1, -}, $$$f(B)=0$$$.  $$$B=$$$ {-, + 1, -}, $$$f(B)=0$$$.  $$$B=$$$ {+ 2, -}, $$$f(B)=0$$$.  $$$B=$$$ {-, + 2, -}, $$$f(B)=0$$$.  $$$B=$$$ {-}, $$$f(B)=0$$$.  $$$B=$$$ {-, -}, $$$f(B)=0$$$.  $$$B=$$$ {+ 1, + 2}, $$$f(B)=3$$$.  $$$B=$$$ {+ 1, + 2, -}, $$$f(B)=2$$$.  $$$B=$$$ {-, + 1, + 2}, $$$f(B)=3$$$.  $$$B=$$$ {-, + 1, + 2, -}, $$$f(B)=2$$$.  $$$B=$$$ {-, + 1}, $$$f(B)=1$$$.  $$$B=$$$ {+ 1}, $$$f(B)=1$$$.  $$$B=$$$ {-, + 2}, $$$f(B)=2$$$.  $$$B=$$$ {+ 2}, $$$f(B)=2$$$. The sum of these values is $$$16$$$.",
    "prob_desc_description": "You are given a sequence $$$A$$$, where its elements are either in the form + x or -, where $$$x$$$ is an integer.For such a sequence $$$S$$$ where its elements are either in the form + x or -, define $$$f(S)$$$ as follows:  iterate through $$$S$$$'s elements from the first one to the last one, and maintain a multiset $$$T$$$ as you iterate through it.  for each element, if it's in the form + x, add $$$x$$$ to $$$T$$$; otherwise, erase the smallest element from $$$T$$$ (if $$$T$$$ is empty, do nothing).  after iterating through all $$$S$$$'s elements, compute the sum of all elements in $$$T$$$. $$$f(S)$$$ is defined as the sum. The sequence $$$b$$$ is a subsequence of the sequence $$$a$$$ if $$$b$$$ can be derived from $$$a$$$ by removing zero or more elements without changing the order of the remaining elements. For all $$$A$$$'s subsequences $$$B$$$, compute the sum of $$$f(B)$$$, modulo $$$998\\,244\\,353$$$.",
    "prob_desc_output_spec": "Print one integer, which is the answer to the problem, modulo $$$998\\,244\\,353$$$.",
    "prob_desc_input_spec": "The first line contains an integer $$$n$$$ ($$$1\\leq n\\leq 500$$$) â€” the length of $$$A$$$. Each of the next $$$n$$$ lines begins with an operator + or -. If the operator is +, then it's followed by an integer $$$x$$$ ($$$1\\le x&lt;998\\,244\\,353$$$). The $$$i$$$-th line of those $$$n$$$ lines describes the $$$i$$$-th element in $$$A$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_084.jsonl",
    "code_uid": "0f515bf19808f275106abf0be5d766a6",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n-\\n+ 1\\n+ 2\\n-\", \"15\\n+ 2432543\\n-\\n+ 4567886\\n+ 65638788\\n-\\n+ 578943\\n-\\n-\\n+ 62356680\\n-\\n+ 711111\\n-\\n+ 998244352\\n-\\n-\"]",
    "exec_outcome": "PASSED",
    "source_code": "import io,os\ninput = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\n\ndef main(t):\n\n    M = 998244353\n    n = int(input())\n    op = []\n    for _ in range(n):\n        s = input().split()\n        if s[0]==b'-':\n            op.append(-1)\n        elif s[0]==b'+':\n            s = s[1]\n            op.append(int(s))\n\n    ans = 0\n\n    for i in range(n):\n        if op[i]<0:  continue\n#        print(op[i]) \n        frontnum = [0]*(n+1)\n        frontnum[0] = 1\n        xi = 1\n\n        for j in range(i):\n            if op[j] > op[i]:\n                xi *= 2\n                xi %= M\n\n            elif op[j]>0:\n                for k in range(j+1,0,-1):\n                    frontnum[k] += frontnum[k-1]\n                    frontnum[k] %= M\n            else:\n                \n                frontnum[0] = (frontnum[0]*2)%M\n                for k in range(j):\n                    frontnum[k] += frontnum[k+1]\n                    frontnum[k] %= M\n\n\n    #    print(\"mid\",frontnum)\n\n       \n        for j in range(i+1,n):\n            if op[j] >= op[i]:\n                xi *= 2\n                xi %= M\n            elif op[j]>0:\n                for k in range(j+1,0,-1):\n                    frontnum[k] += frontnum[k-1] \n                    frontnum[k] %= M\n            else:\n                for k in range(j):\n                    frontnum[k] += frontnum[k+1]\n                    frontnum[k] %= M\n        \n #       print(frontnum,xi)\n\n        if op[i]>0:   \n            ans += (  (sum(frontnum)*xi)%M * op[i] ) % M\n            ans = ans % M\n\n\n\n\n\n\n\n\n    print(ans)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT = 1 #int(input())\nt = 1\nwhile t<=T:\n    main(t)\n    t += 1\n",
    "prob_desc_created_at": "1625317500",
    "tags": [
        "combinatorics",
        "dp",
        "implementation",
        "math",
        "ternary search"
    ],
    "hidden_unit_tests": ""
}