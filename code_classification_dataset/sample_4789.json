{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"2\\n4\\n830690567\"]",
    "src_uid": "0b3f93005a639a9a51279fae65c15301",
    "prob_desc_notes": "NoteFor $$$n = 2$$$, both permutations $$$[1, 2]$$$, and $$$[2, 1]$$$ are almost perfect.For $$$n = 3$$$, there are only $$$6$$$ permutations. Having a look at all of them gives us:  $$$[1, 2, 3]$$$ is an almost perfect permutation.  $$$[1, 3, 2]$$$ is an almost perfect permutation.  $$$[2, 1, 3]$$$ is an almost perfect permutation.  $$$[2, 3, 1]$$$ is NOT an almost perfect permutation ($$$\\lvert p_2 - p^{-1}_2 \\rvert = \\lvert 3 - 1 \\rvert = 2$$$).  $$$[3, 1, 2]$$$ is NOT an almost perfect permutation ($$$\\lvert p_2 - p^{-1}_2 \\rvert = \\lvert 1 - 3 \\rvert = 2$$$).  $$$[3, 2, 1]$$$ is an almost perfect permutation. So we get $$$4$$$ almost perfect permutations.",
    "prob_desc_description": "A permutation $$$p$$$ of length $$$n$$$ is called almost perfect if for all integer $$$1 \\leq i \\leq n$$$, it holds that $$$\\lvert p_i - p^{-1}_i \\rvert \\le 1$$$, where $$$p^{-1}$$$ is the inverse permutation of $$$p$$$ (i.e. $$$p^{-1}_{k_1} = k_2$$$ if and only if $$$p_{k_2} = k_1$$$).Count the number of almost perfect permutations of length $$$n$$$ modulo $$$998244353$$$.",
    "prob_desc_output_spec": "For each test case, output a single integer — the number of almost perfect permutations of length $$$n$$$ modulo $$$998244353$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases. The description of each test case follows. The first and only line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 3 \\cdot 10^5$$$) — the length of the permutation. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$3 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_106.jsonl",
    "code_uid": "53ea8df8ffb5e9f51cdc8c8ef7db7ad8",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n\\n2\\n\\n3\\n\\n50\"]",
    "exec_outcome": "PASSED",
    "source_code": "mod = 998244353\r\n\r\n\r\ndef main():\r\n    import sys\r\n    input = sys.stdin.readline\r\n\r\n    # comb init\r\n    nmax = 3 * 10 ** 5 + 10  # change here\r\n    fac = [0] * nmax\r\n    finv = [0] * nmax\r\n    inv = [0] * nmax\r\n    fac[0] = 1\r\n    fac[1] = 1\r\n    finv[0] = 1\r\n    finv[1] = 1\r\n    inv[1] = 1\r\n    for i in range(2, nmax):\r\n        fac[i] = fac[i - 1] * i % mod\r\n        inv[i] = mod - inv[mod % i] * (mod // i) % mod\r\n        finv[i] = finv[i - 1] * inv[i] % mod\r\n\r\n    def comb(n, r):\r\n        if n < r:\r\n            return 0\r\n        else:\r\n            return (fac[n] * ((finv[r] * finv[n - r]) % mod)) % mod\r\n\r\n    F = [1, 1]\r\n    for i in range(2, 3 * 10 ** 5 + 1):\r\n        F.append((F[-1] + (i - 1) * F[-2]) % mod)\r\n\r\n    for _ in range(int(input())):\r\n        N = int(input())\r\n        ans = 0\r\n        tmp = 1\r\n        pow2 = 1\r\n        for k in range(N+1):\r\n            if N - 4 * k < 0:\r\n                break\r\n            ans = (ans + ((comb(N - 2 * k, 2 * k) * F[N - 4 * k]) % mod * (tmp * pow2) % mod) % mod) % mod\r\n            tmp = (tmp * (2 * k + 1)) % mod\r\n            pow2 = (pow2 * 2) % mod\r\n        print(ans)\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n",
    "prob_desc_created_at": "1662474900",
    "tags": [
        "combinatorics",
        "fft",
        "math"
    ],
    "hidden_unit_tests": ""
}