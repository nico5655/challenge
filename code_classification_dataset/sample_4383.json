{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YA\\nTIDAK\\nYA\\nYA\"]",
    "src_uid": "aaebae32edfe31f45bbe95c185f5460f",
    "prob_desc_notes": "NoteIn the first test case, the following is one way the puzzle can be done:   Move the card with $$$3$$$ written on it from cell $$$(1, 1)$$$ to cell $$$(1, 2)$$$, then cell $$$(1, 3)$$$.  Move the card with $$$6$$$ written on it from cell $$$(1, 1)$$$ to cell $$$(2, 1)$$$, then cell $$$(3, 1)$$$, then cell $$$(3, 2)$$$, then cell $$$(3, 3)$$$.  Move the card with $$$4$$$ written on it from cell $$$(1, 1)$$$ to cell $$$(1, 2)$$$.  Move the card with $$$1$$$ written on it from cell $$$(1, 1)$$$ to cell $$$(2, 1)$$$, then cell $$$(2, 2)$$$, then cell $$$(2, 3)$$$.  Move the card with $$$2$$$ written on it from cell $$$(1, 1)$$$ to cell $$$(2, 1)$$$, then cell $$$(2, 2)$$$.  Move the card with $$$5$$$ written on it from cell $$$(1, 1)$$$ to cell $$$(2, 1)$$$, then cell $$$(3, 1)$$$, then cell $$$(3, 2)$$$, then cell $$$(3, 3)$$$.  Move the card with $$$2$$$ written on it from cell $$$(2, 2)$$$ to cell $$$(2, 1)$$$.  Move the card with $$$4$$$ written on it from cell $$$(1, 2)$$$ to cell $$$(2, 2)$$$, then cell $$$(3, 2)$$$, then cell $$$(3, 3)$$$.  Move the card with $$$3$$$ written on it from cell $$$(1, 3)$$$ to cell $$$(1, 2)$$$, then cell $$$(2, 2)$$$, then cell $$$(3, 2)$$$, then cell $$$(3, 3)$$$.  Move the card with $$$2$$$ written on it from cell $$$(2, 1)$$$ to cell $$$(3, 1)$$$, then cell $$$(3, 2)$$$, then cell $$$(3, 3)$$$.  Move the card with $$$1$$$ written on it from cell $$$(2, 3)$$$ to cell $$$(3, 3)$$$. An animated illustration regarding the process mentioned above is as follows: ",
    "prob_desc_description": "Pak Chanek, a renowned scholar, invented a card puzzle using his knowledge. In the puzzle, you are given a board with $$$n$$$ rows and $$$m$$$ columns. Let $$$(r, c)$$$ represent the cell in the $$$r$$$-th row and the $$$c$$$-th column.Initially, there are $$$k$$$ cards stacked in cell $$$(1, 1)$$$. Each card has an integer from $$$1$$$ to $$$k$$$ written on it. More specifically, the $$$i$$$-th card from the top of the stack in cell $$$(1, 1)$$$ has the number $$$a_i$$$ written on it. It is known that no two cards have the same number written on them. In other words, the numbers written on the cards are a permutation of integers from $$$1$$$ to $$$k$$$. All other cells are empty.You need to move the $$$k$$$ cards to cell $$$(n, m)$$$ to create another stack of cards. Let $$$b_i$$$ be the number written on the $$$i$$$-th card from the top of the stack in cell $$$(n, m)$$$. You should create the stack in cell $$$(n, m)$$$ in such a way so that $$$b_i = i$$$ for all $$$1 \\leq i \\leq k$$$.In one move, you can remove the top card from a cell and place it onto an adjacent cell (a cell that shares a common side). If the target cell already contains one or more cards, you place your card on the top of the stack. You must do each operation while satisfying the following restrictions:   Each cell other than $$$(1,1)$$$ and $$$(n,m)$$$ must not have more than one card on it.  You cannot move a card onto cell $$$(1,1)$$$.  You cannot move a card from cell $$$(n,m)$$$. Given the values of $$$n$$$, $$$m$$$, $$$k$$$ and the array $$$a$$$, determine if the puzzle is solvable.",
    "prob_desc_output_spec": "For each test case, output \"YA\" (without quotes) if it is possible and \"TIDAK\" (without quotes) otherwise, which mean yes and no in Indonesian respectively. You can output \"YA\" and \"TIDAK\" in any case (for example, strings \"tiDAk\", \"tidak\", and \"Tidak\" will be recognised as a negative response).",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 2 \\cdot 10^4$$$) — the number of test cases. The following lines contain the description of each test case. The first line of each test case contains three integers $$$n$$$, $$$m$$$, and $$$k$$$ ($$$3 \\leq n, m \\leq 10^6$$$, $$$nm \\leq 10^6$$$, $$$1 \\leq k \\leq 10^5$$$) — the size of the board and the number of cards. The second line of the test case contains $$$k$$$ integers $$$a_1, a_2, \\ldots, a_k$$$ — the array $$$a$$$, representing the numbers written on the cards. The values of $$$a$$$ are a permutation of integers from $$$1$$$ to $$$k$$$. It is guaranteed that the sum of $$$nm$$$ and $$$k$$$ over all test cases do not exceed $$$10^6$$$ and $$$10^5$$$ respectively.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_096.jsonl",
    "code_uid": "1f5c661c686bd8867e92b7a9e7cbc724",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n\\n3 3 6\\n\\n3 6 4 1 2 5\\n\\n3 3 10\\n\\n1 2 3 4 5 6 7 8 9 10\\n\\n5 4 4\\n\\n2 1 3 4\\n\\n3 4 10\\n\\n10 4 9 3 5 6 8 2 7 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import bisect\nfrom collections import defaultdict\nfrom collections import deque\nfrom functools import lru_cache\nimport heapq\nfrom locale import resetlocale\nfrom pickle import FALSE\nimport random\nimport math\nfrom collections import Counter\nimport sys\n \n#parse a single integer\nmod = 10**9+7\ndef inp():\n    return(int(sys.stdin.readline()))\n#parse a list of integers\ndef inlt():\n    return(list(map(int,sys.stdin.readline().split())))\n#parse a string (can be modified to parse a list of characters)\ndef insr():\n    s = sys.stdin.readline()[:-1]\n    return(s)\n#no idea what this does\ndef invr():\n    return(map(int,input().split()))\ndef gcd(a,b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nclass UF:\n    def __init__(self, size):\n        self.parent = list(range(size))\n        self.rank = [0] * size\n        \n    def find(self, x):\n        if self.parent[x] == x:\n            return x\n        return self.find(self.parent[x])\n    \n    def union(self, x, y):\n        px = self.find(x)\n        py = self.find(y)\n        if px == py:\n            return\n        if self.rank[px] > self.rank[py]:\n            self.parent[py] = px\n        elif self.rank[px] < self.rank[py]:\n            self.parent[px] = py\n        else:\n            self.parent[px] = py\n            self.rank[py] += 1\n\nclass BIT:\n    def __init__(self, n):\n        self.sums = [0] * (n+1)\n    \n    def update(self, i, delta):\n        while i < len(self.sums):\n            self.sums[i] += delta\n            i += i & (-i)\n    \n    def query(self, i):\n        res = 0\n        while i > 0:\n            res += self.sums[i]\n            i -= i & (-i)\n        return res\n\nclass NumArray:\n    def __init__(self, nums):\n        self.bit = BIT(len(nums))\n        for i, num in enumerate(nums):\n            self.bit.update(i+1, num)\n        self.nums = [0] + nums\n\n    def update(self, i, val):\n        self.bit.update(i+1, val - self.nums[i+1])\n        self.nums[i+1] = val\n\n    def sumRange(self, i, j):\n        return self.bit.query(j+1) - self.bit.query(i)\n\nz = inp()\n \nfor v in range(z):\n    [n,m,k] = inlt()\n    l = inlt()\n    seg = NumArray([0] * (k+1))\n    a = []\n    d = defaultdict(int)\n    for x in l:\n        idx = seg.sumRange(0,x)\n        d[x] = idx \n        seg.update(x, 1)\n    ok = True\n    # print(d)\n    for i in range(1,k+1):\n        if n == 2 and m == 2:\n            if d[i] > 1:\n                ok = False\n        elif d[i] > n*m - 4:\n            ok = False \n    if ok:\n        print(\"YA\")\n    else:\n        print(\"TIDAK\")",
    "prob_desc_created_at": "1667034600",
    "tags": [
        "constructive algorithms",
        "data structures"
    ],
    "hidden_unit_tests": ""
}