{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2 6.0 9.87298334621 13.3370849613 12.5187346573 13.3370849613\"]",
    "src_uid": "3cd019d1016cb3b872ea956c312889eb",
    "prob_desc_notes": "NoteThe final positions of the disks will look as follows:  In particular, note the position of the last disk. ",
    "prob_desc_description": "Carol is currently curling.She has n disks each with radius r on the 2D plane. Initially she has all these disks above the line y = 10100.She then will slide the disks towards the line y = 0 one by one in order from 1 to n. When she slides the i-th disk, she will place its center at the point (xi, 10100). She will then push it so the disk’s y coordinate continuously decreases, and x coordinate stays constant. The disk stops once it touches the line y = 0 or it touches any previous disk. Note that once a disk stops moving, it will not move again, even if hit by another disk. Compute the y-coordinates of centers of all the disks after all disks have been pushed.",
    "prob_desc_output_spec": "Print a single line with n numbers. The i-th number denotes the y-coordinate of the center of the i-th disk. The output will be accepted if it has absolute or relative error at most 10 - 6. Namely, let's assume that your answer for a particular value of a coordinate is a and the answer of the jury is b. The checker program will consider your answer correct if  for all coordinates.",
    "prob_desc_input_spec": "The first line will contain two integers n and r (1 ≤ n, r ≤ 1 000), the number of disks, and the radius of the disks, respectively. The next line will contain n integers x1, x2, ..., xn (1 ≤ xi ≤ 1 000) — the x-coordinates of the disks.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_012.jsonl",
    "code_uid": "07e6cba4365862a47c2342eff402798c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6 2\\n5 5 6 8 3 12\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nfrom collections import *\nfrom string import *\nfrom itertools import *\nfrom math import *\n\ndef dist(x1,y1,x2,y2):\n    return sqrt((y1-y2)**2 + (x1-x2)**2)\n\ndef f(x1,y1,x2):\n    return sqrt(4*r**2-(x2-x1)**2)+y1\n\ncenters = defaultdict(list)   \nn,r = map(int,raw_input().strip().split())\nr = float(r)\nxi = map(float,raw_input().strip().split())\nfor i in xrange(n):\n    centers[i] = [xi[i],10**100]\nminy = r\ncenters[0] = [xi[0],r]\nfor i in xrange(1,n):\n    maxy = -sys.maxint\n    for j in range(i):\n        if centers[j][0]>=(centers[i][0]-2*r) and centers[j][0]<=(centers[i][0]+2*r):\n            if maxy<f(centers[j][0],centers[j][1],xi[i]):\n                maxy = max(maxy,f(centers[j][0],centers[j][1],xi[i]))\n    if maxy==(-sys.maxint):\n        centers[i] = [xi[i],r]\n    else:\n        centers[i] = [xi[i],maxy]\nanswer = []\nfor i in range(n):\n    answer.append(centers[i][1])\nprint \" \".join(map(str,answer))",
    "prob_desc_created_at": "1514562000",
    "tags": [
        "implementation",
        "geometry",
        "brute force",
        "math"
    ],
    "hidden_unit_tests": ""
}