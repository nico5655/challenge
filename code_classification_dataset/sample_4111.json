{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\\nYES\\nNO\"]",
    "src_uid": "ef1448a744f67347183479c697aa87e1",
    "prob_desc_notes": "NoteIn the first test case, it's possible to select $$$len = 1$$$, then after operation, the array will not be sorted in non-decreasing order and will be equal to $$$[2, 1, 2]$$$.In the second test case, it's possible to select $$$len = 3$$$, then after operation, the array will not be sorted in non-decreasing order and will be equal to $$$[1, 2, 3, 1]$$$.In the third test case, the array will be sorted in non-decreasing order for every possible $$$len$$$.",
    "prob_desc_description": "You have an array $$$a$$$ of length $$$n$$$. You can exactly once select an integer $$$len$$$ between $$$1$$$ and $$$n - 1$$$ inclusively, and then sort in non-decreasing order the prefix of the array of length $$$len$$$ and the suffix of the array of length $$$n - len$$$ independently.For example, if the array is $$$a = [3, 1, 4, 5, 2]$$$, and you choose $$$len = 2$$$, then after that the array will be equal to $$$[1, 3, 2, 4, 5]$$$.Could it be that after performing this operation, the array will not be sorted in non-decreasing order?",
    "prob_desc_output_spec": "For each test case of input data, output \"YES\" (without quotes), if the array may be not sorted in non-decreasing order, output \"NO\" (without quotes) otherwise. You can output each letter in any case (uppercase or lowercase).",
    "prob_desc_input_spec": "There are several test cases in the input data. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases. This is followed by the test cases description. The first line of each test case contains one integer $$$n$$$ ($$$2 \\leq n \\leq 10^4$$$) — the length of the array. The second line of the test case contains a sequence of integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the array elements. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^4$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_090.jsonl",
    "code_uid": "5b78208896293054ec00ddca35586c79",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n3\\n2 2 1\\n4\\n3 1 2 1\\n5\\n1 2 2 4 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import deque\r\ndef radix_sort(a):\r\n    l = len(a)\r\n    arr = [[a[i], i] for i in range (l)]\r\n    mx = max(a)\r\n    m = 0\r\n    while mx > 0:\r\n        mx = mx // 10\r\n        m += 1\r\n    bucket = [deque([]) for _ in range (10)]\r\n    for _ in range (m):\r\n        for i in range (l):\r\n            bucket[(arr[i][0])%10].append(arr[i])\r\n        arr*=0 \r\n        for i in range (10):\r\n            while len(bucket[i]) > 0:\r\n                arr.append(bucket[i].popleft())\r\n                arr[-1][0] = arr[-1][0] // 10\r\n    for i in range (l):\r\n        arr[i] = a[arr[i][1]]\r\n    return(arr)\r\nfor _ in range (int(input())):\r\n    n = int(input())\r\n    a = [int(i) for i in input().split()]\r\n    b = radix_sort(a)\r\n    if a==b:\r\n        print(\"NO\")\r\n    else:\r\n        print(\"YES\")",
    "prob_desc_created_at": "1644676500",
    "tags": [
        "brute force",
        "sortings"
    ],
    "hidden_unit_tests": ""
}