{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"0 1 2 3 \\n1 2 3 \\n2 3 4 5 6 7 \\n1 1 1 1 \\n2 \\n0 0 0 0 0 0\", \"2 2 3 1 \\n0 0 0 0 \\n2 2 0 \\n0 0 1 0 1\"]",
    "src_uid": "8feb34d083d9b50c44c469e1254a885b",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given a string $$$s$$$, consisting of lowercase Latin letters.You are asked $$$q$$$ queries about it: given another string $$$t$$$, consisting of lowercase Latin letters, perform the following steps:  concatenate $$$s$$$ and $$$t$$$;  calculate the prefix function of the resulting string $$$s+t$$$;  print the values of the prefix function on positions $$$|s|+1, |s|+2, \\dots, |s|+|t|$$$ ($$$|s|$$$ and $$$|t|$$$ denote the lengths of strings $$$s$$$ and $$$t$$$, respectively);  revert the string back to $$$s$$$. The prefix function of a string $$$a$$$ is a sequence $$$p_1, p_2, \\dots, p_{|a|}$$$, where $$$p_i$$$ is the maximum value of $$$k$$$ such that $$$k &lt; i$$$ and $$$a[1..k]=a[i-k+1..i]$$$ ($$$a[l..r]$$$ denotes a contiguous substring of a string $$$a$$$ from a position $$$l$$$ to a position $$$r$$$, inclusive). In other words, it's the longest proper prefix of the string $$$a[1..i]$$$ that is equal to its suffix of the same length.",
    "prob_desc_output_spec": "For each query, print the values of the prefix function of a string $$$s+t$$$ on positions $$$|s|+1, |s|+2, \\dots, |s|+|t|$$$.",
    "prob_desc_input_spec": "The first line contains a non-empty string $$$s$$$ ($$$1 \\le |s| \\le 10^6$$$), consisting of lowercase Latin letters. The second line contains a single integer $$$q$$$ ($$$1 \\le q \\le 10^5$$$) — the number of queries. Each of the next $$$q$$$ lines contains a query: a non-empty string $$$t$$$ ($$$1 \\le |t| \\le 10$$$), consisting of lowercase Latin letters.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_090.jsonl",
    "code_uid": "d05aebd364a36ff6e40dd8c56422924d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"aba\\n6\\ncaba\\naba\\nbababa\\naaaa\\nb\\nforces\", \"aacba\\n4\\naaca\\ncbbb\\naab\\nccaca\"]",
    "exec_outcome": "PASSED",
    "source_code": "def get_next(j, k, nxt, p):\r\n    while p[j] != '$':\r\n        if k == -1 or p[j] == p[k]:\r\n            j += 1\r\n            k += 1\r\n            if p[j] == p[k]:\r\n                nxt[j] = nxt[k]\r\n            else:\r\n                nxt[j] = k\r\n        else:\r\n            k = nxt[k]\r\n    return j, k, nxt\r\n\r\n\r\ndef solve():\r\n    s = input().strip()\r\n\r\n    len_s = len(s)\r\n    ns = [ch for ch in s]\r\n    for i in range(11):\r\n        ns.append('$')\r\n\r\n    # print(ns)\r\n    j, k, nxt = get_next(0, -1, [-1 for i in range(len(ns))], ns)\r\n\r\n    q = int(input().strip())\r\n    for _ in range(q):\r\n        t = input().strip()\r\n        ans = []\r\n\r\n        for i in range(10):\r\n            ns[i + len_s] = '$'\r\n\r\n        for i in range(len(t)):\r\n            ns[i + len_s] = t[i]\r\n            # print(ns)\r\n            nj, nk, n_nxt = get_next(j, k, nxt, ns)\r\n            # print(n_nxt)\r\n            ans.append(n_nxt[len_s + i + 1])\r\n        print(' '.join(map(str, ans)))\r\n\r\n\r\nif __name__ == '__main__':\r\n    # t = int(input().strip())\r\n    # for _ in range(t):\r\n    solve()\r\n",
    "prob_desc_created_at": "1661610900",
    "tags": [
        "dfs and similar",
        "dp",
        "hashing",
        "string suffix structures",
        "strings",
        "trees"
    ],
    "hidden_unit_tests": ""
}