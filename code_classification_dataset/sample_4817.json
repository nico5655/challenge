{
    "prob_desc_time_limit": "1.5 seconds",
    "prob_desc_sample_outputs": "[\"4\\n0 2 4 6\", \"12\\n0 1 2 3 4 5 6 7 10 11 12 13\"]",
    "src_uid": "6057052f1eb001da04e3415001cce228",
    "prob_desc_notes": "NoteIn the first test case:  To get value $$$x = 0$$$ it is possible to choose and empty subsequence  To get value $$$x = 2$$$ it is possible to choose a subsequence $$$[2]$$$  To get value $$$x = 4$$$ it is possible to choose a subsequence $$$[4]$$$  To get value $$$x = 6$$$ it is possible to choose a subsequence $$$[2, 4]$$$ ",
    "prob_desc_description": "This is an easier version of the problem with smaller constraints.Korney Korneevich dag up an array $$$a$$$ of length $$$n$$$. Korney Korneevich has recently read about the operation bitwise XOR, so he wished to experiment with it. For this purpose, he decided to find all integers $$$x \\ge 0$$$ such that there exists an increasing subsequence of the array $$$a$$$, in which the bitwise XOR of numbers is equal to $$$x$$$.It didn't take a long time for Korney Korneevich to find all such $$$x$$$, and he wants to check his result. That's why he asked you to solve this problem!A sequence $$$s$$$ is a subsequence of a sequence $$$b$$$ if $$$s$$$ can be obtained from $$$b$$$ by deletion of several (possibly, zero or all) elements.A sequence $$$s_1, s_2, \\ldots , s_m$$$ is called increasing if $$$s_1 &lt; s_2 &lt; \\ldots &lt; s_m$$$.",
    "prob_desc_output_spec": "In the first line print a single integer $$$k$$$ — the number of found $$$x$$$ values. In the second line print $$$k$$$ integers in increasing order $$$x_1, x_2, \\ldots x_k$$$ ($$$0 \\le x_1 &lt; \\ldots &lt; x_k$$$) — found $$$x$$$ values.",
    "prob_desc_input_spec": "The first line contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$). The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\le a_i \\le 500$$$) — the elements of the array $$$a$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_106.jsonl",
    "code_uid": "09a25400751ebdaa1476a879342759e6",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n4 2 2 4\", \"8\\n1 0 1 7 12 5 3 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "# F1. Korney Korneevich and XOR (easy version)\r\n\r\n\r\ndef main():\r\n    \r\n    from sys import stdin, stdout\r\n    input = stdin.readline\r\n    print = stdout.write\r\n    \r\n    n = int(input())\r\n    a = list(map(int,input().split()))\r\n\r\n    x = [501]*512\r\n\r\n    x[0] = 0\r\n\r\n    for i in a:\r\n        for j in range(512):\r\n            if x[j] < i:\r\n                num = j^i\r\n                x[num] = min(x[num], i)\r\n\r\n    ans = []\r\n\r\n    for i in range(512):\r\n        if x[i] < 501:\r\n            ans.append(str(i))\r\n\r\n    print(str(len(ans))+\"\\n\")\r\n    print(\" \".join(ans))\r\n    print(\"\\n\")\r\n\r\nif __name__ == '__main__':\r\n    main()",
    "prob_desc_created_at": "1635069900",
    "tags": [
        "bitmasks",
        "dp",
        "greedy"
    ],
    "hidden_unit_tests": ""
}