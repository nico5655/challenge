{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\", \"0\", \"797922655\"]",
    "src_uid": "907f7db88fb16178d6be57bea12f90a2",
    "prob_desc_notes": "NoteIn the first example, this is the other possible case.  In the second example, it's impossible to make a grid to satisfy such $$$r$$$, $$$c$$$ values.In the third example, make sure to print answer modulo $$$(10^9 + 7)$$$.",
    "prob_desc_description": "Suppose there is a $$$h \\times w$$$ grid consisting of empty or full cells. Let's make some definitions:  $$$r_{i}$$$ is the number of consecutive full cells connected to the left side in the $$$i$$$-th row ($$$1 \\le i \\le h$$$). In particular, $$$r_i=0$$$ if the leftmost cell of the $$$i$$$-th row is empty.  $$$c_{j}$$$ is the number of consecutive full cells connected to the top end in the $$$j$$$-th column ($$$1 \\le j \\le w$$$). In particular, $$$c_j=0$$$ if the topmost cell of the $$$j$$$-th column is empty. In other words, the $$$i$$$-th row starts exactly with $$$r_i$$$ full cells. Similarly, the $$$j$$$-th column starts exactly with $$$c_j$$$ full cells.    These are the $$$r$$$ and $$$c$$$ values of some $$$3 \\times 4$$$ grid. Black cells are full and white cells are empty. You have values of $$$r$$$ and $$$c$$$. Initially, all cells are empty. Find the number of ways to fill grid cells to satisfy values of $$$r$$$ and $$$c$$$. Since the answer can be very large, find the answer modulo $$$1000000007\\,(10^{9} + 7)$$$. In other words, find the remainder after division of the answer by $$$1000000007\\,(10^{9} + 7)$$$.",
    "prob_desc_output_spec": "Print the answer modulo $$$1000000007\\,(10^{9} + 7)$$$.",
    "prob_desc_input_spec": "The first line contains two integers $$$h$$$ and $$$w$$$ ($$$1 \\le h, w \\le 10^{3}$$$) — the height and width of the grid. The second line contains $$$h$$$ integers $$$r_{1}, r_{2}, \\ldots, r_{h}$$$ ($$$0 \\le r_{i} \\le w$$$) — the values of $$$r$$$. The third line contains $$$w$$$ integers $$$c_{1}, c_{2}, \\ldots, c_{w}$$$ ($$$0 \\le c_{j} \\le h$$$) — the values of $$$c$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_002.jsonl",
    "code_uid": "600fdd1ce561721193160d86be5d7f6d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 4\\n0 3 1\\n0 2 3 0\", \"1 1\\n0\\n1\", \"19 16\\n16 16 16 16 15 15 0 5 0 4 9 9 1 4 4 0 8 16 12\\n6 12 19 15 8 6 19 19 14 6 9 16 10 11 15 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "R = lambda: map(int, raw_input().split())\nr, c = R()\nret = [[-1] * c for i in range(r)]\nfor i, x in zip(range(r), R()):\n    for j in range(x):\n        ret[i][j] = 1\n    if x != c:\n        ret[i][x] = 0\n\nflag = 1\nfor i, x in zip(range(c), R()):\n    if flag:\n        for j in range(x):\n            if ret[j][i] == 0:\n                flag = 0\n                break\n            ret[j][i] = 1\n        if x != r:\n            if ret[x][i] == 1:\n                flag = 0\n                break\n            ret[x][i] = 0\nif flag:\n    MOD = 1000000007\n    ans = 1\n    for i in range(r):\n        for j in range(c):\n            if ret[i][j] == -1:\n                ans <<= 1\n                if ans >= MOD:\n                    ans -= MOD\n    print ans\nelse:\n    print 0\n",
    "prob_desc_created_at": "1569762300",
    "tags": [
        "implementation",
        "math"
    ],
    "hidden_unit_tests": ""
}