{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1\\n2 1 4 3\"]",
    "src_uid": "955bc1e2769ea407ef02506bf1e4259b",
    "prob_desc_notes": "NoteIn the first test case, the only valid permutation is $$$p=[1]$$$. Its weight is $$$1$$$.In the second test case, one possible answer is the permutation $$$p=[2,1,4,3]$$$. One can check that $$$1$$$ divides $$$p_1$$$ and $$$i$$$ does not divide $$$p_i$$$ for $$$i=2,3,4$$$, so the weight of this permutation is $$$1$$$. It is impossible to find a permutation of length $$$4$$$ with a strictly smaller weight.",
    "prob_desc_description": "You are given a positive integer $$$n$$$.The weight of a permutation $$$p_1, p_2, \\ldots, p_n$$$ is the number of indices $$$1\\le i\\le n$$$ such that $$$i$$$ divides $$$p_i$$$. Find a permutation $$$p_1,p_2,\\dots, p_n$$$ with the minimum possible weight (among all permutations of length $$$n$$$).A permutation is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array) and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array).",
    "prob_desc_output_spec": "For each test case, print a line containing $$$n$$$ integers $$$p_1, p_2,\\dots, p_n$$$ so that the permutation $$$p$$$ has the minimum possible weight. If there are several possible answers, you can print any of them.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$). The description of the test cases follows. The only line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 10^5$$$) â€” the length of permutation. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_083.jsonl",
    "code_uid": "c478e07b5f86d02a92b2c9fb4b60b206",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n\\n1\\n\\n4\"]",
    "exec_outcome": "PASSED",
    "source_code": "\r\nfor i in range(int(input())):\r\n    a = int(input())\r\n    c = []\r\n    for i in range(1,a+1):\r\n        c.append(i)\r\n    c = c[1:]\r\n    c.append(1)\r\n    print(*c)\r\n\r\n",
    "prob_desc_created_at": "1658673300",
    "tags": [
        "constructive algorithms"
    ],
    "hidden_unit_tests": ""
}