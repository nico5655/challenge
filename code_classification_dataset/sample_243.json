{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"0\\n1234\\n0600\\n1\\n1337\\n1237\\n3\\n3139\\n3138\\n3939\\n6139\"]",
    "src_uid": "1d2ba15a7f2958bb79ccc7b2a2a1545b",
    "prob_desc_notes": null,
    "prob_desc_description": "A PIN code is a string that consists of exactly $$$4$$$ digits. Examples of possible PIN codes: 7013, 0000 and 0990. Please note that the PIN code can begin with any digit, even with 0.Polycarp has $$$n$$$ ($$$2 \\le n \\le 10$$$) bank cards, the PIN code of the $$$i$$$-th card is $$$p_i$$$.Polycarp has recently read a recommendation that it is better to set different PIN codes on different cards. Thus he wants to change the minimal number of digits in the PIN codes of his cards so that all $$$n$$$ codes would become different.Formally, in one step, Polycarp picks $$$i$$$-th card ($$$1 \\le i \\le n$$$), then in its PIN code $$$p_i$$$ selects one position (from $$$1$$$ to $$$4$$$), and changes the digit in this position to any other. He needs to change the minimum number of digits so that all PIN codes become different.Polycarp quickly solved this problem. Can you solve it?",
    "prob_desc_output_spec": "Print the answers to $$$t$$$ test sets. The answer to each set should consist of a $$$n + 1$$$ lines In the first line print $$$k$$$ — the least number of changes to make all PIN codes different. In the next $$$n$$$ lines output the changed PIN codes in the order corresponding to their appearance in the input. If there are several optimal answers, print any of them.",
    "prob_desc_input_spec": "The first line contains integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases in the input. Then test cases follow. The first line of each of $$$t$$$ test sets contains a single integer $$$n$$$ ($$$2 \\le n \\le 10$$$) — the number of Polycarp's bank cards. The next $$$n$$$ lines contain the PIN codes $$$p_1, p_2, \\dots, p_n$$$ — one per line. The length of each of them is $$$4$$$. All PIN codes consist of digits only.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_001.jsonl",
    "code_uid": "8fe8c5c67b2b26352501a66bf9ca16f0",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n2\\n1234\\n0600\\n2\\n1337\\n1337\\n4\\n3139\\n3139\\n3139\\n3139\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log2, ceil\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom bisect import insort\nfrom collections import Counter\nfrom collections import deque\nfrom heapq import heappush,heappop,heapify\nfrom itertools import permutations,combinations\nmod = int(1e9)+7\n \n \nip = lambda : int(stdin.readline())\ninp = lambda: map(int,stdin.readline().split())\nips = lambda: stdin.readline().rstrip()\nout = lambda x : stdout.write(str(x)+\"\\n\")\n\ndef check(a,b):\n    ch = []\n    alp = '0123456789'\n    for i in a:\n        i = [arr[j] for j in i]\n        ch += i\n    nex = 0\n    ct = 0\n    mark = False\n    while True:\n        flag = True\n        for i in ch:\n            if b == i:\n                flag = False\n                break\n        if flag:\n            break\n        else:\n            if ct == 10:\n                ct %= 10\n                nex += 1\n            b = list(b)\n            b[nex] = alp[ct]\n            b = ''.join(b)\n            ct += 1\n    return b\n            \n            \n            \n            \n    \n    \nt = ip()\nfor _ in range(t):\n    n =  ip()\n    arr = []\n    for i in range(n):\n        arr.append(ips())\n    ch = list(set(arr))\n    same = []\n    for i in ch:\n        temp = []\n        for j in range(n):\n            if i == arr[j]:\n                temp.append(j)\n        same.append(temp)\n    ans = 0\n    \n    for i in range(len(same)):\n        if len(same[i]) == 1:\n            pass\n        else:\n            ans += len(same[i])-1\n            for j in range(len(same[i])-1):\n                pos = same[i][j]\n                val = arr[pos]\n                arr[pos] = check(same,val)\n    out(ans)\n    for i in arr:\n        out(i)\n    \n            \n    \n    \n        \n                \n        \n        \n            \n                        \n                \n                    \n                \n                    \n                \n        \n    \n        \n    \n    \n    \n                        \n            \n            \n    \n            \n            \n        \n            \n                    \n            \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n    \n        \n    \n    \n    \n    \n    \n            \n        \n                \n        \n            \n        \n    \n    \n    \n            \n            \n        \n    \n            \n            \n        \n                \n                \n        \n    \n        \n        \n    \n    \n            \n\n        \n        \n        \n\n            \n            \n        \n            \n        \n        \n        \n            \n        \n    \n            \n        \n                \n        \n        \n            \n            \n    \n                \n        \n                \n            \n            \n        \n    \n        \n    \n                \n        \n    \n    \n    \n    \n    \n    \n            \n\n    \n            \n            \n            \n        \n    \n\n            \n        \n",
    "prob_desc_created_at": "1575038100",
    "tags": [
        "implementation",
        "greedy"
    ],
    "hidden_unit_tests": ""
}