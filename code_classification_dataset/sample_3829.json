{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"10\", \"996\"]",
    "src_uid": "1d58ae45a677023dc8fd6c9473a89737",
    "prob_desc_notes": "NoteFor the first test, two examples of good subsequences are $$$[2, 7]$$$ and $$$[2, 2, 4, 7]$$$:For $$$b = [2, 7]$$$ we can use $$$(-3, -4)$$$ as the first sequence and $$$(-2, -1, \\ldots, 4)$$$ as the second. Note that subsequence $$$[2, 7]$$$ appears twice in $$$[2, 2, 4, 7]$$$, so we have to count it twice.  Green circles denote $$$(-3, -4)$$$ and orange squares denote $$$(-2, -1, \\ldots, 4)$$$. For $$$b = [2, 2, 4, 7]$$$ the following sequences would satisfy the properties: $$$(-1, 0)$$$, $$$(-3, -2)$$$, $$$(0, 1, 2, 3)$$$ and $$$(-3, -2, \\ldots, 3)$$$",
    "prob_desc_description": "Lee couldn't sleep lately, because he had nightmares. In one of his nightmares (which was about an unbalanced global round), he decided to fight back and propose a problem below (which you should solve) to balance the round, hopefully setting him free from the nightmares.A non-empty array $$$b_1, b_2, \\ldots, b_m$$$ is called good, if there exist $$$m$$$ integer sequences which satisfy the following properties:  The $$$i$$$-th sequence consists of $$$b_i$$$ consecutive integers (for example if $$$b_i = 3$$$ then the $$$i$$$-th sequence can be $$$(-1, 0, 1)$$$ or $$$(-5, -4, -3)$$$ but not $$$(0, -1, 1)$$$ or $$$(1, 2, 3, 4)$$$).  Assuming the sum of integers in the $$$i$$$-th sequence is $$$sum_i$$$, we want $$$sum_1 + sum_2 + \\ldots + sum_m$$$ to be equal to $$$0$$$. You are given an array $$$a_1, a_2, \\ldots, a_n$$$. It has $$$2^n - 1$$$ nonempty subsequences. Find how many of them are good.As this number can be very large, output it modulo $$$10^9 + 7$$$.An array $$$c$$$ is a subsequence of an array $$$d$$$ if $$$c$$$ can be obtained from $$$d$$$ by deletion of several (possibly, zero or all) elements.",
    "prob_desc_output_spec": "Print a single integer — the number of nonempty good subsequences of $$$a$$$, modulo $$$10^9 + 7$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$n$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$) — the size of array $$$a$$$. The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$) — elements of the array.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_085.jsonl",
    "code_uid": "a8a6ae1c973ecdb434f85d251e5d1b11",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n2 2 4 7\", \"10\\n12391240 103904 1000000000 4142834 12039 142035823 1032840 49932183 230194823 984293123\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\ninput = sys.stdin.readline\r\nn = int(input().split('\\n')[0])\r\na = [int(x) for x in input().split()]\r\n \r\no = [x for x in a if x%2 == 1]\r\ne = [x for x in a if x%2 == 0]\r\n \r\nans = 0\r\nans += 2**(len(e))*(2**(len(o))-1)\r\n \r\nwhile len(e)>=2:\r\n    o = [x//2 for x in e if (x//2)%2==1]\r\n    e = [x//2 for x in e if (x//2)%2==0]\r\n    ans += 2**(len(e))*(2**max(0, len(o)-1)-1)\r\nprint(ans%(10**9+7))",
    "prob_desc_created_at": "1637678100",
    "tags": [
        "combinatorics",
        "dp",
        "math",
        "number theory"
    ],
    "hidden_unit_tests": ""
}