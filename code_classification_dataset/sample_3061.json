{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"3\\n3 1 2 1 2 2 2 3 2\", \"1\\n1 1 1 1\", \"-1\"]",
    "src_uid": "01375601eccd2b29cab5b9ba1e19db91",
    "prob_desc_notes": "NoteIn the first sample test the array is split into three permutations: (2, 1), (3, 2, 1, 4, 5), (1, 2). The first permutation is formed by the second and the fourth elements of the array, the second one — by the third, the fifth, the sixth, the seventh and the ninth elements, the third one — by the first and the eigth elements. Clearly, there are other splitting variants possible. ",
    "prob_desc_description": "A permutation is a sequence of integers from 1 to n of length n containing each number exactly once. For example, (1), (4, 3, 5, 1, 2), (3, 2, 1) are permutations, and (1, 1), (4, 3, 1), (2, 3, 4) are not. There are many tasks on permutations. Today you are going to solve one of them. Let’s imagine that somebody took several permutations (perhaps, with a different number of elements), wrote them down consecutively as one array and then shuffled the resulting array. The task is to restore the initial permutations if it is possible.",
    "prob_desc_output_spec": "If this array can be split into several permutations so that every element of the array belongs to exactly one permutation, print in the first line the number of permutations. The second line should contain n numbers, corresponding to the elements of the given array. If the i-th element belongs to the first permutation, the i-th number should be 1, if it belongs to the second one, then its number should be 2 and so on. The order of the permutations’ numbering is free. If several solutions are possible, print any one of them. If there’s no solution, print in the first line  - 1.",
    "prob_desc_input_spec": "The first line contains an integer n (1 ≤ n ≤ 105). The next line contains the mixed array of n integers, divided with a single space. The numbers in the array are from 1 to 105.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_040.jsonl",
    "code_uid": "37d4c4c26b5afe7803c4b80bd3947bdd",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"9\\n1 2 3 1 2 1 4 2 5\", \"4\\n4 3 2 1\", \"4\\n1 2 2 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "n=int(input())\nlst=[*map(int,input().split())]\nd,di={},{}\nfor i,x in enumerate(lst):\n    if d.get(x)==None:d[x]=[];di[x]=0\n    d[x].append(i)\n    di[x]+=1\nlst=[*set(lst)]\nlst.sort()\nfrom sys import exit\nif d.get(1)==None:print(-1);exit()\nres=[0]*n\nfor i,x in enumerate(d[1]):\n    res[x]=i+1\nfor i,x in enumerate(lst[1:]):\n    if x-lst[i]==1:\n        if di[x]<=di[lst[i]]:\n            for j,y in enumerate(d[x]):\n                res[y]=j+1\n        else:print(-1);exit()\n    else:print(-1);exit()\nprint(di[1])\nprint(*res)",
    "prob_desc_created_at": "1292140800",
    "tags": [
        "greedy"
    ],
    "hidden_unit_tests": ""
}