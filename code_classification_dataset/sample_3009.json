{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"8\", \"4\"]",
    "src_uid": "5ff4275de91b65115666d4a98b9f3b8b",
    "prob_desc_notes": null,
    "prob_desc_description": "Dima loves Inna very much. He decided to write a song for her. Dima has a magic guitar with n strings and m frets. Dima makes the guitar produce sounds like that: to play a note, he needs to hold one of the strings on one of the frets and then pull the string. When Dima pulls the i-th string holding it on the j-th fret the guitar produces a note, let's denote it as aij. We know that Dima's guitar can produce k distinct notes. It is possible that some notes can be produced in multiple ways. In other words, it is possible that aij = apq at (i, j) ≠ (p, q).Dima has already written a song — a sequence of s notes. In order to play the song, you need to consecutively produce the notes from the song on the guitar. You can produce each note in any available way. Dima understood that there are many ways to play a song and he wants to play it so as to make the song look as complicated as possible (try to act like Cobein).We'll represent a way to play a song as a sequence of pairs (xi, yi) (1 ≤ i ≤ s), such that the xi-th string on the yi-th fret produces the i-th note from the song. The complexity of moving between pairs (x1, y1) and (x2, y2) equals  + . The complexity of a way to play a song is the maximum of complexities of moving between adjacent pairs.Help Dima determine the maximum complexity of the way to play his song! The guy's gotta look cool!",
    "prob_desc_output_spec": "In a single line print a single number — the maximum possible complexity of the song.",
    "prob_desc_input_spec": "The first line of the input contains four integers n, m, k and s (1 ≤ n, m ≤ 2000, 1 ≤ k ≤ 9, 2 ≤ s ≤ 105).  Then follow n lines, each containing m integers aij (1 ≤ aij ≤ k). The number in the i-th row and the j-th column (aij) means a note that the guitar produces on the i-th string and the j-th fret. The last line of the input contains s integers qi (1 ≤ qi ≤ k) — the sequence of notes of the song.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_038.jsonl",
    "code_uid": "195ce812518164c2ce2c8ad085d61c45",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 6 5 7\\n3 1 2 2 3 1\\n3 2 2 2 5 5\\n4 2 2 2 5 3\\n3 2 2 1 4 3\\n2 3 1 4 1 5 1\", \"4 4 9 5\\n4 7 9 5\\n1 2 1 7\\n8 3 4 9\\n5 7 7 2\\n7 1 9 2 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "def solution() : # 最大的距离来自于角落附近的点\n\tn,m,k,s = map(int, input().split())\n\tdis = lambda a,b : abs(a[0] - b[0]) + abs(a[1] - b[1])\n\tcorner = [(0,0), (0,m-1), (n-1,0), (n-1,m-1)]\n\tvertex = [[(n,m), (n,-1), (-1,m), (-1,-1)] for _ in range(k+1)]\n\tfor i in range(n) :\n\t\tfor j,note in enumerate(map(int, input().split())) :\n\t\t\tvertex[note] = [\n\t\t\t\t(i,j) if dis((i,j), c) < dis(v, c) else v\n\t\t\t\tfor v,c in zip(vertex[note], corner)]\n\tmaxdis = [[-1] * (k+1) for _ in range(k+1)]\n\tpairs = [(0,3),(3,0),(1,2),(2,1)]\n\tfor i in range(1, k+1) :\n\t\tfor j in range(i, k+1) :\n\t\t\tvi,vj = vertex[i],vertex[j]\n\t\t\tmaxdis[i][j] = max(dis(vi[a], vj[b]) for a,b in pairs)\n\t\t\tmaxdis[j][i] = maxdis[i][j]\n\ts = list(map(int, input().split()))\n\tprint(max(maxdis[s[i]][s[i+1]] for i in range(len(s) - 1)))\nsolution()",
    "prob_desc_created_at": "1385307000",
    "tags": [
        "implementation",
        "brute force",
        "math"
    ],
    "hidden_unit_tests": ""
}