{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"4 5\\n1 7\\n8 11\\n6 12\", \"1 2\", \"6 8\\n3 7\\n1 4\", \"2 3\\n5 6\"]",
    "src_uid": "ada7340984ca02702146e7b2ab71f194",
    "prob_desc_notes": "NoteIn the first sample, each number can be contained in at most $$$\\left\\lceil \\frac{4}{3 - 1} \\right\\rceil = 2$$$ intervals. The output is described by the following picture:  In the second sample, the only interval to be chosen is forced to be $$$[1, \\, 2]$$$, and each number is indeed contained in at most $$$\\left\\lceil \\frac{1}{2 - 1} \\right\\rceil = 1$$$ interval.In the third sample, each number can be contained in at most $$$\\left\\lceil \\frac{3}{3 - 1} \\right\\rceil = 2$$$ intervals. The output is described by the following picture:  ",
    "prob_desc_description": "The numbers $$$1, \\, 2, \\, \\dots, \\, n \\cdot k$$$ are colored with $$$n$$$ colors. These colors are indexed by $$$1, \\, 2, \\, \\dots, \\, n$$$. For each $$$1 \\le i \\le n$$$, there are exactly $$$k$$$ numbers colored with color $$$i$$$.Let $$$[a, \\, b]$$$ denote the interval of integers between $$$a$$$ and $$$b$$$ inclusive, that is, the set $$$\\{a, \\, a + 1, \\, \\dots, \\, b\\}$$$. You must choose $$$n$$$ intervals $$$[a_1, \\, b_1], \\, [a_2, \\, b_2], \\, \\dots, [a_n, \\, b_n]$$$ such that:   for each $$$1 \\le i \\le n$$$, it holds $$$1 \\le a_i &lt; b_i \\le n \\cdot k$$$;  for each $$$1 \\le i \\le n$$$, the numbers $$$a_i$$$ and $$$b_i$$$ are colored with color $$$i$$$;  each number $$$1 \\le x \\le n \\cdot k$$$ belongs to at most $$$\\left\\lceil \\frac{n}{k - 1} \\right\\rceil$$$ intervals. One can show that such a family of intervals always exists under the given constraints.",
    "prob_desc_output_spec": "Output $$$n$$$ lines. The $$$i$$$-th line should contain the two integers $$$a_i$$$ and $$$b_i$$$. If there are multiple valid choices of the intervals, output any.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 100$$$, $$$2 \\le k \\le 100$$$) â€” the number of colors and the number of occurrences of each color. The second line contains $$$n \\cdot k$$$ integers $$$c_1, \\, c_2, \\, \\dots, \\, c_{nk}$$$ ($$$1 \\le c_j \\le n$$$), where $$$c_j$$$ is the color of number $$$j$$$. It is guaranteed that, for each $$$1 \\le i \\le n$$$, it holds $$$c_j = i$$$ for exactly $$$k$$$ distinct indices $$$j$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_098.jsonl",
    "code_uid": "7f4bd83d012c3fc18afb41a8d3cc998e",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 3\\n2 4 3 1 1 4 2 3 2 1 3 4\", \"1 2\\n1 1\", \"3 3\\n3 1 2 3 2 1 2 1 3\", \"2 3\\n2 1 1 1 2 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\nfrom sys import stdin, stdout\r\n\r\ntry:\r\n    n, k = map(int, stdin.readline().split())\r\n    c_a = list(map(int, stdin.readline().split()))\r\n    ceil = (n + k - 2) // (k - 1)\r\n\r\n    co_a = [[] for _ in range(n)]\r\n    for i in range(len(c_a)):\r\n        co_a[c_a[i]-1].append(i)\r\n\r\n    kc_a = [[] for _ in range(k)]\r\n    for i in range(1, k):\r\n        for j in range(n):\r\n            # c, l, r\r\n            kc_a[i].append([j, co_a[j][i-1], co_a[j][i]])\r\n\r\n    res = {}\r\n    for i in range(1, k):\r\n        kc_a[i].sort(key=lambda x: x[2])\r\n\r\n        cnt = 0\r\n        for j in range(n):\r\n            c, l, r = kc_a[i][j]\r\n            if c in res:\r\n                continue\r\n            res[c] = [l + 1, r + 1]\r\n\r\n            cnt += 1\r\n            if cnt >= ceil:\r\n                break\r\n\r\n    for i in range(n):\r\n        stdout.write(str(res[i][0]) + ' ' + str(res[i][1]) + '\\n')\r\n\r\nexcept:\r\n    print(sys.exc_info()[0])\r\n",
    "prob_desc_created_at": "1627223700",
    "tags": [
        "constructive algorithms",
        "data structures",
        "greedy",
        "sortings"
    ],
    "hidden_unit_tests": ""
}