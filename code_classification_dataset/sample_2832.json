{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3 4 6 5 7\", \"-1\", \"3 4 5 2 1 4 3 2\"]",
    "src_uid": "c207550a5a74098c1d50407d12a2baec",
    "prob_desc_notes": "NoteThe first example is explained is the problem statement.In the third example, for $$$a = [3, 4, 5, 2, 1, 4, 3, 2]$$$, a possible permutation $$$p$$$ is $$$[7, 1, 5, 4, 3, 2, 6]$$$. In that case, Neko would have constructed the following arrays:  $$$b = [3, 4, 2, 1, 1, 3, 2]$$$  $$$c = [4, 5, 5, 2, 4, 4, 3]$$$  $$$b' = [2, 3, 1, 1, 2, 4, 3]$$$  $$$c' = [3, 4, 4, 2, 5, 5, 4]$$$ ",
    "prob_desc_description": "A permutation of length $$$k$$$ is a sequence of $$$k$$$ integers from $$$1$$$ to $$$k$$$ containing each integer exactly once. For example, the sequence $$$[3, 1, 2]$$$ is a permutation of length $$$3$$$.When Neko was five, he thought of an array $$$a$$$ of $$$n$$$ positive integers and a permutation $$$p$$$ of length $$$n - 1$$$. Then, he performed the following:  Constructed an array $$$b$$$ of length $$$n-1$$$, where $$$b_i = \\min(a_i, a_{i+1})$$$.  Constructed an array $$$c$$$ of length $$$n-1$$$, where $$$c_i = \\max(a_i, a_{i+1})$$$.  Constructed an array $$$b'$$$ of length $$$n-1$$$, where $$$b'_i = b_{p_i}$$$.  Constructed an array $$$c'$$$ of length $$$n-1$$$, where $$$c'_i = c_{p_i}$$$. For example, if the array $$$a$$$ was $$$[3, 4, 6, 5, 7]$$$ and permutation $$$p$$$ was $$$[2, 4, 1, 3]$$$, then Neko would have constructed the following arrays:  $$$b = [3, 4, 5, 5]$$$  $$$c = [4, 6, 6, 7]$$$  $$$b' = [4, 5, 3, 5]$$$  $$$c' = [6, 7, 4, 6]$$$ Then, he wrote two arrays $$$b'$$$ and $$$c'$$$ on a piece of paper and forgot about it. 14 years later, when he was cleaning up his room, he discovered this old piece of paper with two arrays $$$b'$$$ and $$$c'$$$ written on it. However he can't remember the array $$$a$$$ and permutation $$$p$$$ he used.In case Neko made a mistake and there is no array $$$a$$$ and permutation $$$p$$$ resulting in such $$$b'$$$ and $$$c'$$$, print -1. Otherwise, help him recover any possible array $$$a$$$. ",
    "prob_desc_output_spec": "If Neko made a mistake and there is no array $$$a$$$ and a permutation $$$p$$$ leading to the $$$b'$$$ and $$$c'$$$, print -1. Otherwise, print $$$n$$$ positive integers $$$a_i$$$ ($$$1 \\le a_i \\le 10^9$$$), denoting the elements of the array $$$a$$$. If there are multiple possible solutions, print any of them. ",
    "prob_desc_input_spec": "The first line contains an integer $$$n$$$ ($$$2 \\leq n \\leq 10^5$$$) — the number of elements in array $$$a$$$. The second line contains $$$n-1$$$ integers $$$b'_1, b'_2, \\ldots, b'_{n-1}$$$ ($$$1 \\leq b'_i \\leq 10^9$$$). The third line contains $$$n-1$$$ integers $$$c'_1, c'_2, \\ldots, c'_{n-1}$$$ ($$$1 \\leq c'_i \\leq 10^9$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_032.jsonl",
    "code_uid": "add9735b040cd0cbdb11429468c7c618",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n4 5 3 5\\n6 7 4 6\", \"3\\n2 4\\n3 2\", \"8\\n2 3 1 1 2 4 3\\n3 4 4 2 5 5 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "class multiset:\n\tdef __init__(self):\n\t\tself.contenido = dict()\n\t\tself.len = 0\n\n\tdef add(self, x):\n\t\tself.contenido[x] = self.contenido.get(x, 0)+1\n\t\tself.len += 1\n\n\tdef remove(self, x):\n\t\tvalor = self.contenido.get(x, 1)-1\n\t\tif valor == 0:\n\t\t\tdel self.contenido[x]\n\t\telse:\n\t\t\tself.contenido[x] = valor\n\t\tself.len -= 1\n\n\tdef pop(self):\n\t\tx = next(iter(self.contenido.keys()))\n\t\tself.remove(x)\n\t\treturn x\n\n\tdef __len__(self):\n\t\treturn self.len\n\n\tdef __str__(self):\n\t\treturn str(self.contenido)\n\nn = int(input())\nb = [int(a) for a in input().split()]\nc = [int(a) for a in input().split()]\n\nfor x, y in zip(b, c):\n\tif x > y:\n\t\tprint(-1)\n\t\texit()\n\ntrad = dict()\n\ncontador = 0\nfor a in b+c:\n\tif not a in trad:\n\t\ttrad[a] = contador\n\t\tcontador += 1\n\nv = [multiset() for _ in range(contador)]\nauxb = [trad[a] for a in b]\nauxc = [trad[a] for a in c]\nfor x, y in zip(auxb, auxc):\n\tv[x].add(y)\n\tv[y].add(x)\n\nimpares = []\nfor i, a in enumerate(v):\n\tif len(a)%2:\n\t\timpares.append(i)\nprimero = 0\n\nif len(impares) == 2:\n\tprimero = impares[0]\nelif len(impares) != 0:\n\tprint(-1)\n\texit()\n\nstack = [primero]\nsol = []\n\nwhile len(stack):\n\tp = stack[-1]\n\tif len(v[p]) == 0:\n\t\tsol.append(p)\n\t\tstack.pop()\n\telse:\n\t\th = v[p].pop()\n\t\tv[h].remove(p)\n\t\tstack.append(h)\n\ntradaux = {v: k for k, v in trad.items()}\n\nif len(sol) != n:\n\tprint(-1)\n\texit()\n\nfor i in sol:\n\tprint(tradaux[i])\n",
    "prob_desc_created_at": "1556116500",
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "graphs"
    ],
    "hidden_unit_tests": ""
}