{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\\nNO\\nYES\\nNO\"]",
    "src_uid": "70028bbb9b7bce1f0d2753275b3e752f",
    "prob_desc_notes": "NoteIn the first test case, there is only one triple where $$$i=1$$$, $$$j=2$$$, $$$k=3$$$. In this case, $$$a_1 + a_2 + a_3 = 0$$$, which is an element of the array ($$$a_2 = 0$$$), so the array is 3SUM-closed.In the second test case, $$$a_1 + a_4 + a_5 = -1$$$, which is not an element of the array. Therefore, the array is not 3SUM-closed.In the third test case, $$$a_i + a_j + a_k = 0$$$ for all distinct $$$i$$$, $$$j$$$, $$$k$$$, and $$$0$$$ is an element of the array, so the array is 3SUM-closed.",
    "prob_desc_description": "You are given an array $$$a$$$ of length $$$n$$$. The array is called 3SUM-closed if for all distinct indices $$$i$$$, $$$j$$$, $$$k$$$, the sum $$$a_i + a_j + a_k$$$ is an element of the array. More formally, $$$a$$$ is 3SUM-closed if for all integers $$$1 \\leq i &lt; j &lt; k \\leq n$$$, there exists some integer $$$1 \\leq l \\leq n$$$ such that $$$a_i + a_j + a_k = a_l$$$.Determine if $$$a$$$ is 3SUM-closed.",
    "prob_desc_output_spec": "For each test case, output \"YES\" (without quotes) if $$$a$$$ is 3SUM-closed and \"NO\" (without quotes) otherwise. You can output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\" and \"Yes\" will be recognized as a positive response).",
    "prob_desc_input_spec": "The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases. The first line of each test case contains an integer $$$n$$$ ($$$3 \\leq n \\leq 2 \\cdot 10^5$$$) — the length of the array. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$-10^9 \\leq a_i \\leq 10^9$$$) — the elements of the array. It is guaranteed that the sum of $$$n$$$ across all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1300,
    "file_name": "train_102.jsonl",
    "code_uid": "ce97a5476f1768e22593fbf47cae962b",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n\\n3\\n\\n-1 0 1\\n\\n5\\n\\n1 -2 -2 1 -3\\n\\n6\\n\\n0 0 0 0 0 0\\n\\n4\\n\\n-1 2 -3 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\n#sys.setrecursionlimit(20000)\nfrom collections import Counter\nfrom itertools import combinations\n#from functools import ???\nfrom math import sqrt\nfrom random import randint\n\n\ndef rall():\n    return [x.strip() for x in sys.stdin.readlines()]\ndef rl():\n    return sys.stdin.readline().strip()\ndef rl_types(types):\n    str_list = [x for x in sys.stdin.readline().strip().split(' ')]\n    return [types[i](str_list[i]) for i in range(len(str_list))]\n\ndef pr( something='' ):\n    sys.stdout.write( str(something) + '\\n')\ndef pra( array ):\n    sys.stdout.write( ' '.join([str(x) for x in array]) + '\\n')\n\n\ndef get_freqs(array):\n    C = {}\n    for a in array:\n        if not a in C:\n            C[a] = 0\n        C[a] += 1\n    return C\n\n\nif __name__ == '__main__':\n\n    NT = int( rl() )\n    #a,b = map(int,rl().split(' '))\n\n    for ti in range(NT):\n        n = int(rl())\n        array = list(map(int, rl().split(' ')))\n\n        valid = True\n        if n == 3:\n            C = get_freqs(array)\n            valid = (array[0]+array[1]+array[2]) in C\n        elif n == 4:\n            C = get_freqs(array)\n            valid = (array[0]+array[1]+array[2]) in C and \\\n                    (array[0]+array[1]+array[3]) in C and \\\n                    (array[0]+array[2]+array[3]) in C and \\\n                    (array[1]+array[2]+array[3]) in C\n        else:\n            #has_zero = False\n            others = []\n            for i in range(n):\n                #if array[i]==0:\n                    #has_zero = True\n                if not array[i]==0:\n                    others.append(array[i])\n                    if len(others)>2:\n                        valid = False\n                        break\n            if valid:\n                valid = len(others) in [0,1] or (len(others)==2 and sum(others)==0)\n\n        #tot = sum(array)\n        '''\n        valid = True\n        if not 0 in C:\n            if len(array)==3:\n                valid = (array[0]+array[1]+array[2]) in C\n            elif len(array)==4:\n                # can have two opposite pairs\n                #valid = all([-x in C for x in C]) and len(C)==4\n                #valid = all([sum(x) in C for x in combinations(array,3)])\n                valid = (array[0]+array[1]+array[2]) in C and \\\n                        (array[0]+array[1]+array[3]) in C and \\\n                        (array[0]+array[2]+array[3]) in C and \\\n                        (array[1]+array[2]+array[3]) in C\n            elif len(array)>4:\n                valid = False\n        else: # has zero\n            if len(C)==1:\n                #all zeros\n                pass\n            elif len(C)==2:\n                # zero and one other number\n                valid = C[0]==n-1\n                # if more than one nonzero, then toast\n            elif len(C)==3:\n                #print(n,C[0])\n                valid = (C[0]==n-2) and sum([x for x in C])==0\n            #elif len(C)==4 and len(array)==4:\n                #valid = all([-x in C for x in C])\n            else:\n                valid = False\n        '''\n\n        pr('YES' if valid else 'NO')\n\n\n",
    "prob_desc_created_at": "1656426900",
    "tags": [
        "brute force",
        "data structures"
    ],
    "hidden_unit_tests": ""
}