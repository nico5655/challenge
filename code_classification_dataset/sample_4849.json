{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"5\", \"6\", \"7\"]",
    "src_uid": "ca4ae2484800a98b5592ae65cd45b67f",
    "prob_desc_notes": "NoteIn the first example a sequence (((()(()))( is described. This bracket sequence contains $$$5$$$ subsegments which form regular bracket sequences:  Subsequence from the $$$3$$$rd to $$$10$$$th character: (()(()))  Subsequence from the $$$4$$$th to $$$5$$$th character: ()  Subsequence from the $$$4$$$th to $$$9$$$th character: ()(())  Subsequence from the $$$6$$$th to $$$9$$$th character: (())  Subsequence from the $$$7$$$th to $$$8$$$th character: () In the second example a sequence ()))(()(()))) is described.In the third example a sequence ()()(()) is described.",
    "prob_desc_description": "  William has a favorite bracket sequence. Since his favorite sequence is quite big he provided it to you as a sequence of positive integers $$$c_1, c_2, \\dots, c_n$$$ where $$$c_i$$$ is the number of consecutive brackets \"(\" if $$$i$$$ is an odd number or the number of consecutive brackets \")\" if $$$i$$$ is an even number.For example for a bracket sequence \"((())()))\" a corresponding sequence of numbers is $$$[3, 2, 1, 3]$$$.You need to find the total number of continuous subsequences (subsegments) $$$[l, r]$$$ ($$$l \\le r$$$) of the original bracket sequence, which are regular bracket sequences.A bracket sequence is called regular if it is possible to obtain correct arithmetic expression by inserting characters \"+\" and \"1\" into this sequence. For example, sequences \"(())()\", \"()\" and \"(()(()))\" are regular, while \")(\", \"(()\" and \"(()))(\" are not.",
    "prob_desc_output_spec": "Output a single integer — the total number of subsegments of the original bracket sequence, which are regular bracket sequences. It can be proved that the answer fits in the signed 64-bit integer data type.",
    "prob_desc_input_spec": "The first line contains a single integer $$$n$$$ $$$(1 \\le n \\le 1000)$$$, the size of the compressed sequence. The second line contains a sequence of integers $$$c_1, c_2, \\dots, c_n$$$ $$$(1 \\le c_i \\le 10^9)$$$, the compressed sequence.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_107.jsonl",
    "code_uid": "b68d0d5c895ff9ff41559613e4f6c375",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n4 1 2 3 1\", \"6\\n1 3 2 1 2 4\", \"6\\n1 1 1 1 2 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\ninput = sys.stdin.readline\r\ndef I(): return int(input())\r\ndef II(): return list(map(int, input().split()))\r\ndef S(): return input()[:-1]\r\ndef M(n): return [list(map(int, input().split())) for ___ in range(n)]\r\ndef pb(b): print('Yes' if b else 'No')\r\ndef INF(): return float('inf')\r\n# -----------------------------------------------------------------------------------------------------\r\n#\r\n# 　　　　　　　　　　　 ∧＿∧\r\n# 　　　　　 ∧＿∧ 　 （´<_｀ ）　     Welcome to My Coding Space !\r\n# 　　　　 （ ´_ゝ`）　/　 ⌒i        Free Hong Kong !\r\n# 　　　　／　　　＼　 　  |　|       Free Tibet !\r\n# 　　　 /　　 /￣￣￣￣/　　|\r\n# 　 ＿_(__ﾆつ/　    ＿/ .| .|＿＿＿＿\r\n# 　 　　　＼/＿＿＿＿/　（u　⊃\r\n#\r\n#     再帰関数ですか？　SYS!!!!\r\n#     BINARY SEARCH ?\r\n# -----------------------------------------------------------------------------------------------------\r\nn = I()\r\nc = II()\r\nif n % 2:\r\n    n -= 1\r\n    c.pop()\r\nr = []\r\nfor i in range(0,n,2):\r\n    r.append((c[i],c[i+1]))\r\nn = len(r)\r\ndp = [0]*n\r\nres = 0\r\ntotal = 0\r\nfor i in range(n):\r\n    a = 0\r\n    a += min(r[i])\r\n    diff = r[i][0] - r[i][1]\r\n    j = i + 1\r\n    delta = 0\r\n    while j < n and diff >= 0:\r\n        delta += r[j][0] - r[j][1]\r\n        if delta <= 0:\r\n            a += (min(-delta, diff) + 1)\r\n            diff += delta\r\n            delta = 0\r\n        j += 1\r\n    #print(a)\r\n    total += a\r\nprint(total)",
    "prob_desc_created_at": "1630247700",
    "tags": [
        "brute force",
        "implementation"
    ],
    "hidden_unit_tests": ""
}