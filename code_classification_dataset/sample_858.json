{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\\n2 3\", \"3\\n2 2 2\"]",
    "src_uid": "98fd00d3c83d4b3f0511d8afa6fdb27b",
    "prob_desc_notes": null,
    "prob_desc_description": "Bachgold problem is very easy to formulate. Given a positive integer n represent it as a sum of maximum possible number of prime numbers. One can prove that such representation exists for any integer greater than 1.Recall that integer k is called prime if it is greater than 1 and has exactly two positive integer divisors — 1 and k. ",
    "prob_desc_output_spec": "The first line of the output contains a single integer k — maximum possible number of primes in representation. The second line should contain k primes with their sum equal to n. You can print them in any order. If there are several optimal solution, print any of them.",
    "prob_desc_input_spec": "The only line of the input contains a single integer n (2 ≤ n ≤ 100 000).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_004.jsonl",
    "code_uid": "494cefa8733cf0fcae59d51319820907",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\", \"6\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input())\nprint n >> 1\nwhile n > 0:\n\tif n % 2 > 0:\n\t\tprint 3, \n\t\tn -= 3\n\telse:\n\t\tprint 2, \n\t\tn -= 2\n",
    "prob_desc_created_at": "1482165300",
    "tags": [
        "implementation",
        "number theory",
        "greedy",
        "math"
    ],
    "hidden_unit_tests": ""
}