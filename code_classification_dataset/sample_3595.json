{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"4 5 2 3 1\", \"12 13 14 7 3 1\", \"4 5 2 6 3 1\"]",
    "src_uid": "1ccbcc5986bf7e7272b7dd65e061d66d",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given a set Y of n distinct positive integers y1, y2, ..., yn.Set X of n distinct positive integers x1, x2, ..., xn is said to generate set Y if one can transform X to Y by applying some number of the following two operation to integers in X:  Take any integer xi and multiply it by two, i.e. replace xi with 2·xi.  Take any integer xi, multiply it by two and add one, i.e. replace xi with 2·xi + 1. Note that integers in X are not required to be distinct after each operation.Two sets of distinct integers X and Y are equal if they are equal as sets. In other words, if we write elements of the sets in the array in the increasing order, these arrays would be equal.Note, that any set of integers (or its permutation) generates itself.You are given a set Y and have to find a set X that generates Y and the maximum element of X is mininum possible.",
    "prob_desc_output_spec": "Print n integers — set of distinct integers that generate Y and the maximum element of which is minimum possible. If there are several such sets, print any of them.",
    "prob_desc_input_spec": "The first line of the input contains a single integer n (1 ≤ n ≤ 50 000) — the number of elements in Y. The second line contains n integers y1, ..., yn (1 ≤ yi ≤ 109), that are guaranteed to be distinct.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_072.jsonl",
    "code_uid": "9eef3b1df0206d66c8676af17ace3276",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n1 2 3 4 5\", \"6\\n15 14 3 13 1 12\", \"6\\n9 7 13 17 5 11\"]",
    "exec_outcome": "PASSED",
    "source_code": "def main():\n    from heapq import heapify, heapreplace\n    input()\n    s = set(map(int, input().split()))\n    xx = [-x for x in s]\n    heapify(xx)\n    while True:\n        x = -xx[0]\n        while x != 1:\n            x //= 2\n            if x not in s:\n                s.add(x)\n                heapreplace(xx, -x)\n                break\n        else:\n            break\n    print(' '.join(str(-x) for x in xx))\n\nif __name__ == '__main__':\n    main()\n",
    "prob_desc_created_at": "1475330700",
    "tags": [
        "greedy",
        "data structures",
        "binary search",
        "dfs and similar",
        "trees",
        "strings"
    ],
    "hidden_unit_tests": ""
}