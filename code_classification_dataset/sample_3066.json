{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"4\\n6 3 2 3\", \"-1\"]",
    "src_uid": "df0b20cf9b848f7406a13378126f301f",
    "prob_desc_notes": null,
    "prob_desc_description": "Welcome to another task about breaking the code lock! Explorers Whitfield and Martin came across an unusual safe, inside of which, according to rumors, there are untold riches, among which one can find the solution of the problem of discrete logarithm!Of course, there is a code lock is installed on the safe. The lock has a screen that displays a string of n lowercase Latin letters. Initially, the screen displays string s. Whitfield and Martin found out that the safe will open when string t will be displayed on the screen.The string on the screen can be changed using the operation «shift x». In order to apply this operation, explorers choose an integer x from 0 to n inclusive. After that, the current string p = αβ changes to βRα, where the length of β is x, and the length of α is n - x. In other words, the suffix of the length x of string p is reversed and moved to the beginning of the string. For example, after the operation «shift 4» the string «abcacb» will be changed with string «bcacab », since α = ab, β = cacb, βR = bcac.Explorers are afraid that if they apply too many operations «shift», the lock will be locked forever. They ask you to find a way to get the string t on the screen, using no more than 6100 operations.",
    "prob_desc_output_spec": "If it is impossible to get string t from string s using no more than 6100 operations «shift», print a single number  - 1. Otherwise, in the first line output the number of operations k (0 ≤ k ≤ 6100). In the next line output k numbers xi corresponding to the operations «shift xi» (0 ≤ xi ≤ n) in the order in which they should be applied.",
    "prob_desc_input_spec": "The first line contains an integer n, the length of the strings s and t (1 ≤ n ≤ 2 000). After that, there are two strings s and t, consisting of n lowercase Latin letters each.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_040.jsonl",
    "code_uid": "8f004c223ab44ac6b47eec457ec2435d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\nabacbb\\nbabcba\", \"3\\naba\\nbba\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input())\ns = input()\nt = input()\n\nif sorted(s) != sorted(t):\n    print(-1)\nelse:\n    ans = []\n    for i in t:\n        j = 0\n        for j in range(n):\n            if i == s[j]:\n                break\n        ans.append(n-j-1)\n        ans.append(1)\n        ans.append(n)\n        s = \"\".join(reversed(s[:j])) + s[j+1:] + s[j]\n    print(len(ans))\n    for i in ans:\n        print(i, end=' ')\n",
    "prob_desc_created_at": "1519574700",
    "tags": [
        "constructive algorithms",
        "strings"
    ],
    "hidden_unit_tests": ""
}