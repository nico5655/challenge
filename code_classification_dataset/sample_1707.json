{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\", \"1\", \"7\"]",
    "src_uid": "be8be333d036f6c19b9a6eb33f96ba75",
    "prob_desc_notes": "NoteThe first example is clarified in the problem statement.In the second example an optimal possible sequence of swallows is: $$$[20, 15, 10, 15, \\underline{20}, 25]$$$ $$$\\to$$$ $$$[20, 15, 10, \\underline{15}, 25]$$$ $$$\\to$$$ $$$[20, 15, \\underline{10}, 25]$$$ $$$\\to$$$ $$$[20, \\underline{15}, 25]$$$ $$$\\to$$$ $$$[\\underline{20}, 25]$$$ $$$\\to$$$ $$$[25]$$$.In the third example no bacteria can swallow any other bacteria.",
    "prob_desc_description": "You have a Petri dish with bacteria and you are preparing to dive into the harsh micro-world. But, unfortunately, you don't have any microscope nearby, so you can't watch them.You know that you have $$$n$$$ bacteria in the Petri dish and size of the $$$i$$$-th bacteria is $$$a_i$$$. Also you know intergalactic positive integer constant $$$K$$$.The $$$i$$$-th bacteria can swallow the $$$j$$$-th bacteria if and only if $$$a_i &gt; a_j$$$ and $$$a_i \\le a_j + K$$$. The $$$j$$$-th bacteria disappear, but the $$$i$$$-th bacteria doesn't change its size. The bacteria can perform multiple swallows. On each swallow operation any bacteria $$$i$$$ can swallow any bacteria $$$j$$$ if $$$a_i &gt; a_j$$$ and $$$a_i \\le a_j + K$$$. The swallow operations go one after another.For example, the sequence of bacteria sizes $$$a=[101, 53, 42, 102, 101, 55, 54]$$$ and $$$K=1$$$. The one of possible sequences of swallows is: $$$[101, 53, 42, 102, \\underline{101}, 55, 54]$$$ $$$\\to$$$ $$$[101, \\underline{53}, 42, 102, 55, 54]$$$ $$$\\to$$$ $$$[\\underline{101}, 42, 102, 55, 54]$$$ $$$\\to$$$ $$$[42, 102, 55, \\underline{54}]$$$ $$$\\to$$$ $$$[42, 102, 55]$$$. In total there are $$$3$$$ bacteria remained in the Petri dish.Since you don't have a microscope, you can only guess, what the minimal possible number of bacteria can remain in your Petri dish when you finally will find any microscope.",
    "prob_desc_output_spec": "Print the only integer — minimal possible number of bacteria can remain.",
    "prob_desc_input_spec": "The first line contains two space separated positive integers $$$n$$$ and $$$K$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$, $$$1 \\le K \\le 10^6$$$) — number of bacteria and intergalactic constant $$$K$$$. The second line contains $$$n$$$ space separated integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^6$$$) — sizes of bacteria you have.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1200,
    "file_name": "train_012.jsonl",
    "code_uid": "2948d95a933bd49e86a02d96e7f96cb2",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7 1\\n101 53 42 102 101 55 54\", \"6 5\\n20 15 10 15 20 25\", \"7 1000000\\n1 1 1 1 1 1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "from __future__ import print_function, division\nfrom sys import stdin, stdout\nfrom fractions import gcd\n# from math import *\nfrom collections import *\nfrom operator import mul\nfrom functools import reduce\nfrom copy import copy\n\nrstr = lambda: stdin.readline().strip()\nrstrs = lambda: [str(x) for x in stdin.readline().split()]\nrint = lambda: int(stdin.readline())\nrints = lambda: [int(x) for x in stdin.readline().split()]\nrstr_2d = lambda n: [rstr() for _ in range(n)]\nrint_2d = lambda n: [rint() for _ in range(n)]\nrints_2d = lambda n: [rints() for _ in range(n)]\npr = lambda args, sep: stdout.write(sep.join(map(str, args)) + '\\n')\nout = []\n\nn, k = rints()\na, ans = rints(), n\nmem, ix = Counter(a), 1\nkeys = sorted(mem.keys())[::-1]\n\nfor i in keys:\n    for j in range(ix, len(keys)):\n        if keys[j] < i - k:\n            break\n        elif keys[j] < i and keys[j] >= i - k:\n            ans -= mem[keys[j]]\n\n        ix += 1\n\nprint(ans)\n",
    "prob_desc_created_at": "1528625100",
    "tags": [
        "sortings",
        "greedy"
    ],
    "hidden_unit_tests": ""
}