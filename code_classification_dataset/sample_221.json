{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"25\", \"33\"]",
    "src_uid": "926ec28d1c80e7cbe0bb6d209e664f48",
    "prob_desc_notes": null,
    "prob_desc_description": "The little girl loves the problems on array queries very much.One day she came across a rather well-known problem: you've got an array of $$$n$$$ elements (the elements of the array are indexed starting from 1); also, there are $$$q$$$ queries, each one is defined by a pair of integers $$$l_i$$$, $$$r_i$$$ $$$(1 \\le l_i \\le r_i \\le n)$$$. You need to find for each query the sum of elements of the array with indexes from $$$l_i$$$ to $$$r_i$$$, inclusive.The little girl found the problem rather boring. She decided to reorder the array elements before replying to the queries in a way that makes the sum of query replies maximum possible. Your task is to find the value of this maximum sum.",
    "prob_desc_output_spec": "In a single line print, a single integer — the maximum sum of query replies after the array elements are reordered. Please, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.",
    "prob_desc_input_spec": "The first line contains two space-separated integers $$$n$$$ ($$$1 \\le n \\le 2\\cdot10^5$$$) and $$$q$$$ ($$$1 \\le q \\le 2\\cdot10^5$$$) — the number of elements in the array and the number of queries, correspondingly. The next line contains $$$n$$$ space-separated integers $$$a_i$$$ ($$$1 \\le a_i \\le 2\\cdot10^5$$$) — the array elements. Each of the following $$$q$$$ lines contains two space-separated integers $$$l_i$$$ and $$$r_i$$$ ($$$1 \\le l_i \\le r_i \\le n$$$) — the $$$i$$$-th query.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_001.jsonl",
    "code_uid": "0b4d648ccb51c39f7ebb93c3cc15e6e1",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 3\\n5 3 2\\n1 2\\n2 3\\n1 3\", \"5 3\\n5 2 4 1 3\\n1 5\\n2 3\\n2 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "#!/usr/bin/python\n\nfrom collections import deque\n\ndef ir():\n    return int(raw_input())\n\ndef ia():\n    line = raw_input()\n    line = line.split()\n    return map(int, line)\n\nn, q = ia()\n\na = ia(); a.sort(reverse=True)\n\nd = [0 for i in range(n+1)]\n\nfor i in range(q):\n    l, r = ia(); l-=1; r-=1\n    d[l] += 1; d[r+1] -=1\n\nc = [0 for i in range(n+1)]\ns = 0\nfor i in range(n+1):\n    s += d[i]\n    c[i] = s\n\nc.sort(reverse=True)\nans = 0\nfor i in range(n):\n    ans += a[i]*c[i]\n\nprint ans\n",
    "prob_desc_created_at": "1361719800",
    "tags": [
        "data structures",
        "implementation",
        "sortings",
        "greedy"
    ],
    "hidden_unit_tests": ""
}