{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"10\", \"6\"]",
    "src_uid": "92db85bb3880b9d11f93cacd566ecda7",
    "prob_desc_notes": "NoteLet's consider the first example. Here are Polycarp's moves until he runs out of money:  Booth $$$1$$$, buys candy for $$$5$$$, $$$T = 33$$$;  Booth $$$2$$$, buys candy for $$$2$$$, $$$T = 31$$$;  Booth $$$3$$$, buys candy for $$$5$$$, $$$T = 26$$$;  Booth $$$1$$$, buys candy for $$$5$$$, $$$T = 21$$$;  Booth $$$2$$$, buys candy for $$$2$$$, $$$T = 19$$$;  Booth $$$3$$$, buys candy for $$$5$$$, $$$T = 14$$$;  Booth $$$1$$$, buys candy for $$$5$$$, $$$T = 9$$$;  Booth $$$2$$$, buys candy for $$$2$$$, $$$T = 7$$$;  Booth $$$3$$$, buys candy for $$$5$$$, $$$T = 2$$$;  Booth $$$1$$$, buys no candy, not enough money;  Booth $$$2$$$, buys candy for $$$2$$$, $$$T = 0$$$. No candy can be bought later. The total number of candies bought is $$$10$$$.In the second example he has $$$1$$$ burle left at the end of his path, no candy can be bought with this amount.",
    "prob_desc_description": "XXI Berland Annual Fair is coming really soon! Traditionally fair consists of $$$n$$$ booths, arranged in a circle. The booths are numbered $$$1$$$ through $$$n$$$ clockwise with $$$n$$$ being adjacent to $$$1$$$. The $$$i$$$-th booths sells some candies for the price of $$$a_i$$$ burles per item. Each booth has an unlimited supply of candies.Polycarp has decided to spend at most $$$T$$$ burles at the fair. However, he has some plan in mind for his path across the booths:  at first, he visits booth number $$$1$$$;  if he has enough burles to buy exactly one candy from the current booth, then he buys it immediately;  then he proceeds to the next booth in the clockwise order (regardless of if he bought a candy or not). Polycarp's money is finite, thus the process will end once he can no longer buy candy at any booth.Calculate the number of candies Polycarp will buy.",
    "prob_desc_output_spec": "Print a single integer — the total number of candies Polycarp will buy.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$T$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$, $$$1 \\le T \\le 10^{18}$$$) — the number of booths at the fair and the initial amount of burles Polycarp has. The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$) — the price of the single candy at booth number $$$i$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_012.jsonl",
    "code_uid": "0c8867d9387db04e190e21c32383af89",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 38\\n5 2 5\", \"5 21\\n2 4 100 2 6\"]",
    "exec_outcome": "PASSED",
    "source_code": "'''\nD. Berland Fair\nBS?:\n    1. we need to construct a sorted array first --> sort or sum it up for each index.\nMake it too complicated..\n'''\n\nimport sys\n\nN, T = list(map(int, sys.stdin.readline().strip().split()))\n\nnums = list(map(int, sys.stdin.readline().strip().split()))\n\nret = 0\nwhile True:\n    t = 0\n    count = 0\n    for item in nums:\n        if T >= t + item:\n            t += item\n            count += 1\n    if not count:\n        break\n    ret += T // t * count\n    T = T % t\n\nprint(ret)\n\n\n",
    "prob_desc_created_at": "1540478100",
    "tags": [
        "data structures",
        "binary search",
        "greedy",
        "brute force"
    ],
    "hidden_unit_tests": ""
}