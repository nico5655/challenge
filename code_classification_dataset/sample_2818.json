{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"167\", \"582491518\"]",
    "src_uid": "f4a9abc1cdfcdc2c96982477f17a197b",
    "prob_desc_notes": "NoteDescription of the first example:   $$$f(1, 1) = 5 \\cdot 1 = 5$$$;  $$$f(1, 2) = 2 \\cdot 1 + 5 \\cdot 2 = 12$$$;  $$$f(1, 3) = 2 \\cdot 1 + 4 \\cdot 2 + 5 \\cdot 3 = 25$$$;  $$$f(1, 4) = 2 \\cdot 1 + 4 \\cdot 2 + 5 \\cdot 3 + 7 \\cdot 4 = 53$$$;  $$$f(2, 2) = 2 \\cdot 1 = 2$$$;  $$$f(2, 3) = 2 \\cdot 1 + 4 \\cdot 2 = 10$$$;  $$$f(2, 4) = 2 \\cdot 1 + 4 \\cdot 2 + 7 \\cdot 3 = 31$$$;  $$$f(3, 3) = 4 \\cdot 1 = 4$$$;  $$$f(3, 4) = 4 \\cdot 1 + 7 \\cdot 2 = 18$$$;  $$$f(4, 4) = 7 \\cdot 1 = 7$$$; ",
    "prob_desc_description": "You are given an array $$$a_1, a_2, \\dots, a_n$$$. All $$$a_i$$$ are pairwise distinct.Let's define function $$$f(l, r)$$$ as follows:   let's define array $$$b_1, b_2, \\dots, b_{r - l + 1}$$$, where $$$b_i = a_{l - 1 + i}$$$;  sort array $$$b$$$ in increasing order;  result of the function $$$f(l, r)$$$ is $$$\\sum\\limits_{i = 1}^{r - l + 1}{b_i \\cdot i}$$$. Calculate $$$\\left(\\sum\\limits_{1 \\le l \\le r \\le n}{f(l, r)}\\right) \\mod (10^9+7)$$$, i.e. total sum of $$$f$$$ for all subsegments of $$$a$$$ modulo $$$10^9+7$$$.",
    "prob_desc_output_spec": "Print one integer — the total sum of $$$f$$$ for all subsegments of $$$a$$$ modulo $$$10^9+7$$$",
    "prob_desc_input_spec": "The first line contains one integer $$$n$$$ ($$$1 \\le n \\le 5 \\cdot 10^5$$$) — the length of array $$$a$$$. The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$, $$$a_i \\neq a_j$$$ for $$$i \\neq j$$$) — array $$$a$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_032.jsonl",
    "code_uid": "e41eb7e15c0c70495a44339e6c917ed3",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n5 2 4 7\", \"3\\n123456789 214365879 987654321\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\n\nMOD = (int)(1e9+7)\n\ndef add(a, b):\n\ta += b\n\tif a >= MOD: a -= MOD\n\treturn a\n\t\ndef mul(a, b):\n\treturn (a * b) % MOD\n\nclass fenwickTree:\n\tdef __init__(self, max_val):\n\t\tself.max_val = max_val + 5\n\t\tself.tree = [0] * self.max_val\n\t\n\tdef update(self, idx, value):\n\t\tidx += 1\n\t\twhile idx < self.max_val:\n\t\t\tself.tree[idx] = add(self.tree[idx], value)\n\t\t\tidx += (idx & (-idx))\n\t\n\tdef read(self, idx):\n\t\tidx += 1\n\t\tres = 0\n\t\twhile idx > 0:\n\t\t\tres = add(res, self.tree[idx])\n\t\t\tidx -= (idx & (-idx))\n\t\treturn res\n\ninp = [int(x) for x in sys.stdin.read().split()]\n\nn = inp[0]\na = []\nfor i in range(1, n + 1):\n\ta.append(inp[i])\n\t\nsorted_array = sorted(a)\ndict = {}\nfor i in range(n):\n\tdict[sorted_array[i]] = i\n\t\nfactor = [0] * n\nfor i in range(0, n):\n\tfactor[i] = mul(i + 1, n - i)\n\t\nleft_tree = fenwickTree(n)\nfor i in range(0, n):\n\telement_idx = dict[a[i]]\n\tfactor[i] = add(factor[i], mul(n - i, left_tree.read(element_idx)))\n\tleft_tree.update(element_idx, i + 1)\n\t\nright_tree = fenwickTree(n)\nfor i in range(n - 1, -1, -1):\n\telement_idx = dict[a[i]]\n\tfactor[i] = add(factor[i], mul(i + 1, right_tree.read(element_idx)))\n\tright_tree.update(element_idx, n - i)\n\nans = 0\nfor i in range(n):\n\tans = add(ans, mul(a[i], factor[i]))\nprint(ans)\n",
    "prob_desc_created_at": "1557930900",
    "tags": [
        "data structures",
        "combinatorics",
        "sortings",
        "math"
    ],
    "hidden_unit_tests": ""
}