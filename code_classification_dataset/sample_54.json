{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"NO\", \"YES\", \"YES\"]",
    "src_uid": "60af9947ed99256a2820814f1bf1c6c6",
    "prob_desc_notes": "NoteIn the first example, you can't choose any $$$x$$$, $$$y$$$ because for each such pair you can find a given pair where both numbers are different from chosen integers.In the second example, you can choose $$$x=2$$$ and $$$y=4$$$.In the third example, you can choose $$$x=1$$$ and $$$y=2$$$.",
    "prob_desc_description": "Toad Ivan has $$$m$$$ pairs of integers, each integer is between $$$1$$$ and $$$n$$$, inclusive. The pairs are $$$(a_1, b_1), (a_2, b_2), \\ldots, (a_m, b_m)$$$. He asks you to check if there exist two integers $$$x$$$ and $$$y$$$ ($$$1 \\leq x &lt; y \\leq n$$$) such that in each given pair at least one integer is equal to $$$x$$$ or $$$y$$$.",
    "prob_desc_output_spec": "Output \"YES\" if there exist two integers $$$x$$$ and $$$y$$$ ($$$1 \\leq x &lt; y \\leq n$$$) such that in each given pair at least one integer is equal to $$$x$$$ or $$$y$$$. Otherwise, print \"NO\". You can print each letter in any case (upper or lower).",
    "prob_desc_input_spec": "The first line contains two space-separated integers $$$n$$$ and $$$m$$$ ($$$2 \\leq n \\leq 300\\,000$$$, $$$1 \\leq m \\leq 300\\,000$$$) — the upper bound on the values of integers in the pairs, and the number of given pairs. The next $$$m$$$ lines contain two integers each, the $$$i$$$-th of them contains two space-separated integers $$$a_i$$$ and $$$b_i$$$ ($$$1 \\leq a_i, b_i \\leq n, a_i \\neq b_i$$$) — the integers in the $$$i$$$-th pair.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_000.jsonl",
    "code_uid": "98b6febd77e082a67c99c8086beb28dc",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\", \"5 4\\n1 2\\n2 3\\n3 4\\n4 5\", \"300000 5\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import defaultdict\nn,m = list(map(int,input().split()))\nfreq = [0 for i in range(n+1)]\narr = []\nf = 0\nfor i in range(m):\n    u,v = list(map(int,input().split()))\n    if f==0:\n        temp = [u,v]\n        f = 1\n    p = [u,v]\n    p =set(p)\n    arr.append(p)\nfor i in temp:\n    ans = []\n    for j in arr:\n        x = list(j)\n        if i in x:\n            continue\n        else:\n            ans.append(j)\n    if ans==[]:\n        print(\"YES\")\n        exit()\n    else:\n        x = ans[0]\n        f = 0\n        for j in range(1,len(ans)):\n            y = ans[j]\n            x = x.intersection(y)\n            if x==set():\n                f = 1\n                break\n        if f==0:\n            print(\"YES\")\n            exit()\nprint(\"NO\")",
    "prob_desc_created_at": "1558884900",
    "tags": [
        "implementation",
        "graphs"
    ],
    "hidden_unit_tests": ""
}