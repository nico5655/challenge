{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"111110\\n1 0 0 2 0 0 \\n111110\\n0 1 1 1 0 1 \\n000000\\n0 0 0 0 0 0 \\n100110\\n1 0 0 0 0 0 \\n111111\\n1 2 1 3 0 4 \\n111110\\n1 1 4 2 0 4\"]",
    "src_uid": "38375efafa4861f3443126f20cacf3ae",
    "prob_desc_notes": "NoteHere is the explanation for the first testcase. Each step shows how the binary string changes in a move.  Choose bit $$$1$$$: $$$\\color{red}{\\underline{1}00001} \\rightarrow \\color{red}{\\underline{1}}\\color{blue}{11110}$$$.  Choose bit $$$4$$$: $$$\\color{red}{111\\underline{1}10} \\rightarrow \\color{blue}{000}\\color{red}{\\underline{1}}\\color{blue}{01}$$$.  Choose bit $$$4$$$: $$$\\color{red}{000\\underline{1}01} \\rightarrow \\color{blue}{111}\\color{red}{\\underline{1}}\\color{blue}{10}$$$.  The final string is $$$111110$$$ and this is the lexicographically largest string we can get.",
    "prob_desc_description": "You are given a binary string of length $$$n$$$. You have exactly $$$k$$$ moves. In one move, you must select a single bit. The state of all bits except that bit will get flipped ($$$0$$$ becomes $$$1$$$, $$$1$$$ becomes $$$0$$$). You need to output the lexicographically largest string that you can get after using all $$$k$$$ moves. Also, output the number of times you will select each bit. If there are multiple ways to do this, you may output any of them.A binary string $$$a$$$ is lexicographically larger than a binary string $$$b$$$ of the same length, if and only if the following holds:   in the first position where $$$a$$$ and $$$b$$$ differ, the string $$$a$$$ contains a $$$1$$$, and the string $$$b$$$ contains a $$$0$$$. ",
    "prob_desc_output_spec": "For each test case, output two lines. The first line should contain the lexicographically largest string you can obtain. The second line should contain $$$n$$$ integers $$$f_1, f_2, \\ldots, f_n$$$, where $$$f_i$$$ is the number of times the $$$i$$$-th bit is selected. The sum of all the integers must be equal to $$$k$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 1000$$$)  — the number of test cases. Each test case has two lines. The first line has two integers $$$n$$$ and $$$k$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$; $$$0 \\leq k \\leq 10^9$$$). The second line has a binary string of length $$$n$$$, each character is either $$$0$$$ or $$$1$$$. The sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1300,
    "file_name": "train_110.jsonl",
    "code_uid": "fd454fc166a3964aa2869f9f990c7762",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n\\n6 3\\n\\n100001\\n\\n6 4\\n\\n100011\\n\\n6 0\\n\\n000000\\n\\n6 1\\n\\n111001\\n\\n6 11\\n\\n101100\\n\\n6 12\\n\\n001110\"]",
    "exec_outcome": "PASSED",
    "source_code": "I=input\nfor _ in[0]*int(I()):\n n,k=map(int,I().split());a=[int(x)^k&1for x in I()];b=[0]*n;i=0\n while(n-i)*k:b[i]=a[i]^1;a[i]=1;k-=b[i];i+=1\n a[-1]^=k&1;b[-1]+=k;print(*a,sep='');print(*b)",
    "prob_desc_created_at": "1650206100",
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "greedy",
        "strings"
    ],
    "hidden_unit_tests": ""
}