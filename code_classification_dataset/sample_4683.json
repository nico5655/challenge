{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2112\\n63\\n3000000000\\n1\"]",
    "src_uid": "bc1587d3affd867804e664fdb38ed765",
    "prob_desc_notes": "NoteIn the first test case, we can order the skills by $$$[3, 1, 4, 2]$$$, and the total damage is $$$100 + 2 \\times 1 + 2 \\times 1000 + 10 = 2112$$$.In the second test case, we can order the skills by $$$[1, 4, 2, 5, 3, 6]$$$, and the total damage is $$$3 + 2 \\times 6 + 2 \\times 4 + 2 \\times 7 + 2 \\times 5 + 2 \\times 8 = 63$$$.In the third test case, we can order the skills by $$$[1, 2, 3]$$$, and the total damage is $$$1000000000 + 1000000000 + 1000000000 = 3000000000$$$.In the fourth test case, there is only one skill with initial damage $$$1$$$, so the total damage is $$$1$$$. ",
    "prob_desc_description": "The hero is addicted to glory, and is fighting against a monster. The hero has $$$n$$$ skills. The $$$i$$$-th skill is of type $$$a_i$$$ (either fire or frost) and has initial damage $$$b_i$$$. The hero can perform all of the $$$n$$$ skills in any order (with each skill performed exactly once). When performing each skill, the hero can play a magic as follows:   If the current skill immediately follows another skill of a different type, then its damage is doubled.  In other words,   If a skill of type fire and with initial damage $$$c$$$ is performed immediately after a skill of type fire, then it will deal $$$c$$$ damage;  If a skill of type fire and with initial damage $$$c$$$ is performed immediately after a skill of type frost, then it will deal $$$2c$$$ damage;  If a skill of type frost and with initial damage $$$c$$$ is performed immediately after a skill of type fire, then it will deal $$$2c$$$ damage;  If a skill of type frost and with initial damage $$$c$$$ is performed immediately after a skill of type frost , then it will deal $$$c$$$ damage. Your task is to find the maximum damage the hero can deal. ",
    "prob_desc_output_spec": "For each test case, output the maximum damage the hero can deal.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^5$$$) â€” the number of test cases. The following lines contain the description of each test case. The first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 10^5$$$), indicating the number of skills.  The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$0 \\leq a_i \\leq 1$$$), where $$$a_i$$$ indicates the type of the $$$i$$$-th skill. Specifically, the $$$i$$$-th skill is of type fire if $$$a_i = 0$$$, and of type frost if $$$a_i = 1$$$.  The third line of each test case contains $$$n$$$ integers $$$b_1, b_2, \\dots, b_n$$$ ($$$1 \\leq b_i \\leq 10^9$$$), where $$$b_i$$$ indicates the initial damage of the $$$i$$$-th skill.  It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_103.jsonl",
    "code_uid": "d835e044a268e3f4d67725cdcfb0cb3c",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n\\n4\\n\\n0 1 1 1\\n\\n1 10 100 1000\\n\\n6\\n\\n0 0 0 1 1 1\\n\\n3 4 5 6 7 8\\n\\n3\\n\\n1 1 1\\n\\n1000000000 1000000000 1000000000\\n\\n1\\n\\n1\\n\\n1\"]",
    "exec_outcome": "PASSED",
    "source_code": "nn = int(input())\nfor _ in range(nn):\n\tn = int(input())\n\tfire_or_frost=input()#[0,0,0,1,1,1]#[randint(0,1) for x in range(n_skills)]\n\tfire_or_frost = fire_or_frost.split(' ')\n\tskills = [int(x) for x in fire_or_frost]\n\tscores = input()#[3,4,5,6,7,8]#[randint(1,10) for x in range(n_skills)]\n\tscores = scores.split(' ')\n\tdamage = [int(x) for x in scores]\n\tif sum(skills)==0 or sum(skills)==len(skills):\n\t\tprint(sum(damage))\n\telse:\n\t\ta_damage = []\n\t\tb_damage = []\t\n\t\tfor i in range(len(skills)):\n\t\t\tif skills[i]==0:\n\t\t\t\ta_damage.append(damage[i])\n\t\t\telse:\n\t\t\t\tb_damage.append(damage[i])\n\t\ta_damage.sort(reverse=True)\n\t\tb_damage.sort(reverse=True)\n\t\tif len(a_damage)==len(b_damage):\n\t\t\tresult = sum(damage)*2-min(damage)\n\t\t\tprint(result)\n\t\telse:\n\t\t\tn_len = min(len(a_damage),len(b_damage))\n\t\t\t#result = sum(a_damage[:n_len])*2+sum(b_damage[:n_len])*2+\\\n\t\t\t#\tsum(a_damage[n_len:])+sum(b_damage[n_len:])\n\t\t\tresult = sum(a_damage[:n_len]+b_damage[:n_len])*2+sum(a_damage[n_len:]+b_damage[n_len:])\n\t\t\tprint(result)\n\n\n\n\n\n",
    "prob_desc_created_at": "1664548500",
    "tags": [
        "greedy",
        "implementation",
        "sortings"
    ],
    "hidden_unit_tests": ""
}