{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1001\", \"32\"]",
    "src_uid": "14c37283d16cb3aa8dd8fc7ea8f1096d",
    "prob_desc_notes": null,
    "prob_desc_description": "Given an array $$$a$$$, consisting of $$$n$$$ integers, find:$$$$$$\\max\\limits_{1 \\le i &lt; j \\le n} LCM(a_i,a_j),$$$$$$where $$$LCM(x, y)$$$ is the smallest positive integer that is divisible by both $$$x$$$ and $$$y$$$. For example, $$$LCM(6, 8) = 24$$$, $$$LCM(4, 12) = 12$$$, $$$LCM(2, 3) = 6$$$.",
    "prob_desc_output_spec": "Print one integer, the maximum value of the least common multiple of two elements in the array $$$a$$$.",
    "prob_desc_input_spec": "The first line contains an integer $$$n$$$ ($$$2 \\le n \\le 10^5$$$) — the number of elements in the array $$$a$$$. The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^5$$$) — the elements of the array $$$a$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2900,
    "file_name": "train_017.jsonl",
    "code_uid": "6f15819de120d5fa08b2af49cab75436",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n13 35 77\", \"6\\n1 2 4 8 16 32\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nfrom fractions import gcd\ninput = sys.stdin.readline\n\nn = int(input())\nA = map(int, input().split())\n\ndivisors = [[] for _ in range(10**5+2)]\nmobius = [1 for _ in range(10**5+2)]\n\nfor i in range(1,10**5+1):\n    for j in range(i,10**5+1,i):\n        divisors[j].append(i)\n\nfor i in range(1,10**5+1):\n    for d in divisors[i]:\n        if d == 1: continue\n        if i % (d**2) == 0 or mobius[i] == 0: mobius[i] = 0\n        elif len(divisors[i]) == 2: mobius[i] = -1\n        else: mobius[i] = mobius[d] * mobius[i / d]\n\n\nnumbers = set(A)\nfor i in A:\n    for d in divisors[i]:\n        numbers.add(d)\n\n\nnumbers = sorted(list(numbers), reverse=True)\nstack = []\ncnt = [0] * (10**5+2)\nfor i in numbers:\n    stack.append(i)\n    for d in divisors[i]:\n        cnt[d] += 1\n\nans = 0\n\nfor x in numbers:\n    num_co_prime = sum(cnt[d] * mobius[d] for d in divisors[x])\n    while num_co_prime > 0:\n        a = stack.pop()\n        for d in divisors[a]:\n            cnt[d] -= 1\n        if gcd(a,x) > 1:\n            continue\n        ans = max(a*x,ans)\n        num_co_prime-=1\n\nprint ans\n",
    "prob_desc_created_at": "1578665100",
    "tags": [
        "combinatorics",
        "binary search",
        "number theory"
    ],
    "hidden_unit_tests": ""
}