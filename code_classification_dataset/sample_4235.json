{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1 1 0 -1 \\n1 1 2 2 1 0 2 6 \\n3 0 1 4 3 \\n1 0 -1 -1 -1 -1 -1 -1 \\n2 1 0 2 -1 -1\"]",
    "src_uid": "18d19440e6df7316af0682ce99911738",
    "prob_desc_notes": "NoteIn the first set of example inputs, $$$n=3$$$:  to get $$$\\mathrm{MEX}=0$$$, it is enough to perform one increment: $$$a_1$$$++;  to get $$$\\mathrm{MEX}=1$$$, it is enough to perform one increment: $$$a_2$$$++;  $$$\\mathrm{MEX}=2$$$ for a given array, so there is no need to perform increments;  it is impossible to get $$$\\mathrm{MEX}=3$$$ by performing increments. ",
    "prob_desc_description": "Dmitry has an array of $$$n$$$ non-negative integers $$$a_1, a_2, \\dots, a_n$$$.In one operation, Dmitry can choose any index $$$j$$$ ($$$1 \\le j \\le n$$$) and increase the value of the element $$$a_j$$$ by $$$1$$$. He can choose the same index $$$j$$$ multiple times.For each $$$i$$$ from $$$0$$$ to $$$n$$$, determine whether Dmitry can make the $$$\\mathrm{MEX}$$$ of the array equal to exactly $$$i$$$. If it is possible, then determine the minimum number of operations to do it.The $$$\\mathrm{MEX}$$$ of the array is equal to the minimum non-negative integer that is not in the array. For example, the $$$\\mathrm{MEX}$$$ of the array $$$[3, 1, 0]$$$ is equal to $$$2$$$, and the array $$$[3, 3, 1, 4]$$$ is equal to $$$0$$$.",
    "prob_desc_output_spec": "For each test case, output $$$n + 1$$$ integer — $$$i$$$-th number is equal to the minimum number of operations for which you can make the array $$$\\mathrm{MEX}$$$ equal to $$$i$$$ ($$$0 \\le i \\le n$$$), or -1 if this cannot be done.",
    "prob_desc_input_spec": "The first line of input data contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases in the input.  The descriptions of the test cases follow. The first line of the description of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the length of the array $$$a$$$. The second line of the description of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$0 \\le a_i \\le n$$$) — elements of the array $$$a$$$. It is guaranteed that the sum of the values $$$n$$$ over all test cases in the test does not exceed $$$2\\cdot10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_093.jsonl",
    "code_uid": "4f81f4db3e705bbbe22ad9af00a44a3a",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n3\\n0 1 3\\n7\\n0 1 2 3 4 3 2\\n4\\n3 0 0 0\\n7\\n4 6 2 3 5 0 5\\n5\\n4 0 1 0 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "INF = float('inf')\r\ndef solve():\r\n    n = int(input())\r\n    mmin = n + 1\r\n    a = []\r\n    cnt = [0] * (n + 1)\r\n    for i in input().split():\r\n        i = int(i)\r\n        mmin = min(mmin, i)\r\n        a.append(i)\r\n        cnt[i] += 1\r\n    a.sort()\r\n    if mmin > 0:\r\n        print(0, end = ' ')\r\n        i = 1\r\n        while i <= n:\r\n            print(-1, end = ' ')\r\n            i += 1\r\n        print()\r\n        return ''\r\n    i = 0\r\n    cntM = 0\r\n    prevM = []\r\n    pos = -1\r\n    while i <= n:\r\n        if cntM < 0:\r\n            while i <= n:\r\n                print(-1, end = ' ')\r\n                i += 1\r\n            print()\r\n            return ''\r\n        print(cntM + cnt[i], end = ' ')\r\n        if cnt[i] == 0:\r\n            if pos == -1:\r\n                i += 1\r\n                while i <= n:\r\n                    print(-1, end = ' ')\r\n                    i += 1\r\n                print()\r\n                return ''\r\n            prevM[pos][1] -= 1\r\n            cntM += i - prevM[pos][0]\r\n            while pos >= 0 and prevM[pos][1] == 0:\r\n                pos -= 1\r\n        else:\r\n            if cnt[i] > 1:\r\n                prevM.append([i, cnt[i] - 1])\r\n                pos = len(prevM) - 1\r\n        i += 1\r\n    print()\r\n\r\nt = int(input())\r\nwhile t:\r\n    t -= 1\r\n    solve()",
    "prob_desc_created_at": "1640010900",
    "tags": [
        "constructive algorithms",
        "data structures",
        "dp",
        "greedy",
        "implementation",
        "math",
        "sortings"
    ],
    "hidden_unit_tests": ""
}