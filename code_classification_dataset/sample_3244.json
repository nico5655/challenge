{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\\n1 3\\n3 1\", \"3\\n1 4\\n2 2\\n4 1\", \"0\", \"3\\n1 6\\n2 3\\n6 1\"]",
    "src_uid": "eefea51c77b411640a3b92b9f2dd2cf1",
    "prob_desc_notes": null,
    "prob_desc_description": "Petya and Gena love playing table tennis. A single match is played according to the following rules: a match consists of multiple sets, each set consists of multiple serves. Each serve is won by one of the players, this player scores one point. As soon as one of the players scores t points, he wins the set; then the next set starts and scores of both players are being set to 0. As soon as one of the players wins the total of s sets, he wins the match and the match is over. Here s and t are some positive integer numbers.To spice it up, Petya and Gena choose new numbers s and t before every match. Besides, for the sake of history they keep a record of each match: that is, for each serve they write down the winner. Serve winners are recorded in the chronological order. In a record the set is over as soon as one of the players scores t points and the match is over as soon as one of the players wins s sets.Petya and Gena have found a record of an old match. Unfortunately, the sequence of serves in the record isn't divided into sets and numbers s and t for the given match are also lost. The players now wonder what values of s and t might be. Can you determine all the possible options?",
    "prob_desc_output_spec": "In the first line print a single number k — the number of options for numbers s and t. In each of the following k lines print two integers si and ti — the option for numbers s and t. Print the options in the order of increasing si, and for equal si — in the order of increasing ti.",
    "prob_desc_input_spec": "The first line contains a single integer n — the length of the sequence of games (1 ≤ n ≤ 105). The second line contains n space-separated integers ai. If ai = 1, then the i-th serve was won by Petya, if ai = 2, then the i-th serve was won by Gena. It is not guaranteed that at least one option for numbers s and t corresponds to the given record.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_049.jsonl",
    "code_uid": "0256af2ccd4a33d684999d1ce62674c2",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n1 2 1 2 1\", \"4\\n1 1 1 1\", \"4\\n1 2 1 2\", \"8\\n2 1 2 1 1 1 1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input())\n\nline = input().split()\nlst = []\nfor num in line:\n    lst.append(int(num))\n\ncnt1 = [0]\ncnt2 = [0]\nc1 = 0\nc2 = 0\n\nfor num in lst:\n    if num == 1:\n        c1 += 1\n        cnt1.append(c2)\n    else:\n        c2 += 1\n        cnt2.append(c1)\n\nw = lst[n - 1]\nans = []\nc1 = len(cnt1)\nc2 = len(cnt2)\nfor t in range(n, 0, -1):\n    s1 = 0\n    s2 = 0\n    i1 = 0\n    i2 = 0\n    l = 1\n    while i1 < c1 and i2 < c2:\n        if i1 + t >= c1 and i2 + t >= c2:\n            if l == 1 and l == w and i1 + 1 == c1 and s1 > s2:\n                ans.append((s1, t))\n            elif l == 2 and l == w and i2 + 1 == c2 and s2 > s1:\n                ans.append((s2, t))\n            break\n        elif i2 + t >= c2:\n            s1 += 1\n            l = 1\n            i1 += t\n            i2 = cnt1[i1]\n        elif i1 + t >= c1:\n            s2 += 1\n            l = 2\n            i2 += t\n            i1 = cnt2[i2]\n        else:\n            if cnt1[i1 + t] < i2 + t:\n                s1 += 1\n                l = 1\n                i1 += t\n                i2 = cnt1[i1]\n            else:\n                s2 += 1\n                l = 2\n                i2 += t\n                i1 = cnt2[i2]\n\nans.sort()\n\nprint(int(len(ans)))\nfor line in ans:\n    print(str(line[0]) + ' ' + str(line[1]))\n",
    "prob_desc_created_at": "1418833800",
    "tags": [
        "binary search"
    ],
    "hidden_unit_tests": ""
}