{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"23\", \"12\"]",
    "src_uid": "ebb9e236b6370a9cba9ffcd77fe4c97e",
    "prob_desc_notes": "NoteIn the first sample, it is optimal to draw edges between the points (1,2), (1,4), (3,4). These have costs 4, 14, 5, respectively.",
    "prob_desc_description": "Roy and Biv have a set of n points on the infinite number line.Each point has one of 3 colors: red, green, or blue.Roy and Biv would like to connect all the points with some edges. Edges can be drawn between any of the two of the given points. The cost of an edge is equal to the distance between the two points it connects.They want to do this in such a way that they will both see that all the points are connected (either directly or indirectly).However, there is a catch: Roy cannot see the color red and Biv cannot see the color blue.Therefore, they have to choose the edges in such a way that if all the red points are removed, the remaining blue and green points are connected (and similarly, if all the blue points are removed, the remaining red and green points are connected).Help them compute the minimum cost way to choose edges to satisfy the above constraints.",
    "prob_desc_output_spec": "Print a single integer, the minimum cost way to solve the problem.",
    "prob_desc_input_spec": "The first line will contain an integer n (1 ≤ n ≤ 300 000), the number of points. The next n lines will contain two tokens pi and ci (pi is an integer, 1 ≤ pi ≤ 109, ci is a uppercase English letter 'R', 'G' or 'B'), denoting the position of the i-th point and the color of the i-th point. 'R' means red, 'G' denotes green, and 'B' means blue. The positions will be in strictly increasing order.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_074.jsonl",
    "code_uid": "d81597db55642034bb306c93a41befcf",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n1 G\\n5 R\\n10 B\\n15 G\", \"4\\n1 G\\n2 R\\n3 B\\n10 G\"]",
    "exec_outcome": "PASSED",
    "source_code": "#! /usr/bin/env python3\n#------------------------------------------------\n# Author:    krishna\n# Created:   Fri Dec 29 23:04:38 IST 2017\n# File Name: f.py\n# USAGE:\n#       f.py\n# Description:\n# \n#------------------------------------------------\nimport sys\n\n\nn = int(sys.stdin.readline().rstrip())\n\nlocations = {\n    'R' : [],\n    'G' : [],\n    'B' : []\n}\n\nfor i in range(n):\n    (x, c) = sys.stdin.readline().rstrip().split()\n    locations[c].append(int(x))\n\n# for c in locations.keys():\n#     locations[c].sort()\n\ndef solve(locations):\n    count = 0\n    rPtr = 0\n    bPtr = 0\n    gPtr = 0\n\n    if (len(locations['G']) == 0):\n        if (len(locations['R'])):\n            count += locations['R'][-1] - locations['R'][0]\n        if (len(locations['B'])):\n            count += locations['B'][-1] - locations['B'][0]\n\n        return count\n\n    while (len(locations['G']) > gPtr):\n        # Eat predecessors\n        if (\n            (len(locations['R']) > rPtr)\n            and (locations['G'][gPtr] > locations['R'][rPtr])\n        ):\n            count += locations['G'][gPtr] - locations['R'][rPtr]\n            while (\n                (len(locations['R']) > rPtr)\n                and (locations['G'][gPtr] > locations['R'][rPtr])\n            ):\n                rPtr += 1\n\n        # Eat predecessors\n        if (\n            (len(locations['B']) > bPtr)\n            and (locations['G'][gPtr] > locations['B'][bPtr])\n        ):\n            count += locations['G'][gPtr] - locations['B'][bPtr]\n            while (\n                (len(locations['B']) > bPtr)\n                and (locations['G'][gPtr] > locations['B'][bPtr])\n            ):\n                bPtr += 1\n\n        # Eat last successors\n        if (len(locations['G']) == (gPtr + 1)):\n            if (len(locations['R']) > rPtr):\n                count += locations['R'][-1] - locations['G'][gPtr]\n\n            if (len(locations['B']) > bPtr):\n                count += locations['B'][-1] - locations['G'][gPtr]\n\n            return count\n\n        # Calc intervels\n        if (len(locations['G']) > (gPtr + 1)):\n            prevR = locations['G'][gPtr]\n            maxRd = 0\n            while (len(locations['R']) > rPtr):\n                if (locations['R'][rPtr] < locations['G'][gPtr + 1]):\n                    maxRd = max(maxRd, locations['R'][rPtr] - prevR)\n                    prevR = locations['R'][rPtr]\n                    rPtr += 1\n                else:\n                    break\n            maxRd = max(maxRd, locations['G'][gPtr + 1] - prevR)\n\n            prevB = locations['G'][gPtr]\n            maxBd = 0\n            while (len(locations['B']) > bPtr):\n                if (locations['B'][bPtr] < locations['G'][gPtr + 1]):\n                    maxBd = max(maxBd, locations['B'][bPtr] - prevB)\n                    prevB = locations['B'][bPtr]\n                    bPtr += 1\n                else:\n                    break\n            maxBd = max(maxBd, locations['G'][gPtr + 1] - prevB)\n\n            count += min(\n                2 * (locations['G'][gPtr + 1] - locations['G'][gPtr]),\n                (3 * (locations['G'][gPtr + 1] - locations['G'][gPtr])) - maxRd - maxBd\n            )\n\n            gPtr += 1\n\n    return count\n\nprint(solve(locations))\n",
    "prob_desc_created_at": "1514562000",
    "tags": [
        "implementation",
        "greedy",
        "graphs"
    ],
    "hidden_unit_tests": ""
}