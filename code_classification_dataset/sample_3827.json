{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\\nYES\\nNO\\nYES\"]",
    "src_uid": "712e6e228e8b7cedd9bf6b85cd35c0b7",
    "prob_desc_notes": "NoteIn the first test case, array $$$[1]$$$ is already a palindrome, so it's a kalindrome as well.In the second test case, we can choose $$$x = 2$$$, delete the second element, and obtain array $$$[1]$$$, which is a palindrome.In the third test case, it's impossible to obtain a palindrome.In the fourth test case, you can choose $$$x = 4$$$ and delete the fifth element, obtaining $$$[1, 4, 4, 1]$$$. You also can choose $$$x = 1$$$, delete the first and the fourth elements, and obtain $$$[4, 4, 4]$$$.",
    "prob_desc_description": "An array $$$[b_1, b_2, \\ldots, b_m]$$$ is a palindrome, if $$$b_i = b_{m+1-i}$$$ for each $$$i$$$ from $$$1$$$ to $$$m$$$. Empty array is also a palindrome.An array is called kalindrome, if the following condition holds: It's possible to select some integer $$$x$$$ and delete some of the elements of the array equal to $$$x$$$, so that the remaining array (after gluing together the remaining parts) is a palindrome. Note that you don't have to delete all elements equal to $$$x$$$, and you don't have to delete at least one element equal to $$$x$$$.For example :   $$$[1, 2, 1]$$$ is kalindrome because you can simply not delete a single element.  $$$[3, 1, 2, 3, 1]$$$ is kalindrome because you can choose $$$x = 3$$$ and delete both elements equal to $$$3$$$, obtaining array $$$[1, 2, 1]$$$, which is a palindrome.  $$$[1, 2, 3]$$$ is not kalindrome. You are given an array $$$[a_1, a_2, \\ldots, a_n]$$$. Determine if $$$a$$$ is kalindrome or not.",
    "prob_desc_output_spec": "For each test case, print YES if $$$a$$$ is kalindrome and NO otherwise. You can print each letter in any case.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the length of the array. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le n$$$) — elements of the array. It's guaranteed that the sum of $$$n$$$ over all test cases won't exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_084.jsonl",
    "code_uid": "af5a26ef3958b500a008cb330611fded",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n1\\n1\\n2\\n1 2\\n3\\n1 2 3\\n5\\n1 4 4 1 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\ninpu = sys.stdin.readline\r\nprin = sys.stdout.write\r\nfor _ in range(int(inpu())) :\r\n    n = int(inpu())\r\n    s = list(map(int, inpu().split(' ')))\r\n    num = -1\r\n    for i in range(n//2) :\r\n        if s[i] != s[n - i - 1]:\r\n            d1 = s[i]\r\n            d2 = s[n - i - 1]\r\n            num = i\r\n            break\r\n    if num == -1:\r\n        prin(\"YES\\n\")\r\n        continue\r\n    index1 = num\r\n    index2 = n - num - 1\r\n    op = 0\r\n    while 1 :        \r\n        if s[index1] != s[index2] :\r\n            while 1 :\r\n                if s[index1] == d1:\r\n                    index1 += 1\r\n                else:\r\n                    break\r\n            while 1 :\r\n                if s[index2] == d1:\r\n                    index2 -= 1\r\n                else:\r\n                    break\r\n            if s[index1] != s[index2] :\r\n                op = -1\r\n                break\r\n        if abs(index1 - index2) <= 1:\r\n            break\r\n        index1 += 1\r\n        index2 -= 1\r\n    if op != -1 :\r\n        prin(\"YES\\n\")\r\n        continue\r\n    if d1 == d2 :\r\n        prin(\"NO\\n\")\r\n        continue\r\n    index1 = num\r\n    index2 = n - num - 1\r\n    op = 0\r\n    while 1 :        \r\n        if s[index1] != s[index2] :\r\n            while 1 :\r\n                if s[index1] == d2:\r\n                    index1 += 1\r\n                else:\r\n                    break\r\n            while 1 :\r\n                if s[index2] == d2:\r\n                    index2 -= 1\r\n                else:\r\n                    break\r\n            if s[index1] != s[index2] :\r\n                op = -1\r\n                break\r\n        if abs(index1 - index2) <= 1:\r\n            break\r\n        index1 += 1\r\n        index2 -= 1\r\n    if op != -1 :\r\n        prin(\"YES\\n\")\r\n    else:\r\n        prin(\"NO\\n\")",
    "prob_desc_created_at": "1637678100",
    "tags": [
        "greedy",
        "two pointers"
    ],
    "hidden_unit_tests": ""
}