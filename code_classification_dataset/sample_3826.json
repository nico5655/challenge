{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"0\\n1\\n2\\n3\"]",
    "src_uid": "8c4a0a01c37fa1b7c507043ee6d93544",
    "prob_desc_notes": "NoteIn the first sample, the array $$$a$$$ is already good.In the second sample, it's enough to delete $$$1$$$, obtaining array $$$[4, 4, 5, 6]$$$, which is good.",
    "prob_desc_description": "Let's call an array of $$$k$$$ integers $$$c_1, c_2, \\ldots, c_k$$$ terrible, if the following condition holds:Let $$$AVG$$$ be the $$$\\frac{c_1 + c_2 + \\ldots + c_k}{k}$$$(the average of all the elements of the array, it doesn't have to be integer). Then the number of elements of the array which are bigger than $$$AVG$$$ should be strictly larger than the number of elements of the array which are smaller than $$$AVG$$$. Note that elements equal to $$$AVG$$$ don't count.For example $$$c = \\{1, 4, 4, 5, 6\\}$$$ is terrible because $$$AVG = 4.0$$$ and $$$5$$$-th and $$$4$$$-th elements are greater than $$$AVG$$$ and $$$1$$$-st element is smaller than $$$AVG$$$.Let's call an array of $$$m$$$ integers $$$b_1, b_2, \\ldots, b_m$$$ bad, if at least one of its non-empty subsequences is terrible, and good otherwise.You are given an array of $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$. Find the minimum number of elements that you have to delete from it to obtain a good array.An array is a subsequence of another array if it can be obtained from it by deletion of several (possibly, zero or all) elements.",
    "prob_desc_output_spec": "For each testcase, print the minimum number of elements that you have to delete from it to obtain a good array.",
    "prob_desc_input_spec": "The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. The description of test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$) — the size of $$$a$$$. The second line of each testcase contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$) — elements of array $$$a$$$. In each testcase for any $$$1 \\le i \\lt n$$$ it is guaranteed that $$$a_i \\le a_{i+1}$$$. It is guaranteed that the sum of $$$n$$$ over all testcases doesn't exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_084.jsonl",
    "code_uid": "1685b7530b86ed69b16a9bee6b9baf83",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n3\\n1 2 3\\n5\\n1 4 4 5 6\\n6\\n7 8 197860736 212611869 360417095 837913434\\n8\\n6 10 56026534 405137099 550504063 784959015 802926648 967281024\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\ninput = sys.stdin.buffer.readline \r\n\r\ndef finder(A, x, l, r):\r\n    if A[r] < x:\r\n        return r+1\r\n    if A[l] >= x:\r\n        return l\r\n    s = l \r\n    e = r\r\n    #A[s] < x <= A[e]\r\n    while s+1 < e:\r\n        m = (s+e)//2\r\n        if A[m] < x:\r\n            s, e = m, e\r\n        else:\r\n            s, e = s, m\r\n    return e\r\n        \r\ndef process(A):\r\n    n = len(A)\r\n    if n <= 2 or A[-1]==A[0]:\r\n        sys.stdout.write(f'0\\n')\r\n        return\r\n    answer = n-2\r\n    for s in range(n):\r\n        if s==0 or A[s] > A[s-1]:\r\n            entry = s\r\n            if s >= answer:\r\n                break\r\n            s1 = s+1\r\n            while s1+1 < n:\r\n                x = 2*A[s1]-A[s]\r\n                s2 = finder(A, x, s1+1, n-1)\r\n                entry+=(s2-s1-1)\r\n                if entry >= answer:\r\n                    break\r\n                s1 = s2\r\n            answer = min(answer, entry)\r\n    print(answer)\r\n    return\r\n\r\nt = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    A = [int(x) for x in input().split()]\r\n    process(A)",
    "prob_desc_created_at": "1637678100",
    "tags": [
        "binary search",
        "brute force",
        "greedy",
        "implementation",
        "math"
    ],
    "hidden_unit_tests": ""
}