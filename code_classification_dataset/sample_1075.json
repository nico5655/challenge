{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2 4 3 1\", \"-1\"]",
    "src_uid": "dc548fe1d8683b4b0ee4e0fa67638185",
    "prob_desc_notes": "NoteIn the first sample elements 4 and 3 are good because gcd(2, 4) = 2 &gt; 1 and gcd(3, 3) = 3 &gt; 1. Elements 2 and 1 are not good because gcd(1, 2) = 1 and gcd(4, 1) = 1. As there are exactly 2 good elements, the permutation is beautiful.The second sample has no beautiful permutations.",
    "prob_desc_description": "Levko loves permutations very much. A permutation of length n is a sequence of distinct positive integers, each is at most n.Let’s assume that value gcd(a, b) shows the greatest common divisor of numbers a and b. Levko assumes that element pi of permutation p1, p2, ... , pn is good if gcd(i, pi) &gt; 1. Levko considers a permutation beautiful, if it has exactly k good elements. Unfortunately, he doesn’t know any beautiful permutation. Your task is to help him to find at least one of them.",
    "prob_desc_output_spec": "In a single line print either any beautiful permutation or -1, if such permutation doesn’t exist. If there are multiple suitable permutations, you are allowed to print any of them.",
    "prob_desc_input_spec": "The single line contains two integers n and k (1 ≤ n ≤ 105, 0 ≤ k ≤ n).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1200,
    "file_name": "train_006.jsonl",
    "code_uid": "dd5732dfa6b81e62163d4f05ae1fefb4",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 2\", \"1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "n, k = map(int, input().split())\n\nif k == n:\n    print(-1)\nelse:\n    print(*([n - k] + list(range(1, n - k)) + list(range(n - k + 1, n + 1))))",
    "prob_desc_created_at": "1384102800",
    "tags": [
        "constructive algorithms",
        "number theory",
        "math"
    ],
    "hidden_unit_tests": ""
}