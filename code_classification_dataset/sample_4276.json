{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\\n3\\n3\\n319908071\"]",
    "src_uid": "4e9dfc5e988cebb9a92f0c0b7ec06981",
    "prob_desc_notes": "NoteFor the first test case, the two valid assignments are$$$0000\\\\ 0000\\\\ 0000$$$and$$$0000\\\\ 0010\\\\ 0000$$$",
    "prob_desc_description": "Omkar's most recent follower, Ajit, has entered the Holy Forest. Ajit realizes that Omkar's forest is an $$$n$$$ by $$$m$$$ grid ($$$1 \\leq n, m \\leq 2000$$$) of some non-negative integers. Since the forest is blessed by Omkar, it satisfies some special conditions:  For any two adjacent (sharing a side) cells, the absolute value of the difference of numbers in them is at most $$$1$$$.  If the number in some cell is strictly larger than $$$0$$$, it should be strictly greater than the number in at least one of the cells adjacent to it. Unfortunately, Ajit is not fully worthy of Omkar's powers yet. He sees each cell as a \"0\" or a \"#\". If a cell is labeled as \"0\", then the number in it must equal $$$0$$$. Otherwise, the number in it can be any nonnegative integer.Determine how many different assignments of elements exist such that these special conditions are satisfied. Two assignments are considered different if there exists at least one cell such that the numbers written in it in these assignments are different. Since the answer may be enormous, find the answer modulo $$$10^9+7$$$.",
    "prob_desc_output_spec": "For each test case, print one integer: the number of valid configurations modulo $$$10^9+7$$$.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\leq t \\leq 100$$$). Description of the test cases follows. The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 2000, nm \\geq 2$$$) â€“ the dimensions of the forest. $$$n$$$ lines follow, each consisting of one string of $$$m$$$ characters. Each of these characters is either a \"0\" or a \"#\". It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2000$$$ and the sum of $$$m$$$ over all test cases does not exceed $$$2000$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_094.jsonl",
    "code_uid": "bd602f37f0c4294d99c66cbd4a7f40b9",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n3 4\\n0000\\n00#0\\n0000\\n2 1\\n#\\n#\\n1 2\\n##\\n6 29\\n#############################\\n#000##0###0##0#0####0####000#\\n#0#0##00#00##00####0#0###0#0#\\n#0#0##0#0#0##00###00000##00##\\n#000##0###0##0#0##0###0##0#0#\\n#############################\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\n\ninput = sys.stdin.readline\ninf = float('inf')\n\n\ndef getInt():\n    return int(input())\n\n\ndef getStr():\n    return input().strip()\n\n\ndef getList(split=True):\n    s = getStr()\n    if split:\n        s = s.split()\n    return map(int, s)\n\n\nt = getInt()\n# t = 1\n\nM = 10 ** 9 + 7\n\n\ndef solve():\n    n, m = getList()\n    # we can figure out the solution by fixed the 0's in some certain cells , then for each subset of 0, caculate how many assignments such that the chosen cell is 0 and the other must be non-negative\n    # It turns out for a particular subset there is EXACTLy one solution for it\n    # proof\n    # multi bfs, because all other cells must be nonegtive, any adjacents to 0 must be 1, this is equivalent for the first turn of multi bfs\n    # can we assign any other cell to 1 ? no, because if that cell is assign 1 then there's must be a cell neighbor to it is 0, but if there is a 0 neighbor to it, then it should be makred before\n    # from distance 2, 3 4, 5 .. we could prove the same way\n    # i.e while bfs for distance 2 done , if we assign any other unvisted cell 0 1 then there is no possible solution since ther emust be either cell 0 or 1 next to it, but if there were it should be mared before\n    a = \"\".join(getStr() for _ in range(n))\n    res = a.count(\"#\")\n    res = pow(2, res, M)\n    res -= '0' not in a\n    print(res % M)\n\n\nfor _ in range(t):\n    solve()\n",
    "prob_desc_created_at": "1622990100",
    "tags": [
        "combinatorics",
        "graphs",
        "math",
        "shortest paths"
    ],
    "hidden_unit_tests": ""
}