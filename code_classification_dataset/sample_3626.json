{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2 2 2 3\", \"2 3 6 9\", \"-1\"]",
    "src_uid": "1ec5d3bafda09d0230fe14a6029ce421",
    "prob_desc_notes": null,
    "prob_desc_description": "Rats have bred to hundreds and hundreds in the basement of the store, owned by Vasily Petrovich. Vasily Petrovich may have not noticed their presence, but they got into the habit of sneaking into the warehouse and stealing food from there. Vasily Petrovich cannot put up with it anymore, he has to destroy the rats in the basement. Since mousetraps are outdated and do not help, and rat poison can poison inattentive people as well as rats, he chose a radical way: to blow up two grenades in the basement (he does not have more).In this problem, we will present the shop basement as a rectangular table of n × m cells. Some of the cells are occupied by walls, and the rest of them are empty. Vasily has been watching the rats and he found out that at a certain time they go to sleep, and all the time they sleep in the same places. He wants to blow up a grenade when this convenient time comes. On the plan of his basement, he marked cells with sleeping rats in them. Naturally, these cells are not occupied by walls.Grenades can only blow up in a cell that is not occupied by a wall. The blast wave from a grenade distributes as follows. We assume that the grenade blast occurs at time 0. During this initial time only the cell where the grenade blew up gets 'clear'. If at time t some cell is clear, then at time t + 1 those side-neighbouring cells which are not occupied by the walls get clear too (some of them could have been cleared before). The blast wave distributes for exactly d seconds, then it dies immediately.    An example of a distributing blast wave: Picture 1 shows the situation before the blast, and the following pictures show \"clear\" cells by time 0,1,2,3 and 4. Thus, the blast wave on the picture distributes for d = 4 seconds. Vasily Petrovich wonders, whether he can choose two cells to blast the grenades so as to clear all cells with sleeping rats. Write the program that finds it out.",
    "prob_desc_output_spec": "If it is impossible to blow up all cells with sleeping rats, print a single integer -1. Otherwise, print four space-separated integers r1, c1, r2, c2, that mean that one grenade should go off in cell (r1, c1), and the other one — in cell (r2, c2).  Consider the table rows numbered from top to bottom from 1 to n and the table columns — from left to right from 1 to m. As r1 and r2 represent the row numbers, and c1 and c2 represent the column numbers in the table, they should fit the limits: 1 ≤ r1, r2 ≤ n, 1 ≤ c1, c2 ≤ m. It is forbidden to blow a grenade twice in the same cell. The blast waves of the grenades can intersect. It is possible that one grenade blast destroys no rats, and the other one destroys all of them.",
    "prob_desc_input_spec": "The first line contains three integers n, m and d, separated by single spaces (4 ≤ n, m ≤ 1000, 1 ≤ d ≤ 8). Next n lines contain the table that represents the basement plan. Each row of the table consists of m characters. Character \"X\" means that the corresponding cell is occupied by the wall, character \".\" represents a empty cell, character \"R\" represents a empty cell with sleeping rats.  It is guaranteed that the first and the last row, as well as the first and the last column consist of characters \"X\". The plan has at least two empty cells. There is at least one cell with sleeping rats.",
    "prob_desc_output_to": "output.txt",
    "prob_desc_input_from": "input.txt",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_074.jsonl",
    "code_uid": "291327f574e211d9e246dee3b99b547f",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 4 1\\nXXXX\\nXR.X\\nX.RX\\nXXXX\", \"9 14 5\\nXXXXXXXXXXXXXX\\nX....R...R...X\\nX..R.........X\\nX....RXR..R..X\\nX..R...X.....X\\nXR.R...X.....X\\nX....XXR.....X\\nX....R..R.R..X\\nXXXXXXXXXXXXXX\", \"7 7 1\\nXXXXXXX\\nX.R.R.X\\nX.....X\\nX..X..X\\nX..R..X\\nX....RX\\nXXXXXXX\"]",
    "exec_outcome": "PASSED",
    "source_code": "#! /usr/bin/env python2\n \nimport Queue\n \ninFile = open(\"input.txt\", 'r')\noutFile = open(\"output.txt\", 'w')\n \nn, m, d = map(int, inFile.readline().strip().split(' '))\nmat = map(lambda x: x.strip(), inFile.readlines())\nmv = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n \ndef findRats():\n    ret = []\n    for i in xrange(n):\n        for j in xrange(m):\n            if mat[i][j] == 'R':\n                ret.append((i, j))\n    return ret\n \ndef bfs(bgn, mat, d):\n    q = Queue.Queue()\n    q.put(bgn)\n    c = {bgn:0}\n    ret = set()\n    while not q.empty():\n        now = q.get()\n        ret.add(now)\n        if c[now] < d:\n            for mi in mv:\n                then = (now[0] + mi[0], now[1] + mi[1])\n                if then[0] < n and then[0] >= 0 and \\\n                        then[1] < m and then[1] >= 0:\n                    if mat[then[0]][then[1]] != 'X':\n                        if then not in c:\n                            q.put(then)\n                            c[then] = c[now] + 1\n    return ret\n \ndef find(firsts, locs):\n    for first in firsts:\n        others = []\n        for loc in locs:\n            if first not in loc:\n                others.append(loc)\n        if len(others) == 0:\n            ans = [first]\n            for i in xrange(n):\n                for j in xrange(m):\n                    if (i, j) != first:\n                        if mat[i][j] != 'X':\n                            ans.append((i, j))\n                            return ans\n            return -1\n        seconds = reduce(lambda x, y: x & y, others)\n        for second in seconds:\n            if second != first:\n                return (first, second)\n    return -1\n \nrats = findRats()\nif len(rats) > ((d + 1) * 2) ** 2:\n    outFile.write('-1\\n')\nelse:\n    locs = []\n    for r in rats:\n        locs.append(bfs(r, mat, d))\n    ans = find(locs[0], locs[1:])\n    if ans == -1:\n        outFile.write('-1\\n')\n    else:\n        outFile.write(\"{:d} {:d} {:d} {:d}\". \\\n                          format(ans[0][0] + 1,\n                                 ans[0][1] + 1,\n                                 ans[1][0] + 1, \n                                 ans[1][1] + 1))\n",
    "prob_desc_created_at": "1355047200",
    "tags": [
        "graphs",
        "shortest paths",
        "implementation",
        "dfs and similar",
        "brute force"
    ],
    "hidden_unit_tests": ""
}