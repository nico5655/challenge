{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\\n4 1 2\\n2 3 3\\n-1\\n4\\n1 2 4\\n2 4 5\\n2 3 3\\n4 5 1\"]",
    "src_uid": "b6fb4d868e3f496466746f5e776ae2cc",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given an array $$$a$$$ consisting of $$$n$$$ positive integers, numbered from $$$1$$$ to $$$n$$$. You can perform the following operation no more than $$$3n$$$ times:  choose three integers $$$i$$$, $$$j$$$ and $$$x$$$ ($$$1 \\le i, j \\le n$$$; $$$0 \\le x \\le 10^9$$$);  assign $$$a_i := a_i - x \\cdot i$$$, $$$a_j := a_j + x \\cdot i$$$. After each operation, all elements of the array should be non-negative.Can you find a sequence of no more than $$$3n$$$ operations after which all elements of the array are equal?",
    "prob_desc_output_spec": "For each test case print the answer to it as follows:   if there is no suitable sequence of operations, print $$$-1$$$;  otherwise, print one integer $$$k$$$ ($$$0 \\le k \\le 3n$$$) — the number of operations in the sequence. Then print $$$k$$$ lines, the $$$m$$$-th of which should contain three integers $$$i$$$, $$$j$$$ and $$$x$$$ ($$$1 \\le i, j \\le n$$$; $$$0 \\le x \\le 10^9$$$) for the $$$m$$$-th operation.  If there are multiple suitable sequences of operations, print any of them. Note that you don't have to minimize $$$k$$$.",
    "prob_desc_input_spec": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. Then $$$t$$$ test cases follow. The first line of each test case contains one integer $$$n$$$ ($$$1 \\le n \\le 10^4$$$) — the number of elements in the array. The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^5$$$) — the elements of the array. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^4$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_012.jsonl",
    "code_uid": "66e0e33abcefa54d09a178184e2270f8",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n4\\n2 16 4 18\\n6\\n1 2 3 4 5 6\\n5\\n11 19 1 1 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import Counter, defaultdict, deque\nimport bisect\nimport heapq\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math\nimport random\n \n# sys.stdin = open('input')\n \ndef mod(x, y, mod):\n    re = 1\n    now = x\n    while y:\n        if y&1:\n            re *= now\n            re %= mod\n        y >>= 1\n        now = (now*now)%mod\n    return re\n \ndef inp(force_list=False):\n    re = map(int, raw_input().split())\n    if len(re) == 1 and not force_list:\n        return re[0]\n    return re\n \ndef inst():\n    return raw_input().strip()\n \ndef gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n \ndef ggcd(x, y):\n    if y:\n        return ggcd(y, x%y)\n    return x\n \nMOD = int(1e9+7)\n \n \ndef my_main():\n    T = inp()\n    for _ in range(T):\n        n = inp()\n        ans = []\n        da = inp(True)\n        sm = sum(da)\n        if sm%n != 0:\n            print -1\n            continue\n        ta = sm / n\n        for i in range(2, n+1):\n            less = (i - da[i-1]%i)%i\n            ans.append(\"%d %d %d\" %(1, i, less))\n            x = (da[i-1]+less)/i\n            ans.append(\"%d %d %d\" %(i, 1, x))\n        for i in range(2, n+1):\n            ans.append(\"%d %d %d\" %(1, i, ta))\n        print len(ans)\n        print '\\n'.join(ans)\nmy_main()",
    "prob_desc_created_at": "1601219100",
    "tags": [
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "hidden_unit_tests": ""
}