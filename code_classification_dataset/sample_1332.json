{
    "prob_desc_time_limit": "1.5 seconds",
    "prob_desc_sample_outputs": "[\"4 6 8 1\\n4 9 9 9\\n4 10 10 65\\n1 4 4 4\\n1 1\\n1 1\"]",
    "src_uid": "df6ee0d8bb25dc2040adf1f115f4a83b",
    "prob_desc_notes": null,
    "prob_desc_description": "Sasha likes investigating different math objects, for example, magic squares. But Sasha understands that magic squares have already been studied by hundreds of people, so he sees no sense of studying them further. Instead, he invented his own type of square — a prime square. A square of size $$$n \\times n$$$ is called prime if the following three conditions are held simultaneously:   all numbers on the square are non-negative integers not exceeding $$$10^5$$$;  there are no prime numbers in the square;  sums of integers in each row and each column are prime numbers. Sasha has an integer $$$n$$$. He asks you to find any prime square of size $$$n \\times n$$$. Sasha is absolutely sure such squares exist, so just help him!",
    "prob_desc_output_spec": "For each test case print $$$n$$$ lines, each containing $$$n$$$ integers — the prime square you built. If there are multiple answers, print any.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10$$$) — the number of test cases. Each of the next $$$t$$$ lines contains a single integer $$$n$$$ ($$$2 \\le n \\le 100$$$) — the required size of a square.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 900,
    "file_name": "train_008.jsonl",
    "code_uid": "efe8594d7ba75ff3e580a1fb2d1f0840",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n4\\n2\"]",
    "exec_outcome": "PASSED",
    "source_code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,copy,functools\n# import time,random,resource\n\n# sys.setrecursionlimit(10**6)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 10**9+7\nmod2 = 998244353\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(): return [list(map(int, l.split())) for l in sys.stdin.readlines()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\ndef pe(s): return print(str(s), file=sys.stderr)\ndef JA(a, sep): return sep.join(map(str, a))\ndef JAA(a, s, t): return s.join(t.join(map(str, b)) for b in a)\ndef IF(c, t, f): return t if c else f\ndef YES(c): return IF(c, \"YES\", \"NO\")\ndef Yes(c): return IF(c, \"Yes\", \"No\")\n\n\nclass Prime():\n    def __init__(self, n):\n        self.M = m = int(math.sqrt(n)) + 10\n        self.A = a = [True] * m\n        a[0] = a[1] = False\n        self.T = t = [2]\n        for j in range(4, m, 2):\n            a[j] = False\n        for i in range(3, m, 2):\n            if not a[i]:\n                continue\n            t.append(i)\n            for j in range(i*i,m,i):\n                a[j] = False\n        self.ds_memo = {}\n        self.ds_memo[1] = set([1])\n\n    def is_prime(self, n):\n        return self.A[n]\n\n\ndef main():\n    t = I()\n\n    pr = Prime(10**10)\n    rr = []\n    for _ in range(t):\n        n = I()\n\n        ii = pp = None\n        for i in range(1, 10**3):\n            t = i * (n-1)\n            for p in pr.T:\n                if p > t and not pr.is_prime(p-t):\n                    pp = p - t\n                    ii = i\n                    break\n            if pp:\n                break\n\n        a = [[ii] * n for _ in range(n)]\n        for i in range(n):\n            a[i][i] = pp\n\n        rr.append(JAA(a, \"\\n\", \" \"))\n\n    return JA(rr, \"\\n\")\n\n\nprint(main())\n\n\n",
    "prob_desc_created_at": "1603548300",
    "tags": [
        "constructive algorithms",
        "math"
    ],
    "hidden_unit_tests": ""
}