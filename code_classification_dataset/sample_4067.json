{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"0\\n1\\n2\\n1\\n2\\n4\\n6\"]",
    "src_uid": "1f520f2796094b0f0c4e11e231f9ca8c",
    "prob_desc_notes": "NoteIn the first test case, Luke can set $$$v$$$ to $$$5$$$ before he starts to walk. And he can walk straight to eat every piles of food without changing $$$v$$$.In the second test case, Luke can set $$$v$$$ to $$$3$$$ before he starts to walk. And he could change $$$v$$$ to $$$10$$$ before he eats the second pile. After that, he can walk straight to eat remaining food without changing $$$v$$$.In the fourth test case, Luke can set $$$v$$$ to $$$3$$$ before he starts to walk. And he could change $$$v$$$ to $$$8$$$ before he eats the sixth pile. After that, he can walk straight to eat remaining food without changing $$$v$$$.In the fifth test case, Luke can set $$$v$$$ to $$$4$$$ before he starts to walk. And he could change $$$v$$$ to $$$6$$$ before he eats the fourth pile. Then he could change $$$v$$$ to $$$12$$$ before he eats the seventh pile. After that, he can walk straight to eat remaining food without changing $$$v$$$.",
    "prob_desc_description": "Luke likes to eat. There are $$$n$$$ piles of food aligned in a straight line in front of him. The $$$i$$$-th pile contains $$$a_i$$$ units of food. Luke will walk from the $$$1$$$-st pile towards the $$$n$$$-th pile, and he wants to eat every pile of food without walking back. When Luke reaches the $$$i$$$-th pile, he can eat that pile if and only if $$$|v - a_i| \\leq x$$$, where $$$x$$$ is a fixed integer, and $$$v$$$ is Luke's food affinity.Before Luke starts to walk, he can set $$$v$$$ to any integer. Also, for each $$$i$$$ ($$$1 \\leq i \\leq n$$$), Luke can change his food affinity to any integer before he eats the $$$i$$$-th pile.Find the minimum number of changes needed to eat every pile of food.Note that the initial choice for $$$v$$$ is not considered as a change.",
    "prob_desc_output_spec": "For each test case, output an integer on a separate line, which is the minimum number of changes needed.",
    "prob_desc_input_spec": "The input consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases. The description of test cases follows. For each test case, the first line contains two integers, $$$n, x$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$, $$$1 \\leq x \\leq 10^9$$$) — the number of piles, and the maximum difference between the size of a pile and Luke's food affinity, such that Luke can eat the pile. The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots , a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$). It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1000,
    "file_name": "train_089.jsonl",
    "code_uid": "ff35c8b7ffed4c8ba06106613c421856",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7\\n\\n5 3\\n\\n3 8 5 6 7\\n\\n5 3\\n\\n3 10 9 8 7\\n\\n12 8\\n\\n25 3 3 17 8 6 1 16 15 25 17 23\\n\\n10 2\\n\\n1 2 3 4 5 6 7 8 9 10\\n\\n8 2\\n\\n2 4 6 8 6 4 12 14\\n\\n8 2\\n\\n2 7 8 9 6 13 21 28\\n\\n15 5\\n\\n11 4 13 23 7 10 5 21 20 11 17 5 29 16 11\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\ninput = sys.stdin.readline\r\nt=int(input())\r\nwhile t>0:\r\n    n,x=map(int,input().split())\r\n    l=list(map(int,input().split()))\r\n    c=0\r\n    max=l[0]\r\n    min=l[0]\r\n    for i in l[1:]:\r\n        if i>max:\r\n            max=i\r\n        if i<min:\r\n            min=i\r\n        if max-min>2*x:\r\n            c+=1\r\n            max=min=i\r\n    sys.stdout.write(str(c) + \"\\n\")\r\n    t-=1",
    "prob_desc_created_at": "1659276300",
    "tags": [
        "brute force",
        "greedy",
        "implementation"
    ],
    "hidden_unit_tests": ""
}