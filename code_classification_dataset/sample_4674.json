{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"3\\n19 11\\n15 9\\n3 7\", \"-1\", \"1\\n15 8\", \"-1\"]",
    "src_uid": "d1e4269be1f81875c163c15a0759df88",
    "prob_desc_notes": "NoteIn the first sample let's consider the array $$$t$$$ for each pair:   $$$(19,\\, 11)$$$: $$$t = [8, 3, 2, 1]$$$;  $$$(15,\\, 9)$$$: $$$t = [6, 3]$$$;  $$$(3,\\, 7)$$$: $$$t = [1]$$$. So in total $$$t = [8, 3, 2, 1, 6, 3, 1]$$$, which is the same as the input $$$t$$$ (up to a permutation).In the second test case it is impossible to find such array $$$p$$$ of pairs that all integers are not greater than $$$10$$$ and $$$t = [7, 1]$$$In the third test case for the pair $$$(15,\\, 8)$$$ array $$$t$$$ will be $$$[7, 1]$$$.",
    "prob_desc_description": "Let's consider Euclid's algorithm for finding the greatest common divisor, where $$$t$$$ is a list:function Euclid(a, b):    if a &lt; b:        swap(a, b)    if b == 0:        return a    r = reminder from dividing a by b    if r &gt; 0:        append r to the back of t    return Euclid(b, r)There is an array $$$p$$$ of pairs of positive integers that are not greater than $$$m$$$. Initially, the list $$$t$$$ is empty. Then the function is run on each pair in $$$p$$$. After that the list $$$t$$$ is shuffled and given to you.You have to find an array $$$p$$$ of any size not greater than $$$2 \\cdot 10^4$$$ that produces the given list $$$t$$$, or tell that no such array exists.",
    "prob_desc_output_spec": "  If the answer does not exist, output $$$-1$$$.  If the answer exists, in the first line output $$$k$$$ ($$$1 \\le k \\le 2 \\cdot 10^4$$$) — the size of your array $$$p$$$, i. e. the number of pairs in the answer. The $$$i$$$-th of the next $$$k$$$ lines should contain two integers $$$a_i$$$ and $$$b_i$$$ ($$$1 \\le a_i, b_i \\le m$$$) — the $$$i$$$-th pair in $$$p$$$. If there are multiple valid answers you can output any of them.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n \\le 10^3$$$, $$$1 \\le m \\le 10^9$$$) — the length of the array $$$t$$$ and the constraint for integers in pairs. The second line contains $$$n$$$ integers $$$t_1, t_2, \\ldots, t_n$$$ ($$$1 \\le t_i \\le m$$$) — the elements of the array $$$t$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2800,
    "file_name": "train_103.jsonl",
    "code_uid": "5d2a0f28f67fcbeea892ef652a817c55",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7 20\\n1 8 1 6 3 2 3\", \"2 10\\n7 1\", \"2 15\\n1 7\", \"1 1000000000\\n845063470\"]",
    "exec_outcome": "PASSED",
    "source_code": "# import io,os\r\n# read = io.BytesIO(os.read(0, os.fstat(0).st_size))\r\n# I = lambda: [*map(int, read.readline().split())]\r\n\r\nimport sys\r\nI=lambda:[*map(int,sys.stdin.readline().split())]\r\n\r\nn, m = I()\r\nt = I()\r\nbad = []\r\nfor guy in t:\r\n\tif m < 2 * guy + 1:\r\n\t\tprint(-1)\r\n\t\texit()\r\n\telif m < 3 * guy:\r\n\t\tbad.append(guy)\r\n\r\nout = []\r\ncounts = {}\r\nfor guy in t:\r\n\tif guy in counts:\r\n\t\tcounts[guy] += 1\r\n\telse:\r\n\t\tcounts[guy] = 1\r\n\r\nfor guy in bad:\r\n\tcounts[guy] -= 1\r\n\tbiggest = 0\r\n\tfor boi in counts:\r\n\t\tif counts[boi] > 0 and guy % boi == 0 and boi + 2 * guy <= m:\r\n\t\t\tbiggest = boi\r\n\tif biggest == 0:\r\n\t\tprint(-1)\r\n\t\texit()\r\n\telse:\r\n\t\tcounts[biggest] -= 1\r\n\t\tout.append((guy + biggest, 2 * guy + biggest))\r\n\r\nfor guy in counts:\r\n\tfor i in range(counts[guy]):\r\n\t\tout.append((2 * guy, 3 * guy))\r\nprint(len(out))\r\nfor guy in out:\r\n\tprint(*guy)",
    "prob_desc_created_at": "1652970900",
    "tags": [
        "constructive algorithms",
        "flows",
        "graph matchings",
        "math",
        "number theory"
    ],
    "hidden_unit_tests": ""
}