{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\\n0\\n4\\n1000000000\\n1\\n1\\n1\\n5\\n0\"]",
    "src_uid": "e6eb839ef4e688796050b34f1ca599a5",
    "prob_desc_notes": null,
    "prob_desc_description": "Polycarp has $$$x$$$ of red and $$$y$$$ of blue candies. Using them, he wants to make gift sets. Each gift set contains either $$$a$$$ red candies and $$$b$$$ blue candies, or $$$a$$$ blue candies and $$$b$$$ red candies. Any candy can belong to at most one gift set.Help Polycarp to find the largest number of gift sets he can create.For example, if $$$x = 10$$$, $$$y = 12$$$, $$$a = 5$$$, and $$$b = 2$$$, then Polycarp can make three gift sets:   In the first set there will be $$$5$$$ red candies and $$$2$$$ blue candies;  In the second set there will be $$$5$$$ blue candies and $$$2$$$ red candies;  In the third set will be $$$5$$$ blue candies and $$$2$$$ red candies. Note that in this example there is one red candy that Polycarp does not use in any gift set.",
    "prob_desc_output_spec": "For each test case, output one number — the maximum number of gift sets that Polycarp can make.",
    "prob_desc_input_spec": "The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$). Then $$$t$$$ test cases follow. Each test case consists of a single string containing four integers $$$x$$$, $$$y$$$, $$$a$$$, and $$$b$$$ ($$$1 \\le x, y, a, b \\le 10^9$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_097.jsonl",
    "code_uid": "fcc75af6236e13ce985d54177bc43d74",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"9\\n10 12 2 5\\n1 1 2 2\\n52 311 13 27\\n1000000000 1000000000 1 1\\n1000000000 1 1 1000000000\\n1 1000000000 1000000000 1\\n1 2 1 1\\n7 8 1 2\\n4 1 2 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "import math\nimport sys\ninput = sys.stdin.readline\nt = int(input())\n\n\ndef getList():\n    return map(int, input().split())\n\n\ndef solve():\n    x, y, a, b = getList()\n    if a > b:\n        a, b = b, a\n    if a == b:\n        print(min(x, y) // a)\n    else:\n        l = 0\n        r = (x+y) // (a+b)\n        while l < r:\n            m = l+r+1 >> 1\n            R = (x-m*a) // (b-a)\n            L = math.ceil((y-m*b) / (a-b))\n            # [0,m] and [L,R] instersect\n            if L > m or R < 0 or L > R:\n                r = m - 1\n            else:\n                l = m\n        print(l)\n    # 2 + n * 1 <= 4\n    # 3 - n <= 1\n    # m set a,b and n set b,a\n    # m * a + n * b <= x\n    # m * b + n * a <= y\n    # max m + n\n    # (m+n) * (a+b) <= x + y\n    # res = min((x+y) / (a+b), )\n    # (s-n) * a + n * b <= x\n\n    # s * a - n * a + n * b <= x\n    # s * a + n * (b-a) <= x (1)\n\n    # m * a + (s-m) * b <= x\n    # m * (a-b) + s * b <= x\n\n    # (s-n) * b + n * a <= y\n    # s * b  + n * (a-b) <= y (1)\n\n    # m * b + (s-m) * a <= y\n    # m * (b-a) + s * a <=y\n\n    # 2 * s * a + s * (b-a) <= x + y\n\n\nfor _ in range(t):\n    solve()\n",
    "prob_desc_created_at": "1623335700",
    "tags": [
        "binary search",
        "greedy",
        "math",
        "ternary search"
    ],
    "hidden_unit_tests": ""
}