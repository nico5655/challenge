{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"1\\n6\\n95\\n20\\n28208137\\n48102976088\"]",
    "src_uid": "c9d57c590f4fe99e4a41f7fce1a8e513",
    "prob_desc_notes": "NoteThe string $$$S$$$ is equal to 0110100110010110....In the first test case, $$$S_0$$$ is \"0\", and $$$S_1$$$ is \"1\". The Hamming distance between the two strings is $$$1$$$.In the second test case, $$$S_0 S_1 \\ldots S_9$$$ is \"0110100110\", and $$$S_5 S_6 \\ldots S_{14}$$$ is \"0011001011\". The Hamming distance between the two strings is $$$6$$$.",
    "prob_desc_description": "Let $$$S$$$ be the Thue-Morse sequence. In other words, $$$S$$$ is the $$$0$$$-indexed binary string with infinite length that can be constructed as follows:   Initially, let $$$S$$$ be \"0\".  Then, we perform the following operation infinitely many times: concatenate $$$S$$$ with a copy of itself with flipped bits.For example, here are the first four iterations:  Iteration$$$S$$$ before iteration$$$S$$$ before iteration with flipped bitsConcatenated $$$S$$$1010120110011030110100101101001401101001100101100110100110010110$$$\\ldots$$$$$$\\ldots$$$$$$\\ldots$$$$$$\\ldots$$$  You are given two positive integers $$$n$$$ and $$$m$$$. Find the number of positions where the strings $$$S_0 S_1 \\ldots S_{m-1}$$$ and $$$S_n S_{n + 1} \\ldots S_{n + m - 1}$$$ are different. ",
    "prob_desc_output_spec": "For each testcase, output a non-negative integer — the Hamming distance between the two required strings.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line of the input contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. The description of the test cases follows. The first and only line of each test case contains two positive integers, $$$n$$$ and $$$m$$$ respectively ($$$1 \\leq n,m \\leq 10^{18}$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2500,
    "file_name": "train_097.jsonl",
    "code_uid": "42b6606c0235388583e41b2b843fd9c5",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n\\n1 1\\n\\n5 10\\n\\n34 211\\n\\n73 34\\n\\n19124639 56348772\\n\\n12073412269 96221437021\"]",
    "exec_outcome": "PASSED",
    "source_code": "from functools import cache\r\n\r\ndef par(x):\r\n    cnt = 0\r\n    while x:\r\n        cnt += 1\r\n        x &= x - 1\r\n    return cnt & 1\r\n\r\n@cache\r\ndef solve(n, m):\r\n    if m == 0:\r\n        return 0\r\n    if m & 1:\r\n        return solve(n, m - 1) + int(par(m - 1) != par(n + m - 1))\r\n    if n & 1:\r\n        return m - solve(n // 2, m // 2) - solve(n // 2 + 1, m // 2)\r\n    else:\r\n        return 2 * solve(n // 2, m // 2)\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    n, k = map(int, input().split())\r\n    print(solve(n, k))\r\n",
    "prob_desc_created_at": "1663934700",
    "tags": [
        "bitmasks",
        "divide and conquer",
        "dp",
        "math"
    ],
    "hidden_unit_tests": ""
}