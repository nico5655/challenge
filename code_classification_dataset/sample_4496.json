{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1 1 0 2 3 2 2 1 3 3\\n4 2 1 3\\n1\\n0 0 1 1 0 1 1 1 0 1 1 1 0\\n2 1 2 2 1 1 1 1 2 1 0 2 2\\n1 1 3 2 1 3 3 1 2 2 3 2 0\"]",
    "src_uid": "98aca7d5bf74c7787bf2159770054297",
    "prob_desc_notes": "NoteIn the first test case, the answer is shown in the figure in the statement. The red color has number $$$1$$$, the blue color — $$$2$$$, the green — $$$3$$$.",
    "prob_desc_description": "This problem is an extension of the problem \"Wonderful Coloring - 1\". It has quite many differences, so you should read this statement completely.Recently, Paul and Mary have found a new favorite sequence of integers $$$a_1, a_2, \\dots, a_n$$$. They want to paint it using pieces of chalk of $$$k$$$ colors. The coloring of a sequence is called wonderful if the following conditions are met:  each element of the sequence is either painted in one of $$$k$$$ colors or isn't painted;  each two elements which are painted in the same color are different (i. e. there's no two equal values painted in the same color);  let's calculate for each of $$$k$$$ colors the number of elements painted in the color — all calculated numbers must be equal;  the total number of painted elements of the sequence is the maximum among all colorings of the sequence which meet the first three conditions. E. g. consider a sequence $$$a=[3, 1, 1, 1, 1, 10, 3, 10, 10, 2]$$$ and $$$k=3$$$. One of the wonderful colorings of the sequence is shown in the figure.    The example of a wonderful coloring of the sequence $$$a=[3, 1, 1, 1, 1, 10, 3, 10, 10, 2]$$$ and $$$k=3$$$. Note that one of the elements isn't painted. Help Paul and Mary to find a wonderful coloring of a given sequence $$$a$$$.",
    "prob_desc_output_spec": "Output $$$t$$$ lines, each of them must contain a description of a wonderful coloring for the corresponding test case. Each wonderful coloring must be printed as a sequence of $$$n$$$ integers $$$c_1, c_2, \\dots, c_n$$$ ($$$0 \\le c_i \\le k$$$) separated by spaces where   $$$c_i=0$$$, if $$$i$$$-th element isn't painted;  $$$c_i&gt;0$$$, if $$$i$$$-th element is painted in the $$$c_i$$$-th color.  Remember that you need to maximize the total count of painted elements for the wonderful coloring. If there are multiple solutions, print any one.",
    "prob_desc_input_spec": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10000$$$) — the number of test cases. Then $$$t$$$ test cases follow. Each test case consists of two lines. The first one contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 2\\cdot10^5$$$, $$$1 \\le k \\le n$$$) — the length of a given sequence and the number of colors, respectively. The second one contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le n$$$). It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_099.jsonl",
    "code_uid": "71c3729e14496b41ef89a866305e31f1",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n10 3\\n3 1 1 1 1 10 3 10 10 2\\n4 4\\n1 1 1 1\\n1 1\\n1\\n13 1\\n3 1 4 1 5 9 2 6 5 3 5 8 9\\n13 2\\n3 1 4 1 5 9 2 6 5 3 5 8 9\\n13 3\\n3 1 4 1 5 9 2 6 5 3 5 8 9\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys \n\n\n\ndef process(n, k, a):\n    counts = {}\n    indices = {}\n\n    for i in range(len(a)):\n        if a[i] in counts:\n            counts[a[i]]+=1\n        else:\n            counts[a[i]]=1 \n        if a[i] in indices:\n            indices[a[i]].append(i)\n        else:\n            indices[a[i]]=[i]\n    \n    counter = 0 \n\n    to_sort =[]\n\n    for i in counts: \n        counter+=min(counts[i], k)\n        to_sort.append((i, min(counts[i], k)))\n\n  \n    to_sort.sort(key = lambda x: x[1], reverse = True)\n    \n    #print(to_sort)\n\n    to_return = [0]*n \n    paint_number = 0 \n\n    paint_max = int(counter/k)*k\n\n    for i, j in to_sort:\n   \n        painted = 0 \n    \n\n        while(painted<j ):\n            if paint_number == paint_max: return to_return\n            to_return[indices[i][painted]]=(paint_number%k)+1\n            paint_number+=1\n            painted+=1\n            \n            \n    \n    return to_return\n\n\n\n#print(process(9, 2, [1,2,3,4,4,5,5,5,5]))\n\n\n\nt = int(input())\n\nfor i in range(t):\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n\n    sys.stdout.write(\" \".join(map(str,process(n, k, a))) + \"\\n\")",
    "prob_desc_created_at": "1627050900",
    "tags": [
        "binary search",
        "constructive algorithms",
        "data structures",
        "greedy"
    ],
    "hidden_unit_tests": ""
}