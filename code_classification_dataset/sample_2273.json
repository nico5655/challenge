{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"10\", \"12\", \"31\"]",
    "src_uid": "7e709765bf4fb07b2a4d68bff8a12698",
    "prob_desc_notes": "NoteIn the first example, all the dress patterns of size $$$1$$$ and one of size $$$2$$$ are satisfactory.In the second example, only the dress patterns of size $$$1$$$ are satisfactory.",
    "prob_desc_description": "Carousel Boutique is busy again! Rarity has decided to visit the pony ball and she surely needs a new dress, because going out in the same dress several times is a sign of bad manners. First of all, she needs a dress pattern, which she is going to cut out from the rectangular piece of the multicolored fabric.The piece of the multicolored fabric consists of $$$n \\times m$$$ separate square scraps. Since Rarity likes dresses in style, a dress pattern must only include scraps sharing the same color. A dress pattern must be the square, and since Rarity is fond of rhombuses, the sides of a pattern must form a $$$45^{\\circ}$$$ angle with sides of a piece of fabric (that way it will be resembling the traditional picture of a rhombus).Examples of proper dress patterns:  Examples of improper dress patterns:  The first one consists of multi-colored scraps, the second one goes beyond the bounds of the piece of fabric, the third one is not a square with sides forming a $$$45^{\\circ}$$$ angle with sides of the piece of fabric.Rarity wonders how many ways to cut out a dress pattern that satisfies all the conditions that do exist. Please help her and satisfy her curiosity so she can continue working on her new masterpiece!",
    "prob_desc_output_spec": "Print a single integer: the number of ways to cut out a dress pattern to satisfy all of Rarity's conditions.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n, m \\le 2000$$$). Each of the next $$$n$$$ lines contains $$$m$$$ characters: lowercase English letters, the $$$j$$$-th of which corresponds to scrap in the current line and in the $$$j$$$-th column. Scraps having the same letter share the same color, scraps having different letters have different colors.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_019.jsonl",
    "code_uid": "89b304a16e2f58e1f021cc2c6ec1de2d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 3\\naaa\\naaa\\naaa\", \"3 4\\nabab\\nbaba\\nabab\", \"5 5\\nzbacg\\nbaaac\\naaaaa\\neaaad\\nweadd\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin, stdout\n\n\ndef rarity_and_new_dress(n, m, s_a):\n    dp = [[1 for j in range(m)] for i in range(n)]\n    res = 0\n\n    for i in range(n):\n        for j in range(m):\n            if i > 1 and 0 < j < m - 1 and s_a[i][j] == s_a[i-1][j-1] == s_a[i-1][j] == s_a[i-1][j+1] == s_a[i-2][j]:\n                dp[i][j] += min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1], dp[i-2][j])\n\n            res += dp[i][j]\n\n    return res\n\n\nn, m = map(int, stdin.readline().split())\ns_a = []\nfor _ in range(n):\n    s_a.append(stdin.readline().strip())\n\nans = rarity_and_new_dress(n, m, s_a)\nstdout.write(str(ans) + '\\n')\n",
    "prob_desc_created_at": "1596810900",
    "tags": [
        "dp",
        "implementation",
        "dfs and similar",
        "shortest paths"
    ],
    "hidden_unit_tests": ""
}