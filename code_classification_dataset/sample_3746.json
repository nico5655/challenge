{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"9\\n6\\n1\", \"225\\n2001\\n6014\\n6939\"]",
    "src_uid": "6def7ffa0989d5c5bcab3ac456b231fb",
    "prob_desc_notes": "NoteIn the example test, $$$n=2$$$. Thus, there are $$$3$$$ pigs at minute $$$1$$$, and $$$6$$$ pigs at minute $$$2$$$. There are three queries: $$$x=1$$$, $$$x=5$$$, and $$$x=6$$$.If the wolf wants to eat $$$1$$$ pig, he can do so in $$$3+6=9$$$ possible attack plans, depending on whether he arrives at minute $$$1$$$ or $$$2$$$.If the wolf wants to eat $$$5$$$ pigs, the wolf cannot arrive at minute $$$1$$$, since there aren't enough pigs at that time. Therefore, the wolf has to arrive at minute $$$2$$$, and there are $$$6$$$ possible attack plans.If the wolf wants to eat $$$6$$$ pigs, his only plan is to arrive at the end of the convention and devour everybody.Remember to output your answers modulo $$$10^9+7$$$!",
    "prob_desc_description": "Three little pigs from all over the world are meeting for a convention! Every minute, a triple of 3 new pigs arrives on the convention floor. After the $$$n$$$-th minute, the convention ends.The big bad wolf has learned about this convention, and he has an attack plan. At some minute in the convention, he will arrive and eat exactly $$$x$$$ pigs. Then he will get away.The wolf wants Gregor to help him figure out the number of possible attack plans that involve eating exactly $$$x$$$ pigs for various values of $$$x$$$ ($$$1 \\le x \\le 3n$$$). Two attack plans are considered different, if they occur at different times or if the sets of little pigs to eat are different.Note that all queries are independent, that is, the wolf does not eat the little pigs, he only makes plans!",
    "prob_desc_output_spec": "You should print $$$q$$$ lines, with line $$$i$$$ representing the number of attack plans if the wolf wants to eat $$$x_i$$$ pigs. Since each query answer can be large, output each answer modulo $$$10^9+7$$$.",
    "prob_desc_input_spec": "The first line of input contains two integers $$$n$$$ and $$$q$$$ ($$$1 \\le n \\le 10^6$$$, $$$1 \\le q \\le 2\\cdot 10^5$$$), the number of minutes the convention lasts and the number of queries the wolf asks. Each of the next $$$q$$$ lines contains a single integer $$$x_i$$$ ($$$1 \\le x_i \\le 3n$$$), the number of pigs the wolf will eat in the $$$i$$$-th query.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2500,
    "file_name": "train_083.jsonl",
    "code_uid": "6ebee54968ad72be04e37731346968e1",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"2 3\\n1\\n5\\n6\", \"5 4\\n2\\n4\\n6\\n8\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nimport __pypy__\n\nint_add = __pypy__.intop.int_add\nint_sub = __pypy__.intop.int_sub\nint_mul = __pypy__.intop.int_mul\n\n\ndef make_mod_mul(mod=10**9 + 7):\n    fmod_inv = 1.0 / mod\n\n    def mod_mul(a, b, c=0):\n        res = int_sub(int_add(int_mul(a, b), c), int_mul(mod, int(fmod_inv * a * b + fmod_inv * c)))\n        if res >= mod:\n            return res - mod\n        elif res < 0:\n            return res + mod\n        else:\n            return res\n\n    return mod_mul\n\n\nmod_mul = make_mod_mul()\n\nmod = 10**9 + 7\n\n\nstream = sys.stdin\nread = stream.readline\n\nn, q = map(int, read().split())\n\n\n\nsz = 3 * (n + 1)\nfac = [0] * (sz + 1)\ninv = [0] * (sz + 1)\n\nfac[0] = 1\n\nfor i in range(1, sz + 1):\n\tfac[i] = mod_mul(fac[i - 1], i)\n\ninv[sz] = pow(fac[sz], mod - 2, mod)\n\nfor i in range(sz - 1, -1, -1):\n\tinv[i] = mod_mul(inv[i + 1], (i + 1))\n\n\ndef nCr(n, r):\n\tnum = fac[n]\n\tden = mod_mul(inv[n - r], inv[r])\n\treturn mod_mul(num, den)\n\n\ncoef = [nCr(3 * n + 3, i) for i in range(3 * n + 4)]\ncoef[0] -= 1\nret = [0] * (sz + 1)\n\nfor i in range(3 * n + 3, 2, -1):\n\tmul = coef[i]\n\tmul3 = mod_mul(3, mul)\n\tret[i - 3] = mul\n\tcoef[i] -= mul\n\tcoef[i - 1] -= mul3\n\tcoef[i - 2] -= mul3\n\tif coef[i - 1] < 0:\n\t\tcoef[i - 1] += mod\n\tif coef[i - 2] < 0:\n\t\tcoef[i - 2] += mod\n\t\noutp = [0] * q\n\nfor i in range(q):\n\tx = int(read())\n\toutp[i] = str(ret[x])\n\nprint('\\n'.join(outp))\n",
    "prob_desc_created_at": "1627828500",
    "tags": [
        "combinatorics",
        "dp",
        "fft",
        "math"
    ],
    "hidden_unit_tests": ""
}