{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"0\\n1\\n1\"]",
    "src_uid": "31064ad58b7802c32b3c51137057b6f5",
    "prob_desc_notes": "NoteThe only Pythagorean triple satisfying $$$c = a^2 - b$$$ with $$$1 \\le a \\le b \\le c \\le 9$$$ is $$$(3, 4, 5)$$$; that's why the answer for $$$n = 3$$$ is $$$0$$$, and the answer for $$$n = 6$$$ (and for $$$n = 9$$$) is $$$1$$$.",
    "prob_desc_description": "A Pythagorean triple is a triple of integer numbers $$$(a, b, c)$$$ such that it is possible to form a right triangle with the lengths of the first cathetus, the second cathetus and the hypotenuse equal to $$$a$$$, $$$b$$$ and $$$c$$$, respectively. An example of the Pythagorean triple is $$$(3, 4, 5)$$$.Vasya studies the properties of right triangles, and he uses a formula that determines if some triple of integers is Pythagorean. Unfortunately, he has forgotten the exact formula; he remembers only that the formula was some equation with squares. So, he came up with the following formula: $$$c = a^2 - b$$$.Obviously, this is not the right formula to check if a triple of numbers is Pythagorean. But, to Vasya's surprise, it actually worked on the triple $$$(3, 4, 5)$$$: $$$5 = 3^2 - 4$$$, so, according to Vasya's formula, it is a Pythagorean triple.When Vasya found the right formula (and understood that his formula is wrong), he wondered: how many are there triples of integers $$$(a, b, c)$$$ with $$$1 \\le a \\le b \\le c \\le n$$$ such that they are Pythagorean both according to his formula and the real definition? He asked you to count these triples.",
    "prob_desc_output_spec": "For each test case, print one integer — the number of triples of integers $$$(a, b, c)$$$ with $$$1 \\le a \\le b \\le c \\le n$$$ such that they are Pythagorean according both to the real definition and to the formula Vasya came up with.",
    "prob_desc_input_spec": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. Each test case consists of one line containing one integer $$$n$$$ ($$$1 \\le n \\le 10^9$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_082.jsonl",
    "code_uid": "5140fba22dcb7ec1d3a52f641cc19b42",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n3\\n6\\n9\"]",
    "exec_outcome": "PASSED",
    "source_code": "from cmath import sqrt\r\nfrom sys import stdin, stdout\r\nimport math\r\n\r\nI = stdin.readline\r\nO = stdout.write\r\n\r\n# n = int(I())\r\n# arr = list(map(int, I().split()))\r\n\r\ndef solve():\r\n    n = int(I())\r\n    \r\n    maxi = int(math.sqrt(2*n - 1))\r\n    ans = (maxi + 1) // 2\r\n    ans -= 1\r\n\r\n    print(ans)\r\n    \t\r\n\r\nfor tc in range(int(input())):\r\n    solve()",
    "prob_desc_created_at": "1613399700",
    "tags": [
        "binary search",
        "brute force",
        "math",
        "number theory"
    ],
    "hidden_unit_tests": ""
}