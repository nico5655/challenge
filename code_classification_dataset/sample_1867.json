{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\", \"-1\"]",
    "src_uid": "a491be7d5883d594c3e907a22be607c9",
    "prob_desc_notes": "NoteIn the first sample one way to achieve the goal with the least number of moves is as follows: cyclically shift the second row to the right once, then shift the third row to the left twice. Then the table column before the last one will contain only 1s.In the second sample one can't shift the rows to get a column containing only 1s.",
    "prob_desc_description": "You are given a table consisting of n rows and m columns. Each cell of the table contains a number, 0 or 1. In one move we can choose some row of the table and cyclically shift its values either one cell to the left, or one cell to the right.To cyclically shift a table row one cell to the right means to move the value of each cell, except for the last one, to the right neighboring cell, and to move the value of the last cell to the first cell. A cyclical shift of a row to the left is performed similarly, but in the other direction. For example, if we cyclically shift a row \"00110\" one cell to the right, we get a row \"00011\", but if we shift a row \"00110\" one cell to the left, we get a row \"01100\".Determine the minimum number of moves needed to make some table column consist only of numbers 1.",
    "prob_desc_output_spec": "Print a single number: the minimum number of moves needed to get only numbers 1 in some column of the table. If this is impossible, print -1.",
    "prob_desc_input_spec": "The first line contains two space-separated integers: n (1 ≤ n ≤ 100) — the number of rows in the table and m (1 ≤ m ≤ 104) — the number of columns in the table. Then n lines follow, each of them contains m characters \"0\" or \"1\": the j-th character of the i-th line describes the contents of the cell in the i-th row and in the j-th column of the table. It is guaranteed that the description of the table contains no other characters besides \"0\" and \"1\".",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_014.jsonl",
    "code_uid": "6322ecb170cdbc2aa3dd120d932313e4",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 6\\n101010\\n000100\\n100000\", \"2 3\\n111\\n000\"]",
    "exec_outcome": "PASSED",
    "source_code": "INF = 100000005\n\nn, m = map(int, raw_input().split())\ngrid = [raw_input() for i in range(n)]\n\nleft = [[INF for j in range(m)] for i in range(n)]\nright = [[INF for j in range(m)] for i in range(n)]\n\nfor i in range(n):\n    last = INF\n    for j in range(m - 1, -1, -1):\n        if grid[i][j] == '1':\n            last = m - j\n            break\n    left[i][0] = last\n    for j in range(m):\n        if grid[i][j] == '1':\n            left[i][j] = 0\n        elif j > 0:\n            left[i][j] = left[i][j-1] + 1\n\nfor i in range(n):\n    last = INF\n    for j in range(m):\n        if grid[i][j] == '1':\n            last = j + 1\n            break\n    right[i][m - 1] = last\n    for j in range(m - 1, -1, -1):\n        if grid[i][j] == '1':\n            right[i][j] = 0\n        elif j < m - 1:\n            right[i][j] = right[i][j+1] + 1\n\nposs = True\nfor i in range(n):\n    poss = poss and grid[i] != '0'*m\n\nif not poss:\n    print -1\nelse:\n    best = INF\n    for j in range(m):\n        ans = 0\n        for i in range(n):\n            ans += min(left[i][j], right[i][j])\n        best = min(best, ans)\n    print best\n",
    "prob_desc_created_at": "1349105400",
    "tags": [
        "dp",
        "binary search",
        "implementation",
        "data structures"
    ],
    "hidden_unit_tests": ""
}