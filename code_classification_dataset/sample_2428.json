{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\\n....x....\\n....x....\\n....x....\\n....x....\\nxxxxoxxxx\\n....x....\\n....x....\\n....x....\\n....x....\", \"YES\\n...........\\n...........\\n...........\\n....x.x....\\n...x...x...\\n.....o.....\\n...x...x...\\n....x.x....\\n...........\\n...........\\n...........\", \"NO\"]",
    "src_uid": "2fad1534434f042214dcd1f1dc75405a",
    "prob_desc_notes": "NoteIn the first sample test the piece is a usual chess rook, and in the second sample test the piece is a usual chess knight.",
    "prob_desc_description": "Igor has been into chess for a long time and now he is sick of the game by the ordinary rules. He is going to think of new rules of the game and become world famous.Igor's chessboard is a square of size n × n cells. Igor decided that simple rules guarantee success, that's why his game will have only one type of pieces. Besides, all pieces in his game are of the same color. The possible moves of a piece are described by a set of shift vectors. The next passage contains a formal description of available moves.Let the rows of the board be numbered from top to bottom and the columns be numbered from left to right from 1 to n. Let's assign to each square a pair of integers (x, y) — the number of the corresponding column and row. Each of the possible moves of the piece is defined by a pair of integers (dx, dy); using this move, the piece moves from the field (x, y) to the field (x + dx, y + dy). You can perform the move if the cell (x + dx, y + dy) is within the boundaries of the board and doesn't contain another piece. Pieces that stand on the cells other than (x, y) and (x + dx, y + dy) are not important when considering the possibility of making the given move (for example, like when a knight moves in usual chess).Igor offers you to find out what moves his chess piece can make. He placed several pieces on the board and for each unoccupied square he told you whether it is attacked by any present piece (i.e. whether some of the pieces on the field can move to that cell). Restore a possible set of shift vectors of the piece, or else determine that Igor has made a mistake and such situation is impossible for any set of shift vectors.",
    "prob_desc_output_spec": "If there is a valid set of moves, in the first line print a single word 'YES' (without the quotes). Next, print the description of the set of moves of a piece in the form of a (2n - 1) × (2n - 1) board, the center of the board has a piece and symbols 'x' mark cells that are attacked by it, in a format similar to the input. See examples of the output for a full understanding of the format. If there are several possible answers, print any of them. If a valid set of moves does not exist, print a single word 'NO'.",
    "prob_desc_input_spec": "The first line contains a single integer n (1 ≤ n ≤ 50). The next n lines contain n characters each describing the position offered by Igor. The j-th character of the i-th string can have the following values:  o — in this case the field (i, j) is occupied by a piece and the field may or may not be attacked by some other piece; x — in this case field (i, j) is attacked by some piece; . — in this case field (i, j) isn't attacked by any piece. It is guaranteed that there is at least one piece on the board.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_022.jsonl",
    "code_uid": "cb4f07628e20fdca5dcd299994fe78c9",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\noxxxx\\nx...x\\nx...x\\nx...x\\nxxxxo\", \"6\\n.x.x..\\nx.x.x.\\n.xo..x\\nx..ox.\\n.x.x.x\\n..x.x.\", \"3\\no.x\\noxx\\no.x\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nn = int(input())\ns = [input() for i in range(n)]\na = [[1] * (2 * n) for i in range(2 * n)]\n\nfor i in range(n):\n    for j in range(n):\n        if s[i][j] != 'o':\n            continue\n        for x in range(n):\n            for y in range(n):\n                if s[x][y] == '.':\n                    a[n + x - i][n + y - j] = 0\nfor i in range(n):\n    for j in range(n):\n        if s[i][j] != 'x':\n            continue\n        c = 0\n        for x in range(n):\n            for y in range(n):\n                if s[x][y] == 'o' and a[n + i - x][n + j - y] == 1:\n                    c = 1\n                    break\n            if c == 1:\n                break\n        if c == 0:\n            print('NO')\n            sys.exit(0)\nprint('YES')\nfor i in range(1, 2 * n):\n    for j in range(1, 2 * n):\n        if i == n and j == n:\n            print('o', end='')\n        elif a[i][j] == 1:\n            print('x', end='')\n        else:\n            print('.', end='')\n    print('')",
    "prob_desc_created_at": "1430064000",
    "tags": [
        "constructive algorithms",
        "implementation",
        "brute force"
    ],
    "hidden_unit_tests": ""
}