{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\\n6 3\\n2 4\", \"3\\n9 3\\n2 4\\n6 8\", \"0\"]",
    "src_uid": "72d70a1c2e579bf81954ff932a9bc16e",
    "prob_desc_notes": null,
    "prob_desc_description": "Jzzhu has picked n apples from his big apple tree. All the apples are numbered from 1 to n. Now he wants to sell them to an apple store. Jzzhu will pack his apples into groups and then sell them. Each group must contain two apples, and the greatest common divisor of numbers of the apples in each group must be greater than 1. Of course, each apple can be part of at most one group.Jzzhu wonders how to get the maximum possible number of groups. Can you help him?",
    "prob_desc_output_spec": "The first line must contain a single integer m, representing the maximum number of groups he can get. Each of the next m lines must contain two integers — the numbers of apples in the current group. If there are several optimal answers you can print any of them.",
    "prob_desc_input_spec": "A single integer n (1 ≤ n ≤ 105), the number of the apples.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2500,
    "file_name": "train_061.jsonl",
    "code_uid": "518b832d348d773e7dad1d2cf87185f5",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\", \"9\", \"2\"]",
    "exec_outcome": "PASSED",
    "source_code": "\"\"\"\nCodeforces Round 257 Div 1 Problem C\n\nAuthor  : chaotic_iak\nLanguage: Python 3.3.4\n\"\"\"\n\ndef read(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    inputs = input().strip()\n    if mode == 0:\n        return inputs\n    if mode == 1:\n        return inputs.split()\n    if mode == 2:\n        return [int(x) for x in inputs.split()]\n\ndef write(s=\"\\n\"):\n    if isinstance(s, list): s = \" \".join(map(str,s))\n    s = str(s)\n    print(s, end=\"\")\n\n################################################### SOLUTION\n\n# croft algorithm to generate primes\n# from pyprimes library, not built-in, just google it\nfrom itertools import compress\nimport itertools\ndef croft():\n    \"\"\"Yield prime integers using the Croft Spiral sieve.\n\n    This is a variant of wheel factorisation modulo 30.\n    \"\"\"\n    # Implementation is based on erat3 from here:\n    #   http://stackoverflow.com/q/2211990\n    # and this website:\n    #   http://www.primesdemystified.com/\n    # Memory usage increases roughly linearly with the number of primes seen.\n    # dict ``roots`` stores an entry x:p for every prime p.\n    for p in (2, 3, 5):\n        yield p\n    roots = {9: 3, 25: 5}  # Map d**2 -> d.\n    primeroots = frozenset((1, 7, 11, 13, 17, 19, 23, 29))\n    selectors = (1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0)\n    for q in compress(\n            # Iterate over prime candidates 7, 9, 11, 13, ...\n            itertools.islice(itertools.count(7), 0, None, 2),\n            # Mask out those that can't possibly be prime.\n            itertools.cycle(selectors)\n            ):\n        # Using dict membership testing instead of pop gives a\n        # 5-10% speedup over the first three million primes.\n        if q in roots:\n            p = roots[q]\n            del roots[q]\n            x = q + 2*p\n            while x in roots or (x % 30) not in primeroots:\n                x += 2*p\n            roots[x] = p\n        else:\n            roots[q*q] = q\n            yield q\n\nn, = read()\ncr = croft()\nprimes = []\nfor i in cr:\n    if i < n:\n        primes.append(i)\n    else:\n        break\nprimes.reverse()\n\nused = [0] * (n+1)\nres = []\nfor p in primes:\n    k = n//p\n    tmp = []\n    while k:\n        if not used[k*p]:\n            tmp.append(k*p)\n            used[k*p] = 1\n        if len(tmp) == 2:\n            res.append(tmp)\n            tmp = []\n        k -= 1\n    if tmp == [p] and p > 2 and p*2 <= n and len(res) and res[-1][1] == p*2:\n        res[-1][1] = p\n        used[p*2] = 0\n        used[p] = 1\n\nprint(len(res))\nfor i in res:\n    print(\" \".join(map(str, i)))",
    "prob_desc_created_at": "1405774800",
    "tags": [
        "constructive algorithms",
        "number theory"
    ],
    "hidden_unit_tests": ""
}