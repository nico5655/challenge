{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"Yes\\nNo\\nYes\"]",
    "src_uid": "255d6fca1379ae40b03e761802f36664",
    "prob_desc_notes": "NoteIn the first test case, $$$a = [6, 3, 4, 2, 1]$$$, and $$$k = 4$$$, so we can do the operations as follows:   Split $$$a$$$ into $$$\\{ [6], [3, 4], [2], [1] \\}$$$.  Reorder them: $$$\\{ [1], [2], [3,4], [6] \\}$$$.  Merge them: $$$[1, 2, 3, 4, 6]$$$, so now the array is sorted. In the second test case, there is no way to sort the array by splitting it into only $$$2$$$ subarrays.As an example, if we split it into $$$\\{ [1, -4], [0, -2] \\}$$$, we can reorder them into $$$\\{ [1, -4], [0, -2] \\}$$$ or $$$\\{ [0, -2], [1, -4] \\}$$$. However, after merging the subarrays, it is impossible to get a sorted array.",
    "prob_desc_description": "Moamen has an array of $$$n$$$ distinct integers. He wants to sort that array in non-decreasing order by doing the following operations in order exactly once:  Split the array into exactly $$$k$$$ non-empty subarrays such that each element belongs to exactly one subarray.  Reorder these subarrays arbitrary.  Merge the subarrays in their new order. A sequence $$$a$$$ is a subarray of a sequence $$$b$$$ if $$$a$$$ can be obtained from $$$b$$$ by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.Can you tell Moamen if there is a way to sort the array in non-decreasing order using the operations written above?",
    "prob_desc_output_spec": "For each test case, you should output a single string. If Moamen can sort the array in non-decreasing order, output \"YES\" (without quotes). Otherwise, output \"NO\" (without quotes). You can print each letter of \"YES\" and \"NO\" in any case (upper or lower).",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^3$$$) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 10^5$$$). The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\le |a_i| \\le 10^9$$$). It is guaranteed that all numbers are distinct. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$3\\cdot10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_095.jsonl",
    "code_uid": "9a4bed0a816660c6b81713a363a7e601",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n5 4\\n6 3 4 2 1\\n4 2\\n1 -4 0 -2\\n5 1\\n1 2 3 4 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "t=int(input())\r\nfor test in range(t):\r\n    n,k=map(int,input().split())\r\n    arr=list(map(int,input().split()))\r\n    dick={}\r\n    c=0\r\n    for ele in arr:\r\n        dick[ele]=c\r\n        c+=1\r\n    count=1\r\n    sortarr=sorted(dick)\r\n    for x in range(n-1):\r\n        if dick[sortarr[x]]+1!=dick[sortarr[x+1]]:\r\n            count+=1\r\n    if count>k:\r\n            print(\"No\")\r\n    else:\r\n        print(\"Yes\")",
    "prob_desc_created_at": "1628519700",
    "tags": [
        "greedy",
        "sortings"
    ],
    "hidden_unit_tests": ""
}