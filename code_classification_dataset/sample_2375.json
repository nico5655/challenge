{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1.0 4.0 5.0 3.5 4.5 5.0 5.0\", \"1.0 5.0 5.5 6.5 7.5 8.0 8.0 7.0 7.5 6.5 7.5 8.0\"]",
    "src_uid": "750e1d9e43f916699537705c11d64d29",
    "prob_desc_notes": null,
    "prob_desc_description": "Barney lives in country USC (United States of Charzeh). USC has n cities numbered from 1 through n and n - 1 roads between them. Cities and roads of USC form a rooted tree (Barney's not sure why it is rooted). Root of the tree is the city number 1. Thus if one will start his journey from city 1, he can visit any city he wants by following roads.  Some girl has stolen Barney's heart, and Barney wants to find her. He starts looking for in the root of the tree and (since he is Barney Stinson not a random guy), he uses a random DFS to search in the cities. A pseudo code of this algorithm is as follows:let starting_time be an array of length ncurrent_time = 0dfs(v):\tcurrent_time = current_time + 1\tstarting_time[v] = current_time\tshuffle children[v] randomly (each permutation with equal possibility)\t// children[v] is vector of children cities of city v\tfor u in children[v]:\t\tdfs(u)As told before, Barney will start his journey in the root of the tree (equivalent to call dfs(1)).Now Barney needs to pack a backpack and so he wants to know more about his upcoming journey: for every city i, Barney wants to know the expected value of starting_time[i]. He's a friend of Jon Snow and knows nothing, that's why he asked for your help.",
    "prob_desc_output_spec": "In the first and only line of output print n numbers, where i-th number is the expected value of starting_time[i]. Your answer for each city will be considered correct if its absolute or relative error does not exceed 10 - 6.",
    "prob_desc_input_spec": "The first line of input contains a single integer n (1 ≤ n ≤ 105) — the number of cities in USC. The second line contains n - 1 integers p2, p3, ..., pn (1 ≤ pi &lt; i), where pi is the number of the parent city of city number i in the tree, meaning there is a road between cities numbered pi and i in USC.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_021.jsonl",
    "code_uid": "ee93884f915c3f86a086595e6deb1c05",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7\\n1 2 1 1 4 4\", \"12\\n1 1 2 2 4 4 3 3 1 10 8\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input())\nif n ==1:\n    print(1)\n    exit(0)\nl = list(map(int,input().split()))\nw = [[]for i in range(n)]\nsz = [1]*n\nfor i in range(n-1):\n    w[l[i]-1].append(i+1)\nfor i in range(n-1,-1,-1):\n    for j in range(len(w[i])):\n        sz[i]+=sz[w[i][j]]\nans = [0]*n\nfor i in range(n):\n    for j in range(len(w[i])):\n        ans[w[i][j]] = ans[i]+1+(sz[i]-1-sz[w[i][j]])/2\nfor i in range(n):\n    print(ans[i]+1,end = \" \")",
    "prob_desc_created_at": "1468514100",
    "tags": [
        "probabilities",
        "dfs and similar",
        "trees",
        "math"
    ],
    "hidden_unit_tests": ""
}