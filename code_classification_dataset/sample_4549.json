{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"6 9 3\\n21 39 3\\n29 43 1\\n49 35 7\\n146 219 73\\n28622 122661788 2\"]",
    "src_uid": "d4f4d6341f52cceb862faa89e85a42a3",
    "prob_desc_notes": "NoteIn the first test case, $$$6 + 9 + 3 = 18$$$ and $$$\\operatorname{gcd}(6, 9) = 3$$$.In the second test case, $$$21 + 39 + 3 = 63$$$ and $$$\\operatorname{gcd}(21, 39) = 3$$$.In the third test case, $$$29 + 43 + 1 = 73$$$ and $$$\\operatorname{gcd}(29, 43) = 1$$$.",
    "prob_desc_description": "Given a positive integer $$$n$$$. Find three distinct positive integers $$$a$$$, $$$b$$$, $$$c$$$ such that $$$a + b + c = n$$$ and $$$\\operatorname{gcd}(a, b) = c$$$, where $$$\\operatorname{gcd}(x, y)$$$ denotes the greatest common divisor (GCD) of integers $$$x$$$ and $$$y$$$.",
    "prob_desc_output_spec": "For each test case, output three distinct positive integers $$$a$$$, $$$b$$$, $$$c$$$ satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.",
    "prob_desc_input_spec": "The input consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^5$$$) — the number of test cases. Description of the test cases follows. The first and only line of each test case contains a single integer $$$n$$$ ($$$10 \\le n \\le 10^9$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 900,
    "file_name": "train_100.jsonl",
    "code_uid": "e769df5794ee4ae7bfe5b1cc709f5bbe",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n18\\n63\\n73\\n91\\n438\\n122690412\"]",
    "exec_outcome": "PASSED",
    "source_code": "import math\r\ncase = int(input())\r\ni=1\r\nwhile i <= case:\r\n    i=i+1\r\n    n = int(input())\r\n    j=1\r\n    while (n-1)%j ==0:\r\n        j=j+1\r\n    else:\r\n        if j==2:\r\n            print(math.floor(n/2),math.floor(n/2)-1,1)\r\n        else:\r\n            k = 2\r\n            while math.gcd(k, n - 1) != 1:\r\n                k = k + 1\r\n            else:\r\n                print(k, n - k - 1, 1)\r\n            ",
    "prob_desc_created_at": "1639661700",
    "tags": [
        "brute force",
        "constructive algorithms",
        "math",
        "number theory"
    ],
    "hidden_unit_tests": ""
}