{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"28\\n1 2 3 4\\n5 6 7 8\\n9 10 11 12\\n13 14 15 16\", \"85\\n5 6 17 18 19\\n9 10 23 24 25\\n7 8 20 21 22\\n3 4 14 15 16\\n1 2 11 12 13\"]",
    "src_uid": "272f66f3c71c4997c5a1f0f009c9b99e",
    "prob_desc_notes": null,
    "prob_desc_description": "People do many crazy things to stand out in a crowd. Some of them dance, some learn by heart rules of Russian language, some try to become an outstanding competitive programmers, while others collect funny math objects.Alis is among these collectors. Right now she wants to get one of k-special tables. In case you forget, the table n × n is called k-special if the following three conditions are satisfied:  every integer from 1 to n2 appears in the table exactly once;  in each row numbers are situated in increasing order;  the sum of numbers in the k-th column is maximum possible. Your goal is to help Alice and find at least one k-special table of size n × n. Both rows and columns are numbered from 1 to n, with rows numbered from top to bottom and columns numbered from left to right.",
    "prob_desc_output_spec": "First print the sum of the integers in the k-th column of the required table. Next n lines should contain the description of the table itself: first line should contains n elements of the first row, second line should contain n elements of the second row and so on. If there are multiple suitable table, you are allowed to print any.",
    "prob_desc_input_spec": "The first line of the input contains two integers n and k (1 ≤ n ≤ 500, 1 ≤ k ≤ n) — the size of the table Alice is looking for and the column that should have maximum possible sum.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1300,
    "file_name": "train_018.jsonl",
    "code_uid": "e9853fbb222edfd04883db667b1d3ad5",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 1\", \"5 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "n, k = map(int, raw_input().split())\n\ncur = 0\nprint n ** 3 - n * (n - k + 1) * (n + 1) // 2 + n\nfor i in xrange(n):\n    for j in xrange(k - 1):\n        cur += 1\n        print cur,\n    for j in xrange(n - k + 1):\n        print n * n - (n - k + 1) * (i + 1) + j + 1,\n    print\n",
    "prob_desc_created_at": "1454835900",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "hidden_unit_tests": ""
}