{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"0 1 3 6 10\", \"0 0 0\"]",
    "src_uid": "e3277a9871e91954766e8c87b193fc96",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given a permutation $$$p_1, p_2, \\ldots, p_n$$$.In one move you can swap two adjacent values.You want to perform a minimum number of moves, such that in the end there will exist a subsegment $$$1,2,\\ldots, k$$$, in other words in the end there should be an integer $$$i$$$, $$$1 \\leq i \\leq n-k+1$$$ such that $$$p_i = 1, p_{i+1} = 2, \\ldots, p_{i+k-1}=k$$$.Let $$$f(k)$$$ be the minimum number of moves that you need to make a subsegment with values $$$1,2,\\ldots,k$$$ appear in the permutation.You need to find $$$f(1), f(2), \\ldots, f(n)$$$.",
    "prob_desc_output_spec": "Print $$$n$$$ integers, the minimum number of moves that you need to make a subsegment with values $$$1,2,\\ldots,k$$$ appear in the permutation, for $$$k=1, 2, \\ldots, n$$$.",
    "prob_desc_input_spec": "The first line of input contains one integer $$$n$$$ ($$$1 \\leq n \\leq 200\\,000$$$): the number of elements in the permutation. The next line of input contains $$$n$$$ integers $$$p_1, p_2, \\ldots, p_n$$$: given permutation ($$$1 \\leq p_i \\leq n$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_024.jsonl",
    "code_uid": "340218e06d62cd5635440e123e92dd5d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n5 4 3 2 1\", \"3\\n1 2 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = input()\narr = map(int,raw_input().split(\" \"))\ntrees = [0]*(1+n)\ndic = [0]*(n+1)\nans = [0]*n\n\ndef update(t,i,v):\n        while i < len(t):\n                t[i] += v\n                i += lowbit(i)\ndef lowbit(x):\n        return x&-x\ndef sum(t,i):\n        ans = 0\n        while i>0:\n                ans += t[i]\n                i -= lowbit(i)\n        return ans\n\ndef getmid(arr,l1,flag):\n        low,high = 1,n\n        if l1%2 == 0 and  flag:\n                midv = l1/2\n        else:\n                midv = l1/2+1\n        while low <= high:\n                mid = (low+high)/2\n                ret = sum(arr,mid)\n                if ret >= midv:\n                        high = mid-1\n                else:\n                        low = mid+1\n        return low\n\nfor i in range(n):\n        dic[arr[i]]=i+1\n\nfor i in range(1,n+1):\n        ans[i-1] += sum(trees,n)-sum(trees,dic[i])\n        if i>=2:\n                ans[i-1] += ans[i-2]\n        update(trees,dic[i],1)\nvisited = [0]*(1+n)\nmid = 0\nlast = 0\nfor i in range(1,n+1):\n        update(visited,dic[i],1)\n        mid = getmid(visited,i,dic[i]>mid)\n        tt = sum(visited,dic[i])\n        minus = min(tt-1,i-tt)\n        tmp = abs(dic[i]-mid-(tt-sum(visited,mid)))- minus\n        ans[i-1] += tmp+last\n        last = tmp+last\nprint \" \".join(map(str,ans))\n",
    "prob_desc_created_at": "1576926300",
    "tags": [
        "data structures",
        "binary search"
    ],
    "hidden_unit_tests": ""
}