{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"6\", \"12\", \"-1\"]",
    "src_uid": "50a3dce28a479d140781a0db4eac363e",
    "prob_desc_notes": "NoteConsider the first sample. A possible road is: (1, 1)  →  (1, 2)  →  (2, 2)  →  (2, 3)  →  (3, 3)  →  (3, 4)  →  (4, 4).",
    "prob_desc_description": "Iahub got lost in a very big desert. The desert can be represented as a n × n square matrix, where each cell is a zone of the desert. The cell (i, j) represents the cell at row i and column j (1 ≤ i, j ≤ n). Iahub can go from one cell (i, j) only down or right, that is to cells (i + 1, j) or (i, j + 1). Also, there are m cells that are occupied by volcanoes, which Iahub cannot enter. Iahub is initially at cell (1, 1) and he needs to travel to cell (n, n). Knowing that Iahub needs 1 second to travel from one cell to another, find the minimum time in which he can arrive in cell (n, n).",
    "prob_desc_output_spec": "Print one integer, the minimum time in which Iahub can arrive at cell (n, n). If no solution exists (there is no path to the final cell), print -1.",
    "prob_desc_input_spec": "The first line contains two integers n (1 ≤ n ≤ 109) and m (1 ≤ m ≤ 105). Each of the next m lines contains a pair of integers, x and y (1 ≤ x, y ≤ n), representing the coordinates of the volcanoes. Consider matrix rows are numbered from 1 to n from top to bottom, and matrix columns are numbered from 1 to n from left to right. There is no volcano in cell (1, 1). No two volcanoes occupy the same location. ",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2500,
    "file_name": "train_038.jsonl",
    "code_uid": "9bba44185c291cc5198859aea7007152",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 2\\n1 3\\n1 4\", \"7 8\\n1 6\\n2 6\\n3 5\\n3 6\\n4 3\\n5 1\\n5 2\\n5 3\", \"2 2\\n1 2\\n2 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "__author__ = 'Pavel Mavrin'\n\nn, m = [int(x) for x in input().split()]\na = []\nfor i in range(m):\n    a.append([int(x) - 1 for x in input().split()])\n\na.sort(key=lambda x: x[0] * n + x[1])\na.append([n - 1, n])\n\nd = [[0, 1]]\nr = 0\ni = 0\nwhile i < len(a):\n    if a[i][0] == r:\n        dd = []\n        j = 0\n        while i < len(a) and a[i][0] == r and j < len(d):\n            if a[i][1] < d[j][0]:\n                i += 1\n            elif a[i][1] == d[j][0]:\n                d[j][0] += 1\n                if d[j][0] >= d[j][1]:\n                    j += 1\n                i += 1\n            else:\n                dd.append([d[j][0], a[i][1]])\n                d[j][0] = a[i][1] + 1\n                while j < len(d) and d[j][1] <= a[i][1] + 1:\n                    j += 1\n                if j < len(d):\n                    d[j][0] = max(d[j][0], a[i][1] + 1)\n        if j < len(d):\n            dd.append([d[j][0], n])\n        while i < len(a) and (a[i][0] == r):\n            i += 1\n        d = dd\n        r += 1\n        if len(d) == 0:\n            break\n    else:\n        r = a[i][0]\n        d = [[d[0][0], n]]\n    #print(r, i, d)\n\nif len(d) == 0 or d[len(d) - 1][1] < n:\n    print(-1)\nelse:\n    print(2 * (n - 1))\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "prob_desc_created_at": "1390231800",
    "tags": [
        "two pointers",
        "binary search",
        "implementation",
        "sortings"
    ],
    "hidden_unit_tests": ""
}