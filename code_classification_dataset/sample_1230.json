{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\", \"79\"]",
    "src_uid": "b544f02d12846026f6c76876bc6bd079",
    "prob_desc_notes": "NoteFor the first sample, any possible choice of doing one operation will result the same three numbers 1, 1, 2 so the result is . For the second sample if we multiply 8 by 3 two times we'll get 72. In this case the numbers will become 1, 2, 4, 72 so the OR value will be 79 and is the largest possible result.",
    "prob_desc_description": "You are given n numbers a1, a2, ..., an. You can perform at most k operations. For each operation you can multiply one of the numbers by x. We want to make  as large as possible, where  denotes the bitwise OR. Find the maximum possible value of  after performing at most k operations optimally.",
    "prob_desc_output_spec": "Output the maximum value of a bitwise OR of sequence elements after performing operations.",
    "prob_desc_input_spec": "The first line contains three integers n, k and x (1 ≤ n ≤ 200 000, 1 ≤ k ≤ 10, 2 ≤ x ≤ 8). The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 109).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_007.jsonl",
    "code_uid": "204173d5503a919705b5f68f6ee10b97",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 1 2\\n1 1 1\", \"4 2 3\\n1 2 4 8\"]",
    "exec_outcome": "PASSED",
    "source_code": "\nn,k,x = map( int,input().split() )\n*Arr, = map( int,input().split() )\n\nPrfx = [0]*(n+2)\nSffx = [0]*(n+2)\n\nfor i in range(0,n):\n    Prfx[i+1] = Prfx[i]|Arr[i]\n    Sffx[n-i-1] = Sffx[n-i]|Arr[n-i-1]\nnow = x**k\nRes = 0\nfor i in range(0,n):\n    Res = max( Prfx[i]|(Arr[i]*now)|Sffx[i+1],Res );\nprint(Res)",
    "prob_desc_created_at": "1442416500",
    "tags": [
        "greedy",
        "brute force"
    ],
    "hidden_unit_tests": ""
}