{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\\nYES\\nNO\\nNO\\nYES\\nNO\"]",
    "src_uid": "ee40e8b0ed2da53127f53eb694653a30",
    "prob_desc_notes": "NoteThe first test case is analyzed in the statement.In the second test case, it is enough to apply the operation to array $$$a$$$ once.In the third test case, it is impossible to get array $$$b$$$ from array $$$a$$$.",
    "prob_desc_description": "Kristina has two arrays $$$a$$$ and $$$b$$$, each containing $$$n$$$ non-negative integers. She can perform the following operation on array $$$a$$$ any number of times:   apply a decrement to each non-zero element of the array, that is, replace the value of each element $$$a_i$$$ such that $$$a_i &gt; 0$$$ with the value $$$a_i - 1$$$ ($$$1 \\le i \\le n$$$). If $$$a_i$$$ was $$$0$$$, its value does not change. Determine whether Kristina can get an array $$$b$$$ from an array $$$a$$$ in some number of operations (probably zero). In other words, can she make $$$a_i = b_i$$$ after some number of operations for each $$$1 \\le i \\le n$$$?For example, let $$$n = 4$$$, $$$a = [3, 5, 4, 1]$$$ and $$$b = [1, 3, 2, 0]$$$. In this case, she can apply the operation twice:   after the first application of the operation she gets $$$a = [2, 4, 3, 0]$$$;  after the second use of the operation she gets $$$a = [1, 3, 2, 0]$$$. Thus, in two operations, she can get an array $$$b$$$ from an array $$$a$$$.",
    "prob_desc_output_spec": "For each test case, output on a separate line:   YES, if by doing some number of operations it is possible to get an array $$$b$$$ from an array $$$a$$$;  NO otherwise.  You can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).",
    "prob_desc_input_spec": "The first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) —the number of test cases in the test. The descriptions of the test cases follow. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 5 \\cdot 10^4$$$). The second line of each test case contains exactly $$$n$$$ non-negative integers $$$a_1, a_2, \\dots, a_n$$$ ($$$0 \\le a_i \\le 10^9$$$). The third line of each test case contains exactly $$$n$$$ non-negative integers $$$b_1, b_2, \\dots, b_n$$$ ($$$0 \\le b_i \\le 10^9$$$). It is guaranteed that the sum of $$$n$$$ values over all test cases in the test does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_094.jsonl",
    "code_uid": "83e01037078c25328995b63861a680c1",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n\\n4\\n\\n3 5 4 1\\n\\n1 3 2 0\\n\\n3\\n\\n1 2 1\\n\\n0 1 0\\n\\n4\\n\\n5 3 7 2\\n\\n1 1 1 1\\n\\n5\\n\\n1 2 3 4 5\\n\\n1 2 3 4 6\\n\\n1\\n\\n8\\n\\n0\\n\\n1\\n\\n4\\n\\n6\"]",
    "exec_outcome": "PASSED",
    "source_code": "noofcases=int(input())\r\narr1=[]\r\narr2=[]\r\nfor i in range(0,noofcases):\r\n    nooflines=int(input())\r\n    if(nooflines>1000):\r\n        check=True\r\n        arr1=list(map(int, input().split()))\r\n        arr2=list(map(int, input().split()))\r\n        diff=arr1[0]-arr2[0]\r\n        if (nooflines <= 1 and diff > -1):\r\n            print('yes')  \r\n            continue\r\n        elif diff < 0 or (arr2[0] > arr1[0]):\r\n            print('no')  \r\n            continue\r\n        for j in range(1,nooflines):\r\n            if((arr1[j]-diff != arr2[j] and arr1[j]-diff > -1) or arr2[j]>arr1[j]):\r\n                print('no')\r\n                break\r\n        else:\r\n            print('yes')\r\n    else:\r\n        check=True\r\n        arr1=list(map(int, input().split()))\r\n        arr2=list(map(int, input().split()))\r\n        while(arr1.count(0)!=len(arr1)):\r\n            if(arr1==arr2):\r\n                break\r\n            for k in range(0,len(arr1)):\r\n                if(int(arr1[k])>0):\r\n                    arr1[k]=int(arr1[k])-1\r\n            if(arr1==arr2):\r\n                break\r\n        else:\r\n            if(check and arr1==arr2):\r\n                print('yEs')\r\n                check=False\r\n            else:\r\n                print('no')\r\n        if(check and arr1==arr2):\r\n            print('YES')",
    "prob_desc_created_at": "1654612500",
    "tags": [
        "greedy",
        "implementation"
    ],
    "hidden_unit_tests": ""
}