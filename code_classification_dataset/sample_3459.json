{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\", \"0\", \"2\"]",
    "src_uid": "a1c3876d705ac8e8b81394ba2be12ed7",
    "prob_desc_notes": "NoteIn the first sample test the two given words could be obtained only from word \"treading\" (the deleted letters are marked in bold).In the second sample test the two given words couldn't be obtained from the same word by removing one letter.In the third sample test the two given words could be obtained from either word \"tory\" or word \"troy\".",
    "prob_desc_description": "Analyzing the mistakes people make while typing search queries is a complex and an interesting work. As there is no guaranteed way to determine what the user originally meant by typing some query, we have to use different sorts of heuristics.Polycarp needed to write a code that could, given two words, check whether they could have been obtained from the same word as a result of typos. Polycarpus suggested that the most common typo is skipping exactly one letter as you type a word.Implement a program that can, given two distinct words S and T of the same length n determine how many words W of length n + 1 are there with such property that you can transform W into both S, and T by deleting exactly one character. Words S and T consist of lowercase English letters. Word W also should consist of lowercase English letters.",
    "prob_desc_output_spec": "Print a single integer — the number of distinct words W that can be transformed to S and T due to a typo.",
    "prob_desc_input_spec": "The first line contains integer n (1 ≤ n ≤ 100 000) — the length of words S and T. The second line contains word S. The third line contains word T. Words S and T consist of lowercase English letters. It is guaranteed that S and T are distinct words.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_060.jsonl",
    "code_uid": "e887d6774737bf369455f3ccd2798865",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7\\nreading\\ntrading\", \"5\\nsweet\\nsheep\", \"3\\ntoy\\ntry\"]",
    "exec_outcome": "PASSED",
    "source_code": "import os\nimport sys\nfrom io import BytesIO, IOBase\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n##########################################################\nimport math\nimport bisect\n\nmod = 998244353\n# for _ in range(int(input())):\nfrom collections import Counter\n# sys.setrecursionlimit(10**6)\n# dp=[[-1 for i in range(n+5)]for j in range(cap+5)]\n# arr= list(map(int, input().split()))\n# n,l= map(int, input().split())\n# arr= list(map(int, input().split()))\n# for _ in range(int(input())):\n# n=int(input())\n# for _ in range(int(input())):\nimport bisect\nfrom heapq import *\nfrom collections import defaultdict,deque\ndef okay(x,y):\n    if x<0 or x>=3 :\n        return False\n    if y<n and mat[x][y]!=\".\":\n        return False\n    if y+1<n and mat[x][y+1]!=\".\":\n        return False\n    if y+2<n and mat[x][y+2]!=\".\":\n        return False\n\n    return True\n\n'''for i in range(int(input())):\n\nn,m=map(int, input().split())\ng=[[] for i in range(n+m)]\nfor i in range(n):\n    s=input()\n    for j,x in enumerate(s):\n        if x==\"#\":\n            g[i].append(n+j)\n            g[n+j].append(i)\nq=deque([0])\ndis=[10**9]*(n+m)\ndis[0]=0\nwhile q:\n    node=q.popleft()\n    for i in g[node]:\n        if dis[i]>dis[node]+1:\n\n            dis[i]=dis[node]+1\n            q.append(i)\nprint(-1 if dis[n-1]==10**9 else dis[n-1])'''\n'''from collections import deque\n\nt = int(input())\nfor _ in range(t):\n    q = deque([])\n    flag=False\n    n,k = map(int, input().split())\n    mat = [input() for i in range(3)]\n    vis=[[0 for i in range(105)]for j in range(3)]\n    for i in range(3):\n        if mat[i][0]==\"s\":\n            q.append((i,0))\n    while q:\n        x,y=q.popleft()\n\n        if y+1>=n:\n            flag=True\n            break\n        if vis[x][y]==1:\n            continue\n        vis[x][y]=1\n        if (y+1<n and mat[x][y+1]=='.' and okay(x-1,y+1)==True):\n            q.append((x-1,y+3))\n\n        if  (y+1<n and mat[x][y+1]=='.' and okay(x,y+1)==True):\n            q.append((x,y+3))\n        if  (y+1<n and mat[x][y+1]=='.' and okay(x+1,y+1)==True):\n            q.append((x+1,y+3))\n    if flag:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n\n\n\n# ls=list(map(int, input().split()))\n# d=defaultdict(list)'''\nfrom collections import defaultdict\n#for _ in range(int(input())):\nn=int(input())\n#n,k= map(int, input().split())\n#arr=sorted([i,j for i,j in enumerate(input().split())])\ns=input()\nt=input()\nn=len(s)\nf=0\nl=0\ni=0\nwhile s[i]==t[i]:\n    i+=1\nj=n-1\nwhile s[j]==t[j]:\n    j-=1\n\nprint(int(s[i:j]==t[i+1:j+1])+int(s[i+1:j+1]==t[i:j]))\n\n\n\n\n\n",
    "prob_desc_created_at": "1429286400",
    "tags": [
        "dp",
        "hashing",
        "greedy",
        "constructive algorithms",
        "two pointers",
        "strings"
    ],
    "hidden_unit_tests": ""
}