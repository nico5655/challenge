{
    "prob_desc_time_limit": "4 seconds",
    "prob_desc_sample_outputs": "[\"11\\n10\\n14\\n13\"]",
    "src_uid": "add040eecd8322630fbbce0a2a1de45e",
    "prob_desc_notes": "NoteAfter first five operations multiset A contains integers 0, 8, 9, 11, 6 and 1.The answer for the sixth query is integer  — maximum among integers , , ,  and .",
    "prob_desc_description": "Author has gone out of the stories about Vasiliy, so here is just a formal task description.You are given q queries and a multiset A, initially containing only integer 0. There are three types of queries:  \"+ x\" — add integer x to multiset A. \"- x\" — erase one occurrence of integer x from multiset A. It's guaranteed that at least one x is present in the multiset A before this query. \"? x\" — you are given integer x and need to compute the value , i.e. the maximum value of bitwise exclusive OR (also know as XOR) of integer x and some integer y from the multiset A.Multiset is a set, where equal elements are allowed.",
    "prob_desc_output_spec": "For each query of the type '?' print one integer — the maximum value of bitwise exclusive OR (XOR) of integer xi and some integer from the multiset A.",
    "prob_desc_input_spec": "The first line of the input contains a single integer q (1 ≤ q ≤ 200 000) — the number of queries Vasiliy has to perform. Each of the following q lines of the input contains one of three characters '+', '-' or '?' and an integer xi (1 ≤ xi ≤ 109). It's guaranteed that there is at least one query of the third type. Note, that the integer 0 will always be present in the set A.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_008.jsonl",
    "code_uid": "d489a1b855cc03857894602daa8d2ff0",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"10\\n+ 8\\n+ 9\\n+ 11\\n+ 6\\n+ 1\\n? 3\\n- 8\\n? 3\\n? 8\\n? 11\"]",
    "exec_outcome": "PASSED",
    "source_code": "# Why do we fall ? So we can learn to pick ourselves up.\n\n\n\nclass Node:\n    def __init__(self):\n        self.left = None\n        self.right = None\n        self.cnt = 0\n\nclass Trie:\n    def __init__(self):\n        self.root = Node()\n\n    def insert(self,x):\n        self.temp = self.root\n        for i in range(31,-1,-1):\n            curbit = (x>>i)&1\n            if curbit:\n                if not self.temp.right:\n                    self.temp.right = Node()\n                self.temp = self.temp.right\n                self.temp.cnt += 1\n            else:\n                if not self.temp.left:\n                    self.temp.left = Node()\n                self.temp = self.temp.left\n                self.temp.cnt += 1\n\n    def remove(self,x):\n        self.temp = self.root\n        for i in range(31,-1,-1):\n            curbit = (x>>i)&1\n            if curbit:\n                self.temp = self.temp.right\n                self.temp.cnt -= 1\n            else:\n                self.temp = self.temp.left\n                self.temp.cnt -= 1\n    def maxxor(self,x):\n        self.temp = self.root\n        self.ss = 0\n        for i in range(31,-1,-1):\n            curbit = (x>>i)&1\n            if curbit:\n                if self.temp.left and self.temp.left.cnt:\n                    self.ss += (1<<i)\n                    self.temp = self.temp.left\n                elif self.temp.right:\n                    self.temp = self.temp.right\n            else:\n                if self.temp.right and self.temp.right.cnt:\n                    self.ss += (1<<i)\n                    self.temp = self.temp.right\n                elif self.temp.left:\n                    self.temp = self.temp.left\n        return self.ss\n\nq = int(input())\ntrie = Trie()\ntrie.insert(0)\nfor _ in range(0,q):\n    qq = input().split()\n    if qq[0] == '+':\n        trie.insert(int(qq[1]))\n    elif qq[0] == '-':\n        trie.remove(int(qq[1]))\n    else:\n        print(trie.maxxor(int(qq[1])))\n\n\n\n\n\n\"\"\"\n\n10\n+ 8\n+ 9\n+ 11\n+ 6\n+ 1\n? 3\n- 8\n? 3\n? 8\n? 11\n\n\n10\n? 1\n+ 1\n+ 8\n- 1\n+ 2\n+ 7\n+ 4\n+ 7\n+ 3\n? 7\n\n\n\n\n\"\"\"\n",
    "prob_desc_created_at": "1470933300",
    "tags": [
        "data structures",
        "binary search",
        "bitmasks",
        "trees"
    ],
    "hidden_unit_tests": ""
}