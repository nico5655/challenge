{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"Yes\", \"Yes\", \"No\"]",
    "src_uid": "6c65ca365352380052b0c9d693e6d161",
    "prob_desc_notes": "NoteIn the first sample test when you push the button for the first time, the sequence of active teeth will be 2 2 1, when you push it for the second time, you get 0 1 2.",
    "prob_desc_description": "Andrewid the Android is a galaxy-famous detective. He is now investigating a case of frauds who make fake copies of the famous Stolp's gears, puzzles that are as famous as the Rubik's cube once was.Its most important components are a button and a line of n similar gears. Each gear has n teeth containing all numbers from 0 to n - 1 in the counter-clockwise order. When you push a button, the first gear rotates clockwise, then the second gear rotates counter-clockwise, the the third gear rotates clockwise an so on.Besides, each gear has exactly one active tooth. When a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.Andrewid remembers that the real puzzle has the following property: you can push the button multiple times in such a way that in the end the numbers on the active teeth of the gears from first to last form sequence 0, 1, 2, ..., n - 1. Write a program that determines whether the given puzzle is real or fake.",
    "prob_desc_output_spec": "In a single line print \"Yes\" (without the quotes), if the given Stolp's gears puzzle is real, and \"No\" (without the quotes) otherwise.",
    "prob_desc_input_spec": "The first line contains integer n (1 ≤ n ≤ 1000) — the number of gears. The second line contains n digits a1, a2, ..., an (0 ≤ ai ≤ n - 1) — the sequence of active teeth: the active tooth of the i-th gear contains number ai.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_000.jsonl",
    "code_uid": "5e0f1475294f07a104f2751198572f3b",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n1 0 0\", \"5\\n4 2 1 4 3\", \"4\\n0 2 3 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = raw_input()\nn = int(n)\n\na = map(int, raw_input().split(' '))\n\nfor j in xrange(n+1):\n\tfor i in xrange(n):\n\t\tif i%2 == 0:\n\t\t\ta[i] += 1\n\t\t\tif a[i] > n-1:\n\t\t\t\ta[i] -= n\n\t\telse:\n\t\t\ta[i] -= 1\n\t\t\tif a[i] < 0:\n\t\t\t\ta[i] += n\n\tif a == range(n):\n\t\tprint \"Yes\"\n\t\texit()\nprint \"No\"\n\n",
    "prob_desc_created_at": "1435414200",
    "tags": [
        "implementation",
        "brute force"
    ],
    "hidden_unit_tests": ""
}