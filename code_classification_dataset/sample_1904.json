{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\", \"0\", \"1\"]",
    "src_uid": "64d85fcafab0e1b477bc888408f54eb5",
    "prob_desc_notes": "NoteThe tree corresponding to the first example:  The answer is $$$2$$$, some of the possible answers are the following: $$$[(1, 5), (1, 6)]$$$, $$$[(1, 4), (1, 7)]$$$, $$$[(1, 6), (1, 7)]$$$.The tree corresponding to the second example:  The answer is $$$0$$$.The tree corresponding to the third example:  The answer is $$$1$$$, only one possible way to reach it is to add the edge $$$(1, 3)$$$.",
    "prob_desc_description": "You are given an undirected tree consisting of $$$n$$$ vertices. An undirected tree is a connected undirected graph with $$$n - 1$$$ edges.Your task is to add the minimum number of edges in such a way that the length of the shortest path from the vertex $$$1$$$ to any other vertex is at most $$$2$$$. Note that you are not allowed to add loops and multiple edges.",
    "prob_desc_output_spec": "Print a single integer — the minimum number of edges you have to add in order to make the shortest distance from the vertex $$$1$$$ to any other vertex at most $$$2$$$. Note that you are not allowed to add loops and multiple edges.",
    "prob_desc_input_spec": "The first line contains one integer $$$n$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$) — the number of vertices in the tree. The following $$$n - 1$$$ lines contain edges: edge $$$i$$$ is given as a pair of vertices $$$u_i, v_i$$$ ($$$1 \\le u_i, v_i \\le n$$$). It is guaranteed that the given edges form a tree. It is guaranteed that there are no loops and multiple edges in the given edges.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_014.jsonl",
    "code_uid": "102d89c3bc1df14041a2a244925bac17",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\", \"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\", \"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nrange = xrange\ninput = raw_input\n \ninp = [int(x) for x in sys.stdin.read().split()]; ii = 0\n \nn = inp[ii]; ii += 1\n \ncoupl = [[] for _ in range(n)]\nfor _ in range(n - 1):\n    u = inp[ii] - 1; ii += 1\n    v = inp[ii] - 1; ii += 1\n    coupl[u].append(v)\n    coupl[v].append(u)\nroot = 0\n \nfound = [0]*n\nfound[root] = 1\nbfs = [root]\nfor _ in range(2):\n    for node in list(bfs):\n        for nei in coupl[node]:\n            if not found[nei]:\n                found[nei] = 1\n                bfs.append(nei)\n \nP = [-1]*n\nP[root] = root\nbfs = [root]\nfor node in bfs:\n    for nei in coupl[node]:\n        if P[nei] == -1:\n            P[nei] = node\n            bfs.append(nei)\n\nmarker = [0]*n\ndeg = [len(c) for c in coupl]\nfound2 = [0]*n\n\nfor node in reversed(bfs):\n    if found[node] or marker[node] or any(marker[nei] for nei in coupl[node]):\n        continue\n    \n    node = P[node]\n    marker[node] = 1\n    found2[node] = 1\n    \n    for nei in coupl[node]:\n        found2[nei] = 1 \n \nprint sum(marker)\n",
    "prob_desc_created_at": "1535122200",
    "tags": [
        "dp",
        "greedy",
        "graphs"
    ],
    "hidden_unit_tests": ""
}