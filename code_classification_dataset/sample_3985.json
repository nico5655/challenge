{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"5\\n2\\n6\\n4\\n2115\"]",
    "src_uid": "529cf248a86a5ec9c3b3fa8acf8805da",
    "prob_desc_notes": "NoteFor the first test, $$$1912$$$ becomes $$$21023$$$ after $$$1$$$ operation which is of length $$$5$$$.For the second test, $$$5$$$ becomes $$$21$$$ after $$$6$$$ operations which is of length $$$2$$$.For the third test, $$$999$$$ becomes $$$101010$$$ after $$$1$$$ operation which is of length $$$6$$$.For the fourth test, $$$88$$$ becomes $$$1010$$$ after $$$2$$$ operations which is of length $$$4$$$.",
    "prob_desc_description": "You are given an integer $$$n$$$. You have to apply $$$m$$$ operations to it.In a single operation, you must replace every digit $$$d$$$ of the number with the decimal representation of integer $$$d + 1$$$. For example, $$$1912$$$ becomes $$$21023$$$ after applying the operation once.You have to find the length of $$$n$$$ after applying $$$m$$$ operations. Since the answer can be very large, print it modulo $$$10^9+7$$$.",
    "prob_desc_output_spec": "For each test case output the length of the resulting number modulo $$$10^9+7$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 2 \\cdot 10^5$$$) — the number of test cases. The only line of each test case contains two integers $$$n$$$ ($$$1 \\le n \\le 10^9$$$) and $$$m$$$ ($$$1 \\le m \\le 2 \\cdot 10^5$$$) — the initial number and the number of operations. ",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_088.jsonl",
    "code_uid": "9322610cdd292fe8cacb8e0042ca207d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n1912 1\\n5 6\\n999 1\\n88 2\\n12 100\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\ntesting = len(sys.argv) == 4 and sys.argv[3] == \"myTest\"\nif testing:\n    cmd = sys.stdout\n    from time import time\n    start_time = int(round(time() * 1000)) \n    readAll = open(sys.argv[1], 'r').read\n    sys.stdout = open(sys.argv[2], 'w')\nelse:\n    readAll = sys.stdin.read\n\n# ############ ---- I/O Functions ---- ############\n\nflush = sys.stdout.flush\nclass InputData:\n    def __init__(self):\n        self.lines = readAll().split('\\n')\n        self.n = len(self.lines)\n        self.ii = -1\n    def input(self):\n        self.ii += 1\n        assert self.ii < self.n\n        return self.lines[self.ii]\ninputData = InputData()\ninput = inputData.input\n\ndef intin():\n    return(int(input()))\ndef intlin():\n    return(list(map(int,input().split())))\ndef chrin():\n    return(list(input()))\ndef strin():\n    return input()\ndef lout(l, sep=\"\\n\", toStr=True):\n    print(sep.join(map(str, l) if toStr else l))\ndef dout(*args, **kargs):\n    if not testing: return\n    if args: print(args[0] if len(args)==1 else args)\n    if kargs: print([(k,v) for k,v in kargs.items()])\n    \n# ############ ---- I/O Functions ---- ############\n\n# from math import ceil\nfrom collections import defaultdict as ddict, Counter\n# from heapq import *\n# from Queue import Queue\nmmap = [0]*(2*10**5+100)\nmod = 10**9+7\ncnts = [0]*10\nk = 0\ncnts[k] = 1\nfor i in xrange(1,2*10**5+100):\n    prv = cnts[0]\n    for j in xrange(9):\n        nxt = cnts[j+1]\n        cnts[j+1] = prv\n        prv = nxt\n    cnts[0] = prv\n    cnts[1] = (prv+cnts[1])%mod\n    mmap[i] = (sum(cnts))%mod\n\ndef main():\n    n,m = intlin()\n    ans = 0\n    # cnts = Counter(map(int,(list(str(n)))))\n    # for i in xrange(10):\n    #     ans += mmap[m+i]*cnts[i]\n    while n > 0:\n        ans += mmap[m+n%10]\n        n /= 10\n    return(ans%mod)\n\nanss = []\nfor _ in xrange(intin()):\n    anss.append(main())\n    # anss.append(\"YES\" if main() else \"NO\")\nlout(anss)\n\nif testing:\n    sys.stdout = cmd\n    print(int(round(time() * 1000))  - start_time)",
    "prob_desc_created_at": "1618151700",
    "tags": [
        "dp",
        "matrices"
    ],
    "hidden_unit_tests": ""
}