{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"5\"]",
    "src_uid": "affef141c51bbfd881a90d49ec34ceea",
    "prob_desc_notes": "NoteFor the sample, you can drink $$$5$$$ potions by taking potions $$$1$$$, $$$3$$$, $$$4$$$, $$$5$$$ and $$$6$$$. It is not possible to drink all $$$6$$$ potions because your health will go negative at some point",
    "prob_desc_description": "This is the easy version of the problem. The only difference is that in this version $$$n \\leq 2000$$$. You can make hacks only if both versions of the problem are solved.There are $$$n$$$ potions in a line, with potion $$$1$$$ on the far left and potion $$$n$$$ on the far right. Each potion will increase your health by $$$a_i$$$ when drunk. $$$a_i$$$ can be negative, meaning that potion will decrease will health.You start with $$$0$$$ health and you will walk from left to right, from first potion to the last one. At each potion, you may choose to drink it or ignore it. You must ensure that your health is always non-negative.What is the largest number of potions you can drink?",
    "prob_desc_output_spec": "Output a single integer, the maximum number of potions you can drink without your health becoming negative.",
    "prob_desc_input_spec": "The first line contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2000$$$) â€” the number of potions.  The next line contains $$$n$$$ integers $$$a_1$$$, $$$a_2$$$, ... ,$$$a_n$$$ ($$$-10^9 \\leq a_i \\leq 10^9$$$) which represent the change in health after drinking that potion.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_104.jsonl",
    "code_uid": "3f49f3194f1ad57949b37947f64690d9",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n4 -4 1 -3 1 -3\"]",
    "exec_outcome": "PASSED",
    "source_code": "def potions(n): \r\n    \r\n    lst = [int(i) for i in input().split()]\r\n    l = []\r\n    for potion in lst: \r\n        l.append(potion)\r\n        \r\n        if potion < 0 and sum(l) < 0: \r\n            l = sorted(l)\r\n            l.pop(0)\r\n    \r\n    print(len(l))\r\n    \r\nn = int(input())\r\npotions(n)\r\n\r\n\r\n",
    "prob_desc_created_at": "1622210700",
    "tags": [
        "brute force",
        "data structures",
        "dp",
        "greedy"
    ],
    "hidden_unit_tests": ""
}