{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\\nYES\\nNO\\nYES\\nYES\\nNO\\nNO\\nYES\\nNO\"]",
    "src_uid": "8e448883014bf7cd35fcca3fe0128af0",
    "prob_desc_notes": "NoteFor the first test case, the string is already a $$$4$$$-balanced bitstring.For the second test case, the string can be transformed into 101.For the fourth test case, the string can be transformed into 0110.For the fifth test case, the string can be transformed into 1100110.",
    "prob_desc_description": "A bitstring is a string consisting only of the characters 0 and 1. A bitstring is called $$$k$$$-balanced if every substring of size $$$k$$$ of this bitstring has an equal amount of 0 and 1 characters ($$$\\frac{k}{2}$$$ of each).You are given an integer $$$k$$$ and a string $$$s$$$ which is composed only of characters 0, 1, and ?. You need to determine whether you can make a $$$k$$$-balanced bitstring by replacing every ? characters in $$$s$$$ with either 0 or 1.A string $$$a$$$ is a substring of a string $$$b$$$ if $$$a$$$ can be obtained from $$$b$$$ by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.",
    "prob_desc_output_spec": "For each test case, print YES if we can replace every ? in $$$s$$$ with 0 or 1 such that the resulting bitstring is $$$k$$$-balanced, or NO if it is not possible.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^4$$$). Description of the test cases follows. The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$2 \\le k \\le n \\le 3 \\cdot 10^5$$$, $$$k$$$ is even)  — the length of the string and the parameter for a balanced bitstring. The next line contains the string $$$s$$$ ($$$|s| = n$$$). It is given that $$$s$$$ consists of only 0, 1, and ?. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$3 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_008.jsonl",
    "code_uid": "8d6a98127ecab401e63cae89d2926741",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"9\\n6 4\\n100110\\n3 2\\n1?1\\n3 2\\n1?0\\n4 4\\n????\\n7 4\\n1?0??1?\\n10 10\\n11??11??11\\n4 2\\n1??1\\n4 4\\n?0?0\\n6 2\\n????00\"]",
    "exec_outcome": "PASSED",
    "source_code": "\nfor ad in range(int(input())):\n\n    n,k=list(map(int,input().split()))\n    s=list(input())\n    l=[]\n    for i in range(1,n//k+1):\n        l.append(s[k*(i-1):k*i])\n    l.append(s[(n//k)*k:])\n    a=l[0]\n    t=0\n    #print(l)\n    for i in l:\n        if t==1:\n            break\n        for j in range(len(i)):\n            if a[j]==i[j]:\n                continue\n            elif i[j]==\"?\":\n                continue\n            elif a[j]==\"?\":\n                a[j]=i[j]\n            else:\n                t=1\n                break\n    if t==1:\n        print(\"NO\")\n    else:\n        if abs(a.count(\"0\")-a.count(\"1\"))<=a.count(\"?\"):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
    "prob_desc_created_at": "1599402900",
    "tags": [
        "implementation",
        "greedy",
        "strings"
    ],
    "hidden_unit_tests": ""
}