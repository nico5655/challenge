{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"odd\\neven\", \"odd\\nodd\\nodd\\neven\"]",
    "src_uid": "d20cc952cdf3a99e7d980a0270c49f78",
    "prob_desc_notes": "NoteThe first example:  after the first query a = [2, 1, 3], inversion: (2, 1);  after the second query a = [2, 3, 1], inversions: (3, 1), (3, 2). The second example:  a = [1, 2, 4, 3], inversion: (4, 3);  a = [3, 4, 2, 1], inversions: (3, 1), (4, 1), (3, 2), (4, 2), (4, 3);  a = [1, 2, 4, 3], inversion: (4, 3);  a = [1, 4, 2, 3], inversions: (3, 2), (4, 2). ",
    "prob_desc_description": "A permutation of size n is an array of size n such that each integer from 1 to n occurs exactly once in this array. An inversion in a permutation p is a pair of indices (i, j) such that i &gt; j and ai &lt; aj. For example, a permutation [4, 1, 3, 2] contains 4 inversions: (2, 1), (3, 1), (4, 1), (4, 3).You are given a permutation a of size n and m queries to it. Each query is represented by two indices l and r denoting that you have to reverse the segment [l, r] of the permutation. For example, if a = [1, 2, 3, 4] and a query l = 2, r = 4 is applied, then the resulting permutation is [1, 4, 3, 2].After each query you have to determine whether the number of inversions is odd or even.",
    "prob_desc_output_spec": "Print m lines. i-th of them must be equal to odd if the number of inversions in the permutation after i-th query is odd, and even otherwise.",
    "prob_desc_input_spec": "The first line contains one integer n (1 ≤ n ≤ 1500) — the size of the permutation.  The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ n) — the elements of the permutation. These integers are pairwise distinct. The third line contains one integer m (1 ≤ m ≤ 2·105) — the number of queries to process. Then m lines follow, i-th line containing two integers li, ri (1 ≤ li ≤ ri ≤ n) denoting that i-th query is to reverse a segment [li, ri] of the permutation. All queries are performed one after another.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_014.jsonl",
    "code_uid": "671cea094718fb26f8a5f182fd98655b",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n1 2 3\\n2\\n1 2\\n2 3\", \"4\\n1 2 4 3\\n4\\n1 1\\n1 4\\n1 4\\n2 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin, stdout\ninput, print = stdin.readline, stdout.write\nn = int(input())\na = [int(i) for i in input().split()]\nc = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        c += int(a[i] > a[j])\nc %= 2\nq = int(input())\nfor i in range(q):\n    l, r = [int(i) for i in input().split()]\n    c ^= (r - l) * (r - l + 1) // 2 % 2\n    print(\"odd\\n\" if c else \"even\\n\")",
    "prob_desc_created_at": "1514469900",
    "tags": [
        "brute force",
        "math"
    ],
    "hidden_unit_tests": ""
}