{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"12\", \"5\"]",
    "src_uid": "c789584f0a4b5d1cca1d6168e8261379",
    "prob_desc_notes": "NoteIn the first test case, the final portal is like this:11101001100110010111",
    "prob_desc_description": "CQXYM found a rectangle $$$A$$$ of size $$$n \\times m$$$. There are $$$n$$$ rows and $$$m$$$ columns of blocks. Each block of the rectangle is an obsidian block or empty. CQXYM can change an obsidian block to an empty block or an empty block to an obsidian block in one operation.A rectangle $$$M$$$ size of $$$a \\times b$$$ is called a portal if and only if it satisfies the following conditions:  $$$a \\geq 5,b \\geq 4$$$.  For all $$$1 &lt; x &lt; a$$$, blocks $$$M_{x,1}$$$ and $$$M_{x,b}$$$ are obsidian blocks.  For all $$$1 &lt; x &lt; b$$$, blocks $$$M_{1,x}$$$ and $$$M_{a,x}$$$ are obsidian blocks.  For all $$$1&lt;x&lt;a,1&lt;y&lt;b$$$, block $$$M_{x,y}$$$ is an empty block.  $$$M_{1, 1}, M_{1, b}, M_{a, 1}, M_{a, b}$$$ can be any type.  Note that the there must be $$$a$$$ rows and $$$b$$$ columns, not $$$b$$$ rows and $$$a$$$ columns.Note that corners can be any typeCQXYM wants to know the minimum number of operations he needs to make at least one sub-rectangle a portal.",
    "prob_desc_output_spec": "Output $$$t$$$ answers, and each answer in a line.",
    "prob_desc_input_spec": "The first line contains an integer $$$t$$$ ($$$t \\geq 1$$$), which is the number of test cases. For each test case, the first line contains two integers $$$n$$$ and $$$m$$$ ($$$5 \\le n \\le 400$$$, $$$4 \\le m \\le 400$$$).  Then $$$n$$$ lines follow, each line contains $$$m$$$ characters $$$0$$$ or $$$1$$$. If the $$$j$$$-th character of $$$i$$$-th line is $$$0$$$, block $$$A_{i,j}$$$ is an empty block. Otherwise, block $$$A_{i,j}$$$ is an obsidian block. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$400$$$. It is guaranteed that the sum of $$$m$$$ over all test cases does not exceed $$$400$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_089.jsonl",
    "code_uid": "2b0842a0d33b31228caa3a8c3fd936ea",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1\\n5 4\\n1000\\n0000\\n0110\\n0000\\n0001\", \"1\\n9 9\\n001010001\\n101110100\\n000010011\\n100000001\\n101010101\\n110001111\\n000001111\\n111100000\\n000110000\"]",
    "exec_outcome": "PASSED",
    "source_code": "\r\nimport os\r\nimport sys\r\nfrom collections import defaultdict,deque\r\nfrom io import BytesIO, IOBase\r\n# MOD = 10**9+7\r\n# nmax = 100\r\n \r\n# fact = [1] * (nmax+1)\r\n# for i in range(2, nmax+1):\r\n#     fact[i] = fact[i-1] * i % MOD\r\n    \r\n# inv = [1] * (nmax+1)\r\n# for i in range(2, nmax+1):\r\n#     inv[i] = pow(fact[i], MOD-2, MOD)\r\n \r\n \r\n# def C(n, m):\r\n#     return fact[n] * inv[m] % MOD * inv[n-m] % MOD if 0 <= m <= n else 0\r\n\r\nfrom collections import Counter\r\nfrom functools import lru_cache\r\nfrom collections import deque\r\ndef main():\r\n    # import bisect,math\r\n \r\n    # class SortedList():\r\n    #     BUCKET_RATIO = 50\r\n    #     REBUILD_RATIO = 170\r\n    \r\n    #     def __init__(self,buckets):\r\n    #         buckets = list(buckets)\r\n    #         buckets = sorted(buckets)\r\n    #         self._build(buckets)\r\n    \r\n    #     def __iter__(self):\r\n    #         for i in self.buckets:\r\n    #             for j in i: yield j\r\n    \r\n    #     def __reversed__(self):\r\n    #         for i in reversed(self.buckets):\r\n    #             for j in reversed(i): yield j\r\n    \r\n    #     def __len__(self):\r\n    #         return self.size\r\n    \r\n    #     def __contains__(self,x):\r\n    #         if self.size == 0: return False\r\n    #         bucket = self._find_bucket(x)\r\n    #         i = bisect.bisect_left(bucket,x)\r\n    #         return i != len(bucket) and bucket[i] == x\r\n    \r\n    #     def __getitem__(self,x):\r\n    #         if x < 0: x += self.size\r\n    #         if x < 0: raise IndexError\r\n    #         for i in self.buckets:\r\n    #             if x < len(i): return i[x]\r\n    #             x -= len(i)\r\n    #         raise IndexError\r\n    \r\n    #     def _build(self,buckets=None):\r\n    #         if buckets is None: buckets = list(self)\r\n    #         self.size = len(buckets)\r\n    #         bucket_size = int(math.ceil(math.sqrt(self.size/self.BUCKET_RATIO)))\r\n    #         tmp = []\r\n    #         for i in range(bucket_size):\r\n    #             t = buckets[(self.size*i)//bucket_size:(self.size*(i+1))//bucket_size]\r\n    #             tmp.append(t)\r\n    #         self.buckets = tmp\r\n    \r\n    #     def _find_bucket(self,x):\r\n    #         for i in self.buckets:\r\n    #             if x <= i[-1]:\r\n    #                 return i\r\n    #         return i\r\n    \r\n    #     def add(self,x):\r\n    #         # O(√N)\r\n    #         if self.size == 0:\r\n    #             self.buckets = [[x]]\r\n    #             self.size = 1\r\n    #             return True\r\n    \r\n    #         bucket = self._find_bucket(x)\r\n    #         bisect.insort(bucket,x)\r\n    #         self.size += 1\r\n    #         if len(bucket) > len(self.buckets) * self.REBUILD_RATIO:\r\n    #             self._build()\r\n    #         return True\r\n    \r\n    #     def remove(self,x):\r\n    #         # O(√N)\r\n    #         if self.size == 0: return False\r\n    #         bucket = self._find_bucket(x)\r\n    #         i = bisect.bisect_left(bucket,x)\r\n    #         if i == len(bucket) or bucket[i] != x: return False\r\n    #         bucket.pop(i)\r\n    #         self.size -= 1\r\n    #         if len(bucket) == 0: self._build()\r\n    #         return True\r\n    \r\n    #     def lt(self,x):\r\n    #         # less than < x\r\n    #         for i in reversed(self.buckets):\r\n    #             if i[0] < x:\r\n    #                 return i[bisect.bisect_left(i,x) - 1]\r\n    \r\n    #     def le(self,x):\r\n    #         # less than or equal to <= x\r\n    #         for i in reversed(self.buckets):\r\n    #             if i[0] <= x:\r\n    #                 return i[bisect.bisect_right(i,x) - 1]\r\n    \r\n    #     def gt(self,x):\r\n    #         # greater than > x\r\n    #         for i in self.buckets:\r\n    #             if i[-1] > x:\r\n    #                 return i[bisect.bisect_right(i,x)]\r\n    \r\n    #     def ge(self,x):\r\n    #         # greater than or equal to >= x\r\n    #         for i in self.buckets:\r\n    #             if i[-1] >= x:\r\n    #                 return i[bisect.bisect_left(i,x)]\r\n    #     def index(self,x):\r\n    #         # the number of elements < x\r\n    #         ans = 0\r\n    #         for i in self.buckets:\r\n    #             if i[-1] >= x:\r\n    #                 return ans + bisect.bisect_left(i,x)\r\n    #             ans += len(i)\r\n    #         return ans\r\n    \r\n    #     def index_right(self,x):\r\n    #         # the number of elements < x\r\n    #         ans = 0\r\n    #         for i in self.buckets:\r\n    #             if i[-1] > x:\r\n    #                 return ans + bisect.bisect_right(i,x)\r\n    #             ans += len(i)\r\n    #         return ans\r\n    for _ in range(int(input())):\r\n        n,m=map(int,input().split())\r\n        mat=[]\r\n        for _ in range(n):\r\n            b=[int(x) for x in input()]\r\n            mat.append(b)\r\n        dp=[[0]*(m+1) for _ in range(n+1)]\r\n        for i in range(1,n+1):\r\n            s=0\r\n            for j in range(1,m+1):\r\n                s+=mat[i-1][j-1]\r\n                dp[i][j]=dp[i-1][j]+s\r\n        def get(a,b,c,d):\r\n            return dp[c][d]+dp[a-1][b-1]-dp[c][b-1]-dp[a-1][d]\r\n        def get_p(a,b,c,d):\r\n            return 4-(mat[a-1][b-1]+mat[a-1][d-1]+mat[c-1][b-1]+mat[c-1][d-1])\r\n        mi=m*n\r\n        for i in range(1,n-3):\r\n            for j in range(1,m-2):\r\n                for k in range(i+4,n+1):\r\n                    left=k-i-1-get(i+1,j,k-1,j)\r\n                    if left>=mi:\r\n                        break\r\n                    for l in range(j+3,m+1):\r\n                        s=left+l-j-1-get(i,j+1,i,l-1)\r\n                        s+=l-j-1-get(k,j+1,k,l-1)\r\n                        s+=get(i+1,j+1,k-1,l-1)\r\n                        if s>=mi:\r\n                            break\r\n                        s+=k-i-1-get(i+1,l,k-1,l)\r\n                        mi=min(mi,s)\r\n        print(mi)\r\n                    \r\n\r\n\r\n#----------------------------------------------------------------------------------------\r\n \r\n \r\n# region fastio\r\n \r\nBUFSIZE = 8192\r\n \r\n \r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n \r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = 'x' in file.mode or 'r' not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n \r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n \r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b'\\n') + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n \r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n \r\n \r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode('ascii'))\r\n        self.read = lambda: self.buffer.read().decode('ascii')\r\n        self.readline = lambda: self.buffer.readline().decode('ascii')\r\n \r\n \r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\r\n \r\n \r\n# endregion\r\n \r\nif __name__ == '__main__':\r\n    main()",
    "prob_desc_created_at": "1632996900",
    "tags": [
        "brute force",
        "dp",
        "greedy",
        "implementation"
    ],
    "hidden_unit_tests": ""
}