{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"14\\n45\\n163\\n123\"]",
    "src_uid": "1ff25abd9d49de5e5ce3f7338ddef18c",
    "prob_desc_notes": "NoteIn the first test case, an optimal solution is to:   move $$$1$$$: $$$r = 4$$$, $$$b = 2$$$; no swap;  move $$$2$$$: $$$r = 7$$$, $$$b = 6$$$; swap (after it $$$r = 6$$$, $$$b = 7$$$);  move $$$3$$$: $$$r = 11$$$, $$$b = 9$$$; no swap. The total number of points is $$$|7 - 2| + |6 - 9| + |3 - 9| = 14$$$.  In the second test case, an optimal solution is to:   move $$$1$$$: $$$r = 2$$$, $$$b = 2$$$; no swap;  move $$$2$$$: $$$r = 3$$$, $$$b = 4$$$; no swap;  move $$$3$$$: $$$r = 5$$$, $$$b = 6$$$; no swap. The total number of points is $$$|32 - 32| + |78 - 69| + |5 - 41| = 45$$$.",
    "prob_desc_description": "You are given $$$n - 1$$$ integers $$$a_2, \\dots, a_n$$$ and a tree with $$$n$$$ vertices rooted at vertex $$$1$$$. The leaves are all at the same distance $$$d$$$ from the root. Recall that a tree is a connected undirected graph without cycles. The distance between two vertices is the number of edges on the simple path between them. All non-root vertices with degree $$$1$$$ are leaves. If vertices $$$s$$$ and $$$f$$$ are connected by an edge and the distance of $$$f$$$ from the root is greater than the distance of $$$s$$$ from the root, then $$$f$$$ is called a child of $$$s$$$.Initially, there are a red coin and a blue coin on the vertex $$$1$$$. Let $$$r$$$ be the vertex where the red coin is and let $$$b$$$ be the vertex where the blue coin is. You should make $$$d$$$ moves. A move consists of three steps:   Move the red coin to any child of $$$r$$$.  Move the blue coin to any vertex $$$b'$$$ such that $$$dist(1, b') = dist(1, b) + 1$$$. Here $$$dist(x, y)$$$ indicates the length of the simple path between $$$x$$$ and $$$y$$$. Note that $$$b$$$ and $$$b'$$$ are not necessarily connected by an edge.  You can optionally swap the two coins (or skip this step). Note that $$$r$$$ and $$$b$$$ can be equal at any time, and there is no number written on the root.After each move, you gain $$$|a_r - a_b|$$$ points. What's the maximum number of points you can gain after $$$d$$$ moves?",
    "prob_desc_output_spec": "For each test case, print a single integer: the maximum number of points you can gain after $$$d$$$ moves.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. The first line of each test case contains a single integer $$$n$$$ ($$$2 \\leq n \\leq 2 \\cdot 10^5$$$) — the number of vertices in the tree. The second line of each test case contains $$$n-1$$$ integers $$$v_2, v_3, \\dots, v_n$$$ ($$$1 \\leq v_i \\leq n$$$, $$$v_i \\neq i$$$)  — the $$$i$$$-th of them indicates that there is an edge between vertices $$$i$$$ and $$$v_i$$$. It is guaranteed, that these edges form a tree. The third line of each test case contains $$$n-1$$$ integers $$$a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the numbers written on the vertices. It is guaranteed that the sum of $$$n$$$ for all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2500,
    "file_name": "train_092.jsonl",
    "code_uid": "b97b6491b5a52140c6088795f877f62c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n14\\n1 1 1 2 3 4 4 5 5 6 7 8 8\\n2 3 7 7 6 9 5 9 7 3 6 6 5\\n6\\n1 2 2 3 4\\n32 78 69 5 41\\n15\\n1 15 1 10 4 9 11 2 4 1 8 6 10 11\\n62 13 12 43 39 65 42 86 25 38 19 19 43 62\\n15\\n11 2 7 6 9 8 10 1 1 1 5 3 15 2\\n50 19 30 35 9 45 13 24 8 44 16 26 10 40\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nI=lambda:[*map(int,sys.stdin.readline().split())]\n\nt, = I()\nfor _ in range(t):\n\tn, = I()\n\tpar = [0,0]+I()\n\ta = [0,0]+I()\n\tchildren = [[] for _ in range(n+1)]\n\tfor i in range(2, n+1):\n\t\tchildren[par[i]].append(i)\n\tlayers = [[1]]\n\twhile 1:\n\t\tnextlayer = []\n\t\tfor v in layers[-1]:\n\t\t\tfor u in children[v]:\n\t\t\t\tnextlayer.append(u)\n\t\tif len(nextlayer) == 0:\n\t\t\tbreak\n\t\tlayers.append(nextlayer)\n\tdp = [0]*(n+1)\n\tfor j in range(len(layers)-1, 0, -1):\n\t\tM = max(a[u] for u in layers[j])\n\t\tm = min(a[u] for u in layers[j])\n\t\tX = max(dp[u]+a[u] for u in layers[j])\n\t\tY = max(dp[u]-a[u] for u in layers[j])\n\t\tfor v in layers[j]:\n\t\t\tdp[v] = max(max(M-a[v], a[v]-m)+dp[v], X-a[v], Y+a[v])\n\t\t\tdp[par[v]] = max(dp[par[v]], dp[v])\n\tprint(dp[1])\n",
    "prob_desc_created_at": "1613141400",
    "tags": [
        "dfs and similar",
        "dp",
        "greedy",
        "trees"
    ],
    "hidden_unit_tests": ""
}