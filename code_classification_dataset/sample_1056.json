{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1 4\", \"-1\", \"4 3\", \"1 2 3 6\"]",
    "src_uid": "3afa68fbe090683ffe16c3141aafe76e",
    "prob_desc_notes": "NoteIn the first example, one of the possible divisions into two performances is as follows: in the first performance artists $$$1$$$ and $$$4$$$ should take part. Then the number of artists in the first performance who can perform as clowns is equal to $$$1$$$. And the number of artists in the second performance who can perform as acrobats is $$$1$$$ as well.In the second example, the division is not possible.In the third example, one of the possible divisions is as follows: in the first performance artists $$$3$$$ and $$$4$$$ should take part. Then in the first performance there are $$$2$$$ artists who can perform as clowns. And the number of artists in the second performance who can perform as acrobats is $$$2$$$ as well.",
    "prob_desc_description": "Polycarp is a head of a circus troupe. There are $$$n$$$ — an even number — artists in the troupe. It is known whether the $$$i$$$-th artist can perform as a clown (if yes, then $$$c_i = 1$$$, otherwise $$$c_i = 0$$$), and whether they can perform as an acrobat (if yes, then $$$a_i = 1$$$, otherwise $$$a_i = 0$$$).Split the artists into two performances in such a way that:   each artist plays in exactly one performance,  the number of artists in the two performances is equal (i.e. equal to $$$\\frac{n}{2}$$$),  the number of artists that can perform as clowns in the first performance is the same as the number of artists that can perform as acrobats in the second performance. ",
    "prob_desc_output_spec": "Print $$$\\frac{n}{2}$$$ distinct integers — the indices of the artists that should play in the first performance. If there are multiple answers, print any. If there is no solution, print a single integer $$$-1$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$n$$$ ($$$2 \\le n \\le 5\\,000$$$, $$$n$$$ is even) — the number of artists in the troupe. The second line contains $$$n$$$ digits $$$c_1 c_2 \\ldots c_n$$$, the $$$i$$$-th of which is equal to $$$1$$$ if the $$$i$$$-th artist can perform as a clown, and $$$0$$$ otherwise. The third line contains $$$n$$$ digits $$$a_1 a_2 \\ldots a_n$$$, the $$$i$$$-th of which is equal to $$$1$$$, if the $$$i$$$-th artist can perform as an acrobat, and $$$0$$$ otherwise.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_006.jsonl",
    "code_uid": "7b94f1abdd8ec6d193ce9ccc608808d6",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n0011\\n0101\", \"6\\n000000\\n111111\", \"4\\n0011\\n1100\", \"8\\n00100101\\n01111100\"]",
    "exec_outcome": "PASSED",
    "source_code": "#!/usr/bin/env python2\n\"\"\"\nThis file is part of https://github.com/cheran-senthil/PyRival\nCopyright 2019 Cheran Senthilkumar <hello@cheran.io>\n\n\"\"\"\nfrom __future__ import division, print_function\n\nimport itertools\nimport os\nimport sys\nfrom atexit import register\nfrom io import BytesIO\n\n\nclass dict(dict):\n    \"\"\"dict() -> new empty dictionary\"\"\"\n\n    def items(self):\n        \"\"\"D.items() -> a set-like object providing a view on D's items\"\"\"\n        return dict.iteritems(self)\n\n    def keys(self):\n        \"\"\"D.keys() -> a set-like object providing a view on D's keys\"\"\"\n        return dict.iterkeys(self)\n\n    def values(self):\n        \"\"\"D.values() -> an object providing a view on D's values\"\"\"\n        return dict.itervalues(self)\n\n\ndef gcd(x, y):\n    \"\"\"greatest common divisor of x and y\"\"\"\n    while y:\n        x, y = y, x % y\n    return x\n\n\nrange = xrange\n\nfilter = itertools.ifilter\nmap = itertools.imap\nzip = itertools.izip\n\nsys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\nsys.stdout = BytesIO()\nregister(lambda: os.write(1, sys.stdout.getvalue()))\n\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n\ndef main():\n    n = int(input())\n    a = zip(map(int, input()), map(int, input()))\n\n    m = [[], [], [], []]\n    for i, j in enumerate(a):\n        m[j[0] * 2 + j[1]].append(i + 1)\n\n    p1 = [0, 0, len(m[2]), 0]\n    p2 = [0, len(m[1]), 0, 0]\n\n    u = min(abs(p1[2] - p2[1]), len(m[3]))\n    if p1[2] < p2[1]:\n        p1[3] = u\n    else:\n        p2[3] = u\n\n    p1[3] += (len(m[3]) - u) // 2\n    p2[3] += (len(m[3]) - u) // 2\n\n    f1 = (len(m[3]) - u) % 2\n\n    if p1[2] + p1[3] < p2[1] + p2[3]:\n        u = min(abs(p1[2] + p1[3] - p2[1] - p2[3]), p2[1])\n        p2[1] -= u\n        p1[1] += u\n    else:\n        u = min(abs(p1[2] + p1[3] - p2[1] - p2[3]), p1[2])\n        p1[2] -= u\n        p2[2] += u\n\n    if p1[2] + p1[3] != p2[1] + p2[3]:\n        print(-1)\n        return\n\n    l1 = p1[1] + p1[2] + p1[3]\n    l2 = p2[1] + p2[2] + p2[3]\n    u = min(abs(l1 - l2), len(m[0]))\n    if l1 < l2:\n        p1[0] = u\n    else:\n        p2[0] = u\n\n    p1[0] += (len(m[0]) - u) // 2\n    p2[0] += (len(m[0]) - u) // 2\n\n    f2 = (len(m[0]) - u) % 2\n\n    l1 = p1[0] + p1[1] + p1[2] + p1[3]\n    l2 = p2[0] + p2[1] + p2[2] + p2[3]\n\n    if abs(l1 - l2) > 1:\n        print(-1)\n        return\n\n    if f1 == f2 == 1:\n        if abs(l1 - l2) == 0:\n            if p1[2]:\n                p1[0] += 1\n                p1[3] += 1\n                p1[2] -= 1\n                p2[2] += 1\n            elif p2[1]:\n                p2[0] += 1\n                p2[3] += 1\n                p2[1] -= 1\n                p1[1] += 1\n            else:\n                print(-1)\n                return\n        else:\n            print(-1)\n            return\n    elif f2 == 1:\n        if abs(l1 - l2) == 1:\n            p1[0] += l1 < l2\n            p2[0] += l1 > l2\n        else:\n            print(-1)\n            return\n    elif f1 == 1:\n        if abs(l1 - l2) == 1:\n            if p1[2]:\n                p1[2] -= 1\n                p1[3] += 1\n                p2[2] += 1\n            if p2[1]:\n                p2[1] -= 1\n                p2[3] += 1\n                p1[1] += 1\n        else:\n            print(-1)\n            return\n    elif abs(l1 - l2) == 1:\n        print(-1)\n        return\n\n    s = []\n    for i, j in enumerate(p1):\n        s += m[i][:j]\n    print(*s)\n\n\nif __name__ == '__main__':\n    main()\n",
    "prob_desc_created_at": "1552035900",
    "tags": [
        "brute force",
        "greedy",
        "math",
        "strings"
    ],
    "hidden_unit_tests": ""
}