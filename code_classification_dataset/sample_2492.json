{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1 2 4 3 6 7 5\", \"1 2 3 4 5\"]",
    "src_uid": "a67ea891cd6084ceeaace8894cf18e60",
    "prob_desc_notes": "NoteIn the first sample, the swap needed to obtain the prettiest permutation is: (p1, p7).In the second sample, the swaps needed to obtain the prettiest permutation is (p1, p3), (p4, p5), (p3, p4).   A permutation p is a sequence of integers p1, p2, ..., pn, consisting of n distinct positive integers, each of them doesn't exceed n. The i-th element of the permutation p is denoted as pi. The size of the permutation p is denoted as n.",
    "prob_desc_description": "User ainta has a permutation p1, p2, ..., pn. As the New Year is coming, he wants to make his permutation as pretty as possible.Permutation a1, a2, ..., an is prettier than permutation b1, b2, ..., bn, if and only if there exists an integer k (1 ≤ k ≤ n) where a1 = b1, a2 = b2, ..., ak - 1 = bk - 1 and ak &lt; bk all holds.As known, permutation p is so sensitive that it could be only modified by swapping two distinct elements. But swapping two elements is harder than you think. Given an n × n binary matrix A, user ainta can swap the values of pi and pj (1 ≤ i, j ≤ n, i ≠ j) if and only if Ai, j = 1.Given the permutation p and the matrix A, user ainta wants to know the prettiest permutation that he can obtain.",
    "prob_desc_output_spec": "In the first and only line, print n space-separated integers, describing the prettiest permutation that can be obtained.",
    "prob_desc_input_spec": "The first line contains an integer n (1 ≤ n ≤ 300) — the size of the permutation p. The second line contains n space-separated integers p1, p2, ..., pn — the permutation p that user ainta has. Each integer between 1 and n occurs exactly once in the given permutation. Next n lines describe the matrix A. The i-th line contains n characters '0' or '1' and describes the i-th row of A. The j-th character of the i-th line Ai, j is the element on the intersection of the i-th row and the j-th column of A. It is guaranteed that, for all integers i, j where 1 ≤ i &lt; j ≤ n, Ai, j = Aj, i holds. Also, for all integers i where 1 ≤ i ≤ n, Ai, i = 0 holds.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_023.jsonl",
    "code_uid": "01de2d8acf297a6644650db0a0fab976",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7\\n5 2 4 3 6 7 1\\n0001001\\n0000000\\n0000010\\n1000001\\n0000000\\n0010000\\n1001000\", \"5\\n4 2 1 5 3\\n00100\\n00011\\n10010\\n01101\\n01010\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = input()\nA = map(int, raw_input().split())\nM = [raw_input() for ii in range(n)]\n\nseen = [False for ii in range(n)]\n\nvi = []\ndef dfs(id):\n\tseen[id] = True\n\tvi.append(id)\n\tfor ii in range(n):\n\t\tif M[id][ii] == '1' and seen[ii] == False:\n\t\t\tdfs(ii)\n\nfor ii in range(0,n):\n\tif seen[ii] == False:\n\t\tvi = []\n\t\tdfs(ii)\n\t\tk = [A[x] for x in vi]\n\t\tk.sort()\n\t\tvi.sort()\n\t\t# print vi, k\n\t\tfor jj in range(len(vi)):\n\t\t\tA[vi[jj]] = k[jj]\n\nfor ii in A:\n\tprint ii,",
    "prob_desc_created_at": "1419951600",
    "tags": [
        "greedy",
        "graphs",
        "math",
        "dsu",
        "sortings",
        "dfs and similar"
    ],
    "hidden_unit_tests": ""
}