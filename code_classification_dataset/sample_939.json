{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"0\", \"3\"]",
    "src_uid": "5ebb0ee239d68ea33d9dac2d0bdd5f4e",
    "prob_desc_notes": null,
    "prob_desc_description": "After you had helped George and Alex to move in the dorm, they went to help their friend Fedor play a new computer game «Call of Soldiers 3».The game has (m + 1) players and n types of soldiers in total. Players «Call of Soldiers 3» are numbered form 1 to (m + 1). Types of soldiers are numbered from 0 to n - 1. Each player has an army. Army of the i-th player can be described by non-negative integer xi. Consider binary representation of xi: if the j-th bit of number xi equal to one, then the army of the i-th player has soldiers of the j-th type. Fedor is the (m + 1)-th player of the game. He assume that two players can become friends if their armies differ in at most k types of soldiers (in other words, binary representations of the corresponding numbers differ in at most k bits). Help Fedor and count how many players can become his friends.",
    "prob_desc_output_spec": "Print a single integer — the number of Fedor's potential friends.",
    "prob_desc_input_spec": "The first line contains three integers n, m, k (1 ≤ k ≤ n ≤ 20; 1 ≤ m ≤ 1000). The i-th of the next (m + 1) lines contains a single integer xi (1 ≤ xi ≤ 2n - 1), that describes the i-th player's army. We remind you that Fedor is the (m + 1)-th player.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_005.jsonl",
    "code_uid": "37d28aacd52257a23dd10ddfba58176c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7 3 1\\n8\\n5\\n111\\n17\", \"3 3 3\\n1\\n2\\n3\\n4\"]",
    "exec_outcome": "PASSED",
    "source_code": "# bsdk idhar kya dekhne ko aaya hai, khud kr!!!\n# import math\n# from itertools import *\n# import random\n# import calendar\n# import datetime\n# import webbrowser\n\nn, m, k = map(int, input().split())\narr = []\nfinal = 0\nfor i in range(0, m+1):\n    arr.append(int(input()))\nfor i in range(0, m):\n    x = arr[i] ^ arr[m]\n    count = 0\n    for j in range(0, n+1):\n        y = 1 << j\n        z = x & y\n        if z == y:\n            count += 1\n    if count <= k:\n        final += 1\nprint(final)\n",
    "prob_desc_created_at": "1411054200",
    "tags": [
        "constructive algorithms",
        "implementation",
        "bitmasks",
        "brute force"
    ],
    "hidden_unit_tests": ""
}