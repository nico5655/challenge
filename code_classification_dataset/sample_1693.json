{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\", \"0\"]",
    "src_uid": "406fadc8750f8ef32551916d474ae143",
    "prob_desc_notes": "NoteIn the first test sample one of the possible variants of an division is following: the first three children form a group with sociability 2, and the two remaining children form a group with sociability 1.In the second test sample any division leads to the same result, the sociability will be equal to 0 in each group.",
    "prob_desc_description": "In a kindergarten, the children are being divided into groups. The teacher put the children in a line and associated each child with his or her integer charisma value. Each child should go to exactly one group. Each group should be a nonempty segment of consecutive children of a line. A group's sociability is the maximum difference of charisma of two children in the group (in particular, if the group consists of one child, its sociability equals a zero). The teacher wants to divide the children into some number of groups in such way that the total sociability of the groups is maximum. Help him find this value.",
    "prob_desc_output_spec": "Print the maximum possible total sociability of all groups.",
    "prob_desc_input_spec": "The first line contains integer n — the number of children in the line (1 ≤ n ≤ 106). The second line contains n integers ai — the charisma of the i-th child ( - 109 ≤ ai ≤ 109).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_011.jsonl",
    "code_uid": "62f3fa9c1f476ace696a04fa91521ed1",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n1 2 3 1 2\", \"3\\n3 3 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin\nfrom itertools import repeat\ndef main():\n    n = int(stdin.readline())\n    a = map(int, stdin.readline().split(), repeat(10, n))\n    if n == 1:\n        print 0\n        return\n    if n == 2:\n        print abs(a[1] - a[0])\n        return\n    b = [a[i+1] - a[i] for i in xrange(n-1)]\n    dp = []\n    s = 0\n    for i, x in enumerate(a[1:-1], 1):\n        if a[i-1] < x > a[i+1]:\n            if not dp:\n                dp = [b[i-1] - b[i], -b[i], b[i-1]]\n            else:\n                dp = [min(dp[0], dp[1]) - b[i], dp[2] - b[i], min(dp[0], dp[1])]\n        elif a[i-1] > x < a[i+1]:\n            if not dp:\n                dp = [-b[i-1] + b[i], b[i], -b[i-1]]\n            else:\n                dp = [min(dp[0], dp[1]) + b[i], dp[2] + b[i], min(dp[0], dp[1])]\n        elif dp:\n            s += min(dp)\n            del dp[:]\n    if dp:\n        s += min(dp)\n    print sum(map(abs, b)) - s\nmain()\n",
    "prob_desc_created_at": "1415205000",
    "tags": [
        "dp",
        "greedy",
        "data structures"
    ],
    "hidden_unit_tests": ""
}