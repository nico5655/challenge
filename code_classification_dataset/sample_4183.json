{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"5\", \"3\", \"3\", \"92\"]",
    "src_uid": "f5f3b9c93060f231a55b941a7fa804e1",
    "prob_desc_notes": "NoteConsider the first example. In this test, we don't really have any choice, so we need to add at least five progressions to make the first element equals $$$5$$$. The array $$$a$$$ becomes $$$[5, 10, 15]$$$.Consider the second example. In this test, let's add one progression on the segment $$$[1; 3]$$$ and two progressions on the segment $$$[4; 6]$$$. Then, the array $$$a$$$ becomes $$$[1, 2, 3, 2, 4, 6]$$$.",
    "prob_desc_description": "You are given two arrays: an array $$$a$$$ consisting of $$$n$$$ zeros and an array $$$b$$$ consisting of $$$n$$$ integers.You can apply the following operation to the array $$$a$$$ an arbitrary number of times: choose some subsegment of $$$a$$$ of length $$$k$$$ and add the arithmetic progression $$$1, 2, \\ldots, k$$$ to this subsegment — i. e. add $$$1$$$ to the first element of the subsegment, $$$2$$$ to the second element, and so on. The chosen subsegment should be inside the borders of the array $$$a$$$ (i.e., if the left border of the chosen subsegment is $$$l$$$, then the condition $$$1 \\le l \\le l + k - 1 \\le n$$$ should be satisfied). Note that the progression added is always $$$1, 2, \\ldots, k$$$ but not the $$$k, k - 1, \\ldots, 1$$$ or anything else (i.e., the leftmost element of the subsegment always increases by $$$1$$$, the second element always increases by $$$2$$$ and so on).Your task is to find the minimum possible number of operations required to satisfy the condition $$$a_i \\ge b_i$$$ for each $$$i$$$ from $$$1$$$ to $$$n$$$. Note that the condition $$$a_i \\ge b_i$$$ should be satisfied for all elements at once.",
    "prob_desc_output_spec": "Print one integer — the minimum possible number of operations required to satisfy the condition $$$a_i \\ge b_i$$$ for each $$$i$$$ from $$$1$$$ to $$$n$$$.",
    "prob_desc_input_spec": "The first line of the input contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 3 \\cdot 10^5$$$) — the number of elements in both arrays and the length of the subsegment, respectively. The second line of the input contains $$$n$$$ integers $$$b_1, b_2, \\ldots, b_n$$$ ($$$1 \\le b_i \\le 10^{12}$$$), where $$$b_i$$$ is the $$$i$$$-th element of the array $$$b$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1900,
    "file_name": "train_092.jsonl",
    "code_uid": "eec99bf071e346752971ea1be67c78a2",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 3\\n5 4 6\", \"6 3\\n1 2 3 2 2 3\", \"6 3\\n1 2 4 1 2 3\", \"7 3\\n50 17 81 25 42 39 96\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\ninput = sys.stdin.readline\r\nn,k=map(int,input().split())\r\nb=list(map(int,input().split()))\r\nclosed=[0]*n\r\ntot=0\r\ncnt=0\r\nans=0\r\nfor i in range(n-1,-1,-1):\r\n  tot-=cnt\r\n  cnt-=closed[i]\r\n  b[i]-=tot\r\n  if b[i]<=0:\r\n    continue\r\n  el=min(i+1,k)\r\n  need=-(-b[i]//el)\r\n  tot+=need*el\r\n  cnt+=need\r\n  ans+=need\r\n  if i-el>=0:\r\n    closed[i-el]+=need\r\nprint(ans)",
    "prob_desc_created_at": "1649514900",
    "tags": [
        "data structures",
        "greedy"
    ],
    "hidden_unit_tests": ""
}