{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"5 1 3 6 16 35 46 4 200 99\", \"10 10 6 6 5\"]",
    "src_uid": "573995cbae2a7b28ed92d71c48cd9039",
    "prob_desc_notes": "NoteLet's have a closer look at the answer for the first sample test.   The princess said «Oh...» (highlighted in bold): 5 1 3 6 16 35 46 4 200 99.  The princess exclaimed «Wow!» (highlighted in bold): 5 1 3 6 16 35 46 4 200 99. ",
    "prob_desc_description": "«Next please», — the princess called and cast an estimating glance at the next groom.The princess intends to choose the most worthy groom, this is, the richest one. Whenever she sees a groom who is more rich than each of the previous ones, she says a measured «Oh...». Whenever the groom is richer than all previous ones added together, she exclaims «Wow!» (no «Oh...» in this case). At the sight of the first groom the princess stays calm and says nothing.The fortune of each groom is described with an integer between 1 and 50000. You know that during the day the princess saw n grooms, said «Oh...» exactly a times and exclaimed «Wow!» exactly b times. Your task is to output a sequence of n integers t1, t2, ..., tn, where ti describes the fortune of i-th groom. If several sequences are possible, output any of them. If no sequence exists that would satisfy all the requirements, output a single number -1.",
    "prob_desc_output_spec": "Output any sequence of integers t1, t2, ..., tn, where ti (1 ≤ ti ≤ 50000) is the fortune of i-th groom, that satisfies the given constraints. If no sequence exists that would satisfy all the requirements, output a single number -1.",
    "prob_desc_input_spec": "The only line of input data contains three integer numbers n, a and b (1 ≤ n ≤ 100, 0 ≤ a, b ≤ 15, n &gt; a + b), separated with single spaces.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_012.jsonl",
    "code_uid": "597cde76268c1c99c866fa4f8ca0ee6f",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"10 2 3\", \"5 0 0\"]",
    "exec_outcome": "PASSED",
    "source_code": "n, a, b = map(int, input().strip().split())\nans = list()\nsum1 = 1\nans.append(1)\nres = 1\nfor i in range(2, n+1):\n\tpass\n\tif b != 0:\n\t\tpass\n\t\tres = sum1 + 1\n\t\tb = b - 1\n\telif a > 0 and i > 2:\n\t\tres = res + 1\n\t\ta = a - 1\n\tans.append(res)\n\tsum1 += res\nif a > 0 or b > 0:\n\tpass\n\tprint(-1)\nelse:\n\tprint(1, end = \" \")\n\tfor x in range(1,n):\n\t\tpass\n\t\tprint(ans[x], end=\" \")",
    "prob_desc_created_at": "1328198400",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "hidden_unit_tests": ""
}