{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\\n2 4\\n3 3\\n3 1\"]",
    "src_uid": "591372383cf3624f69793c41370022de",
    "prob_desc_notes": null,
    "prob_desc_description": "Numbers $$$1, 2, 3, \\dots n$$$ (each integer from $$$1$$$ to $$$n$$$ once) are written on a board. In one operation you can erase any two numbers $$$a$$$ and $$$b$$$ from the board and write one integer $$$\\frac{a + b}{2}$$$ rounded up instead.You should perform the given operation $$$n - 1$$$ times and make the resulting number that will be left on the board as small as possible. For example, if $$$n = 4$$$, the following course of action is optimal:  choose $$$a = 4$$$ and $$$b = 2$$$, so the new number is $$$3$$$, and the whiteboard contains $$$[1, 3, 3]$$$;  choose $$$a = 3$$$ and $$$b = 3$$$, so the new number is $$$3$$$, and the whiteboard contains $$$[1, 3]$$$;  choose $$$a = 1$$$ and $$$b = 3$$$, so the new number is $$$2$$$, and the whiteboard contains $$$[2]$$$. It's easy to see that after $$$n - 1$$$ operations, there will be left only one number. Your goal is to minimize it.",
    "prob_desc_output_spec": "For each test case, in the first line, print the minimum possible number left on the board after $$$n - 1$$$ operations. Each of the next $$$n - 1$$$ lines should contain two integers — numbers $$$a$$$ and $$$b$$$ chosen and erased in each operation.",
    "prob_desc_input_spec": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases. The only line of each test case contains one integer $$$n$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$) — the number of integers written on the board initially. It's guaranteed that the total sum of $$$n$$$ over test cases doesn't exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1000,
    "file_name": "train_000.jsonl",
    "code_uid": "88084dde61bbebdebe163309a2bda179",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1\\n4\"]",
    "exec_outcome": "PASSED",
    "source_code": "\ndef ii(): return int(input())\ndef mi(): return map(int, input().split())\n\n\nif __name__ == '__main__':\n    for _ in range(ii()):\n        n = ii()\n        # if n == 3:\n        #     print(\"2\\n3 1\\n2 2\")\n        #     continue\n        if n == 2:\n            print(\"2\\n2 1\")\n            continue\n\n        l = list(range(1, n+1))\n        a = l.pop()\n        answer = []\n        b = l.pop(-2)\n        answer.append((a, b))\n        a = int((a + b) / 2)\n        while l:\n            b = l.pop()\n            answer.append((a, b))\n            a = int((a + b) / 2)\n        print(a)\n        for i in answer:\n            print(*i)\n\n\n\n",
    "prob_desc_created_at": "1602407100",
    "tags": [
        "greedy",
        "constructive algorithms",
        "math",
        "implementation",
        "data structures"
    ],
    "hidden_unit_tests": ""
}