{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\\nNO\\nNO\\nNO\\nYES\", \"NO\\nNO\\nYES\"]",
    "src_uid": "ac8519dfce1b3b1fafc02820563a2dbd",
    "prob_desc_notes": "NoteExplanation of the test from the condition: Initially $$$A=[2,2,1]$$$, $$$B=[0,0,0]$$$. After operation \"A 1 3\": $$$A=[0,0,0]$$$, $$$B=[0,0,0]$$$ (addition is modulo 3). After operation \"A 1 3\": $$$A=[1,1,2]$$$, $$$B=[0,0,0]$$$. After operation \"B 1 1\": $$$A=[1,1,2]$$$, $$$B=[1,0,0]$$$. After operation \"B 2 2\": $$$A=[1,1,2]$$$, $$$B=[1,1,0]$$$. After operation \"A 3 3\": $$$A=[1,1,0]$$$, $$$B=[1,1,0]$$$.",
    "prob_desc_description": "One of my most productive days was throwing away 1,000 lines of code.— Ken ThompsonFibonacci addition is an operation on an array $$$X$$$ of integers, parametrized by indices $$$l$$$ and $$$r$$$. Fibonacci addition increases $$$X_l$$$ by $$$F_1$$$, increases $$$X_{l + 1}$$$ by $$$F_2$$$, and so on up to $$$X_r$$$ which is increased by $$$F_{r - l + 1}$$$.$$$F_i$$$ denotes the $$$i$$$-th Fibonacci number ($$$F_1 = 1$$$, $$$F_2 = 1$$$, $$$F_{i} = F_{i - 1} + F_{i - 2}$$$ for $$$i &gt; 2$$$), and all operations are performed modulo $$$MOD$$$.You are given two arrays $$$A$$$ and $$$B$$$ of the same length. We will ask you to perform several Fibonacci additions on these arrays with different parameters, and after each operation you have to report whether arrays $$$A$$$ and $$$B$$$ are equal modulo $$$MOD$$$.",
    "prob_desc_output_spec": "After each operation, print \"YES\" (without quotes) if the arrays are equal and \"NO\" otherwise. Letter case does not matter.",
    "prob_desc_input_spec": "The first line contains 3 numbers $$$n$$$, $$$q$$$ and $$$MOD$$$ ($$$1 \\le n, q \\le 3\\cdot 10^5, 1 \\le MOD \\le 10^9+7$$$) — the length of the arrays, the number of operations, and the number modulo which all operations are performed. The second line contains $$$n$$$ numbers — array $$$A$$$ ($$$0 \\le A_i &lt; MOD$$$). The third line also contains $$$n$$$ numbers — array $$$B$$$ ($$$0 \\le B_i &lt; MOD$$$). The next $$$q$$$ lines contain character $$$c$$$ and two numbers $$$l$$$ and $$$r$$$ ($$$1 \\le l \\le r \\le n$$$) — operation parameters. If $$$c$$$ is \"A\", Fibonacci addition is to be performed on array $$$A$$$, and if it is is \"B\", the operation is to be performed on $$$B$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 2700,
    "file_name": "train_107.jsonl",
    "code_uid": "0dc4ee3a39acbca3dbdcc3bf2b7fbd08",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 5 3\\n2 2 1\\n0 0 0\\nA 1 3\\nA 1 3\\nB 1 1\\nB 2 2\\nA 3 3\", \"5 3 10\\n2 5 0 3 5\\n3 5 8 2 5\\nB 2 3\\nB 3 4\\nA 1 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "# import sys\r\n# I = lambda: [*map(int, sys.stdin.readline().split())]\r\n\r\nimport io,os\r\nread = io.BytesIO(os.read(0, os.fstat(0).st_size))\r\nI = lambda: read.readline().split()\r\n\r\nn, q, M = map(int, I())\r\nF = [1, 1]\r\nperiod = None\r\nfor i in range(n - 1):\r\n\tF.append((F[-1] + F[-2]) % M)\r\n\r\nA = [*map(int, I())]\r\nB = [*map(int, I())]\r\nd = [(A[i] - B[i]) % M for i in range(n)]\r\n\r\nfd = [d[0]]\r\nif n > 1:\r\n\tfd.append((d[1] - d[0]) % M)\r\nfor i in range(2, n):\r\n\tfd.append((d[i] - d[i - 1] - d[i - 2]) % M)\r\n\r\ns = sum(fd)\r\nout = []\r\n\r\nfor i in range(q):\r\n\tss, l, r = I()\r\n\tif ss.decode('utf-8') == 'A':\r\n\t\tmul = 1\r\n\telse:\r\n\t\tmul = -1\r\n\tl = int(l) - 1\r\n\tr = int(r)\r\n\ts -= fd[l]\r\n\tfd[l] = (fd[l] + mul) % M\r\n\ts += fd[l]\r\n\tif r + 1 < n:\r\n\t\ts -= fd[r + 1]\r\n\t\tfd[r + 1] = (fd[r + 1] - mul * F[r - l - 1]) % M\r\n\t\ts += fd[r + 1]\r\n\tif r < n:\r\n\t\ts -= fd[r]\r\n\t\tfd[r] = (fd[r] - mul * F[r - l]) % M\r\n\t\ts += fd[r]\r\n\tif s == 0:\r\n\t\tout.append('YES')\r\n\telse:\r\n\t\tout.append('NO')\r\n\r\nprint('\\n'.join(out))",
    "prob_desc_created_at": "1644158100",
    "tags": [
        "brute force",
        "data structures",
        "hashing",
        "implementation",
        "math"
    ],
    "hidden_unit_tests": ""
}