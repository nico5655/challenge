{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"4\", \"2\", \"1\"]",
    "src_uid": "4c2d804bb2781abfb43558f8b2c6424f",
    "prob_desc_notes": "NoteIn the first example Makes always chooses three ones out of four, and the number of ways to choose them is 4.In the second example a triple of numbers (1, 2, 3) is chosen (numbers, not indices). Since there are two ways to choose an element 3, then the answer is 2.In the third example a triple of numbers (1, 1, 2) is chosen, and there's only one way to choose indices.",
    "prob_desc_description": "After returning from the army Makes received a gift — an array a consisting of n positive integer numbers. He hadn't been solving problems for a long time, so he became interested to answer a particular question: how many triples of indices (i,  j,  k) (i &lt; j &lt; k), such that ai·aj·ak is minimum possible, are there in the array? Help him with it!",
    "prob_desc_output_spec": "Print one number — the quantity of triples (i,  j,  k) such that i,  j and k are pairwise distinct and ai·aj·ak is minimum possible.",
    "prob_desc_input_spec": "The first line of input contains a positive integer number n (3 ≤ n ≤ 105) — the number of elements in array a. The second line contains n positive integer numbers ai (1 ≤ ai ≤ 109) — the elements of a given array.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_019.jsonl",
    "code_uid": "970b06772d12071fc6967ac39b74625d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n1 1 1 1\", \"5\\n1 3 2 3 4\", \"6\\n1 3 3 1 3 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input())\na = sorted(list(map(int,input().split())))\nmin1 = a[0];min2 = a[1];min3 = a[2]\nt = True\nif(min1 == min2 and min2 == min3):\n    cnt = 0\n    for i in a:\n        if i == min1:\n            cnt += 1\n    cnt = cnt * (cnt-1) * (cnt-2)\n    print(cnt // 6)\n    t = False\n\nif(min1 == min2 and t):\n    cnt12 = 0\n    cnt3 = 0\n    for i in a:\n        if i == min1:\n            cnt12 += 1\n        if i == min3:\n            cnt3 += 1\n    print((cnt12 * (cnt12 - 1) // 2 ) * cnt3)\n\n\nif(min1 == min3 and t):\n    cnt13 = 0\n    cnt2 = 0\n    for i in a:\n        if i == min1:\n            cnt13 += 1\n        if i == min2:\n            cnt2 += 1\n    print((cnt13 * (cnt13 - 1) // 2 ) * cnt2)\n\n\n\n\nif(min3 == min2 and t):\n    cnt32 = 0\n    cnt1 = 0\n    for i in a:\n        if i == min3:\n            cnt32 += 1\n        if i == min1:\n            cnt1 += 1\n    print((cnt32 * (cnt32 - 1) // 2 ) * cnt1)\n\nif(min1 != min2 and min2 != min3 and min1 != min3):\n    cnt1 = 0;cnt2 = 0;cnt3 = 0\n    for i in a:\n        if i == min1:cnt1+=1\n        if i == min2:cnt2+=1\n        if i == min3:cnt3+=1\n    print(cnt1*cnt2*cnt3)\n",
    "prob_desc_created_at": "1497539100",
    "tags": [
        "combinatorics",
        "implementation",
        "sortings",
        "math"
    ],
    "hidden_unit_tests": ""
}