{
    "prob_desc_time_limit": "1.5 seconds",
    "prob_desc_sample_outputs": "[\"3\\n5\\n11\\n0\"]",
    "src_uid": "a20911c30d7246e47d6fd57a05d1e556",
    "prob_desc_notes": "NoteIn the first case, one possible sequence of operations is as follows.   Choose $$$i=1$$$ and $$$j=2$$$, yielding the array $$$[1,1,0]$$$.  Choose $$$i=1$$$ and $$$j=3$$$, yielding the array $$$[0,1,1]$$$.  Choose $$$i=2$$$ and $$$j=3$$$, yielding the array $$$[0,0,2]$$$.  At this point, $$$a_1=a_2=0$$$, completing the process.In the second case, one possible sequence of operations is as follows.   Choose $$$i=4$$$ and $$$j=5$$$, yielding the array $$$[0,2,0,1,1]$$$.  Choose $$$i=2$$$ and $$$j=3$$$, yielding the array $$$[0,1,1,1,1]$$$.  Choose $$$i=2$$$ and $$$j=5$$$, yielding the array $$$[0,0,1,1,2]$$$.  Choose $$$i=3$$$ and $$$j=5$$$, yielding the array $$$[0,0,0,1,3]$$$.  Choose $$$i=4$$$ and $$$j=5$$$, yielding the array $$$[0,0,0,0,4]$$$. In the last case, the array already satisfies the condition.",
    "prob_desc_description": "Mark is cleaning a row of $$$n$$$ rooms. The $$$i$$$-th room has a nonnegative dust level $$$a_i$$$. He has a magical cleaning machine that can do the following three-step operation.   Select two indices $$$i&lt;j$$$ such that the dust levels $$$a_i$$$, $$$a_{i+1}$$$, $$$\\dots$$$, $$$a_{j-1}$$$ are all strictly greater than $$$0$$$.  Set $$$a_i$$$ to $$$a_i-1$$$.  Set $$$a_j$$$ to $$$a_j+1$$$.  Mark's goal is to make $$$a_1 = a_2 = \\ldots = a_{n-1} = 0$$$ so that he can nicely sweep the $$$n$$$-th room. Determine the minimum number of operations needed to reach his goal.",
    "prob_desc_output_spec": "For each test case, print a line containing a single integer — the minimum number of operations. It can be proven that there is a sequence of operations that meets the goal.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1\\leq t\\leq 10^4$$$) — the number of test cases. The first line of each test case contains a single integer $$$n$$$ ($$$2\\leq n\\leq 2\\cdot 10^5$$$) — the number of rooms. The second line of each test case contains $$$n$$$ integers $$$a_1$$$, $$$a_2$$$, ..., $$$a_n$$$ ($$$0\\leq a_i\\leq 10^9$$$) — the dust level of each room. It is guaranteed that the sum of $$$n$$$ across all test cases does not exceed $$$2\\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 900,
    "file_name": "train_100.jsonl",
    "code_uid": "06c5dec8849f7ab37f30e375e2536d88",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n\\n3\\n\\n2 0 0\\n\\n5\\n\\n0 2 0 2 0\\n\\n6\\n\\n2 0 3 0 4 6\\n\\n4\\n\\n0 0 0 10\"]",
    "exec_outcome": "PASSED",
    "source_code": "t = int(input().strip())\r\ndef check(a,n):\r\n    re = 0\r\n    for i in range(n-1):\r\n        if a[i] != 0:\r\n            a = a[i:n-1]\r\n            break\r\n    if (len(a)==n):\r\n        return 0\r\n    for i in range(len(a)):\r\n        if a[i] != 0:\r\n            re+=a[i]\r\n        elif a[i] == 0:\r\n            re+=1\r\n    return re\r\nfor _ in range(t):\r\n    n = int(input().strip())\r\n    a = list(map(int, input().split(' ')))\r\n    print(check(a,n))",
    "prob_desc_created_at": "1657892100",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation"
    ],
    "hidden_unit_tests": ""
}