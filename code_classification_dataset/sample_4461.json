{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"4 2 6 5 3 1\\n-1\\n6 4 5 1 3 2 \\n3 2 4 1 \\n-1\\n1 2 \\n2 1\"]",
    "src_uid": "6ea491419f3ea387cf2aded8a8db914d",
    "prob_desc_notes": null,
    "prob_desc_description": "A permutation of length $$$n$$$ is an array $$$p=[p_1,p_2,\\dots, p_n]$$$ which contains every integer from $$$1$$$ to $$$n$$$ (inclusive) exactly once. For example, $$$p=[4, 2, 6, 5, 3, 1]$$$ is a permutation of length $$$6$$$.You are given three integers $$$n$$$, $$$a$$$ and $$$b$$$, where $$$n$$$ is an even number. Print any permutation of length $$$n$$$ that the minimum among all its elements of the left half equals $$$a$$$ and the maximum among all its elements of the right half equals $$$b$$$. Print -1 if no such permutation exists.",
    "prob_desc_output_spec": "For each test case, print a single line containing any suitable permutation. Print -1 no such permutation exists. If there are multiple answers, print any of them.",
    "prob_desc_input_spec": "The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 1000$$$), the number of test cases in the test. The following $$$t$$$ lines contain test case descriptions. Each test case description contains three integers $$$n$$$, $$$a$$$, $$$b$$$ ($$$2 \\le n \\le 100$$$; $$$1 \\le a,b \\le n$$$; $$$a \\ne b$$$), where $$$n$$$ is an even number (i.e. $$$n \\bmod 2 = 0$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 900,
    "file_name": "train_098.jsonl",
    "code_uid": "a236a809af5e03d12bc176049434a7b4",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"7\\n6 2 5\\n6 1 3\\n6 4 3\\n4 2 4\\n10 5 3\\n2 1 2\\n2 2 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "tst = int(input())\r\n \r\nfor i in range(tst):\r\n    n,a,b = map(int,input().split())\r\n    c = [a]\r\n    for i in range(n, 0, -1):\r\n        if i != a and i != b:\r\n            c.append(i)\r\n    c.append(b)\r\n    if(len(c) == n and min(c[0:n//2]) == a and max(c[n//2:n]) == b):\r\n        print(*c)\r\n    else:\r\n        print(-1)\r\n            ",
    "prob_desc_created_at": "1637573700",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "hidden_unit_tests": ""
}