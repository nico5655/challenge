{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"? 1 1 5 5\\n? 1 1 3 3\\n? 1 1 3 1\\n? 2 2 2 2\\n? 3 3 5 5\\n? 3 3 3 5\\n? 3 3 3 4\\n? 3 4 3 5\\n! 2 2 2 2 3 4 3 5\"]",
    "src_uid": "e27d96e0d94a3f03d86f597f1afef4fe",
    "prob_desc_notes": null,
    "prob_desc_description": "Filya just learned new geometry object — rectangle. He is given a field consisting of n × n unit cells. Rows are numbered from bottom to top with integer from 1 to n. Columns are numbered from left to right with integers from 1 to n. Cell, located at the intersection of the row r and column c is denoted as (r, c). Filya has painted two rectangles, such that their sides are parallel to coordinate axes and each cell lies fully inside or fully outside each of them. Moreover, no cell lies in both rectangles.Later, hedgehog Filya became interested in the location of his rectangles but was unable to find the sheet of paper they were painted on. They were taken by Sonya and now she wants to play a little game with Filya. He tells her a query rectangle and she replies with the number of initial rectangles that lie fully inside the given query rectangle. The query rectangle should match the same conditions as initial rectangles. Rectangle lies fully inside the query if each o its cells lies inside the query.Filya knows Sonya really well, so is sure that if he asks more than 200 questions she will stop to reply.",
    "prob_desc_output_spec": "To make a query you have to print \"? x1 y1 x2 y2\" (without quotes) (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ n), where (x1, y1) stands for the position of the bottom left cell of the query and (x2, y2) stands for the up right cell of the query. You are allowed to ask no more than 200 queries. After each query you should perform \"flush\" operation and read the answer. In case you suppose you've already determined the location of two rectangles (or run out of queries) you should print \"! x11 y11 x12 y12 x21 y21 x22 y22\" (without quotes), where first four integers describe the bottom left and up right cells of the first rectangle, and following four describe the corresponding cells of the second rectangle. You can print the rectangles in an arbitrary order. After you have printed the answer, print the end of the line and perform \"flush\". Your program should terminate immediately after it print the answer.",
    "prob_desc_input_spec": "The first line of the input contains an integer n (2 ≤ n ≤ 216) — size of the field. For each query an integer between 0 and 2 is returned — the number of initial rectangles that lie fully inside the query rectangle.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_011.jsonl",
    "code_uid": "170bfeb6db059fc54d0d97af88709a75",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n2\\n1\\n0\\n1\\n1\\n1\\n0\\n1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import random\n\nclass interactor:\n    def __init__(self, n):\n        def correct(a, b, c, d, n):\n            arr = [[0 for i in range(n + 1)] for j in range(n + 1)]\n            for i in range(a[0], a[1] + 1):\n                for j in range(b[0], b[1] + 1):\n                    arr[i][j] += 1\n            for i in range(c[0], c[1] + 1):\n                for j in range(d[0], d[1] + 1):\n                    arr[i][j] += 1\n            for i in range(1, n + 1):\n                for j in range(1, n + 1):\n                    if arr[i][j] > 1:\n                        return False\n            return True\n        \n        def pair(n):\n            x = random.randint(1, n)\n            y = random.randint(1, n)\n            if x > y:\n                y, x = x, y\n            return x, y\n        self.arr = [2, 1, 5, 5, 1, 1, 1, 4]\n        return\n        a, b, c, d = (None for i in range(4))\n        while True:\n            a, b, c, d = (pair(n) for i in range(4))\n            if correct(a, b, c, d, n):\n                break\n        self.arr = [a[0], b[0], a[1], b[1], c[0], d[0], c[1], d[1]]\n        print(self.arr)\n    \n    def request(self, x1, y1, x2, y2):\n        def inside(l, r, L, R):\n            return l <= L and R <= r\n        def ins_rect(x1, y1, x2, y2, X1, Y1, X2, Y2):\n            return inside(X1, X2, x1, x2) and (\n                   inside(Y1, Y2, y1, y2)\n                )\n        ans = 0\n        if ins_rect(self.arr[0], self.arr[1], self.arr[2], self.arr[3],x1, y1, x2, y2):\n            ans += 1\n        if ins_rect(self.arr[4], self.arr[5], self.arr[6], self.arr[7],x1, y1, x2, y2):\n            ans += 1\n        return ans\n\n\n    def check(self, x11, y11, x12, y12, x21, y21, x22, y22):\n        def eq_arr(a, b):\n            n = len(a)\n            for i in range(n):\n                if a[i] != b[i]:\n                    return False\n            return True\n        a1 = [x11, y11, x12, y12, x21, y21, x22, y22]\n        a2 = [x21, y21, x22, y22, x11, y11, x12, y12]\n        return eq_arr(self.arr, a1) or eq_arr(self.arr, a2)\n \nn = int(input())       \n#gint = interactor(n)\n\ndef answer(x11, y11, x12, y12, x21, y21, x22, y22):\n    print(\"! {0} {1} {2} {3} {4} {5} {6} {7}\".format(\n        x11, y11, x12, y12, x21, y21, x22, y22))\n    #global gint\n    #print(gint.check(x11, y11, x12, y12, x21, y21, x22, y22))\n\ndef request(x1, y1, x2, y2):\n    print(\"? {0} {1} {2} {3}\".format(x1, y1, x2, y2))\n    global gint\n    #ans = gint.request(x1, y1, x2, y2)\n    #print(ans)\n    ans = int(input())\n    return ans\n\ndef binary_search(add, min_bound, max_bound, x_func, y_func, process_reply):\n    while min_bound < max_bound:\n        mid = (min_bound + max_bound - add) // 2\n        x1, x2 = x_func(mid)\n        y1, y2 = y_func(mid)\n        reply = request(x1, y1, x2, y2)\n        if process_reply(reply):\n            max_bound = mid + add\n        else:\n            min_bound = mid + 1 + add\n    return min_bound\n\ndef find_single_rectangle(x1, y1, x2, y2):\n    xr = binary_search(0, x1, x2,\n        lambda mid: (x1, mid),\n        lambda mid: (y1, y2),\n        lambda rep: rep == 1)   \n\n    yr = binary_search(0, y1, y2,\n        lambda mid: (x1, x2),\n        lambda mid: (y1, mid),\n        lambda rep: rep == 1)\n\n    xl = binary_search(-1, x1, x2,\n        lambda mid: (mid, x2),\n        lambda mid: (y1, y2),\n        lambda rep: rep == 0)\n\n    yl = binary_search(-1, y1, y2,\n        lambda mid: (x1, x2),\n        lambda mid: (mid, y2),\n        lambda rep: rep == 0)\n\n    return xl, yl, xr, yr\n\ndef find_border(n):\n    hor = binary_search(0, 1, n,\n        lambda mid: (1, n),\n        lambda mid: (1, mid),\n        lambda rep: rep >= 1)\n    if request(1, 1, n, hor) == 1 and request(1, hor + 1, n, n) == 1:\n        return 1, 1, n, hor, 1, hor + 1, n, n\n    ver = binary_search(0, 1, n,\n        lambda mid: (1, mid),\n        lambda mid: (1, n),\n        lambda rep: rep >= 1)\n    return 1, 1, ver, n, ver + 1, 1, n, n\n\ndef main():\n    \n    x11, y11, x12, y12, x21, y21, x22, y22 = find_border(n)\n    #print(x11, y11, x12, y12, x21, y21, x22, y22)\n    X11, Y11, X12, Y12 = find_single_rectangle(x11, y11, x12, y12)\n    X21, Y21, X22, Y22 = find_single_rectangle(x21, y21, x22, y22)\n    \n    answer(X11, Y11, X12, Y12, X21, Y21, X22, Y22)\n\nif __name__ == \"__main__\":\n    main()\n",
    "prob_desc_created_at": "1473784500",
    "tags": [
        "binary search",
        "interactive"
    ],
    "hidden_unit_tests": ""
}