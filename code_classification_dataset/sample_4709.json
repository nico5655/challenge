{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\\n1 337\\nNO\\nYES\\n31 4 159\"]",
    "src_uid": "c8fddee2f1c7d325437a7d0b82758b03",
    "prob_desc_notes": "NoteIn the first test case, the only possible pairs of indices are $$$(1, 2)$$$ and $$$(2, 1)$$$.If you perform the operation on indices $$$(1, 2)$$$ (or $$$(2, 1)$$$), you'll get $$$a_1 = a_2 = |1 - 337| = 336$$$, or array $$$[336, 336]$$$. In both cases, the total sum increases, so this array $$$a$$$ is a counterexample.",
    "prob_desc_description": "Recently, your friend discovered one special operation on an integer array $$$a$$$:   Choose two indices $$$i$$$ and $$$j$$$ ($$$i \\neq j$$$);  Set $$$a_i = a_j = |a_i - a_j|$$$. After playing with this operation for a while, he came to the next conclusion:   For every array $$$a$$$ of $$$n$$$ integers, where $$$1 \\le a_i \\le 10^9$$$, you can find a pair of indices $$$(i, j)$$$ such that the total sum of $$$a$$$ will decrease after performing the operation. This statement sounds fishy to you, so you want to find a counterexample for a given integer $$$n$$$. Can you find such counterexample and prove him wrong?In other words, find an array $$$a$$$ consisting of $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$) such that for all pairs of indices $$$(i, j)$$$ performing the operation won't decrease the total sum (it will increase or not change the sum).",
    "prob_desc_output_spec": "For each test case, if there is no counterexample array $$$a$$$ of size $$$n$$$, print NO. Otherwise, print YES followed by the array $$$a$$$ itself ($$$1 \\le a_i \\le 10^9$$$). If there are multiple counterexamples, print any.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. Then $$$t$$$ test cases follow. The first and only line of each test case contains a single integer $$$n$$$ ($$$2 \\le n \\le 1000$$$) — the length of array $$$a$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_104.jsonl",
    "code_uid": "8edf6ffe038624bb1cc97126d4d8bbc9",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n\\n2\\n\\n512\\n\\n3\"]",
    "exec_outcome": "PASSED",
    "source_code": "if __name__==\"__main__\":\r\n    t=int(input())\r\n    while t:\r\n        ls=[]\r\n        t-=1\r\n        n=int(input())\r\n        if n>19:\r\n            print(\"NO\")\r\n            continue\r\n        a=1\r\n        flag=0\r\n        ls.append(a)\r\n        print(\"YES\")\r\n        print(1,end=\" \")\r\n        for i in range(n-1):\r\n            print(a*3,end=\" \")\r\n            a*=3\r\n        print()\r\n        \r\n        \r\n       \r\n",
    "prob_desc_created_at": "1646922900",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "hidden_unit_tests": ""
}