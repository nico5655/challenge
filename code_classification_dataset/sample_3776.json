{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"6\", \"19\", \"39\"]",
    "src_uid": "669a34bfb07b82cfed8abccd8ab25f1e",
    "prob_desc_notes": "NoteIn the first sample, all subarrays are Decinc.In the second sample, all subarrays except $$$p[1 \\ldots 6]$$$ and $$$p[2 \\ldots 6]$$$ are Decinc.",
    "prob_desc_description": "Let's call an array $$$a$$$ of $$$m$$$ integers $$$a_1, a_2, \\ldots, a_m$$$ Decinc if $$$a$$$ can be made increasing by removing a decreasing subsequence (possibly empty) from it. For example, if $$$a = [3, 2, 4, 1, 5]$$$, we can remove the decreasing subsequence $$$[a_1, a_4]$$$ from $$$a$$$ and obtain $$$a = [2, 4, 5]$$$, which is increasing.You are given a permutation $$$p$$$ of numbers from $$$1$$$ to $$$n$$$. Find the number of pairs of integers $$$(l, r)$$$ with $$$1 \\le l \\le r \\le n$$$ such that $$$p[l \\ldots r]$$$ (the subarray of $$$p$$$ from $$$l$$$ to $$$r$$$) is a Decinc array. ",
    "prob_desc_output_spec": "Output the number of pairs of integers $$$(l, r)$$$ such that $$$p[l \\ldots r]$$$ (the subarray of $$$p$$$ from $$$l$$$ to $$$r$$$) is a Decinc array. $$$(1 \\le l \\le r \\le n)$$$",
    "prob_desc_input_spec": "The first line contains a single integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$)  — the size of $$$p$$$. The second line contains $$$n$$$ integers $$$p_1, p_2, \\ldots, p_n$$$ ($$$1 \\le p_i \\le n$$$, all $$$p_i$$$ are distinct)  — elements of the permutation.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2800,
    "file_name": "train_083.jsonl",
    "code_uid": "4f72ef77e38ac38a71b8408793fcf050",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n2 3 1\", \"6\\n4 5 2 6 1 3\", \"10\\n7 10 1 8 3 9 2 4 6 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "input = __import__('sys').stdin.readline\r\n\r\n\r\nn = int(input())\r\na = list(map(int, input().split())) + [n+1]\r\n\r\nB = n+2\r\ncache = {}\r\ndef check(i, u, d):\r\n    keys = []\r\n    j = i\r\n    while j+1 <= n:\r\n        key = (u * B + d) * B + j\r\n        # key = (j, u, d)\r\n        v = cache.get(key, -1)\r\n        if v != -1:\r\n            j = v\r\n            break\r\n        \r\n        keys.append(key)\r\n        # greedy\r\n        if u < a[j] < d: # if can insert to both\r\n            if a[j] < a[j+1]:\r\n                u = max(u, a[j])\r\n            elif a[j] > a[j+1]:\r\n                d = min(d, a[j])\r\n        elif u < a[j]: # if only can insert to increasing subsequence\r\n            u = a[j]\r\n        elif d > a[j]: # if only can insert to decreasing subsequence\r\n            d = a[j]\r\n        else:\r\n            break\r\n\r\n        j += 1\r\n    \r\n    for key in keys:\r\n        cache[key] = j\r\n    \r\n    return j\r\n\r\nans = 0\r\nfor i in range(n):\r\n    u = 0\r\n    d = n+1\r\n    j = check(i, u, d)\r\n    ans += j - i\r\n    # print(f'at {i} max {j} ans {ans}', u, d)\r\n\r\n# print(f'count={len(cache)}')\r\nprint(ans)\r\n",
    "prob_desc_created_at": "1655390100",
    "tags": [
        "brute force",
        "data structures",
        "data structures",
        "greedy"
    ],
    "hidden_unit_tests": ""
}