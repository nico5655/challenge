{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"15\\n19\\n150\\n56\"]",
    "src_uid": "537791353fe9f5892f28e1793bae2935",
    "prob_desc_notes": "NoteIn the first testcase you are not allowed to move left at all. So you make four moves to the right and obtain the score $$$a_1 + a_2 + a_3 + a_4 + a_5$$$.In the second example you can move one time to the left. So we can follow these moves: right, right, left, right. The score will be $$$a_1 + a_2 + a_3 + a_2 + a_3$$$.In the third example you can move four times to the left but it's not optimal anyway, you can just move four times to the right and obtain the score $$$a_1 + a_2 + a_3 + a_4 + a_5$$$.",
    "prob_desc_description": "You are given an array $$$a_1, a_2, \\dots, a_n$$$, consisting of $$$n$$$ positive integers. Initially you are standing at index $$$1$$$ and have a score equal to $$$a_1$$$. You can perform two kinds of moves:   move right — go from your current index $$$x$$$ to $$$x+1$$$ and add $$$a_{x+1}$$$ to your score. This move can only be performed if $$$x&lt;n$$$.  move left — go from your current index $$$x$$$ to $$$x-1$$$ and add $$$a_{x-1}$$$ to your score. This move can only be performed if $$$x&gt;1$$$. Also, you can't perform two or more moves to the left in a row. You want to perform exactly $$$k$$$ moves. Also, there should be no more than $$$z$$$ moves to the left among them.What is the maximum score you can achieve?",
    "prob_desc_output_spec": "Print $$$t$$$ integers — for each testcase output the maximum score you can achieve if you make exactly $$$k$$$ moves in total, no more than $$$z$$$ of them are to the left and there are no two or more moves to the left in a row.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of testcases. The first line of each testcase contains three integers $$$n, k$$$ and $$$z$$$ ($$$2 \\le n \\le 10^5$$$, $$$1 \\le k \\le n - 1$$$, $$$0 \\le z \\le min(5, k)$$$) — the number of elements in the array, the total number of moves you should perform and the maximum number of moves to the left you can perform. The second line of each testcase contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^4$$$) — the given array. The sum of $$$n$$$ over all testcases does not exceed $$$3 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_013.jsonl",
    "code_uid": "4d869bdba706c444b01808798bf459e2",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n5 4 0\\n1 5 4 3 2\\n5 4 1\\n1 5 4 3 2\\n5 4 4\\n10 20 30 40 50\\n10 7 3\\n4 6 8 2 9 9 7 4 10 9\"]",
    "exec_outcome": "PASSED",
    "source_code": "from sys import stdin\n\ndef r(): return stdin.readline().strip()\ndef r_t(tp): return map(tp, r().strip().split())\ndef r_a(tp): return list(r_t(tp))\n\ndef solve(n,k,z,A):\n    ans = float(\"-inf\")\n    for t in range(0,z+1):\n        ac, x = 0, -1\n        #if k-2*t < 0: continue\n        for i in range((k - 2*t) + 1):\n            ac+=A[i]\n            if i < n-1: x=max(x,A[i]+A[i+1])\n        ac+=(x*t)\n        ans = max(ans, ac)\n\n    #print(\">>\",sum(A[:k]))\n    return ans\n\ndef main():\n    cases = int(r())\n    for _ in range(cases):\n        n, k, z = r_t(int)\n        A = r_a(int)\n        print(solve(n, k, z, A))\n\nmain()\n",
    "prob_desc_created_at": "1596033300",
    "tags": [
        "dp",
        "greedy",
        "brute force"
    ],
    "hidden_unit_tests": ""
}