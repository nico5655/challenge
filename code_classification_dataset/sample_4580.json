{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"2\\nInfinity\\nImpossible\\n1\\n12\\n0\"]",
    "src_uid": "f0e2558090f1a307dfd4e2007facfb5e",
    "prob_desc_notes": "NoteIn the first test case, one way to earn $$$5$$$ coins over $$$4$$$ days with $$$k=2$$$ is as follows:   Day 1: do quest 2, and earn $$$2$$$ coins.  Day 2: do quest 1, and earn $$$1$$$ coin.  Day 3: do nothing.  Day 4: do quest 2, and earn $$$2$$$ coins.  In total, we earned $$$2+1+2=5$$$ coins.In the second test case, we can make over $$$20$$$ coins on the first day itself by doing the first quest to earn $$$100$$$ coins, so the value of $$$k$$$ can be arbitrarily large, since we never need to do another quest.In the third test case, no matter what we do, we can't earn $$$100$$$ coins over $$$3$$$ days.",
    "prob_desc_description": "There are $$$n$$$ quests. If you complete the $$$i$$$-th quest, you will gain $$$a_i$$$ coins. You can only complete at most one quest per day. However, once you complete a quest, you cannot do the same quest again for $$$k$$$ days. (For example, if $$$k=2$$$ and you do quest $$$1$$$ on day $$$1$$$, then you cannot do it on day $$$2$$$ or $$$3$$$, but you can do it again on day $$$4$$$.)You are given two integers $$$c$$$ and $$$d$$$. Find the maximum value of $$$k$$$ such that you can gain at least $$$c$$$ coins over $$$d$$$ days. If no such $$$k$$$ exists, output Impossible. If $$$k$$$ can be arbitrarily large, output Infinity.",
    "prob_desc_output_spec": "For each test case, output one of the following.    If no such $$$k$$$ exists, output Impossible.  If $$$k$$$ can be arbitrarily large, output Infinity.  Otherwise, output a single integer — the maximum value of $$$k$$$ such that you can gain at least $$$c$$$ coins over $$$d$$$ days.  case-sensitive",
    "prob_desc_input_spec": "The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) — the number of test cases. The description of the test cases follows. The first line of each test case contains three integers $$$n,c,d$$$ ($$$2 \\leq n \\leq 2\\cdot10^5$$$; $$$1 \\leq c \\leq 10^{16}$$$; $$$1 \\leq d \\leq 2\\cdot10^5$$$) — the number of quests, the number of coins you need, and the number of days. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the rewards for the quests. The sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot10^5$$$, and the sum of $$$d$$$ over all test cases does not exceed $$$2\\cdot10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_101.jsonl",
    "code_uid": "b95fb8bd2ec989b9b75d908ff4cd2506",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n\\n2 5 4\\n\\n1 2\\n\\n2 20 10\\n\\n100 10\\n\\n3 100 3\\n\\n7 2 6\\n\\n4 20 3\\n\\n4 5 6 7\\n\\n4 100000000000 2022\\n\\n8217734 927368 26389746 627896974\\n\\n2 20 4\\n\\n5 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "t = int(input())\r\n \r\ndef possible(k, n, c, d, nums):\r\n    ssum = 0\r\n    for i in range(d):\r\n        try:\r\n            a = nums[i%(k+1)]\r\n        except:\r\n            a = 0\r\n        ssum += a\r\n    return ssum >= c\r\n \r\n \r\ndef solve():\r\n    n, c, d = [int(x) for x in input().split()]\r\n    nums = [int(x) for x in input().split()]\r\n    nums.sort(reverse=True)\r\n    \r\n    l = 0\r\n    r = d-1\r\n    \r\n    \r\n    if sum(nums[:min(d,n, len(nums) )]) >= c:\r\n        print(\"Infinity\")\r\n        return\r\n    \r\n    #print(sum(nums[:min(d,n, len(nums) )]))\r\n    #print(nums)\r\n    #print(n, c, d)\r\n    #print(possible(1, n, c, d, nums))\r\n    #quit()\r\n \r\n    while True:\r\n        if r - l <= 3:\r\n            for k in range(r, l-1, -1):\r\n                if possible(k, n, c, d, nums):\r\n                    print(k)\r\n                    return\r\n            print(\"Impossible\")\r\n            return\r\n        \r\n        k = (l + r) // 2\r\n        pos = possible(k, n, c, d, nums)\r\n        if pos:\r\n            l = k\r\n        else:\r\n            r = k-1\r\n        \r\n \r\n    \r\nfor _ in range(t):\r\n    solve()",
    "prob_desc_created_at": "1669041300",
    "tags": [
        "binary search",
        "greedy",
        "sortings"
    ],
    "hidden_unit_tests": ""
}