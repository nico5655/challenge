{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\\n0\\n9\\n7\\n6\"]",
    "src_uid": "867b01e7141ef077964a8a0d4c6b762b",
    "prob_desc_notes": "NoteIn the first test case, we can perform one operations to make the grid $$$\\begin{matrix}0 &amp; 1 &amp; 0\\\\ 1 &amp; 1 &amp; \\color{red}{1}\\\\ 0 &amp; 1 &amp; 0\\end{matrix}$$$. Now, all rotations of the square are the same.In the second test case, all rotations of the square are already the same, so we don't need any flips.",
    "prob_desc_description": "You are given a square grid with $$$n$$$ rows and $$$n$$$ columns. Each cell contains either $$$0$$$ or $$$1$$$. In an operation, you can select a cell of the grid and flip it (from $$$0 \\to 1$$$ or $$$1 \\to 0$$$). Find the minimum number of operations you need to obtain a square that remains the same when rotated $$$0^{\\circ}$$$, $$$90^{\\circ}$$$, $$$180^{\\circ}$$$ and $$$270^{\\circ}$$$.The picture below shows an example of all rotations of a grid.  ",
    "prob_desc_output_spec": "For each test case output a single integer  — the minimum number of operations needed to make the square look the same rotated $$$0^{\\circ}$$$, $$$90^{\\circ}$$$, $$$180^{\\circ}$$$ and $$$270^{\\circ}$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 100$$$) — the size of the grid. Then $$$n$$$ lines follow, each with $$$n$$$ characters $$$a_{i,j}$$$ ($$$0 \\leq a_{i,j} \\leq 1$$$) — the number written in each cell.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1200,
    "file_name": "train_086.jsonl",
    "code_uid": "6c93dac2b83eaa85526a0902994a0946",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n\\n3\\n\\n010\\n\\n110\\n\\n010\\n\\n1\\n\\n0\\n\\n5\\n\\n11100\\n\\n11011\\n\\n01011\\n\\n10011\\n\\n11000\\n\\n5\\n\\n01000\\n\\n10101\\n\\n01010\\n\\n00010\\n\\n01001\\n\\n5\\n\\n11001\\n\\n00000\\n\\n11111\\n\\n10110\\n\\n01111\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nprintf = lambda d: sys.stdout.write(str(d) + \"\\n\")\ndef read_int(): return int(input())\ndef read_ints(): return list(map(int, input().split()))\ndef read_ints_grid(n): return [read_ints() for _ in range(n)]\ndef read_str(): return input().strip()\ndef read_strs(): return read_str().split(' ')\n\nMAX = int(1e10) + 5\n# pos = [0] * MAX\nmod = 10 ** 9 + 7\nfrom collections import Counter\n# import numpy as np\n\n\ndef solve():\n    n = read_int()\n    l = []\n    for i in range(n):\n        a = input().strip()\n        l.append(a)\n\n    m = (n+1) // 2 if n % 2 else n//2\n    used = set()\n    ans = 0\n    for i in range(m):\n        for j in range(m):\n            l2 = []\n            if (i, j) not in used:\n                if i == j and j == n-1-i:\n                    used.add((i, j))\n                    # used.add((j, n - 1 - i))\n                    used.add((n - 1 - j, i))\n                    used.add((n - 1 - i, n - 1 - j))\n                    continue\n                l2.append(l[i][j])\n                l2.append(l[j][n-1-i])\n                l2.append(l[n-1-j][i])\n                l2.append(l[n-1-i][n-1-j])\n                used.add((i, j))\n                used.add((j, n-1-i))\n                used.add((n-1-j, i))\n                used.add((n-1-i, n-1-j))\n            if l2:\n                ans += min(l2.count(\"0\"), l2.count(\"1\"))\n            # print((i,j ), (j, n-1-i), (n-1-j, i), (n-1-i,n-1-j), l2, ans)\n    print(ans)\n\n\n\n\nt = int(input())\nfor _ in range(t):\n    solve()",
    "prob_desc_created_at": "1657636500",
    "tags": [
        "implementation"
    ],
    "hidden_unit_tests": ""
}