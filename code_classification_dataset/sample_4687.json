{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\\n2\\n3\\n4\\n2\\n150994942\"]",
    "src_uid": "fad12986a0a97a96109734fdce3bd7a7",
    "prob_desc_notes": "NoteFor the first test case, there is only one way to partition a sequence of length $$$1$$$, which is itself and is, of course, balanced. For the second test case, there are $$$2$$$ ways to partition it:   The sequence $$$[1, 1]$$$ itself, then $$$s = [2]$$$ is balanced;  Partition into two subsequences $$$[1\\,|\\,1]$$$, then $$$s = [1, 1]$$$ is balanced. For the third test case, there are $$$3$$$ ways to partition it:   The sequence $$$[0, 0, 1, 0]$$$ itself, then $$$s = [1]$$$ is balanced;  $$$[0 \\,|\\, 0, 1 \\,|\\, 0]$$$, then $$$s = [0, 1, 0]$$$ is balanced;  $$$[0, 0 \\,|\\, 1 \\,|\\, 0]$$$, then $$$s = [0, 1, 0]$$$ is balanced. For the fourth test case, there are $$$4$$$ ways to partition it:   The sequence $$$[1, 2, 3, 2, 1]$$$ itself, then $$$s = [9]$$$ is balanced;  $$$[1, 2 \\,|\\, 3 \\,|\\, 2, 1]$$$, then $$$s = [3, 3, 3]$$$ is balanced;  $$$[1 \\,|\\, 2, 3, 2 \\,|\\, 1]$$$, then $$$s = [1, 7, 1]$$$ is balanced;  $$$[1 \\,|\\, 2 \\,|\\, 3 \\,|\\, 2 \\,|\\, 1]$$$, then $$$s = [1, 2, 3, 2, 1]$$$ is balanced. For the fifth test case, there are $$$2$$$ ways to partition it:   The sequence $$$[1, 3, 5, 7, 9]$$$ itself, then $$$s = [25]$$$ is balanced;  $$$[1, 3, 5 \\,|\\, 7 \\,|\\, 9]$$$, then $$$s = [9, 7, 9]$$$ is balanced. For the sixth test case, every possible partition should be counted. So the answer is $$$2^{32-1} \\equiv 150994942 \\pmod {998244353}$$$.",
    "prob_desc_description": "Given an integer sequence $$$a_1, a_2, \\dots, a_n$$$ of length $$$n$$$, your task is to compute the number, modulo $$$998244353$$$, of ways to partition it into several non-empty continuous subsequences such that the sums of elements in the subsequences form a balanced sequence.A sequence $$$s_1, s_2, \\dots, s_k$$$ of length $$$k$$$ is said to be balanced, if $$$s_{i} = s_{k-i+1}$$$ for every $$$1 \\leq i \\leq k$$$. For example, $$$[1, 2, 3, 2, 1]$$$ and $$$[1,3,3,1]$$$ are balanced, but $$$[1,5,15]$$$ is not. Formally, every partition can be described by a sequence of indexes $$$i_1, i_2, \\dots, i_k$$$ of length $$$k$$$ with $$$1 = i_1 &lt; i_2 &lt; \\dots &lt; i_k \\leq n$$$ such that   $$$k$$$ is the number of non-empty continuous subsequences in the partition;  For every $$$1 \\leq j \\leq k$$$, the $$$j$$$-th continuous subsequence starts with $$$a_{i_j}$$$, and ends exactly before $$$a_{i_{j+1}}$$$, where $$$i_{k+1} = n + 1$$$. That is, the $$$j$$$-th subsequence is $$$a_{i_j}, a_{i_j+1}, \\dots, a_{i_{j+1}-1}$$$.  There are $$$2^{n-1}$$$ different partitions in total. Let $$$s_1, s_2, \\dots, s_k$$$ denote the sums of elements in the subsequences with respect to the partition $$$i_1, i_2, \\dots, i_k$$$. Formally, for every $$$1 \\leq j \\leq k$$$, $$$$$$ s_j = \\sum_{i=i_{j}}^{i_{j+1}-1} a_i = a_{i_j} + a_{i_j+1} + \\dots + a_{i_{j+1}-1}. $$$$$$ For example, the partition $$$[1\\,|\\,2,3\\,|\\,4,5,6]$$$ of sequence $$$[1,2,3,4,5,6]$$$ is described by the sequence $$$[1,2,4]$$$ of indexes, and the sums of elements in the subsequences with respect to the partition is $$$[1,5,15]$$$.Two partitions $$$i_1, i_2, \\dots, i_k$$$ and $$$i'_1, i'_2, \\dots, i'_{k'}$$$ (described by sequences of indexes) are considered to be different, if at least one of the following holds.   $$$k \\neq k'$$$,  $$$i_j \\neq i'_j$$$ for some $$$1 \\leq j \\leq \\min\\left\\{ k, k' \\right\\}$$$. ",
    "prob_desc_output_spec": "For each test case, output the number of partitions with respect to which the sum of elements in each subsequence is balanced, modulo $$$998244353$$$.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^5$$$) â€” the number of test cases. The following lines contain the description of each test case. The first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 10^5$$$), indicating the length of the sequence $$$a$$$. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$0 \\leq a_i \\leq 10^9$$$), indicating the elements of the sequence $$$a$$$. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2300,
    "file_name": "train_103.jsonl",
    "code_uid": "e0b86534c2c2c4e63b8632108bee892f",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n\\n1\\n\\n1000000000\\n\\n2\\n\\n1 1\\n\\n4\\n\\n0 0 1 0\\n\\n5\\n\\n1 2 3 2 1\\n\\n5\\n\\n1 3 5 7 9\\n\\n32\\n\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"]",
    "exec_outcome": "PASSED",
    "source_code": "\r\nMOD = 998244353\r\nMAX=100005\r\nfact=[1]\r\nfor zz in range(1,MAX+1):\r\n    fact.append((fact[-1]*zz)%MOD) #with MOD\r\n#    fact.append(fact[-1]*zz) #without MOD\r\ndef nCr(n,r): #choose, MOD is prime\r\n    num=fact[n]\r\n    den=(fact[r]*fact[n-r])%MOD\r\n    return (num*pow(den,MOD-2,MOD))%MOD #with MOD, O(log(MOD))\r\n#    den= fact[r]*fact[n-r]# without MOD\r\n#    return num//den # without MOD\r\n\r\ndef main():\r\n    \r\n    t = int(input())\r\n    allans = []\r\n    for _ in range(t):\r\n        n = int(input())\r\n        a = readIntArr()\r\n        \r\n        p = a.copy()\r\n        for i in range(1, n):\r\n            p[i] += p[i - 1]\r\n        def q(l, r):\r\n            if r + 1 == l:\r\n                return 0\r\n            if l == 0:\r\n                return p[r]\r\n            return p[r] - p[l - 1]\r\n        cnts = 1  # entire array\r\n        l = 0\r\n        r = n - 1\r\n        while l + 1 <= r:\r\n            while q(0, l) > q(r, n - 1):\r\n                r -= 1\r\n                if l + 1 > r:\r\n                    break\r\n            if l + 1 > r:\r\n                break\r\n            if q(0, l) == q(r, n - 1):\r\n                if q(l + 1, r - 1) == 0:  # all zeroes in the middle\r\n                    gaps = r - l\r\n                    cnts2 = 0\r\n                    for r in range(1, gaps + 1):\r\n                        cnts2 += nCr(gaps, r)\r\n                        cnts2 %= MOD\r\n                    cnts = cnts + (cnts * cnts2) % MOD\r\n                    cnts %= MOD\r\n                    # print('gaps:{} cnts2:{}'.format(gaps, cnts2))\r\n                    break\r\n                \r\n                # Count left\r\n                l2 = l\r\n                left_cnt = 1\r\n                while a[l2 + 1] == 0:\r\n                    left_cnt += 1\r\n                    l2 += 1\r\n                \r\n                # Count right\r\n                r2 = r\r\n                right_cnt = 1\r\n                while a[r2 - 1] == 0:\r\n                    right_cnt += 1\r\n                    r2 -= 1\r\n                \r\n                cnts2 = 0\r\n                z = min(left_cnt, right_cnt)\r\n                for y in range(1, z + 1):\r\n                    cnts2 += (nCr(left_cnt, y) * nCr(right_cnt, y)) % MOD\r\n                    cnts2 %= MOD\r\n                cnts = cnts + (cnts * cnts2) % MOD\r\n                cnts %= MOD\r\n                \r\n                # print('l:{} r:{} left_cnt:{} right_cnt:{} z:{} cnts2:{}'.format(\r\n                #     l, r, left_cnt, right_cnt, z, cnts2))\r\n                \r\n                l = l2\r\n                r = r2\r\n            l += 1\r\n        allans.append(cnts)\r\n    multiLineArrayPrint(allans)\r\n    \r\n    return\r\n\r\n\r\nimport sys\r\ninput=sys.stdin.buffer.readline #FOR READING PURE INTEGER INPUTS (space separation ok)\r\n# input=lambda: sys.stdin.readline().rstrip(\"\\r\\n\") #FOR READING STRING/TEXT INPUTS.\r\n \r\ndef oneLineArrayPrint(arr):\r\n    print(' '.join([str(x) for x in arr]))\r\ndef multiLineArrayPrint(arr):\r\n    print('\\n'.join([str(x) for x in arr]))\r\ndef multiLineArrayOfArraysPrint(arr):\r\n    print('\\n'.join([' '.join([str(x) for x in y]) for y in arr]))\r\n \r\ndef readIntArr():\r\n    return [int(x) for x in input().split()]\r\n# def readFloatArr():\r\n#     return [float(x) for x in input().split()]\r\n \r\ndef makeArr(defaultValFactory,dimensionArr): # eg. makeArr(lambda:0,[n,m])\r\n    dv=defaultValFactory;da=dimensionArr\r\n    if len(da)==1:return [dv() for _ in range(da[0])]\r\n    else:return [makeArr(dv,da[1:]) for _ in range(da[0])]\r\n \r\ndef queryInteractive(a, b):\r\n    print('? {} {}'.format(a, b))\r\n    sys.stdout.flush()\r\n    return int(input())\r\n \r\ndef answerInteractive(ans):\r\n    print('! {}'.format(ans))\r\n    sys.stdout.flush()\r\n \r\ninf=float('inf')\r\n# MOD=10**9+7\r\n# MOD=998244353\r\n \r\nfrom math import gcd,floor,ceil\r\nimport math\r\n# from math import floor,ceil # for Python2\r\n \r\nfor _abc in range(1):\r\n    main()",
    "prob_desc_created_at": "1664548500",
    "tags": [
        "combinatorics",
        "dp",
        "math",
        "two pointers"
    ],
    "hidden_unit_tests": ""
}