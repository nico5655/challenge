{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\", \"1\"]",
    "src_uid": "c02922c33eb816eea872b4d8a3c1dc0e",
    "prob_desc_notes": "NoteThe first example is illustrated by the following:  For example, you can add roads ($$$6, 4$$$), ($$$7, 9$$$), ($$$1, 7$$$) to make all the cities reachable from $$$s = 1$$$.The second example is illustrated by the following:  In this example, you can add any one of the roads ($$$5, 1$$$), ($$$5, 2$$$), ($$$5, 3$$$), ($$$5, 4$$$) to make all the cities reachable from $$$s = 5$$$.",
    "prob_desc_description": "There are $$$n$$$ cities and $$$m$$$ roads in Berland. Each road connects a pair of cities. The roads in Berland are one-way.What is the minimum number of new roads that need to be built to make all the cities reachable from the capital?New roads will also be one-way.",
    "prob_desc_output_spec": "Print one integer — the minimum number of extra roads needed to make all the cities reachable from city $$$s$$$. If all the cities are already reachable from $$$s$$$, print 0.",
    "prob_desc_input_spec": "The first line of input consists of three integers $$$n$$$, $$$m$$$ and $$$s$$$ ($$$1 \\le n \\le 5000, 0 \\le m \\le 5000, 1 \\le s \\le n$$$) — the number of cities, the number of roads and the index of the capital. Cities are indexed from $$$1$$$ to $$$n$$$. The following $$$m$$$ lines contain roads: road $$$i$$$ is given as a pair of cities $$$u_i$$$, $$$v_i$$$ ($$$1 \\le u_i, v_i \\le n$$$, $$$u_i \\ne v_i$$$). For each pair of cities $$$(u, v)$$$, there can be at most one road from $$$u$$$ to $$$v$$$. Roads in opposite directions between a pair of cities are allowed (i.e. from $$$u$$$ to $$$v$$$ and from $$$v$$$ to $$$u$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_016.jsonl",
    "code_uid": "02b94c121d4f3b644bf724703312d5aa",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\", \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import defaultdict\nimport sys\ndef dfs(u):\n    avail[u] = False\n    for v in g[u]:\n        if avail[v]:\n            dfs(v)\n    topo.append(u)\n\n\nsys.setrecursionlimit(6000)\nn, m, s = map(int, input().split())\ng = [[] for _ in range(n)]\nfor _ in range(m):\n    u, v = map(int, input().split())\n    g[u - 1].append(v - 1)\n\navail, topo = [True] * n, []\nfor i,a in enumerate(avail):\n    if a:\n        dfs(i)\navail, res = [True] * n, 0\ndfs(s - 1)\nfor i in reversed(topo):\n    if avail[i]:\n        res += 1\n        dfs(i)\nprint(res)",
    "prob_desc_created_at": "1529591700",
    "tags": [
        "dfs and similar",
        "greedy",
        "graphs"
    ],
    "hidden_unit_tests": ""
}