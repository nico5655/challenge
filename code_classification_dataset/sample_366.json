{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\", \"3\\nmove 1 3\\nmove 2 1\\nmove 3 2\", \"5\\nmove 1 5\\nmove 11 1\\nmove 1111 2\\nmove 111 4\\nmove 11111 3\"]",
    "src_uid": "b755d530eb1704f2b990248c1239e8f4",
    "prob_desc_notes": null,
    "prob_desc_description": "The All-Berland National Olympiad in Informatics has just ended! Now Vladimir wants to upload the contest from the Olympiad as a gym to a popular Codehorses website.Unfortunately, the archive with Olympiad's data is a mess. For example, the files with tests are named arbitrary without any logic.Vladimir wants to rename the files with tests so that their names are distinct integers starting from 1 without any gaps, namely, \"1\", \"2\", ..., \"n', where n is the total number of tests.Some of the files contain tests from statements (examples), while others contain regular tests. It is possible that there are no examples, and it is possible that all tests are examples. Vladimir wants to rename the files so that the examples are the first several tests, all all the next files contain regular tests only.The only operation Vladimir can perform is the \"move\" command. Vladimir wants to write a script file, each of the lines in which is \"move file_1 file_2\", that means that the file \"file_1\" is to be renamed to \"file_2\". If there is a file \"file_2\" at the moment of this line being run, then this file is to be rewritten. After the line \"move file_1 file_2\" the file \"file_1\" doesn't exist, but there is a file \"file_2\" with content equal to the content of \"file_1\" before the \"move\" command.Help Vladimir to write the script file with the minimum possible number of lines so that after this script is run:  all examples are the first several tests having filenames \"1\", \"2\", ..., \"e\", where e is the total number of examples;  all other files contain regular tests with filenames \"e + 1\", \"e + 2\", ..., \"n\", where n is the total number of all tests. ",
    "prob_desc_output_spec": "In the first line print the minimum number of lines in Vladimir's script file. After that print the script file, each line should be \"move file_1 file_2\", where \"file_1\" is an existing at the moment of this line being run filename, and \"file_2\" — is a string of digits and small English letters with length from 1 to 6.",
    "prob_desc_input_spec": "The first line contains single integer n (1 ≤ n ≤ 105) — the number of files with tests. n lines follow, each describing a file with test. Each line has a form of \"name_i type_i\", where \"name_i\" is the filename, and \"type_i\" equals \"1\", if the i-th file contains an example test, and \"0\" if it contains a regular test. Filenames of each file are strings of digits and small English letters with length from 1 to 6 characters. The filenames are guaranteed to be distinct.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_001.jsonl",
    "code_uid": "117815ae1b66631b724f79ae9427d897",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0\", \"2\\n1 0\\n2 1\", \"5\\n1 0\\n11 1\\n111 0\\n1111 1\\n11111 0\"]",
    "exec_outcome": "PASSED",
    "source_code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 10**9+7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    n = I()\n    a = set()\n    b = set()\n    for _ in range(n):\n        f,t = LS()\n        if t == '0':\n            b.add(f)\n        else:\n            a.add(f)\n    al = len(a)\n    bl = len(b)\n    r = []\n    ta = set([str(i) for i in range(1,al+1)])\n    tb = set([str(i) for i in range(al+1,al+bl+1)])\n    bb = tb & b\n    b -= bb\n    tb -= bb\n    aa = ta & a\n    a -= aa\n    ta -= aa\n\n    ua = a & tb\n    ub = b & ta\n    sa = ta - b\n    sb = tb - a\n    ran = 'iehn00'\n    while ua or ub:\n        if not sa and not sb:\n            if ua:\n                t = ua.pop()\n                sb.add(t)\n                a.remove(t)\n                a.add(ran)\n            else:\n                t = ub.pop()\n                sa.add(t)\n                b.remove(t)\n                b.add(ran)\n            r.append('move {} {}'.format(t, ran))\n        if sa:\n            t = sa.pop()\n            if ua:\n                k = ua.pop()\n                a.remove(k)\n                sb.add(k)\n            else:\n                k = a.pop()\n            ta.remove(t)\n            r.append('move {} {}'.format(k, t))\n        if sb:\n            t = sb.pop()\n            if ub:\n                k = ub.pop()\n                b.remove(k)\n                sa.add(k)\n            else:\n                k = b.pop()\n            tb.remove(t)\n            r.append('move {} {}'.format(k, t))\n\n    while a:\n        k = a.pop()\n        t = ta.pop()\n        r.append('move {} {}'.format(k, t))\n\n    while b:\n        k = b.pop()\n        t = tb.pop()\n        r.append('move {} {}'.format(k, t))\n\n    return '{}\\n'.format(len(r)) + '\\n'.join(r)\n\n\n\n\nprint(main())\n\n\n\n\n",
    "prob_desc_created_at": "1505653500",
    "tags": [],
    "hidden_unit_tests": ""
}