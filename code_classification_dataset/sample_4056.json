{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"21\\n22\\n12\"]",
    "src_uid": "ccecf97fcddbd0ab030d34b79a42cc6e",
    "prob_desc_notes": "Note  For the first example, you can't do any operation so the optimal string is $$$s$$$ itself. $$$f(s) = f(1010) = 10 + 01 + 10 = 21$$$.  For the second example, one of the optimal strings you can obtain is \"0011000\". The string has an $$$f$$$ value of $$$22$$$.  For the third example, one of the optimal strings you can obtain is \"00011\". The string has an $$$f$$$ value of $$$12$$$. ",
    "prob_desc_description": "You are given a binary string $$$s$$$ of length $$$n$$$.Let's define $$$d_i$$$ as the number whose decimal representation is $$$s_i s_{i+1}$$$ (possibly, with a leading zero). We define $$$f(s)$$$ to be the sum of all the valid $$$d_i$$$. In other words, $$$f(s) = \\sum\\limits_{i=1}^{n-1} d_i$$$.For example, for the string $$$s = 1011$$$:   $$$d_1 = 10$$$ (ten);  $$$d_2 = 01$$$ (one)  $$$d_3 = 11$$$ (eleven);  $$$f(s) = 10 + 01 + 11 = 22$$$. In one operation you can swap any two adjacent elements of the string. Find the minimum value of $$$f(s)$$$ that can be achieved if at most $$$k$$$ operations are allowed.",
    "prob_desc_output_spec": "For each test case, print the minimum value of $$$f(s)$$$ you can obtain with at most $$$k$$$ operations.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^5$$$). Description of the test cases follows. First line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$2 \\le n \\le 10^5$$$, $$$0 \\le k \\le 10^9$$$) — the length of the string and the maximum number of operations allowed. The second line of each test case contains the binary string $$$s$$$ of length $$$n$$$, consisting of only zeros and ones. It is also given that sum of $$$n$$$ over all the test cases doesn't exceed $$$10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_089.jsonl",
    "code_uid": "71572aafbcb76f3aa446f90c5f74f150",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n\\n4 0\\n\\n1010\\n\\n7 1\\n\\n0010100\\n\\n5 2\\n\\n00110\"]",
    "exec_outcome": "PASSED",
    "source_code": "def f(s):\r\n    sum1=0\r\n    for i in range(n-1):\r\n        s1=s[i]+s[i+1]\r\n        sum1+=int(s1)\r\n\r\n    return sum1\r\n\r\n\r\n\r\n\r\n\r\n\r\nfor _ in range(int(input())):\r\n    n,k=list(map(int,input().split()))\r\n    s=input()\r\n    first,last=-1,-1\r\n    sum1=f(s)\r\n    ans=f(s)\r\n    for i in range(n):\r\n        if(s[i]=='1'):\r\n            first=i\r\n            break   \r\n\r\n    for i in range(n-1,-1,-1):\r\n        if(s[i]=='1'):\r\n            last=i  \r\n            break\r\n\r\n\r\n    swap1=first\r\n    swap2=n-1-last\r\n    # print(sum1)\r\n    # print(swap2)\r\n\r\n    if(s[0]=='1' and s[n-1]=='1'):\r\n        ans=sum1\r\n\r\n    elif(s[0]=='1' and s[n-1]!='1'):\r\n        if(k>=swap2):\r\n            if(first==last):\r\n                ans=sum1-9\r\n\r\n            else:\r\n                ans=sum1-10\r\n\r\n        else:\r\n            ans=sum1\r\n\r\n    elif(s[0]!='1' and s[n-1]=='1'):\r\n        if(k>=swap1):\r\n            if(first==last):\r\n                ans=sum1\r\n\r\n            else:\r\n                ans=sum1-1\r\n\r\n        else:\r\n            ans=sum1\r\n\r\n    else:           #\"0*****************0\"\r\n        if(first==-1):\r\n            ans=sum1\r\n\r\n        else:\r\n            if(first==last):   #only 1 one present\r\n                if(k>=swap2):\r\n                    ans=sum1-10\r\n\r\n                elif(k>=swap1):\r\n                    ans=sum1-1\r\n\r\n            else:\r\n                if(k>=swap2):\r\n                    k-=swap2\r\n                    sum1-=10\r\n                    if(k>=swap1):\r\n                        ans=sum1-1\r\n\r\n                    else:\r\n                        ans=sum1\r\n\r\n                else:\r\n                    if(k>=swap1):\r\n                        ans=sum1-1\r\n                    else:\r\n                        ans=sum1\r\n\r\n    print(ans)\r\n",
    "prob_desc_created_at": "1654007700",
    "tags": [
        "brute force",
        "constructive algorithms",
        "greedy",
        "math",
        "strings"
    ],
    "hidden_unit_tests": ""
}