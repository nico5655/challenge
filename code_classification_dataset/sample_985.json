{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"3 1 2 1\\n6 5 2 5 3 1 2\\n0\\n9 4 1 2 10 4 1 2 1 5\\n1 1\"]",
    "src_uid": "46c5ebf1ddf5547352e84ba0171eacbc",
    "prob_desc_notes": "NoteIn the first test case, we have $$$01\\to 11\\to 00\\to 10$$$.In the second test case, we have $$$01011\\to 00101\\to 11101\\to 01000\\to 10100\\to 00100\\to 11100$$$.In the third test case, the strings are already the same. Another solution is to flip the prefix of length $$$2$$$, which will leave $$$a$$$ unchanged.",
    "prob_desc_description": "This is the hard version of the problem. The difference between the versions is the constraint on $$$n$$$ and the required number of operations. You can make hacks only if all versions of the problem are solved.There are two binary strings $$$a$$$ and $$$b$$$ of length $$$n$$$ (a binary string is a string consisting of symbols $$$0$$$ and $$$1$$$). In an operation, you select a prefix of $$$a$$$, and simultaneously invert the bits in the prefix ($$$0$$$ changes to $$$1$$$ and $$$1$$$ changes to $$$0$$$) and reverse the order of the bits in the prefix.For example, if $$$a=001011$$$ and you select the prefix of length $$$3$$$, it becomes $$$011011$$$. Then if you select the entire string, it becomes $$$001001$$$.Your task is to transform the string $$$a$$$ into $$$b$$$ in at most $$$2n$$$ operations. It can be proved that it is always possible.",
    "prob_desc_output_spec": "For each test case, output an integer $$$k$$$ ($$$0\\le k\\le 2n$$$), followed by $$$k$$$ integers $$$p_1,\\ldots,p_k$$$ ($$$1\\le p_i\\le n$$$). Here $$$k$$$ is the number of operations you use and $$$p_i$$$ is the length of the prefix you flip in the $$$i$$$-th operation.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1\\le t\\le 1000$$$)  — the number of test cases. Next $$$3t$$$ lines contain descriptions of test cases. The first line of each test case contains a single integer $$$n$$$ ($$$1\\le n\\le 10^5$$$)  — the length of the binary strings. The next two lines contain two binary strings $$$a$$$ and $$$b$$$ of length $$$n$$$. It is guaranteed that the sum of $$$n$$$ across all test cases does not exceed $$$10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_005.jsonl",
    "code_uid": "669d8046b27ef2616d52afa1b5e15189",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n2\\n01\\n10\\n5\\n01011\\n11100\\n2\\n01\\n01\\n10\\n0110011011\\n1000110100\\n1\\n0\\n1\"]",
    "exec_outcome": "PASSED",
    "source_code": "t = int(input())\n\nfor _ in range(t):\n    l = int(input())\n    a = input().rstrip()\n    b = input().rstrip()\n    \n    ans = []\n    c = 0\n    if a[0]=='1':\n        c += 1\n    \n    for i in range(len(a)-1):\n        if a[i+1] != a[i]:\n            ans.append(i+1)\n            c+= 1\n            \n    bns = []\n    d = 0\n    if b[0]=='1':\n        d += 1\n    \n    for i in range(len(b)-1):\n        if b[i+1] != b[i]:\n            bns.append(i+1)\n            d += 1\n            \n    if c%2!=d%2:\n        ans += [l]\n    f = ans + bns[::-1]\n    print(len(f), *f)",
    "prob_desc_created_at": "1595342100",
    "tags": [
        "data structures",
        "constructive algorithms",
        "implementation",
        "strings"
    ],
    "hidden_unit_tests": ""
}