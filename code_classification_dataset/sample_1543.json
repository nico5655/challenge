{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"3\\n2\\n0\"]",
    "src_uid": "ee295fd90ee9283709447481f172c73c",
    "prob_desc_notes": "NoteFor the first test case, you can't make any moves, so the answer is $$$3$$$.For the second test case, one optimal sequence of moves is BABA $$$\\to$$$ BA. So, the answer is $$$2$$$.For the third test case, one optimal sequence of moves is AABBBABBBB $$$\\to$$$ AABBBABB $$$\\to$$$ AABBBB $$$\\to$$$ ABBB $$$\\to$$$ AB $$$\\to$$$ (empty string). So, the answer is $$$0$$$.",
    "prob_desc_description": "Zookeeper is playing a game. In this game, Zookeeper must use bombs to bomb a string that consists of letters 'A' and 'B'. He can use bombs to bomb a substring which is either \"AB\" or \"BB\". When he bombs such a substring, the substring gets deleted from the string and the remaining parts of the string get concatenated.For example, Zookeeper can use two such operations: AABABBA $$$\\to$$$ AABBA $$$\\to$$$ AAA.Zookeeper wonders what the shortest string he can make is. Can you help him find the length of the shortest string?",
    "prob_desc_output_spec": "For each test case, print a single integer: the length of the shortest string that Zookeeper can make.",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains a single integer $$$t$$$ $$$(1 \\leq t \\leq 20000)$$$  — the number of test cases. The description of the test cases follows. Each of the next $$$t$$$ lines contains a single test case each, consisting of a non-empty string $$$s$$$: the string that Zookeeper needs to bomb. It is guaranteed that all symbols of $$$s$$$ are either 'A' or 'B'. It is guaranteed that the sum of $$$|s|$$$ (length of $$$s$$$) among all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_010.jsonl",
    "code_uid": "2b7de7879c2dcc346bc389a268301dfe",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\nAAA\\nBABA\\nAABBBABBBB\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import Counter\nimport math\nimport sys\nfrom bisect import bisect,bisect_left,bisect_right\nfrom itertools import permutations\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef mod(): return 10**9+7\n\n\nfor i in range(INT()): \n  #n = INT()\n  s = input()\n  #n1,n2 = MAP()\n  #a = LIST()\n  n = len(s)\n  ans = 0\n  ca = 0\n  cb = 0\n  for i in range(n-1,-1,-1):\n    if s[i] == 'A':\n      ca += 1\n    if s[i] == 'B':\n      cb += 1\n    \n    if ca>cb:\n      ans += 1\n      ca = 0\n      cb = 0\n    else:\n      if ca == cb:\n        ca = 0\n        cb = 0\n      else:\n        cb -= ca\n        ca = 0\n  ans += cb%2\n  print(ans)\n    \n    \n",
    "prob_desc_created_at": "1602939900",
    "tags": [
        "data structures",
        "brute force",
        "greedy",
        "strings"
    ],
    "hidden_unit_tests": ""
}