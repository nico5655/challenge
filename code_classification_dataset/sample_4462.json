{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"23 3\\n1 25\\n-1 -1\\n-1 -1\\n21 0\\n0 18\\n13 12\\n25 4\\n-1 -1\\n0 0\"]",
    "src_uid": "f1d3032f1cb07ad6187a37c84376510d",
    "prob_desc_notes": "NoteExplanations for some of the test cases from the example:  In the first test case, the point $$$B$$$ has coordinates $$$(49, 3)$$$. If the point $$$C$$$ has coordinates $$$(23, 3)$$$, then the distance from $$$A$$$ to $$$B$$$ is $$$|49 - 0| + |3 - 0| = 52$$$, the distance from $$$A$$$ to $$$C$$$ is $$$|23 - 0| + |3 - 0| = 26$$$, and the distance from $$$B$$$ to $$$C$$$ is $$$|23 - 49| + |3 - 3| = 26$$$.  In the second test case, the point $$$B$$$ has coordinates $$$(2, 50)$$$. If the point $$$C$$$ has coordinates $$$(1, 25)$$$, then the distance from $$$A$$$ to $$$B$$$ is $$$|2 - 0| + |50 - 0| = 52$$$, the distance from $$$A$$$ to $$$C$$$ is $$$|1 - 0| + |25 - 0| = 26$$$, and the distance from $$$B$$$ to $$$C$$$ is $$$|1 - 2| + |25 - 50| = 26$$$.  In the third and the fourth test cases, it can be shown that no point with integer coordinates meets the constraints.  In the fifth test case, the point $$$B$$$ has coordinates $$$(42, 0)$$$. If the point $$$C$$$ has coordinates $$$(21, 0)$$$, then the distance from $$$A$$$ to $$$B$$$ is $$$|42 - 0| + |0 - 0| = 42$$$, the distance from $$$A$$$ to $$$C$$$ is $$$|21 - 0| + |0 - 0| = 21$$$, and the distance from $$$B$$$ to $$$C$$$ is $$$|21 - 42| + |0 - 0| = 21$$$. ",
    "prob_desc_description": "Let's denote the Manhattan distance between two points $$$p_1$$$ (with coordinates $$$(x_1, y_1)$$$) and $$$p_2$$$ (with coordinates $$$(x_2, y_2)$$$) as $$$d(p_1, p_2) = |x_1 - x_2| + |y_1 - y_2|$$$. For example, the distance between two points with coordinates $$$(1, 3)$$$ and $$$(4, 2)$$$ is $$$|1 - 4| + |3 - 2| = 4$$$.You are given two points, $$$A$$$ and $$$B$$$. The point $$$A$$$ has coordinates $$$(0, 0)$$$, the point $$$B$$$ has coordinates $$$(x, y)$$$.Your goal is to find a point $$$C$$$ such that:  both coordinates of $$$C$$$ are non-negative integers;  $$$d(A, C) = \\dfrac{d(A, B)}{2}$$$ (without any rounding);  $$$d(B, C) = \\dfrac{d(A, B)}{2}$$$ (without any rounding). Find any point $$$C$$$ that meets these constraints, or report that no such point exists.",
    "prob_desc_output_spec": "For each test case, print the answer on a separate line as follows:   if it is impossible to find a point $$$C$$$ meeting the constraints, print \"-1 -1\" (without quotes);  otherwise, print two non-negative integers not exceeding $$$10^6$$$ — the coordinates of point $$$C$$$ meeting the constraints. If there are multiple answers, print any of them. It can be shown that if any such point exists, it's possible to find a point with coordinates not exceeding $$$10^6$$$ that meets the constraints. ",
    "prob_desc_input_spec": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 3000$$$) — the number of test cases. Each test case consists of one line containing two integers $$$x$$$ and $$$y$$$ ($$$0 \\le x, y \\le 50$$$) — the coordinates of the point $$$B$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 800,
    "file_name": "train_098.jsonl",
    "code_uid": "f3150f55a5e1dff3490bd4fde9971d8d",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"10\\n49 3\\n2 50\\n13 0\\n0 41\\n42 0\\n0 36\\n13 37\\n42 16\\n42 13\\n0 0\"]",
    "exec_outcome": "PASSED",
    "source_code": "def Solution1():\r\n  x, y = map(int, input().split())\r\n  if ((x + y) % 2 == 1):\r\n    print(\"-1 -1\")\r\n    return\r\n  print(x // 2, (y + 1) // 2)\r\n\r\n\r\ndef Solution():\r\n  x, y = map(int, input().split())\r\n  for i in range(min(51, y + 1)):\r\n    for j in range(min(51, x + 1)):\r\n      if (x + y == 2 * (i + j)):\r\n        print(j, i)\r\n        return\r\n  print(\"-1 -1\")\r\n\r\n\r\n_T = int(input())\r\nfor _ in range(_T):\r\n  Solution()\r\n",
    "prob_desc_created_at": "1637573700",
    "tags": [
        "brute force",
        "constructive algorithms"
    ],
    "hidden_unit_tests": ""
}