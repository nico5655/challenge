{
    "prob_desc_time_limit": "1.5 seconds",
    "prob_desc_sample_outputs": "[\"YES\\nYES\\nNO\"]",
    "src_uid": "d74e98ba194b9829aef62b152b08d70d",
    "prob_desc_notes": "NoteIn test cases $$$1$$$ and $$$2$$$, the given condition is satisfied for all $$$(i, j)$$$ pairs. In test case $$$3$$$, the condition isn't satisfied for the pair $$$(1, 2)$$$ as $$$\\max(2, 3) &lt; 2 + 3$$$.",
    "prob_desc_description": "You are given an array $$$a$$$ of $$$n$$$ integers. You are asked to find out if the inequality $$$$$$\\max(a_i, a_{i + 1}, \\ldots, a_{j - 1}, a_{j}) \\geq a_i + a_{i + 1} + \\dots + a_{j - 1} + a_{j}$$$$$$ holds for all pairs of indices $$$(i, j)$$$, where $$$1 \\leq i \\leq j \\leq n$$$.",
    "prob_desc_output_spec": "For each test case, on a new line output \"YES\" if the condition is satisfied for the given array, and \"NO\" otherwise. You can print each letter in any case (upper or lower).",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^5$$$). Description of the test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$)  — the size of the array. The next line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$-10^9 \\le a_i \\le 10^9$$$). It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_089.jsonl",
    "code_uid": "2addc2c234cc294b0cd9a070df43e7a5",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n\\n4\\n\\n-1 1 -1 2\\n\\n5\\n\\n-1 2 -3 2 -1\\n\\n3\\n\\n2 3 -1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\nfrom array import array\r\n\r\n\r\nclass segmenttree:\r\n    def __init__(self, n, default=0, func=lambda a, b: a + b):\r\n        self.tree, self.n, self.func, self.default = [default] * (2 * n), n, func, default\r\n\r\n    def fill(self, arr):\r\n        self.tree[self.n:] = arr\r\n        for i in range(self.n - 1, 0, -1):\r\n            self.tree[i] = self.func(self.tree[i << 1], self.tree[(i << 1) + 1])\r\n\r\n    # get interval[l,r)\r\n    def query(self, l, r):\r\n        res = self.default\r\n        l += self.n\r\n        r += self.n\r\n        while l < r:\r\n            if l & 1:\r\n                res = self.func(res, self.tree[l])\r\n                l += 1\r\n            if r & 1:\r\n                r -= 1\r\n                res = self.func(res, self.tree[r])\r\n            l >>= 1\r\n            r >>= 1\r\n        return res\r\n\r\n\r\ninput = lambda: sys.stdin.buffer.readline().decode().strip()\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    a = array('i', [int(x) for x in input().split()])\r\n    max_, ix, inc = array('q', a[:]), n - 1, -1\r\n\r\n    for _ in range(2):\r\n        pre = array('q', [0] * n)\r\n        stk, pre[0] = [], a[0]\r\n\r\n        for i in range(1, n):\r\n            pre[i] = pre[i - 1] + a[i]\r\n\r\n        tree = segmenttree(n, -10**15, lambda a, b: max(a, b))\r\n        tree.fill(pre)\r\n\r\n        for i in range(n - 1, -1, -1):\r\n            if a[i] > 0:\r\n                while stk and a[i] >= a[stk[-1]]:\r\n                    stk.pop()\r\n\r\n                l = n\r\n                if stk and a[stk[-1]] > a[i]:\r\n                    l = stk[-1]\r\n                stk.append(i)\r\n                max_[ix] += max(tree.query(i , l) - pre[i], 0)\r\n\r\n            ix += inc\r\n\r\n        a.reverse()\r\n        ix, inc = 0, 1\r\n\r\n    print(['yes', 'no'][any([max_[i] > a[i] for i in range(n)])])\r\n",
    "prob_desc_created_at": "1654007700",
    "tags": [
        "binary search",
        "constructive algorithms",
        "data structures",
        "divide and conquer",
        "implementation",
        "two pointers"
    ],
    "hidden_unit_tests": ""
}