{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\", \"5\", \"3\", \"4\"]",
    "src_uid": "372045d9a4edb59ab3dae4d5d0e0e970",
    "prob_desc_notes": "NoteIn the first example, at first Vasya removes two fives at the second and third positions. The array becomes [2, 2]. In the second operation Vasya removes two twos at the first and second positions. After that the array becomes empty.In the second example Vasya has to perform five operations to make the array empty. In each of them he removes the first element from the array.In the third example Vasya needs three operations. In the first operation he removes all integers 4, in the second — all integers 100, in the third — all integers 2.In the fourth example in the first operation Vasya removes the first two integers 10. After that the array becomes [50, 10, 50, 50]. Then in the second operation Vasya removes the two rightmost integers 50, so that the array becomes [50, 10]. In the third operation he removes the remaining 50, and the array becomes [10] after that. In the last, fourth operation he removes the only remaining 10. The array is empty after that.",
    "prob_desc_description": "Vasya has an array of integers of length n.Vasya performs the following operations on the array: on each step he finds the longest segment of consecutive equal integers (the leftmost, if there are several such segments) and removes it. For example, if Vasya's array is [13, 13, 7, 7, 7, 2, 2, 2], then after one operation it becomes [13, 13, 2, 2, 2].Compute the number of operations Vasya should make until the array becomes empty, i.e. Vasya removes all elements from it.",
    "prob_desc_output_spec": "Print the number of operations Vasya should make to remove all elements from the array.",
    "prob_desc_input_spec": "The first line contains a single integer n (1 ≤ n ≤ 200 000) — the length of the array. The second line contains a sequence a1, a2, ..., an (1 ≤ ai ≤ 109) — Vasya's array.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_025.jsonl",
    "code_uid": "c695781fe4cfead1d9cc515f5345746a",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n2 5 5 2\", \"5\\n6 3 4 1 5\", \"8\\n4 4 4 2 2 100 100 100\", \"6\\n10 10 50 10 50 50\"]",
    "exec_outcome": "PASSED",
    "source_code": "import heapq\n\nn = int(input())\na = list(map(int, input().split()))\n\n# idx: l, r, length, val\nd   = {}\npre, l = None, 0\nseg    = []\n\nfor i, x in enumerate(a):\n    if pre is None:\n        pre = x\n        l   = 1\n    else:\n        if x == pre:\n            l+=1\n        else:\n            seg.append([l, pre])\n            pre = x\n            l   = 1\n            \n    if i==len(a)-1:\n        seg.append([l, x])\n        \nQ = []\nfor i, s in enumerate(seg):\n    l=None if i  ==0 else i-1\n    r=None if i+1==len(seg) else i+1\n    d[i] = [l, r, s[0], s[1]]\n    \n    heapq.heappush(Q, (-s[0], i))      \n    \ncnt=0\nwhile len(Q) > 0:\n    length, idx = heapq.heappop(Q)\n    length = -length\n    \n    #print(d[idx])\n    if d[idx][2] != length:\n        continue\n        \n    l, r, length, val = d[idx]\n    d[idx][0]=0\n    cnt+=1\n    \n    if l is None and r is None:\n        break\n    elif l is None:\n        d[r][0] = None\n    elif r is None:\n        d[l][1] = None\n    else:\n        if d[l][3] == d[r][3]:\n            d[l][1]  = d[r][1]\n            d[l][2] += d[r][2]\n            d[r][2]  = 0\n            \n            if d[r][1] is not None:\n                nnr       = d[r][1]\n                d[nnr][0] = l \n                \n            heapq.heappush(Q, (-d[l][2], l))\n        else:\n            d[l][1] = r\n            d[r][0] = l\nprint(cnt)                ",
    "prob_desc_created_at": "1513492500",
    "tags": [
        "two pointers",
        "flows",
        "dsu",
        "implementation",
        "data structures"
    ],
    "hidden_unit_tests": ""
}