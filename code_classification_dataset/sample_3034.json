{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"8\", \"3\", \"41\"]",
    "src_uid": "88bb9b993ba8aacd6a7cf137415ef7dd",
    "prob_desc_notes": "NoteIn the first sample, there are exactly 8 valid sets: {1}, {2}, {3}, {4}, {1, 2}, {1, 3}, {3, 4} and {1, 3, 4}. Set {1, 2, 3, 4} is not valid, because the third condition isn't satisfied. Set {1, 4} satisfies the third condition, but conflicts with the second condition.",
    "prob_desc_description": "As you know, an undirected connected graph with n nodes and n - 1 edges is called a tree. You are given an integer d and a tree consisting of n nodes. Each node i has a value ai associated with it.We call a set S of tree nodes valid if following conditions are satisfied: S is non-empty. S is connected. In other words, if nodes u and v are in S, then all nodes lying on the simple path between u and v should also be presented in S. .Your task is to count the number of valid sets. Since the result can be very large, you must print its remainder modulo 1000000007 (109 + 7).",
    "prob_desc_output_spec": "Print the number of valid sets modulo 1000000007.",
    "prob_desc_input_spec": "The first line contains two space-separated integers d (0 ≤ d ≤ 2000) and n (1 ≤ n ≤ 2000). The second line contains n space-separated positive integers a1, a2, ..., an(1 ≤ ai ≤ 2000). Then the next n - 1 line each contain pair of integers u and v (1 ≤ u, v ≤ n) denoting that there is an edge between u and v. It is guaranteed that these edges form a tree.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_039.jsonl",
    "code_uid": "488dffe2183ade01b7fa18199582ae4e",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1 4\\n2 1 3 2\\n1 2\\n1 3\\n3 4\", \"0 3\\n1 2 3\\n1 2\\n2 3\", \"4 8\\n7 8 7 5 4 6 4 10\\n1 6\\n1 2\\n5 8\\n1 3\\n3 5\\n6 7\\n3 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "f = lambda: map(int, input().split())\nm = 1000000007\n\nd, n = f()\nt = list(f())\np = [[] for i in range(n)]\nfor j in range(n - 1):\n    u, v = f()\n    u -= 1\n    v -= 1\n    p[u].append(v)\n    p[v].append(u)\n\ndef g(u, x, a, b, q):\n    k = 1\n    for v in p[u]:\n        if a < t[v] <= b or t[v] == a and v > q:\n            if v != x: k += k * g(v, u, a, b, q) % m\n    return k\n\n\ns = 0\nfor q in range(n):\n    a = t[q]\n    b = a + d\n    s += g(q, -1, a, b, q)\n\nprint(s % m)",
    "prob_desc_created_at": "1415718000",
    "tags": [
        "dp",
        "dfs and similar",
        "trees",
        "math"
    ],
    "hidden_unit_tests": ""
}