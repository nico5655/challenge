{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"0\\n2\\n2.5\\n2\\n1\\n3\\n6\"]",
    "src_uid": "9336bfed41e9b277bdfa157467066078",
    "prob_desc_notes": "Note  In the $$$1$$$-st test case there is one person, so it is efficient to choose his or her position for the meeting place. Then he or she will get to it in $$$3$$$ minutes, that he or she need to get dressed.  In the $$$2$$$-nd test case there are $$$2$$$ people who don't need time to get dressed. Each of them needs one minute to get to position $$$2$$$.  In the $$$5$$$-th test case the $$$1$$$-st person needs $$$4$$$ minutes to get to position $$$1$$$ ($$$4$$$ minutes to get dressed and $$$0$$$ minutes on the way); the $$$2$$$-nd person needs $$$2$$$ minutes to get to position $$$1$$$ ($$$1$$$ minute to get dressed and $$$1$$$ minute on the way); the $$$3$$$-rd person needs $$$4$$$ minutes to get to position $$$1$$$ ($$$2$$$ minutes to get dressed and $$$2$$$ minutes on the way). ",
    "prob_desc_description": "$$$n$$$ people live on the coordinate line, the $$$i$$$-th one lives at the point $$$x_i$$$ ($$$1 \\le i \\le n$$$). They want to choose a position $$$x_0$$$ to meet. The $$$i$$$-th person will spend $$$|x_i - x_0|$$$ minutes to get to the meeting place. Also, the $$$i$$$-th person needs $$$t_i$$$ minutes to get dressed, so in total he or she needs $$$t_i + |x_i - x_0|$$$ minutes. Here $$$|y|$$$ denotes the absolute value of $$$y$$$.These people ask you to find a position $$$x_0$$$ that minimizes the time in which all $$$n$$$ people can gather at the meeting place. ",
    "prob_desc_output_spec": "For each test case, print a single real number — the optimum position $$$x_0$$$. It can be shown that the optimal position $$$x_0$$$ is unique. Your answer will be considered correct if its absolute or relative error does not exceed $$$10^{−6}$$$. Formally, let your answer be $$$a$$$, the jury's answer be $$$b$$$. Your answer will be considered correct if $$$\\frac{|a−b|}{max(1,|b|)} \\le 10^{−6}$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^3$$$) — the number of test cases. Then the test cases follow. Each test case consists of three lines. The first line contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$) — the number of people.  The second line contains $$$n$$$ integers $$$x_1, x_2, \\dots, x_n$$$ ($$$0 \\le x_i \\le 10^{8}$$$) — the positions of the people. The third line contains $$$n$$$ integers $$$t_1, t_2, \\dots, t_n$$$ ($$$0 \\le t_i \\le 10^{8}$$$), where $$$t_i$$$ is the time $$$i$$$-th person needs to get dressed. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_091.jsonl",
    "code_uid": "38e394a1ec415af1004725a6afd37e4e",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"7\\n\\n1\\n\\n0\\n\\n3\\n\\n2\\n\\n3 1\\n\\n0 0\\n\\n2\\n\\n1 4\\n\\n0 0\\n\\n3\\n\\n1 2 3\\n\\n0 0 0\\n\\n3\\n\\n1 2 3\\n\\n4 1 2\\n\\n3\\n\\n3 3 3\\n\\n5 3 3\\n\\n6\\n\\n5 4 7 2 10 4\\n\\n3 2 5 1 4 6\"]",
    "exec_outcome": "PASSED",
    "source_code": "import math\r\ndef balanced(m,l):\r\n    \r\n    leftMax = float(\"-inf\")\r\n    rightMax = float(\"-inf\")\r\n\r\n\r\n    for i in l:\r\n        if i>m:\r\n            rightMax = max(max(l[i]) + i-m,rightMax)\r\n        elif i<m:\r\n            leftMax = max(max(l[i]) + m-i,leftMax)\r\n\r\n    return rightMax-leftMax\r\n\r\n\r\nfor k in range(int(input())):\r\n    \r\n\r\n    n = int(input())\r\n    \r\n\r\n\r\n    x = list(map(int,input().split()))\r\n    t = list(map(int,input().split()))\r\n\r\n\r\n    l = {}\r\n    for i in range(n):\r\n        l[x[i]] = []\r\n    for i in range(n):\r\n        l[x[i]].append(t[i])\r\n\r\n    qleft = min(x)\r\n    qright = max(x)\r\n\r\n    prev_mid = -1\r\n\r\n    while qleft<=qright:\r\n        \r\n        \r\n        m = qleft + (qright-qleft)/2\r\n\r\n        if prev_mid != -1 and math.fabs(m-prev_mid)<0.0005:\r\n            print(\"%.2f\"%m)\r\n            break\r\n        \r\n        if balanced(qleft,l)==0:\r\n            print(qleft)\r\n            break\r\n        if balanced(qright,l)==0:\r\n            print(qright)\r\n            break\r\n\r\n        b = balanced(m,l)\r\n        if b==0:\r\n            print(\"%.2f\"%m)\r\n            break\r\n        if b<0:\r\n            qright = m\r\n            prev_mid = m\r\n            \r\n        else:\r\n            qleft = m\r\n            prev_mid = m\r\n\r\n\r\n\r\n",
    "prob_desc_created_at": "1664116500",
    "tags": [
        "binary search",
        "geometry",
        "greedy",
        "implementation",
        "math",
        "ternary search"
    ],
    "hidden_unit_tests": ""
}