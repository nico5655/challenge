{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"2\", \"4\", \"0\"]",
    "src_uid": "44d3494f40176d56c8fe57908ff09db5",
    "prob_desc_notes": "NoteIn the first test case possible arrays are $$$[1, 2, 1]$$$ and $$$[2, 1, 2]$$$.In the second test case possible arrays are $$$[1, 2]$$$, $$$[1, 3]$$$, $$$[2, 1]$$$ and $$$[2, 3]$$$.",
    "prob_desc_description": "You are given an array of $$$n$$$ positive integers $$$a_1, a_2, \\ldots, a_n$$$. Your task is to calculate the number of arrays of $$$n$$$ positive integers $$$b_1, b_2, \\ldots, b_n$$$ such that:   $$$1 \\le b_i \\le a_i$$$ for every $$$i$$$ ($$$1 \\le i \\le n$$$), and  $$$b_i \\neq b_{i+1}$$$ for every $$$i$$$ ($$$1 \\le i \\le n - 1$$$). The number of such arrays can be very large, so print it modulo $$$998\\,244\\,353$$$.",
    "prob_desc_output_spec": "Print the answer modulo $$$998\\,244\\,353$$$ in a single line.",
    "prob_desc_input_spec": "The first line contains a single integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the length of the array $$$a$$$. The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2400,
    "file_name": "train_088.jsonl",
    "code_uid": "870ea5ed861d57ff48c9bd55ba572e9a",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n2 2 2\", \"2\\n2 3\", \"3\\n1 1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\ninput = sys.stdin.buffer.readline \r\n\r\nclass SegmentTree:\r\n    def __init__(self, data, default=0, func=max):\r\n        \"\"\"initialize the segment tree with data\"\"\"\r\n        self._default = default\r\n        self._func = func\r\n        self._len = len(data)\r\n        self._size = _size = 1 << (self._len - 1).bit_length()\r\n\r\n        self.data = [default] * (2 * _size)\r\n        self.data[_size:_size + self._len] = data\r\n        for i in reversed(range(_size)):\r\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\r\n\r\n    def __delitem__(self, idx):\r\n        self[idx] = self._default\r\n\r\n    def __getitem__(self, idx):\r\n        return self.data[idx + self._size]\r\n\r\n    def __setitem__(self, idx, value):\r\n        idx += self._size\r\n        self.data[idx] = value\r\n        idx >>= 1\r\n        while idx:\r\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\r\n            idx >>= 1\r\n\r\n    def __len__(self):\r\n        return self._len\r\n\r\n    def query(self, start, stop):\r\n        \"\"\"func of data[start, stop)\"\"\"\r\n        start += self._size\r\n        stop += self._size\r\n\r\n        res_left = res_right = self._default\r\n        while start < stop:\r\n            if start & 1:\r\n                res_left = self._func(res_left, self.data[start])\r\n                start += 1\r\n            if stop & 1:\r\n                stop -= 1\r\n                res_right = self._func(self.data[stop], res_right)\r\n            start >>= 1\r\n            stop >>= 1\r\n\r\n        return self._func(res_left, res_right)\r\n\r\n    def __repr__(self):\r\n        return \"SegmentTree({0})\".format(self.data)\r\n    \r\np = 998244353 \r\n\r\ndef process(A):\r\n    n = len(A)\r\n    B = []\r\n    for i in range(n):\r\n        B.append([A[i], i])\r\n    B.sort()\r\n    B2 = []\r\n    curr = 0\r\n    data = [-1 for i in range(n+2)]\r\n    for i in range(n):\r\n        if i > 0 and B[i][0]  > B[i-1][0]:\r\n            curr+=1\r\n        B2.append([curr, B[i][1]])\r\n    Seg = SegmentTree(data=data, default=-1, func=max)\r\n    B2.sort(key=lambda a: a[1])\r\n    S = [None]\r\n    g = [0]\r\n    Sn = 0\r\n    for i in range(n):\r\n        ai = A[i]\r\n        scaled_ai = B2[i][0]\r\n        j = Seg.query(1, scaled_ai+1)\r\n        gn1 = g[-1]\r\n        if j==-1:\r\n            Sn = ai*(gn1+(-1)**(i))\r\n        elif j==i-1:\r\n            Sn = (ai-1)*S[-1]\r\n        else:\r\n            gn1 = g[-1]\r\n            gi = g[j]\r\n            Sn = ai*(gn1+(-1)**(i-j+1)*gi)+(-1)**(i-j)*S[j+1]\r\n        Sn = Sn % p\r\n        Seg[scaled_ai+1] = i\r\n        S.append(Sn)\r\n        g.append(Sn-gn1)\r\n    print(S[-1])\r\n\r\nn = int(input())\r\nA = [int(x) for x in input().split()]\r\nprocess(A)",
    "prob_desc_created_at": "1639322100",
    "tags": [
        "combinatorics",
        "dp",
        "math"
    ],
    "hidden_unit_tests": ""
}