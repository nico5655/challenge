{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\\nNO\\nYES\\nYES\\nNO\"]",
    "src_uid": "e425aa498e5a7fc3e518cec25eec6304",
    "prob_desc_notes": "NoteIn the first test-case we can choose $$$(i, j)=(2, 3)$$$ twice and after that choose $$$(i, j)=(1, 2)$$$ twice too. These operations will transform $$$[1, -1, 0] \\to [1, -1, -2] \\to [1, 1, -2]$$$In the second test case we can't make equal numbers on the second position.In the third test case we can choose $$$(i, j)=(1, 2)$$$ $$$41$$$ times. The same about the fourth test case.In the last lest case, it is impossible to make array $$$a$$$ equal to the array $$$b$$$.",
    "prob_desc_description": "Once again, Boris needs the help of Anton in creating a task. This time Anton needs to solve the following problem:There are two arrays of integers $$$a$$$ and $$$b$$$ of length $$$n$$$. It turned out that array $$$a$$$ contains only elements from the set $$$\\{-1, 0, 1\\}$$$.Anton can perform the following sequence of operations any number of times:   Choose any pair of indexes $$$(i, j)$$$ such that $$$1 \\le i &lt; j \\le n$$$. It is possible to choose the same pair $$$(i, j)$$$ more than once.   Add $$$a_i$$$ to $$$a_j$$$. In other words, $$$j$$$-th element of the array becomes equal to $$$a_i + a_j$$$. For example, if you are given array $$$[1, -1, 0]$$$, you can transform it only to $$$[1, -1, -1]$$$, $$$[1, 0, 0]$$$ and $$$[1, -1, 1]$$$ by one operation.Anton wants to predict if it is possible to apply some number (zero or more) of these operations to the array $$$a$$$ so that it becomes equal to array $$$b$$$. Can you help him?",
    "prob_desc_output_spec": "For each test case, output one line containing \"YES\" if it's possible to make arrays $$$a$$$ and $$$b$$$ equal by performing the described operations, or \"NO\" if it's impossible. You can print each letter in any case (upper or lower).",
    "prob_desc_input_spec": "Each test contains multiple test cases.  The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10000$$$). The description of the test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$)  — the length of arrays. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$-1 \\le a_i \\le 1$$$)  — elements of array $$$a$$$. There can be duplicates among elements. The third line of each test case contains $$$n$$$ integers $$$b_1, b_2, \\dots, b_n$$$ ($$$-10^9 \\le b_i \\le 10^9$$$)  — elements of array $$$b$$$. There can be duplicates among elements. It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_004.jsonl",
    "code_uid": "6fb028a9676442d780f58d551d42becb",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n3\\n1 -1 0\\n1 1 -2\\n3\\n0 1 1\\n0 2 2\\n2\\n1 0\\n1 41\\n2\\n-1 0\\n-1 -41\\n5\\n0 1 -1 1 -1\\n1 1 -1 1 -1\"]",
    "exec_outcome": "PASSED",
    "source_code": "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    b = list(map(int,input().split()))\n\n    if a[0]!=b[0]:\n        print(\"NO\")\n        continue\n\n    one = -1\n    minus = -1\n    for i in range(n):\n        if one ==-1 and a[i] == 1:\n            one = i\n        # elif a[1] == 0:\n        elif minus==-1 and a[i] == -1:\n            minus = i\n        if one!= -1 and minus !=-1:\n            break  \n    for i in range(1,n):\n        if a[i]<b[i] and  (one==-1 or one>=i):\n            print(\"NO\")\n            break\n        if a[i]>b[i] and (minus == -1 or minus>=i):\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n\n",
    "prob_desc_created_at": "1586356500",
    "tags": [
        "implementation",
        "greedy"
    ],
    "hidden_unit_tests": ""
}