{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"8 9 1 13\\n3 12 7 5\\n0 2 4 11\\n6 10 15 14\", \"19 55 11 39 32 36 4 52\\n51 7 35 31 12 48 28 20\\n43 23 59 15 0 8 16 44\\n3 47 27 63 24 40 60 56\\n34 38 6 54 17 53 9 37\\n14 50 30 22 49 5 33 29\\n2 10 18 46 41 21 57 13\\n26 42 62 58 1 45 25 61\"]",
    "src_uid": "38ee7fc4cd2d019aa9e5b33d8bea4a2f",
    "prob_desc_notes": "NoteIn the first example, XOR of each row and each column is $$$13$$$.In the second example, XOR of each row and each column is $$$60$$$.",
    "prob_desc_description": "Let us define a magic grid to be a square matrix of integers of size $$$n \\times n$$$, satisfying the following conditions.   All integers from $$$0$$$ to $$$(n^2 - 1)$$$ inclusive appear in the matrix exactly once.  Bitwise XOR of all elements in a row or a column must be the same for each row and column. You are given an integer $$$n$$$ which is a multiple of $$$4$$$. Construct a magic grid of size $$$n \\times n$$$.",
    "prob_desc_output_spec": "Print a magic grid, i.e. $$$n$$$ lines, the $$$i$$$-th of which contains $$$n$$$ space-separated integers, representing the $$$i$$$-th row of the grid. If there are multiple answers, print any. We can show that an answer always exists.",
    "prob_desc_input_spec": "The only line of input contains an integer $$$n$$$ ($$$4 \\leq n \\leq 1000$$$). It is guaranteed that $$$n$$$ is a multiple of $$$4$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_034.jsonl",
    "code_uid": "97896eb140b58e8d0e21a810a8ffa89b",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\", \"8\"]",
    "exec_outcome": "PASSED",
    "source_code": "n = int(input())\nfor i in range(n):\n    for j in range(n):\n        print(4 * i + (j % 4) + 4 * n * (j // 4), end = ' ')\n    print('')",
    "prob_desc_created_at": "1566743700",
    "tags": [
        "constructive algorithms"
    ],
    "hidden_unit_tests": ""
}