{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2 3 1\\n1 2 3 4 5\\n1 2 4 3\\n-1\"]",
    "src_uid": "1bf5b7d3dff2d9d917563e5c8aa32675",
    "prob_desc_notes": "NoteIn the first test case possible permutations that are mystic are $$$[2,3,1]$$$ and $$$[3,1,2]$$$. Lexicographically smaller of the two is $$$[2,3,1]$$$.In the second test case, $$$[1,2,3,4,5]$$$ is the lexicographically minimal permutation and it is also mystic.In third test case possible mystic permutations are $$$[1,2,4,3]$$$, $$$[1,4,2,3]$$$, $$$[1,4,3,2]$$$, $$$[3,1,4,2]$$$, $$$[3,2,4,1]$$$, $$$[3,4,2,1]$$$, $$$[4,1,2,3]$$$, $$$[4,1,3,2]$$$ and $$$[4,3,2,1]$$$. The smallest one is $$$[1,2,4,3]$$$.",
    "prob_desc_description": "Monocarp is a little boy who lives in Byteland and he loves programming.Recently, he found a permutation of length $$$n$$$. He has to come up with a mystic permutation. It has to be a new permutation such that it differs from the old one in each position.More formally, if the old permutation is $$$p_1,p_2,\\ldots,p_n$$$ and the new one is $$$q_1,q_2,\\ldots,q_n$$$ it must hold that $$$$$$p_1\\neq q_1, p_2\\neq q_2, \\ldots ,p_n\\neq q_n.$$$$$$Monocarp is afraid of lexicographically large permutations. Can you please help him to find the lexicographically minimal mystic permutation?",
    "prob_desc_output_spec": "For each test case, output $$$n$$$ positive integers — the lexicographically minimal mystic permutations. If such a permutation does not exist, output $$$-1$$$ instead.",
    "prob_desc_input_spec": "There are several test cases in the input data. The first line contains a single integer $$$t$$$ ($$$1\\leq t\\leq 200$$$) — the number of test cases. This is followed by the test cases description. The first line of each test case contains a positive integer $$$n$$$ ($$$1\\leq n\\leq 1000$$$) — the length of the permutation. The second line of each test case contains $$$n$$$ distinct positive integers $$$p_1, p_2, \\ldots, p_n$$$ ($$$1 \\leq p_i \\leq n$$$). It's guaranteed that $$$p$$$ is a permutation, i. e. $$$p_i \\neq p_j$$$ for all $$$i \\neq j$$$.  It is guaranteed that the sum of $$$n$$$ does not exceed $$$1000$$$ over all test cases.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 900,
    "file_name": "train_095.jsonl",
    "code_uid": "fd504c894a709b1c76d55d82a7a858fd",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n\\n3\\n\\n1 2 3\\n\\n5\\n\\n2 3 4 5 1\\n\\n4\\n\\n2 3 1 4\\n\\n1\\n\\n1\"]",
    "exec_outcome": "PASSED",
    "source_code": "for i in range(int(input())):\r\n    n=int(input())\r\n    x=list(map(int,input().split()))\r\n    y=sorted(x)\r\n \r\n    for i in range(n):\r\n        if(y[i]==x[i] and i!=n-1) :\r\n            y[i],y[i+1] = y[i+1],y[i] \r\n     \r\n        elif(y[i]==x[i] and i==n-1):\r\n            y[i], y[i-1]=y[i-1],y[i] \r\n    \r\n    if n!=1:   \r\n        for i in y:\r\n            print(i,end=\" \")\r\n        print()\r\n    else:\r\n        print(-1)",
    "prob_desc_created_at": "1654878900",
    "tags": [
        "data structures",
        "greedy"
    ],
    "hidden_unit_tests": ""
}