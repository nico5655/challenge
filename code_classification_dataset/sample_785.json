{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\", \"2 1\"]",
    "src_uid": "d9ba1dfe11cf3dae177f8898f3abeefd",
    "prob_desc_notes": null,
    "prob_desc_description": "The Little Elephant enjoys recursive functions.This time he enjoys the sorting function. Let a is a permutation of an integers from 1 to n, inclusive, and ai denotes the i-th element of the permutation. The Little Elephant's recursive function f(x), that sorts the first x permutation's elements, works as follows:  If x = 1, exit the function.  Otherwise, call f(x - 1), and then make swap(ax - 1, ax) (swap the x-th and (x - 1)-th elements of a). The Little Elephant's teacher believes that this function does not work correctly. But that-be do not get an F, the Little Elephant wants to show the performance of its function. Help him, find a permutation of numbers from 1 to n, such that after performing the Little Elephant's function (that is call f(n)), the permutation will be sorted in ascending order.",
    "prob_desc_output_spec": "In a single line print n distinct integers from 1 to n — the required permutation. Numbers in a line should be separated by spaces. It is guaranteed that the answer exists.",
    "prob_desc_input_spec": "A single line contains integer n (1 ≤ n ≤ 1000) — the size of permutation.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1000,
    "file_name": "train_004.jsonl",
    "code_uid": "bf57a7e45ee3e906ac0008526403d671",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1\", \"2\"]",
    "exec_outcome": "PASSED",
    "source_code": "n=int(input())\nif n==1:\n    print(n)\nelse:\n    print(n,end=\" \")\n    for i in range(1,n):\n        print(i,end=\" \")",
    "prob_desc_created_at": "1346427000",
    "tags": [
        "implementation",
        "math"
    ],
    "hidden_unit_tests": ""
}