{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"ayd\", \"-1\"]",
    "src_uid": "8ba3a7f7cb955478481c74cd4a4eed14",
    "prob_desc_notes": null,
    "prob_desc_description": "Marina loves strings of the same length and Vasya loves when there is a third string, different from them in exactly t characters. Help Vasya find at least one such string.More formally, you are given two strings s1, s2 of length n and number t. Let's denote as f(a, b) the number of characters in which strings a and b are different. Then your task will be to find any string s3 of length n, such that f(s1, s3) = f(s2, s3) = t. If there is no such string, print  - 1.",
    "prob_desc_output_spec": "Print a string of length n, differing from string s1 and from s2 in exactly t characters. Your string should consist only from lowercase English letters. If such string doesn't exist, print -1.",
    "prob_desc_input_spec": "The first line contains two integers n and t (1 ≤ n ≤ 105, 0 ≤ t ≤ n). The second line contains string s1 of length n, consisting of lowercase English letters. The third line contain string s2 of length n, consisting of lowercase English letters.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_005.jsonl",
    "code_uid": "80891314260344aad99f2503b53dba69",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 2\\nabc\\nxyc\", \"1 0\\nc\\nb\"]",
    "exec_outcome": "PASSED",
    "source_code": "def main():\n    n, t = map(int, raw_input().split())\n    s1 = raw_input().strip()\n    s2 = raw_input().strip()\n    same_count = 0\n    for a, b in zip(s1, s2):\n        if a == b:\n            same_count += 1\n    should_same_count = n - t\n    manuel_same = should_same_count - same_count\n    buf = []\n    if manuel_same <= 0:\n        for a, b in zip(s1, s2):\n            if a != b:\n                if 'a' not in (a, b):\n                    buf.append('a')\n                elif 'b' not in (a, b):\n                    buf.append('b')\n                else:\n                    buf.append('c')\n            else:\n                if manuel_same < 0:\n                    manuel_same += 1\n                    if 'a' == a:\n                        buf.append('b')\n                    else:\n                        buf.append('a')\n                else:\n                    buf.append(a)\n        print ''.join(buf)\n    elif manuel_same * 2 <= n - same_count:\n        manuel_same *= 2\n        for a, b in zip(s1, s2):\n            if a != b:\n                if manuel_same > 0:\n                    if manuel_same & 1 == 1:\n                        buf.append(b)\n                    else:\n                        buf.append(a)\n                    manuel_same -= 1\n                else:\n                    if 'a' not in (a, b):\n                        buf.append('a')\n                    elif 'b' not in (a, b):\n                        buf.append('b')\n                    else:\n                        buf.append('c')\n            else:\n                buf.append(a)\n        print ''.join(buf)\n    else:\n        print -1\n\n\nif __name__ == \"__main__\":\n    main()",
    "prob_desc_created_at": "1444149000",
    "tags": [
        "constructive algorithms",
        "greedy",
        "strings"
    ],
    "hidden_unit_tests": ""
}