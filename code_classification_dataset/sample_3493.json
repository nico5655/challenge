{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"3\", \"33\"]",
    "src_uid": "d3bc9c1889dbc4c8486804dc4b68a9b9",
    "prob_desc_notes": "NoteYou can recall what is a bitwise AND operation here.In the first example, the answer is the following arrays: $$$[3, 3, 7, 6]$$$, $$$[3, 7, 7, 6]$$$ and $$$[7, 3, 7, 6]$$$.",
    "prob_desc_description": "You are given three integers $$$n$$$, $$$k$$$, $$$m$$$ and $$$m$$$ conditions $$$(l_1, r_1, x_1), (l_2, r_2, x_2), \\dots, (l_m, r_m, x_m)$$$.Calculate the number of distinct arrays $$$a$$$, consisting of $$$n$$$ integers such that:   $$$0 \\le a_i &lt; 2^k$$$ for each $$$1 \\le i \\le n$$$;  bitwise AND of numbers $$$a[l_i] \\&amp; a[l_i + 1] \\&amp; \\dots \\&amp; a[r_i] = x_i$$$ for each $$$1 \\le i \\le m$$$. Two arrays $$$a$$$ and $$$b$$$ are considered different if there exists such a position $$$i$$$ that $$$a_i \\neq b_i$$$. The number can be pretty large so print it modulo $$$998244353$$$.",
    "prob_desc_output_spec": "Print a single integer — the number of distinct arrays $$$a$$$ that satisfy all the above conditions modulo $$$998244353$$$.",
    "prob_desc_input_spec": "The first line contains three integers $$$n$$$, $$$k$$$ and $$$m$$$ ($$$1 \\le n \\le 5 \\cdot 10^5$$$, $$$1 \\le k \\le 30$$$, $$$0 \\le m \\le 5 \\cdot 10^5$$$) — the length of the array $$$a$$$, the value such that all numbers in $$$a$$$ should be smaller than $$$2^k$$$ and the number of conditions, respectively. Each of the next $$$m$$$ lines contains the description of a condition $$$l_i$$$, $$$r_i$$$ and $$$x_i$$$ ($$$1 \\le l_i \\le r_i \\le n$$$, $$$0 \\le x_i &lt; 2^k$$$) — the borders of the condition segment and the required bitwise AND value on it.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2500,
    "file_name": "train_063.jsonl",
    "code_uid": "e799f55b6763baf2313f571d77958052",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 3 2\\n1 3 3\\n3 4 6\", \"5 2 3\\n1 3 2\\n2 5 0\\n3 3 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nrange = xrange\ninput = raw_input\n\nMOD = 998244353 \ndef red(x):\n    return x if x < MOD else x - MOD\n\ninp = [int(x) for x in sys.stdin.read().split()]; ii = 0\nn = inp[ii]; ii += 1\nk = inp[ii]; ii += 1\nm = inp[ii]; ii += 1\n\nL = [x - 1 for x in inp[ii + 0: ii + 3 * m: 3]]\nR = inp[ii + 1: ii + 3 * m: 3]\nA = inp[ii + 2: ii + 3 * m: 3]\n\nLbuckets = [[] for _ in range(n + 1)]\nRbuckets = [[] for _ in range(n + 1)]\nfor i in range(m):\n    Lbuckets[L[i]].append(i)\n    Rbuckets[R[i]].append(i)\n\nDP = [[0]*k for _ in range(n + 1)]\nDP.append([1]*k)\n\nLind = [-1] * k\nRind = [0]  * k\nmarked = [1] * k\nfor i in range(n + 1):\n    dp = DP[i]\n\n    for ind in Lbuckets[i]:\n        a = A[ind]\n        r = R[ind]\n        for j in range(k):\n            if a & (1 << j) and Rind[j] < r:\n                for x in range(Rind[j], r):\n                    marked[j] = red(marked[j] + DP[x][j])\n                Rind[j] = r\n    for ind in Rbuckets[i]:\n        a = A[ind]\n        l = L[ind]\n        for j in range(k):\n            if not a & (1 << j) and Lind[j] < l:\n                for x in range(Lind[j], l):\n                    marked[j] = red(marked[j] - DP[x][j] + MOD)\n                Lind[j] = l\n    \n    for j in range(k):\n        if i == Rind[j]:\n            dp[j] = marked[j]\n            marked[j] = red(marked[j] + dp[j])\n            Rind[j] += 1\n\nprod = 1\nfor j in range(k):\n    prod = prod * DP[n][j] % MOD\n\nprint prod\n",
    "prob_desc_created_at": "1584974100",
    "tags": [
        "dp",
        "combinatorics",
        "two pointers",
        "bitmasks",
        "data structures"
    ],
    "hidden_unit_tests": ""
}