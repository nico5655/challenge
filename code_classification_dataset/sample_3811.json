{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"3 1 1 \\n700000000 700000000 \\n0 0 0 0 0 \\n0 0 2 1 0 \\n0 0 \\n9 9 999999990 \\n0 0 0 \\n3 1 3 1 1 1 \\n0 0\", \"0 1 1 0 0 0 0 0 \\n0 0 0 0 0 0 0 0 0 \\n0 0 0 3 1 1 3 0 0 \\n0 2 0 0 2 5 9 1 4\"]",
    "src_uid": "9be594097a1b2249c4227bde12c5552c",
    "prob_desc_notes": "NoteIn the first test case of the first sample there is only one segment of color $$$2$$$, and all other segments have color $$$1$$$. Therefore, for segments of color $$$1$$$, the answer is equal to the distance to the $$$3$$$rd segment, and for $$$3$$$rd one, the answer is equal to the minimum of the distances to segments of color $$$1$$$.In the second test case of the first sample there are only $$$2$$$ segments, and for both of them the answer is equal to the distance between them.In the third test case of the first sample, each segment intersects at least one of its ends with a segment of a different color, so all answers are equal to $$$0$$$.The fourth test case of the first sample is described in the problem statement.In the fifth test case of the first sample, one segment lies completely inside the other, and for both of them the answer is $$$0$$$.In the sixth test case of the first sample, all segments are points of different colors.",
    "prob_desc_description": "Dmitry has $$$n$$$ segments of different colors on the coordinate axis $$$Ox$$$. Each segment is characterized by three integers $$$l_i$$$, $$$r_i$$$ and $$$c_i$$$ ($$$1 \\le l_i \\le r_i \\le 10^9, 1 \\le c_i \\le n$$$), where $$$l_i$$$ and $$$r_i$$$ are are the coordinates of the ends of the $$$i$$$-th segment, and $$$c_i$$$ is its color.Dmitry likes to find the minimum distances between segments. However, he considers pairs of segments of the same color uninteresting. Therefore, he wants to know for each segment the distance from this segment to the nearest differently colored segment.The distance between two segments is the minimum of the distances between a point of the first segment and a point of the second segment. In particular, if the segments intersect, then the distance between them is equal to $$$0$$$.For example, Dmitry has $$$5$$$ segments:     The first segment intersects with the second (and these are segments of different colors), so the answers for them are equal to $$$0$$$.  For the $$$3$$$-rd segment, the nearest segment of a different color is the $$$2$$$-nd segment, the distance to which is equal to $$$2$$$.  For the $$$4$$$-th segment, the nearest segment of a different color is the $$$5$$$-th segment, the distance to which is equal to $$$1$$$.  The $$$5$$$-th segment lies inside the $$$2$$$-nd segment (and these are segments of different colors), so the answers for them are equal to $$$0$$$. ",
    "prob_desc_output_spec": "For each test case, on a separate line print $$$n$$$ integers, where the $$$i$$$-th number is equal to the distance from the $$$i$$$-th segment to the nearest segment of a different color.",
    "prob_desc_input_spec": "The first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases in the test. The descriptions of the test cases follow. The first line of description of each test case contains one integer $$$n$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$) — the number of segments. The next $$$n$$$ lines contain descriptions of the segments. Each segment is described by three integers $$$l_i$$$, $$$r_i$$$ and $$$c_i$$$ ($$$1 \\le l_i \\le r_i \\le 10^9, 1 \\le c_i \\le n$$$) — coordinates of the left and right ends of $$$i$$$-th segment, as well as the color of this segment. It is guaranteed that there are at least $$$2$$$ segments of different colors. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_084.jsonl",
    "code_uid": "ee26ba0f05f2664ce9bc05badfd3fa9d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"9\\n\\n3\\n\\n1 2 1\\n\\n3 4 1\\n\\n5 6 2\\n\\n2\\n\\n100000000 200000000 1\\n\\n900000000 1000000000 2\\n\\n5\\n\\n1 2 1\\n\\n2 3 2\\n\\n3 4 3\\n\\n4 5 4\\n\\n5 6 5\\n\\n5\\n\\n1 5 1\\n\\n4 9 2\\n\\n1 2 1\\n\\n8 9 2\\n\\n5 7 3\\n\\n2\\n\\n1 100 2\\n\\n10 90 1\\n\\n3\\n\\n1 1 1\\n\\n10 10 2\\n\\n1000000000 1000000000 3\\n\\n3\\n\\n3 4 1\\n\\n2 5 1\\n\\n1 6 2\\n\\n6\\n\\n5 6 2\\n\\n11 12 3\\n\\n7 8 2\\n\\n3 4 2\\n\\n1 2 1\\n\\n9 10 2\\n\\n2\\n\\n1 3 1\\n\\n2 3 2\", \"4\\n\\n8\\n\\n11 16 7\\n\\n12 15 7\\n\\n2 5 8\\n\\n17 22 5\\n\\n1 8 8\\n\\n19 23 8\\n\\n16 16 6\\n\\n6 7 5\\n\\n9\\n\\n1 4 3\\n\\n5 11 1\\n\\n8 11 3\\n\\n1 10 1\\n\\n2 11 1\\n\\n1 10 4\\n\\n3 11 1\\n\\n5 7 1\\n\\n1 11 1\\n\\n9\\n\\n25 25 1\\n\\n26 26 1\\n\\n24 24 2\\n\\n13 14 2\\n\\n12 16 2\\n\\n17 18 1\\n\\n19 19 1\\n\\n24 27 2\\n\\n24 27 1\\n\\n9\\n\\n15 18 1\\n\\n20 22 2\\n\\n13 22 2\\n\\n13 22 2\\n\\n3 13 2\\n\\n6 10 2\\n\\n3 6 2\\n\\n19 24 2\\n\\n22 24 2\"]",
    "exec_outcome": "PASSED",
    "source_code": "t = int(input())\r\ndef dist(i,j):\r\n    if i >= j:\r\n        return 0\r\n    else:\r\n        return j-i\r\n\r\nwhile t > 0:\r\n    n = int(input())\r\n    seg = []\r\n    for i in range(n):\r\n        seg.append(list(map(int,input().split()))+[i+1])\r\n    seg.sort(key=lambda x:(x[0],x[1]))\r\n    color = {}\r\n    i = 0\r\n    while i < n:\r\n        if seg[i][2] in color:\r\n            if seg[i][2] == seg[i-1][2]:\r\n                j = i\r\n                while j < n-1 and seg[j][2] == seg[j+1][2]:\r\n                    j = j + 1\r\n                color[seg[i][2]][-1][1] = j+1\r\n                for k in range(i,j+1):\r\n                    color[seg[i][2]].append([k,j+1])\r\n                i = j+1\r\n                continue\r\n            else:\r\n                color[seg[i][2]].append([i,i+1])\r\n                i = i + 1\r\n        else:\r\n            color[seg[i][2]] = [[i,i+1],]\r\n            i = i + 1\r\n    mindis= [1000000000]*(n+1)\r\n    signal = [0]*(n+1)\r\n    nowmaxj = [[0,0],[0,0]]\r\n    i = 0\r\n    while i < n:\r\n        nowcolor = seg[i][2]\r\n        u = signal[nowcolor]\r\n        end = color[nowcolor][u][1]\r\n        signal[nowcolor] += end - i\r\n        maxj = 0\r\n        if end != n:\r\n            for j in range(i,end):\r\n                maxj = max(maxj,seg[j][1])\r\n                mindis[seg[j][3]] = min(mindis[seg[j][3]],dist(seg[j][1],seg[end][0]))\r\n                for k in range(2):\r\n                    if nowmaxj[k][1] != 0 and nowmaxj[k][1] != nowcolor:\r\n                        mindis[seg[j][3]] = min(mindis[seg[j][3]],dist(nowmaxj[k][0],seg[j][0]))\r\n        else:\r\n            for j in range(i,end):\r\n                for k in range(2):\r\n                    if nowmaxj[k][1] != 0 and nowmaxj[k][1] != nowcolor:\r\n                        mindis[seg[j][3]] = min(mindis[seg[j][3]],dist(nowmaxj[k][0],seg[j][0]))\r\n            break\r\n        if maxj > nowmaxj[0][0]:\r\n            if nowmaxj[0][1] == nowcolor:\r\n                nowmaxj[0][0] = maxj\r\n            else:\r\n                nowmaxj[1][0] = nowmaxj[0][0]\r\n                nowmaxj[1][1] = nowmaxj[0][1]\r\n                nowmaxj[0] = [maxj,nowcolor]\r\n        elif maxj > nowmaxj[1][0]:\r\n            if nowcolor != nowmaxj[0][1]:\r\n                nowmaxj[1] = [maxj,nowcolor]\r\n        i = end\r\n\r\n    print(\" \".join(map(str,mindis[1:])))\r\n    t = t - 1",
    "prob_desc_created_at": "1665498900",
    "tags": [
        "binary search",
        "data structures",
        "math",
        "sortings"
    ],
    "hidden_unit_tests": ""
}