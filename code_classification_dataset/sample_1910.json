{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\\n011\", \"3\\n1101\", \"-1\\n11111\"]",
    "src_uid": "f26a979dc042ec9564cfecce29e5a1cf",
    "prob_desc_notes": "NoteFor the first sample, if we paint city $$$1$$$ white, the shortest path is $$$1 \\rightarrow 3$$$. Otherwise, it's $$$1 \\rightarrow 2 \\rightarrow 3$$$ regardless of other cities' colors.For the second sample, we should paint city $$$3$$$ black, and there are both black and white roads going from $$$2$$$ to $$$4$$$. Note that there can be a road connecting a city with itself.",
    "prob_desc_description": "Egor is a famous Russian singer, rapper, actor and blogger, and finally he decided to give a concert in the sunny Republic of Dagestan.There are $$$n$$$ cities in the republic, some of them are connected by $$$m$$$ directed roads without any additional conditions. In other words, road system of Dagestan represents an arbitrary directed graph. Egor will arrive to the city $$$1$$$, travel to the city $$$n$$$ by roads along some path, give a concert and fly away.As any famous artist, Egor has lots of haters and too annoying fans, so he can travel only by safe roads. There are two types of the roads in Dagestan, black and white: black roads are safe at night only, and white roads — in the morning. Before the trip Egor's manager's going to make a schedule: for each city he'll specify it's color, black or white, and then if during the trip they visit some city, the only time they can leave it is determined by the city's color: night, if it's black, and morning, if it's white. After creating the schedule Egor chooses an available path from $$$1$$$ to $$$n$$$, and for security reasons it has to be the shortest possible.Egor's manager likes Dagestan very much and wants to stay here as long as possible, so he asks you to make such schedule that there would be no path from $$$1$$$ to $$$n$$$ or the shortest path's length would be greatest possible.A path is one city or a sequence of roads such that for every road (excluding the first one) the city this road goes from is equal to the city previous road goes into. Egor can move only along paths consisting of safe roads only. The path length is equal to the number of roads in it. The shortest path in a graph is a path with smallest length.",
    "prob_desc_output_spec": "In the first line output the length of the desired path (or $$$-1$$$, if it's possible to choose such schedule that there's no path from $$$1$$$ to $$$n$$$). In the second line output the desired schedule — a string of $$$n$$$ digits, where $$$i$$$-th digit is $$$0$$$, if the $$$i$$$-th city is a night one, and $$$1$$$ if it's a morning one. If there are multiple answers, print any.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$, $$$m$$$ ($$$1 \\leq n \\leq 500000$$$, $$$0 \\leq m \\leq 500000$$$) — the number of cities and the number of roads. The $$$i$$$-th of next $$$m$$$ lines contains three integers — $$$u_i$$$, $$$v_i$$$ and $$$t_i$$$ ($$$1 \\leq u_i, v_i \\leq n$$$, $$$t_i \\in \\{0, 1\\}$$$) — numbers of cities connected by road and its type, respectively ($$$0$$$ — night road, $$$1$$$ — morning road).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2500,
    "file_name": "train_014.jsonl",
    "code_uid": "4f9ced91d064181782cd36da35312be2",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 4\\n1 2 0\\n1 3 1\\n2 3 0\\n2 3 1\", \"4 8\\n1 1 0\\n1 3 0\\n1 3 1\\n3 2 0\\n2 1 0\\n3 4 1\\n2 4 0\\n2 4 1\", \"5 10\\n1 2 0\\n1 3 1\\n1 4 0\\n2 3 0\\n2 3 1\\n2 5 0\\n3 4 0\\n3 4 1\\n4 2 1\\n4 5 0\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn, m = map(int, input().split());back = [[] for i in range(n)]\nfor _ in range(m):u, v, w = map(int, input().split());u -= 1;v -= 1;back[v].append((u,w)) \nout = [2] * n;outl = [-1] * n;outl[-1] = 0;q = deque([n - 1])\nwhile q:\n    v = q.popleft()\n    for u, w in back[v]:\n        if out[u] != w:out[u] = 1 - w\n        else:\n            if outl[u] == -1:outl[u] = outl[v] + 1;q.append(u)                \nout = [v if v != 2 else 1 for v in out];print(outl[0]);print(''.join(map(str,out)))",
    "prob_desc_created_at": "1599575700",
    "tags": [
        "dp",
        "greedy",
        "graphs",
        "constructive algorithms",
        "shortest paths",
        "dfs and similar"
    ],
    "hidden_unit_tests": ""
}