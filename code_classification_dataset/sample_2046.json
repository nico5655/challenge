{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"Petr\"]",
    "src_uid": "a9cc20ba7d6e31706ab1743bdde97669",
    "prob_desc_notes": "NotePlease note that the sample is not a valid test (because of limitations for $$$n$$$) and is given only to illustrate input/output format. Your program still has to print correct answer to this test to get AC.Due to randomness of input hacks in this problem are forbidden.",
    "prob_desc_description": "Petr likes to come up with problems about randomly generated data. This time problem is about random permutation. He decided to generate a random permutation this way: he takes identity permutation of numbers from $$$1$$$ to $$$n$$$ and then $$$3n$$$ times takes a random pair of different elements and swaps them. Alex envies Petr and tries to imitate him in all kind of things. Alex has also come up with a problem about random permutation. He generates a random permutation just like Petr but swaps elements $$$7n+1$$$ times instead of $$$3n$$$ times. Because it is more random, OK?!You somehow get a test from one of these problems and now you want to know from which one.",
    "prob_desc_output_spec": "If the test is generated via Petr's method print \"Petr\" (without quotes). If the test is generated via Alex's method print \"Um_nik\" (without quotes).",
    "prob_desc_input_spec": "In the first line of input there is one integer $$$n$$$ ($$$10^{3} \\le n \\le 10^{6}$$$). In the second line there are $$$n$$$ distinct integers between $$$1$$$ and $$$n$$$ — the permutation of size $$$n$$$ from the test. It is guaranteed that all tests except for sample are generated this way: First we choose $$$n$$$ — the size of the permutation. Then we randomly choose a method to generate a permutation — the one of Petr or the one of Alex. Then we generate a permutation using chosen method.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_016.jsonl",
    "code_uid": "7f29a2332a99c99b781e781f2e339027",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n2 4 5 1 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "n=int(input())\na=[0]+list(map(int,input().split()))\nans=0\nfor i in range(1,len(a)):\n    if a[i]==-1:\n        continue\n    j=i\n    while a[j]!=-1:\n        prev=j\n        j=a[j]\n        a[prev]=-1\n    ans+=1\nif n%2==0:\n    #n even ans also even even number of swaps required\n    #3*n \n    if ans%2==0:\n        print(\"Petr\")\n    else:\n        print(\"Um_nik\")\nelse:\n    #n us odd ans is even odd number of swaps required\n    if ans%2==0:\n        print(\"Petr\")\n    else:\n        print(\"Um_nik\")",
    "prob_desc_created_at": "1527608100",
    "tags": [
        "combinatorics",
        "math"
    ],
    "hidden_unit_tests": ""
}