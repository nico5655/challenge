{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"1\", \"4\"]",
    "src_uid": "99d7d112e5810370c87d86c8f1b613b1",
    "prob_desc_notes": "NoteIn the first example the only employee will come at moment 3. At this moment the door will open and will stay open until the moment 7. At the same moment of time the client will come, so at first he will enter and only after it the door will close. Thus the door will open one time.",
    "prob_desc_description": "There is an automatic door at the entrance of a factory. The door works in the following way:  when one or several people come to the door and it is closed, the door immediately opens automatically and all people immediately come inside,  when one or several people come to the door and it is open, all people immediately come inside,  opened door immediately closes in d seconds after its opening,  if the door is closing and one or several people are coming to the door at the same moment, then all of them will have enough time to enter and only after that the door will close. For example, if d = 3 and four people are coming at four different moments of time t1 = 4, t2 = 7, t3 = 9 and t4 = 13 then the door will open three times: at moments 4, 9 and 13. It will close at moments 7 and 12.It is known that n employees will enter at moments a, 2·a, 3·a, ..., n·a (the value a is positive integer). Also m clients will enter at moments t1, t2, ..., tm.Write program to find the number of times the automatic door will open. Assume that the door is initially closed.",
    "prob_desc_output_spec": "Print the number of times the door will open.",
    "prob_desc_input_spec": "The first line contains four integers n, m, a and d (1 ≤ n, a ≤ 109, 1 ≤ m ≤ 105, 1 ≤ d ≤ 1018) — the number of the employees, the number of the clients, the moment of time when the first employee will come and the period of time in which the door closes. The second line contains integer sequence t1, t2, ..., tm (1 ≤ ti ≤ 1018) — moments of time when clients will come. The values ti are given in non-decreasing order.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_076.jsonl",
    "code_uid": "aadc500993251034ce2bef258bf94803",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"1 1 3 4\\n7\", \"4 3 4 2\\n7 9 11\"]",
    "exec_outcome": "PASSED",
    "source_code": "BigNum = 10 ** 20\n\nn, m, a, d = map(int, input().split(' '))\nts = [0] + list(map(int, input().split(' '))) + [BigNum]\n\ndef empsInRange(l, r):\n    em1 = l // a + 1\n    em2 = r // a\n    return (em1, min(em2, n))\n\nempDoorGroup = d // a + 1\n\ndef moveEmps(emps, last):\n    em1, em2 = emps\n    if em1 > em2:\n        return last, 0\n    \n    if em1 * a <= last + d:\n        gr1 = (last + d - em1 * a) // a\n        em1 += 1 + gr1\n    \n    if em1 > em2:\n        return last, 0\n\n    doorGroups = (em2 - em1 + 1 + empDoorGroup - 1) // empDoorGroup\n    last = (em1 + empDoorGroup * (doorGroups - 1)) * a\n\n    return last, doorGroups\n\nres = 0\nlast = -BigNum\n\nfor i in range(1, len(ts)):\n    #print(i, ' ------------ ')\n    emps = empsInRange(ts[i - 1], ts[i])\n    #print(ts[i-1], ts[i], emps, last)\n    last, inc = moveEmps(emps, last)\n    #print('last:', last, ' inc:', inc)\n    res += inc\n\n    if ts[i] < BigNum and last + d < ts[i]:\n        res += 1\n        last = ts[i]\n    #print('temp res:', res)\n\nprint(res)\n",
    "prob_desc_created_at": "1508573100",
    "tags": [
        "implementation"
    ],
    "hidden_unit_tests": ""
}