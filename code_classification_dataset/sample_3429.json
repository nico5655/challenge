{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"3\", \"-1\"]",
    "src_uid": "7225266f663699ff7e16b726cadfe9ee",
    "prob_desc_notes": "NoteIn the first sample, heights sequences are following:Xaniar: Abol: ",
    "prob_desc_description": "Mike has a frog and a flower. His frog is named Xaniar and his flower is named Abol. Initially(at time 0), height of Xaniar is h1 and height of Abol is h2. Each second, Mike waters Abol and Xaniar.  So, if height of Xaniar is h1 and height of Abol is h2, after one second height of Xaniar will become  and height of Abol will become  where x1, y1, x2 and y2 are some integer numbers and  denotes the remainder of a modulo b.Mike is a competitive programmer fan. He wants to know the minimum time it takes until height of Xania is a1 and height of Abol is a2.Mike has asked you for your help. Calculate the minimum time or say it will never happen.",
    "prob_desc_output_spec": "Print the minimum number of seconds until Xaniar reaches height a1 and Abol reaches height a2 or print -1 otherwise.",
    "prob_desc_input_spec": "The first line of input contains integer m (2 ≤ m ≤ 106). The second line of input contains integers h1 and a1 (0 ≤ h1, a1 &lt; m). The third line of input contains integers x1 and y1 (0 ≤ x1, y1 &lt; m). The fourth line of input contains integers h2 and a2 (0 ≤ h2, a2 &lt; m). The fifth line of input contains integers x2 and y2 (0 ≤ x2, y2 &lt; m). It is guaranteed that h1 ≠ a1 and h2 ≠ a2.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_059.jsonl",
    "code_uid": "9cf794de657bd5b450b9789e621a2030",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n4 2\\n1 1\\n0 1\\n2 3\", \"1023\\n1 2\\n1 0\\n1 2\\n1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import fractions\n\ndef read_data():\n    m = int(input())\n    h1, a1 = map(int, input().split())\n    x1, y1 = map(int, input().split())\n    h2, a2 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    return m, h1, a1, x1, y1, h2, a2, x2, y2\n\ndef solve(m, h1, a1, x1, y1, h2, a2, x2, y2):\n    t = 0\n    h1s = [-1] * m\n    h2s = [-1] * m\n    h1s[h1] = 0\n    h2s[h2] = 0\n    t1 = -1\n    t2 = -1\n    while h1 != a1 or h2 != a2:\n        t += 1\n        h1 = (x1 * h1 + y1) % m\n        h2 = (x2 * h2 + y2) % m\n        if h1s[h1] >= 0 and t1 == -1:\n            t1 = h1s[h1]\n            s1 = t - t1\n            if t2 >= 0:\n                break\n        else:\n            h1s[h1] = t\n        if h2s[h2] >= 0 and t2 == -1:\n            t2 = h2s[h2]\n            s2 = t - t2\n            if t1 >= 0:\n                break\n        else:\n            h2s[h2] = t\n    if h1 == a1 and h2 == a2:\n        return t\n    return retrieve(a1, a2, t1, s1, t2, s2, h1s, h2s)\n\ndef retrieve(a1, a2, t1, s1, t2, s2, h1s, h2s):\n    u1 = h1s[a1]\n    u2 = h2s[a2]\n    if u1 == -1 or u2 == -1:\n        return -1\n    if u1 < t1:\n        if guess(h2s, u1, t2, s2, a2):\n            return u1\n        else:\n            return -1\n    if u2 < t2:\n        if guess(h1s, u2, t1, s1, a1):\n            return u2\n        else:\n            return -1\n    return find_time(u1, s1, u2, s2)\n\ndef guess(hs, u, t, s, a):\n    if u <= t:\n        return hs[a] == u\n    tt = t + (u - t) % s\n    return hs[a] == tt\n\ndef find_time(u1, s1, u2, s2):\n    g = fractions.gcd(s1, s2)\n    if abs(u1 - u2) % g:\n        return -1\n    k1, k2 = extended_euclid(s1, s2, u2-u1, g)\n    b = s2 // g\n    return (k1 % b) * s1 + u1\n\ndef egcd(a, b):\n    x, lastx = 0, 1\n    y, lasty = 1, 0\n    while b:\n        q = a // b\n        a, b = b, a % b\n        x, lastx = lastx - q * x, x\n        y, lasty = lasty - q * y, y\n    return lastx, lasty\n\ndef extended_euclid(a, b, c, g):\n    x, y = egcd(a, b)\n    return (c // g) * x, (x // g) * y\n\n\nparam = read_data()\nprint(solve(*param))",
    "prob_desc_created_at": "1432658100",
    "tags": [
        "implementation",
        "greedy",
        "math",
        "brute force"
    ],
    "hidden_unit_tests": ""
}