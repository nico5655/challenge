{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\\nvanguard 1\\n2\\ndesolator 1\\nmaelstorm 1\"]",
    "src_uid": "8b28b07a73b4cc3d8d25b2491736064a",
    "prob_desc_notes": null,
    "prob_desc_description": "In one school with Vasya there is a student Kostya. Kostya does not like physics, he likes different online games. Every day, having come home, Kostya throws his bag in the farthest corner and sits down at his beloved computer. Kostya even eats glued to the game. A few days ago Kostya bought a new RPG game \"HaresButtle\", which differs from all other games in this genre. It has a huge number of artifacts. As we know, artifacts are divided into basic and composite ones. Only the basic artifacts are available on sale. More powerful composite artifacts are collected from some number of basic artifacts.After the composing composite artifact, all the components disappear.Kostya is the head of the alliance, so he has to remember, what artifacts has not only himself, but also his allies. You must identify by sequence of artifacts purchased by Kostya and his allies, how many and which artifacts has been collected by each of them. It is believed that initially no one has any artifacts. ",
    "prob_desc_output_spec": "The output file should consist of k blocks. The first line should contain number bi — the number of different artifacts the i-th ally has. Then the block should contain bi lines with the names of these artifacts and the number of these artifacts. At that the lines should be printed in accordance with the lexicographical order of the names of the artifacts. In each block all the artifacts must be different, and all the numbers except the bi should be positive.",
    "prob_desc_input_spec": "The first line has 4 natural numbers: k (1 ≤ k ≤ 100) — the number of Kostya's allies, n (1 ≤ n ≤ 50) — the number of basic artifacts, m (0 ≤ m ≤ 50) — the number of composite artifacts, q (1 ≤ q ≤ 500) — the number of his friends' purchases. The following n lines contain the names of basic artifacts. After them m lines contain the descriptions of composite artifacts in the following format: &lt;Art. Name&gt;: &lt;Art. №1&gt; &lt;Art. №1 Number&gt;, &lt;Art. №2&gt; &lt;Art. №2 Number&gt;, ... &lt;Art. №X&gt; &lt;Art. №Х Number&gt; All the numbers are natural numbers not exceeding 100 (1 ≤ X ≤ n). The names of all artifacts are different, they are composed of lowercase Latin letters, and the length of each name is from 1 to 100 characters inclusive. All the words in the format of the description of a composite artifact are separated by exactly one space. It is guaranteed that all components of the new artifact are different and have already been met in the input data as the names of basic artifacts.  Next, each of the following q lines is characterized by the number ai, the number of a friend who has bought the artifact (1 ≤ ai ≤ k), and the name of the purchased basic artifact. Let's assume that the backpacks of the heroes are infinitely large and any artifact bought later can fit in there. It is guaranteed that after the i-th purchase no more than one opportunity to collect the composite artifact appears. If such an opportunity arose, the hero must take advantage of it.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_008.jsonl",
    "code_uid": "1e8876481e7b061178118005c3cb1074",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2 3 2 5\\ndesolator\\nrefresher\\nperseverance\\nvanguard: desolator 1, refresher 1\\nmaelstorm: perseverance 2\\n1 desolator\\n2 perseverance\\n1 refresher\\n2 desolator\\n2 perseverance\"]",
    "exec_outcome": "PASSED",
    "source_code": "k, n, m, q = [int(i) for i in input().split()]\nbasic = [input() for i in range(n)]\n\ncomposite = {}\nfor i in range(m):\n\tname, items = input().split(\":\")\n\tcomposite[name] = {}\n\tfor item in items.split(\",\"):\n\t\tcomponent, cnt = item.split()\n\t\tcomposite[name][component] = int(cnt)\n\nfriends = {}\nfor i in range(1, k+1):\n\tfriends[str(i)] = {}\n\tfor artifact in basic:\n\t\tfriends[str(i)][artifact] = 0\n\tfor artifact in composite.keys():\n\t\tfriends[str(i)][artifact] = 0\n\nfor i in range(q):\n\tai, artifact = input().split()\n\tfriends[ai][artifact] += 1\n\tfor artifact, combo in composite.items():\n\t\tif all(friends[ai][basic]==cnt for basic, cnt in combo.items()):\n\t\t\tfor basic, cnt in combo.items():\n\t\t\t\tfriends[ai][basic] -= cnt\n\t\t\tfriends[ai][artifact] += 1\n\t\t\tbreak\n\nfor i in range(1, k+1):\n\tprint(sum([i>0 for i in friends[str(i)].values()]))\n\tfor artifact in sorted(friends[str(i)].keys()):\n\t\tif friends[str(i)][artifact] > 0:\n\t\t\tprint(artifact, friends[str(i)][artifact])",
    "prob_desc_created_at": "1300809600",
    "tags": [
        "implementation"
    ],
    "hidden_unit_tests": ""
}