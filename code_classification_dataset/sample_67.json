{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\", \"NO\", \"NO\", \"NO\", \"NO\", \"NO\"]",
    "src_uid": "6405161be280fea943201fa00ef6f448",
    "prob_desc_notes": "NoteIn the first example, the given picture contains one \"+\".In the second example, two vertical branches are located in a different column.In the third example, there is a dot outside of the shape.In the fourth example, the width of the two vertical branches is $$$2$$$.In the fifth example, there are two shapes.In the sixth example, there is an empty space inside of the shape.",
    "prob_desc_description": "You have a given picture with size $$$w \\times h$$$. Determine if the given picture has a single \"+\" shape or not. A \"+\" shape is described below:  A \"+\" shape has one center nonempty cell.  There should be some (at least one) consecutive non-empty cells in each direction (left, right, up, down) from the center. In other words, there should be a ray in each direction.  All other cells are empty. Find out if the given picture has single \"+\" shape.",
    "prob_desc_output_spec": "If the given picture satisfies all conditions, print \"YES\". Otherwise, print \"NO\". You can output each letter in any case (upper or lower).",
    "prob_desc_input_spec": "The first line contains two integers $$$h$$$ and $$$w$$$ ($$$1 \\le h$$$, $$$w \\le 500$$$) — the height and width of the picture. The $$$i$$$-th of the next $$$h$$$ lines contains string $$$s_{i}$$$ of length $$$w$$$ consisting \".\" and \"*\" where \".\" denotes the empty space and \"*\" denotes the non-empty space.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1300,
    "file_name": "train_000.jsonl",
    "code_uid": "37ede566651e9e71eb35d9e137c401fa",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 6\\n......\\n..*...\\n.****.\\n..*...\\n..*...\", \"3 5\\n..*..\\n****.\\n.*...\", \"7 7\\n.......\\n...*...\\n..****.\\n...*...\\n...*...\\n.......\\n.*.....\", \"5 6\\n..**..\\n..**..\\n******\\n..**..\\n..**..\", \"3 7\\n.*...*.\\n***.***\\n.*...*.\", \"5 10\\n..........\\n..*.......\\n.*.******.\\n..*.......\\n..........\"]",
    "exec_outcome": "PASSED",
    "source_code": "n,m=map(int,input().split())\na=[]\nfor i in range(n):\n    a.append(list(input()))\nb=0\nfor i in a:\n    b+=i.count('*')\nx=y=-1\nfor i in range(1,n-1):\n    for j in range(1,m-1):\n        if a[i][j]==a[i][j-1]==a[i][j+1]==a[i-1][j]==a[i+1][j]=='*':\n            x=i\n            y=j\n            break\nif x==y==-1:\n    exit(print('NO'))\nr=1\nfor i in range(x+1,n):\n    if a[i][y]=='*':\n        r+=1\n    else:\n        break\nfor i in range(x-1,-1,-1):\n    if a[i][y]=='*':\n        r+=1\n    else:\n        break\nfor i in range(y+1,m):\n    if a[x][i]=='*':\n        r+=1\n    else:\n        break\nfor i in range(y-1,-1,-1):\n    if a[x][i]=='*':\n        r+=1\n    else:\n        break\nif r==b:\n    print('YES')\nelse:\n    print('NO')\n\n\n\n        ",
    "prob_desc_created_at": "1560258300",
    "tags": [
        "implementation",
        "dfs and similar",
        "strings"
    ],
    "hidden_unit_tests": ""
}