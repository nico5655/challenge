{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"0\", \"2 1 3\\n\\n0\"]",
    "src_uid": "aea7e7220a8534c1053e8755a70dd499",
    "prob_desc_notes": "NoteWhen $$$n = 3$$$, any John's move can be reversed, thus $$$R(3) = 0$$$, and terminating the game immediately is correct.$$$R(4) = 1$$$, and one strategy to achieve this result is shown in the second sample case.Blank lines in sample interactions are for clarity and should not be printed.",
    "prob_desc_description": "This is an interactive problem.John and his imaginary friend play a game. There are $$$n$$$ lamps arranged in a circle. Lamps are numbered $$$1$$$ through $$$n$$$ in clockwise order, that is, lamps $$$i$$$ and $$$i + 1$$$ are adjacent for any $$$i = 1, \\ldots, n - 1$$$, and also lamps $$$n$$$ and $$$1$$$ are adjacent. Initially all lamps are turned off.John and his friend take turns, with John moving first. On his turn John can choose to terminate the game, or to make a move. To make a move, John can choose any positive number $$$k$$$ and turn any $$$k$$$ lamps of his choosing on. In response to this move, John's friend will choose $$$k$$$ consecutive lamps and turn all of them off (the lamps in the range that were off before this move stay off). Note that the value of $$$k$$$ is the same as John's number on his last move. For example, if $$$n = 5$$$ and John have just turned three lamps on, John's friend may choose to turn off lamps $$$1, 2, 3$$$, or $$$2, 3, 4$$$, or $$$3, 4, 5$$$, or $$$4, 5, 1$$$, or $$$5, 1, 2$$$.After this, John may choose to terminate or move again, and so on. However, John can not make more than $$$10^4$$$ moves.John wants to maximize the number of lamps turned on at the end of the game, while his friend wants to minimize this number. Your task is to provide a strategy for John to achieve optimal result. Your program will play interactively for John against the jury's interactor program playing for John's friend.Suppose there are $$$n$$$ lamps in the game. Let $$$R(n)$$$ be the number of turned on lamps at the end of the game if both players act optimally. Your program has to terminate the game with at least $$$R(n)$$$ turned on lamps within $$$10^4$$$ moves. Refer to Interaction section below for interaction details.For technical reasons hacks for this problem are disabled.",
    "prob_desc_output_spec": null,
    "prob_desc_input_spec": null,
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2600,
    "file_name": "train_009.jsonl",
    "code_uid": "adc11f1a9809409cbfd0da723c56abc9",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"3\", \"4\\n\\n1\"]",
    "exec_outcome": "PASSED",
    "source_code": "#lizhou\nn = int(input())\na = [0]*n\n \nr = max(int(n-k-n/k+1) for k in range(1, n+1))\nfor i in range(1, n+1):\n    if int(n-i-n/i+1) == r:\n        k = i\n        break\n \ndef query(b):\n    for x in b:\n        a[x] = 1\n    print(k, end = \" \")\n    print(*[x+1 for x in b])\n    x = int(input())-1\n    for i in range(k):\n        a[(x+i)%n] = 0\n \nwhile True:\n    b = []\n    for i in range(n):\n        if a[i] == 0 and i%k < k-1 and i != n-1:\n            b.append(i)\n    if len(b) < k: break\n    query(b[:k])\n    if sum(a) >= r: break\n \nprint(0)",
    "prob_desc_created_at": "1592491500",
    "tags": [
        "math",
        "implementation",
        "games",
        "interactive"
    ],
    "hidden_unit_tests": ""
}