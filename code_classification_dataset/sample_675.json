{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"4\", \"5\"]",
    "src_uid": "b784cebc7e50cc831fde480171b9eb84",
    "prob_desc_notes": "NoteIn the first sample, the longest almost constant range is [2, 5]; its length (the number of data points in it) is 4.In the second sample, there are three almost constant ranges of length 4: [1, 4], [6, 9] and [7, 10]; the only almost constant range of the maximum length 5 is [6, 10].",
    "prob_desc_description": "When Xellos was doing a practice course in university, he once had to measure the intensity of an effect that slowly approached equilibrium. A good way to determine the equilibrium intensity would be choosing a sufficiently large number of consecutive data points that seems as constant as possible and taking their average. Of course, with the usual sizes of data, it's nothing challenging — but why not make a similar programming contest problem while we're at it?You're given a sequence of n data points a1, ..., an. There aren't any big jumps between consecutive data points — for each 1 ≤ i &lt; n, it's guaranteed that |ai + 1 - ai| ≤ 1.A range [l, r] of data points is said to be almost constant if the difference between the largest and the smallest value in that range is at most 1. Formally, let M be the maximum and m the minimum value of ai for l ≤ i ≤ r; the range [l, r] is almost constant if M - m ≤ 1.Find the length of the longest almost constant range.",
    "prob_desc_output_spec": "Print a single number — the maximum length of an almost constant range of the given sequence.",
    "prob_desc_input_spec": "The first line of the input contains a single integer n (2 ≤ n ≤ 100 000) — the number of data points. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100 000).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_003.jsonl",
    "code_uid": "b7ad45a0a6496b0244635a0efe74664f",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n1 2 3 3 2\", \"11\\n5 4 5 5 6 7 8 8 8 7 6\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import Counter\ncnt = Counter()\nn = int(raw_input())\na = map(int,raw_input().split())\n\ndef isOK(x):\n    if cnt[x-2]>0 or cnt[x+2]>0:\n        return False\n    else:\n        cnt[x]+=1\n        return True\n\nret = cur = 0\n\nfor i in xrange(n):\n    while cur < n and isOK(a[cur]):\n        cur+=1\n    ret = max(ret,cur-i)\n    cnt[a[i]]-=1\n\nprint ret",
    "prob_desc_created_at": "1448382900",
    "tags": [
        "dp",
        "two pointers",
        "implementation"
    ],
    "hidden_unit_tests": ""
}