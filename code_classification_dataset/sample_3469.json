{
    "prob_desc_time_limit": "2 секунды",
    "prob_desc_sample_outputs": "[\"LUURRDDL\", \"UULLDDDDDRRRRRUULULL\"]",
    "src_uid": "dea56c6d6536e7efe80d39ebc6b819a8",
    "prob_desc_notes": "ПримечаниеВ первом тестовом примере для обхода по часовой стрелке последовательность посещенных роботом клеток выглядит следующим образом:  клетка (3, 2);  клетка (3, 1);  клетка (2, 1);  клетка (1, 1);  клетка (1, 2);  клетка (1, 3);  клетка (2, 3);  клетка (3, 3);  клетка (3, 2). ",
    "prob_desc_description": "Вам задано прямоугольное клетчатое поле, состоящее из n строк и m столбцов. Поле содержит цикл из символов «*», такой что:  цикл можно обойти, посетив каждую его клетку ровно один раз, перемещаясь каждый раз вверх/вниз/вправо/влево на одну клетку;  цикл не содержит самопересечений и самокасаний, то есть две клетки цикла соседствуют по стороне тогда и только тогда, когда они соседние при перемещении вдоль цикла (самокасание по углу тоже запрещено). Ниже изображены несколько примеров допустимых циклов:  Все клетки поля, отличные от цикла, содержат символ «.». Цикл на поле ровно один. Посещать клетки, отличные от цикла, Роботу нельзя.В одной из клеток цикла находится Робот. Эта клетка помечена символом «S». Найдите последовательность команд для Робота, чтобы обойти цикл. Каждая из четырёх возможных команд кодируется буквой и обозначает перемещение Робота на одну клетку:  «U» — сдвинуться на клетку вверх,  «R» — сдвинуться на клетку вправо,  «D» — сдвинуться на клетку вниз,  «L» — сдвинуться на клетку влево. Робот должен обойти цикл, побывав в каждой его клетке ровно один раз (кроме стартовой точки — в ней он начинает и заканчивает свой путь).Найдите искомую последовательность команд, допускается любое направление обхода цикла.",
    "prob_desc_output_spec": "В первую строку выходных данных выведите искомую последовательность команд для Робота. Направление обхода цикла Роботом может быть любым.",
    "prob_desc_input_spec": "В первой строке входных данных записаны два целых числа n и m (3 ≤ n, m ≤ 100) — количество строк и столбцов прямоугольного клетчатого поля соответственно. В следующих n строках записаны по m символов, каждый из которых — «.», «*» или «S». Гарантируется, что отличные от «.» символы образуют цикл без самопересечений и самокасаний. Также гарантируется, что на поле ровно одна клетка содержит «S» и что она принадлежит циклу. Робот не может посещать клетки, помеченные символом «.».",
    "prob_desc_output_to": "стандартный вывод",
    "prob_desc_input_from": "стандартный ввод",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_061.jsonl",
    "code_uid": "874c5e87446705ac6040ac81b3df4161",
    "prob_desc_memory_limit": "256 мегабайт",
    "prob_desc_sample_inputs": "[\"3 3\\n***\\n*.*\\n*S*\", \"6 7\\n.***...\\n.*.*...\\n.*.S**.\\n.*...**\\n.*....*\\n.******\"]",
    "exec_outcome": "PASSED",
    "source_code": "def read_ints():\n    return [int(x) for x in input(' ').split()]\n\n\ndef main():\n    n, m = read_ints()\n    field = []\n    x, y = None, None\n    for i in range(n):\n        line = input()\n        if 'S' in line:\n            x, y = i, line.find('S')\n        field.append(list(line))\n    field[x][y] = '*'\n    flag = False\n    curr_x, curr_y = x, y\n    delta = [(-1, 0, 'U'), (+1, 0, 'D'), (0, -1, 'L'), (0, +1, 'R')]\n    par_x, par_y = -1, -1\n    while True:\n        if flag:\n            field[curr_x][curr_y] = 'U'\n        flag = True\n        for dx, dy, label in delta:\n            next_x, next_y = curr_x + dx, curr_y + dy\n            if not 0 <= next_x < n:\n                continue\n            if not 0 <= next_y < m:\n                continue\n            if par_x == next_x and par_y == next_y:\n                continue\n            if field[next_x][next_y] == '*':\n                print(label, end='', flush=True)\n                par_x, par_y = curr_x, curr_y\n                curr_x, curr_y = next_x, next_y\n                break\n        if x == curr_x and y == curr_y:\n            break\n\nif __name__ == '__main__':\n    main()",
    "prob_desc_created_at": "1458745200",
    "tags": [
        "dfs and similar",
        "graphs"
    ],
    "hidden_unit_tests": ""
}