{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"? 1 5\\n\\n? 2 5\\n\\n? 3 5\\n\\n! 1 3 5\\n\\n? 1 5\\n\\n? 2 5\\n\\n? 3 5\\n\\n! 2 4 5\"]",
    "src_uid": "6be52845d61d8fbd297d742842acd28e",
    "prob_desc_notes": "NoteIn the first test case, $$$i = 1$$$, $$$j = 3$$$, $$$k = 5$$$, so the sequence $$$a$$$ is $$$[2, 1, 5, 4, 3]$$$.In the second test case, $$$i = 2$$$, $$$j = 4$$$, $$$k = 5$$$, so the sequence $$$a$$$ is $$$[1, 3, 2, 5, 4]$$$.",
    "prob_desc_description": "This is an interactive problem.Jury initially had a sequence $$$a$$$ of length $$$n$$$, such that $$$a_i = i$$$.The jury chose three integers $$$i$$$, $$$j$$$, $$$k$$$, such that $$$1 \\leq i &lt; j &lt; k \\leq n$$$, $$$j - i &gt; 1$$$. After that, Jury reversed subsegments $$$[i, j - 1]$$$ and $$$[j, k]$$$ of the sequence $$$a$$$.Reversing a subsegment $$$[l, r]$$$ of the sequence $$$a$$$ means reversing the order of elements $$$a_l, a_{l+1}, \\ldots, a_r$$$ in the sequence, i. e. $$$a_l$$$ is swapped with $$$a_r$$$, $$$a_{l+1}$$$ is swapped with $$$a_{r-1}$$$, etc.You are given the number $$$n$$$ and you should find $$$i$$$, $$$j$$$, $$$k$$$ after asking some questions.In one question you can choose two integers $$$l$$$ and $$$r$$$ ($$$1 \\leq l \\leq r \\leq n$$$) and ask the number of inversions on the subsegment $$$[l, r]$$$ of the sequence $$$a$$$. You will be given the number of pairs $$$(i, j)$$$ such that $$$l \\leq i &lt; j \\leq r$$$, and $$$a_i &gt; a_j$$$.Find the chosen numbers $$$i$$$, $$$j$$$, $$$k$$$ after at most $$$40$$$ questions.The numbers $$$i$$$, $$$j$$$, and $$$k$$$ are fixed before the start of your program and do not depend on your queries.",
    "prob_desc_output_spec": null,
    "prob_desc_input_spec": "Each test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases. Description of the test cases follows. The single line of each test case contains a single integer $$$n$$$ ($$$4 \\leq n \\leq 10^9$$$). After reading it you should start an interaction process by asking questions for that test case. After giving an answer you should:   Terminate your program if that is the last test case.  Proceed to the next test case otherwise. ",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2000,
    "file_name": "train_091.jsonl",
    "code_uid": "529594a5dac0be61f878c55eb71b5bff",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2 \\n5 \\n\\n4 \\n\\n3 \\n\\n3 \\n\\n5 \\n\\n2 \\n\\n2 \\n\\n1\"]",
    "exec_outcome": "PASSED",
    "source_code": "T = int(input())\r\nimport sys\r\ndef interact(n):\r\n    print('?',1,n)\r\n    sys.stdout.flush()\r\n    A = int(input())\r\n    ok = n\r\n    ng = 0\r\n    while ok - ng > 1:\r\n        x = (ng + ok) //2\r\n        print('?',1,x)\r\n        sys.stdout.flush()\r\n        rev = int(input())\r\n        if rev == 0:\r\n            ng = x\r\n        else:\r\n            ok = x\r\n    i = ok -1\r\n    print('?',i+1,n)\r\n    sys.stdout.flush()\r\n    B = int(input())\r\n    j = A - B + i + 1\r\n    print('?',j+1,n)\r\n    sys.stdout.flush()\r\n    C = int(input())\r\n    m = j - i\r\n    k = A - (m * (m-1) )//2 + j - C\r\n    print('!',i,j,k)\r\n    sys.stdout.flush()\r\n\r\n    \r\n\r\n\r\nfor _ in range(T):\r\n    n = int(input())\r\n    interact(n)",
    "prob_desc_created_at": "1636869900",
    "tags": [
        "binary search",
        "combinatorics",
        "interactive",
        "math"
    ],
    "hidden_unit_tests": ""
}