{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"3\", \"9\", \"130653412\"]",
    "src_uid": "1b336555c94d5d5198abe5426ff6fa7a",
    "prob_desc_notes": "NoteFor a detailed definition of bitwise AND we recommend to take a look in the corresponding article in Wikipedia.In the first sample, there are 3 possible solutions:   z&amp;_ = 61&amp;63 = 61 = z  _&amp;z = 63&amp;61 = 61 = z  z&amp;z = 61&amp;61 = 61 = z ",
    "prob_desc_description": "While walking down the street Vanya saw a label \"Hide&amp;Seek\". Because he is a programmer, he used &amp; as a bitwise AND for these two words represented as a integers in base 64 and got new word. Now Vanya thinks of some string s and wants to know the number of pairs of words of length |s| (length of s), such that their bitwise AND is equal to s. As this number can be large, output it modulo 109 + 7.To represent the string as a number in numeral system with base 64 Vanya uses the following rules:  digits from '0' to '9' correspond to integers from 0 to 9;  letters from 'A' to 'Z' correspond to integers from 10 to 35;  letters from 'a' to 'z' correspond to integers from 36 to 61;  letter '-' correspond to integer 62;  letter '_' correspond to integer 63. ",
    "prob_desc_output_spec": "Print a single integer — the number of possible pairs of words, such that their bitwise AND is equal to string s modulo 109 + 7.",
    "prob_desc_input_spec": "The only line of the input contains a single word s (1 ≤ |s| ≤ 100 000), consisting of digits, lowercase and uppercase English letters, characters '-' and '_'.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_007.jsonl",
    "code_uid": "7f2ae05a46346d3040611ddacd32d9cc",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"z\", \"V_V\", \"Codeforces\"]",
    "exec_outcome": "PASSED",
    "source_code": "s = raw_input()\n\nd = 0\nans = 1\nfor c in map(ord, s):\n\td = 0\n\tif ord(\"0\") <= c <= ord(\"9\"):\n\t\td += c - ord(\"0\")\n\telif ord(\"A\") <= c <= ord(\"Z\"):\n\t\td += c - ord(\"A\") + 10\n\telif ord(\"a\") <= c <= ord(\"z\"):\n\t\td += c - ord(\"a\") + 36\n\telif ord(\"-\") == c:\n\t\td += 62\n\telse:\n\t\td += 63\n\n\tans *= pow(3, format(d, \"06b\").count(\"0\"), 10 ** 9 + 7)\n\tans %= 10 ** 9 + 7\n\nprint ans\n",
    "prob_desc_created_at": "1464798900",
    "tags": [
        "combinatorics",
        "implementation",
        "bitmasks",
        "strings"
    ],
    "hidden_unit_tests": ""
}