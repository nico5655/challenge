{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"5\", \"4\", \"3\"]",
    "src_uid": "42c4adc1c4a10cc619c05a842e186e60",
    "prob_desc_notes": "NoteIn the first example the following segments have sum less than $$$4$$$:  $$$[2, 2]$$$, sum of elements is $$$-1$$$  $$$[2, 3]$$$, sum of elements is $$$2$$$  $$$[3, 3]$$$, sum of elements is $$$3$$$  $$$[4, 5]$$$, sum of elements is $$$3$$$  $$$[5, 5]$$$, sum of elements is $$$-1$$$ ",
    "prob_desc_description": "Petya has an array $$$a$$$ consisting of $$$n$$$ integers. He has learned partial sums recently, and now he can calculate the sum of elements on any segment of the array really fast. The segment is a non-empty sequence of elements standing one next to another in the array.Now he wonders what is the number of segments in his array with the sum less than $$$t$$$. Help Petya to calculate this number.More formally, you are required to calculate the number of pairs $$$l, r$$$ ($$$l \\le r$$$) such that $$$a_l + a_{l+1} + \\dots + a_{r-1} + a_r &lt; t$$$.",
    "prob_desc_output_spec": "Print the number of segments in Petya's array with the sum of elements less than $$$t$$$.",
    "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$t$$$ ($$$1 \\le n \\le 200\\,000, |t| \\le 2\\cdot10^{14}$$$). The second line contains a sequence of integers $$$a_1, a_2, \\dots, a_n$$$ ($$$|a_{i}| \\le 10^{9}$$$) â€” the description of Petya's array. Note that there might be negative, zero and positive elements.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 1800,
    "file_name": "train_000.jsonl",
    "code_uid": "24edfecbe9cde18099ac499f2c67d8b9",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5 4\\n5 -1 3 4 -1\", \"3 0\\n-1 2 -3\", \"4 -1\\n-2 1 -2 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "from bisect import bisect_left\n\nsum = [0]*200005\nsrt = []\nn,t = map(int,input().split())\na = list(map(int,input().split()))\n\ntree = [0]*200005\n\ndef get(x):\n    ans = 0\n    while x:\n        ans += tree[x]\n        x -= x&-x\n    return ans\n\ndef update(x):\n\n    while x <= 200002:\n        tree[x] += 1\n        x += x&-x\n\n\nfor i in range(n):\n    if i:\n        sum[i] = sum[i-1] + a[i]\n    else:\n        sum[i] = a[i]\n    srt.append(sum[i])\n\nif 0 not in srt:\n    srt.append(0)\n\nsrt.sort()\n\nans = 0\nupdate(bisect_left(srt,0) + 1)\n\n\n\n\nfor i in range(n):\n    l = min(len(srt)-1,bisect_left(srt,sum[i] - t))\n\n    if srt[l] <= sum[i] - t:\n        l = l+1\n\n    cnt = get(l)\n    ans += i + 1 - cnt\n\n\n    update(bisect_left(srt,sum[i]) + 1)\n\nprint(ans)\n\n",
    "prob_desc_created_at": "1537171500",
    "tags": [
        "data structures",
        "two pointers",
        "divide and conquer"
    ],
    "hidden_unit_tests": ""
}