{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"YES\\nYES\\nNO\\nYES\\nNO\"]",
    "src_uid": "158bd0ab8f4319f5fd1e6062caddad4e",
    "prob_desc_notes": "NoteIn the first test case, we can choose $$$l=2$$$ and $$$r=5$$$ to form $$$[1, 3, 3, 2, 2]$$$.In the second test case, we can choose $$$l=2$$$ and $$$r=4$$$ to form $$$[1, 4, 2, 2, 1]$$$. Then, we can choose $$$l=1$$$ and $$$r=5$$$ to form $$$[4, 2, 2, 1, 1]$$$.In the third test case, it can be proven that it is not possible to transform array $$$a$$$ to $$$b$$$ using the operation.",
    "prob_desc_description": "There is an array $$$a$$$ of length $$$n$$$. You may perform the following operation any number of times:  Choose two indices $$$l$$$ and $$$r$$$ where $$$1 \\le l &lt; r \\le n$$$ and $$$a_l = a_r$$$. Then, set $$$a[l \\ldots r] = [a_{l+1}, a_{l+2}, \\ldots, a_r, a_l]$$$. You are also given another array $$$b$$$ of length $$$n$$$ which is a permutation of $$$a$$$. Determine whether it is possible to transform array $$$a$$$ into an array $$$b$$$ using the above operation some number of times.",
    "prob_desc_output_spec": "For each test case, print \"YES\" (without quotes) if it is possible to transform array $$$a$$$ to $$$b$$$, and \"NO\" (without quotes) otherwise. You can output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\" and \"Yes\" will be recognized as a positive response).",
    "prob_desc_input_spec": "Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$)  — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10 ^ 5$$$)  — the length of array $$$a$$$ and $$$b$$$. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le n$$$)  — elements of the array $$$a$$$. The third line of each test case contains $$$n$$$ integers $$$b_1, b_2, \\ldots, b_n$$$ ($$$1 \\le b_i \\le n$$$)  — elements of the array $$$b$$$. It is guaranteed that $$$b$$$ is a permutation of $$$a$$$. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10 ^ 5$$$",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_108.jsonl",
    "code_uid": "42c39590c97ee1e4f66a8293713f91b7",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n\\n5\\n\\n1 2 3 3 2\\n\\n1 3 3 2 2\\n\\n5\\n\\n1 2 4 2 1\\n\\n4 2 2 1 1\\n\\n5\\n\\n2 4 5 5 2\\n\\n2 2 4 5 5\\n\\n3\\n\\n1 2 3\\n\\n1 2 3\\n\\n3\\n\\n1 1 2\\n\\n2 1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\n\nIS_INTERACTIVE = False\ninput = input  # type: ignore\n\n# input: function\nif not IS_INTERACTIVE:\n    *data, = sys.stdin.read().split(\"\\n\")[::-1]\n\n    def input():  # type: ignore\n        return data.pop()\n\ndef fprint(*args, **kwargs):\n    print(*args, **kwargs, flush=True)\n\ndef eprint(*args, **kwargs):\n    print(*args, **kwargs, file=sys.stderr)\n\n'''\n1 2 3 3 2\n1 3 3 2 2\n\n1 2 3 3 2\n1 3 3   2 2\n\n\n'''\n'''\n1 2 2 1 2\n1 2 1 2 2\n2 2 1 1 2\n\n\n'''\nfor _ in range(int(input())):\n    n = int(input())\n    *arr0, = map(int, input().split())\n    *arr1, = map(int, input().split())\n    buffer = [0] * (n + 1)\n    last = [0] * (n + 1)\n\n    for i, ch in enumerate(arr0):\n        last[ch] = i\n\n\n    i = 0\n    j = 0\n    while j < n:\n        if i < n and arr0[i] == arr1[j]:\n            i += 1\n            j += 1\n        elif buffer[arr1[j]] and arr1[j - 1] == arr1[j]:\n            buffer[arr1[j]] -= 1\n            j += 1\n        elif i < n and last[arr0[i]] > i:\n            buffer[arr0[i]] += 1\n            i += 1\n        else:\n            break\n    print(\"YES\" if j == n else \"NO\")\n",
    "prob_desc_created_at": "1650722700",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation",
        "two pointers"
    ],
    "hidden_unit_tests": ""
}