{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"0 0 0 0\", \"0 0 0 1 1 2\"]",
    "src_uid": "2d4dbada60ebcf0bdaead8d0c1c0e2c1",
    "prob_desc_notes": null,
    "prob_desc_description": "A subway scheme, classic for all Berland cities is represented by a set of n stations connected by n passages, each of which connects exactly two stations and does not pass through any others. Besides, in the classic scheme one can get from any station to any other one along the passages. The passages can be used to move in both directions. Between each pair of stations there is no more than one passage.Berland mathematicians have recently proved a theorem that states that any classic scheme has a ringroad. There can be only one ringroad. In other words, in any classic scheme one can find the only scheme consisting of stations (where any two neighbouring ones are linked by a passage) and this cycle doesn't contain any station more than once.This invention had a powerful social impact as now the stations could be compared according to their distance from the ringroad. For example, a citizen could say \"I live in three passages from the ringroad\" and another one could reply \"you loser, I live in one passage from the ringroad\". The Internet soon got filled with applications that promised to count the distance from the station to the ringroad (send a text message to a short number...).The Berland government decided to put an end to these disturbances and start to control the situation. You are requested to write a program that can determine the remoteness from the ringroad for each station by the city subway scheme.",
    "prob_desc_output_spec": "Print n numbers. Separate the numbers by spaces, the i-th one should be equal to the distance of the i-th station from the ringroad. For the ringroad stations print number 0.",
    "prob_desc_input_spec": "The first line contains an integer n (3 ≤ n ≤ 3000), n is the number of stations (and trains at the same time) in the subway scheme. Then n lines contain descriptions of the trains, one per line. Each line contains a pair of integers xi, yi (1 ≤ xi, yi ≤ n) and represents the presence of a passage from station xi to station yi. The stations are numbered from 1 to n in an arbitrary order. It is guaranteed that xi ≠ yi and that no pair of stations contain more than one passage. The passages can be used to travel both ways. It is guaranteed that the given description represents a classic subway scheme.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_012.jsonl",
    "code_uid": "c1e3ebc8b09d7e1cda084b13f5b22546",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n1 3\\n4 3\\n4 2\\n1 2\", \"6\\n1 2\\n3 4\\n6 4\\n2 3\\n1 3\\n3 5\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import deque\nimport copy\ndef bfs(g,root):\n    Q = deque([root])\n    visited = [root]\n    while len(Q) > 0:\n        v = Q.pop()\n        for x in g[v]:\n            if x not in visited and len(g[x]) < 3:\n                Q.appendleft(x)\n                visited.append(x)\n    return visited\n\ndef remove(g,vertices):\n    for v in vertices:\n        for sosed in g[v]:\n            g[sosed].remove(v)\n        del g[v]\n                \n\ndef get_cycle(g,deg):\n    Q = [k for k,v in deg.items() if v == 1] #stopnje 1\n    g_copy = copy.deepcopy(g)\n    while len(Q) > 0:\n        v = Q.pop()\n        vertices = bfs(g_copy,v)\n        remove(g_copy,vertices)\n    return [k for k in g_copy.keys()]\n\ndef new_graph(g,cycle):\n    sosedi = set([])\n    new_v = max([k for k in g.keys()])+1\n    g_copy = copy.deepcopy(g)\n    for v in cycle:\n        for sosed in g_copy[v]:\n            if sosed not in cycle:\n                sosedi.add(sosed)\n            g_copy[sosed].remove(v)\n        del g_copy[v]\n    g_copy[new_v] = list(sosedi)\n    for x in sosedi:\n        if x not in cycle:\n            g_copy[x].append(new_v)\n    return g_copy\n\ndef get_result(g,cycle):\n    root = max([k for k in g.keys()])\n    rez = {x:0 for x in cycle}\n    rez[root] = 0\n    Q = deque([root])\n    visited = [root]\n    while len(Q) > 0:\n        v = Q.pop()\n        for x in g[v]:\n            if x not in visited:\n                visited.append(x)\n                Q.appendleft(x)\n                rez[x] = rez[v]+1\n    return rez\n\n\nn = int(raw_input())\ng = {i:[] for i in range(1,n+1)}\ndeg = {i:0 for i in range(1,n+1)}\nfor i in range(1,n+1):\n    a,b = map(int, raw_input().split(\" \"))\n    g[a].append(b)\n    g[b].append(a)\n    deg[a] += 1\n    deg[b] += 1\n\ncycle = get_cycle(g,deg)\nnew_g = new_graph(g,cycle)\nrez = get_result(new_g,cycle)\nfor i in range(1,n+1):\n    print rez[i],\n",
    "prob_desc_created_at": "1322233200",
    "tags": [
        "dfs and similar",
        "graphs"
    ],
    "hidden_unit_tests": ""
}