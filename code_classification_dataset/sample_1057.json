{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"35\"]",
    "src_uid": "ca6325cc32ba34614e3bd1257d2eef97",
    "prob_desc_notes": "NoteAn optimal solution to change $$$E_5$$$ to 1 and then excite atom 5 with energy 1. It will cause atoms 1, 2, 3, 4, 5 be excited. The total energy gained by Mr. Chanek is (5 + 6 + 7 + 8 + 10) - 1 = 35.Another possible way is to change $$$E_3$$$ to 1 and then exciting atom 3 (which will excite atom 1, 2, 3) and exciting atom 4 (which will excite atom 4, 5, 6). The total energy gained by Mr. Chanek is (5 + 6 + 7 + 8 + 10 + 2) - (6 + 7) = 25 which is not optimal.",
    "prob_desc_description": "Mr. Chanek is currently participating in a science fair that is popular in town. He finds an exciting puzzle in the fair and wants to solve it.There are $$$N$$$ atoms numbered from $$$1$$$ to $$$N$$$. These atoms are especially quirky. Initially, each atom is in normal state. Each atom can be in an excited. Exciting atom $$$i$$$ requires $$$D_i$$$ energy. When atom $$$i$$$ is excited, it will give $$$A_i$$$ energy. You can excite any number of atoms (including zero).These atoms also form a peculiar one-way bond. For each $$$i$$$, $$$(1 \\le i &lt; N)$$$, if atom $$$i$$$ is excited, atom $$$E_i$$$ will also be excited at no cost. Initially, $$$E_i$$$ = $$$i+1$$$. Note that atom $$$N$$$ cannot form a bond to any atom.Mr. Chanek must change exactly $$$K$$$ bonds. Exactly $$$K$$$ times, Mr. Chanek chooses an atom $$$i$$$, $$$(1 \\le i &lt; N)$$$ and changes $$$E_i$$$ to a different value other than $$$i$$$ and the current $$$E_i$$$. Note that an atom's bond can remain unchanged or changed more than once. Help Mr. Chanek determine the maximum energy that he can achieve!note: You must first change exactly $$$K$$$ bonds before you can start exciting atoms.",
    "prob_desc_output_spec": "A line with an integer that denotes the maximum number of energy that Mr. Chanek can get.",
    "prob_desc_input_spec": "The first line contains two integers $$$N$$$ $$$K$$$ $$$(4 \\le N \\le 10^5, 0 \\le K &lt; N)$$$, the number of atoms, and the number of bonds that must be changed. The second line contains $$$N$$$ integers $$$A_i$$$ $$$(1 \\le A_i \\le 10^6)$$$, which denotes the energy given by atom $$$i$$$ when on excited state. The third line contains $$$N$$$ integers $$$D_i$$$ $$$(1 \\le D_i \\le 10^6)$$$, which denotes the energy needed to excite atom $$$i$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_006.jsonl",
    "code_uid": "71ec227b8b3ece5549d6f18c5d7b9150",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6 1\\n5 6 7 8 10 2\\n3 5 6 7 1 10\"]",
    "exec_outcome": "PASSED",
    "source_code": "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nD = list(map(int, input().split()))\n\nsuf_min = [None]*N\nsuf_min[-1] = A[-1]\nsuf_sum = [None]*N\nsuf_sum[-1] = A[-1]\nsuf_ans = [None]*N\nsuf_ans[-1] = max(A[-1] - D[-1], 0)\nfor i in range(N-2, -1, -1):\n    suf_min[i] = min(A[i], suf_min[i+1])\n    suf_sum[i] = suf_sum[i+1] + A[i]\n    suf_ans[i] = max(suf_ans[i+1], suf_sum[i]-D[i])\n    # print(i, suf_ans[i])\n\nif K >= 2:\n    print(max(0, sum(A) - min(*D[:-1]), suf_ans[0]))\n    exit(0)\n\nif K == 0:\n    print(max(suf_ans[0], 0))\n    exit(0)\n\npre_min = D[0]\npre_sum = 0\nans = max(0, sum(A) - D[0] - suf_min[0])\nfor i in range(N-1):\n    pre_sum += A[i]\n    pre_min = min(pre_min, D[i])\n    ans = max(ans, pre_sum - pre_min + suf_ans[i+1], suf_ans[i+1])\nprint(max(0, ans))",
    "prob_desc_created_at": "1601182800",
    "tags": [
        "implementation",
        "greedy"
    ],
    "hidden_unit_tests": ""
}