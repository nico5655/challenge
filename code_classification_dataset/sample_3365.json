{
    "prob_desc_time_limit": "1.5 seconds",
    "prob_desc_sample_outputs": "[\"1\\n0\\n0\"]",
    "src_uid": "29cb3c45e1004b78d65ddd1a5242dd9e",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given circular array a0, a1, ..., an - 1. There are two types of operations with it:   inc(lf, rg, v) — this operation increases each element on the segment [lf, rg] (inclusively) by v;  rmq(lf, rg) — this operation returns minimal value on the segment [lf, rg] (inclusively). Assume segments to be circular, so if n = 5 and lf = 3, rg = 1, it means the index sequence: 3, 4, 0, 1.Write program to process given sequence of operations.",
    "prob_desc_output_spec": "For each rmq operation write result for it. Please, do not use %lld specificator to read or write 64-bit integers in C++. It is preffered to use cout (also you may use %I64d).",
    "prob_desc_input_spec": "The first line contains integer n (1 ≤ n ≤ 200000). The next line contains initial state of the array: a0, a1, ..., an - 1 ( - 106 ≤ ai ≤ 106), ai are integer. The third line contains integer m (0 ≤ m ≤ 200000), m — the number of operartons. Next m lines contain one operation each. If line contains two integer lf, rg (0 ≤ lf, rg ≤ n - 1) it means rmq operation, it contains three integers lf, rg, v (0 ≤ lf, rg ≤ n - 1; - 106 ≤ v ≤ 106) — inc operation.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_055.jsonl",
    "code_uid": "0c564681ddff28844a14a84d89da797a",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n1 2 3 4\\n4\\n3 0\\n3 0 -1\\n0 1\\n2 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import io,os\ninput = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\nn=int(input())\na=list(map(int,input().split()))\n\nclass st:\n\tdef __init__(self, size):\n\t\tN = 1\n\t\th = 0\n\t\twhile N < size:\n\t\t\tN <<= 1\n\t\t\th += 1\n\t\tself.N = N\n\t\tself.h = h\n\t\tself.t = [float('inf')] * (2 * N)\n\t\tself.d = [0] * N\n    \n\tdef apply(self, p, value):\n\t\tself.t[p] += value\n\t\tif (p < self.N):\n\t\t\tself.d[p] += value\n    \n\tdef build(self, p):\n\t\tt = self.t\n\t\td = self.d\n\t\twhile p > 1:\n\t\t\tp >>= 1\n\t\t\tt[p] = min(t[p<<1], t[p<<1|1]) + d[p]\n    \n\tdef rebuild(self):\n\t\tt = self.t\n\t\tfor p in reversed(range(1, self.N)):\n\t\t\tt[p] = min(t[p<<1], t[p<<1|1])\n    \n\tdef push(self, p):\n\t\td = self.d\n\t\tfor s in range(self.h, 0, -1):\n\t\t\ti = p >> s\n\t\t\tif d[i] != 0:\n\t\t\t\tself.apply(i<<1, d[i])\n\t\t\t\tself.apply(i<<1|1, d[i])\n\t\t\t\td[i] = 0\n    \n\tdef inc(self, l, r, value):\n\t\tif l >= r:\n\t\t\treturn\n\n\t\tl += self.N\n\t\tr += self.N\n\t\tl0, r0 = l, r\n\t\twhile l < r:\n\t\t\tif l & 1:\n\t\t\t\tself.apply(l, value)\n\t\t\t\tl += 1\n\t\t\tif r & 1:\n\t\t\t\tr -= 1\n\t\t\t\tself.apply(r, value)\n\t\t\tl >>= 1\n\t\t\tr >>= 1\n\t\tself.build(l0)\n\t\tself.build(r0 - 1)\n    \n\tdef query(self, l, r):\n\t\tif l >= r:\n\t\t\treturn float('inf')\n\n\t\tt = self.t\n\t\tl += self.N\n\t\tr += self.N\n\t\tself.push(l)\n\t\tself.push(r - 1)\n\t\tres = float('inf')\n\t\twhile l < r:\n\t\t\tif l & 1:\n\t\t\t\tres = min(res, t[l])\n\t\t\t\tl += 1\n\t\t\tif r & 1:\n\t\t\t\tr -= 1\n\t\t\t\tres = min(t[r], res)\n\t\t\tl >>= 1\n\t\t\tr >>= 1\n\t\treturn res\n\nse=st(n)\nN=se.N\nfor i in range(n):\n\tse.t[i+N]=a[i]\nse.rebuild()\n\nq=int(input())\nfor i in range(q):\n\tb=list(map(int,input().split()))\n\tif len(b)==2:\n\t\tl=b[0]\n\t\tr=b[1]\n\t\tif l>r:\n\t\t\tprint(min(se.query(l,n),se.query(0,r+1)))\n\t\telse:print(se.query(l,r+1))\n\telse:\n\t\tl=b[0]\n\t\tr=b[1]\n\t\tv=b[2]\n\t\tif l>r:\n\t\t\tse.inc(0,r+1,v)\n\t\t\tse.inc(l,n,v)\n\t\telse:se.inc(l,r+1,v)\n",
    "prob_desc_created_at": "1294160400",
    "tags": [
        "data structures"
    ],
    "hidden_unit_tests": ""
}