{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"0 1 1 0\", \"0 1 2\"]",
    "src_uid": "9a6ee18e144a38935d7c06e73f2e6384",
    "prob_desc_notes": "NoteIn the first sample the encryption is performed in two steps: after the first step a = (0, 0, 0, 1) (remember that the calculations are performed modulo 2), after the second step a = (0, 1, 1, 0), and that is the answer. ",
    "prob_desc_description": "The Smart Beaver from ABBYY invented a new message encryption method and now wants to check its performance. Checking it manually is long and tiresome, so he decided to ask the ABBYY Cup contestants for help.A message is a sequence of n integers a1, a2, ..., an. Encryption uses a key which is a sequence of m integers b1, b2, ..., bm (m ≤ n). All numbers from the message and from the key belong to the interval from 0 to c - 1, inclusive, and all the calculations are performed modulo c.Encryption is performed in n - m + 1 steps. On the first step we add to each number a1, a2, ..., am a corresponding number b1, b2, ..., bm. On the second step we add to each number a2, a3, ..., am + 1 (changed on the previous step) a corresponding number b1, b2, ..., bm. And so on: on step number i we add to each number ai, ai + 1, ..., ai + m - 1 a corresponding number b1, b2, ..., bm. The result of the encryption is the sequence a1, a2, ..., an after n - m + 1 steps.Help the Beaver to write a program that will encrypt messages in the described manner.",
    "prob_desc_output_spec": "Print n space-separated integers — the result of encrypting the original message.",
    "prob_desc_input_spec": "The first input line contains three integers n, m and c, separated by single spaces.  The second input line contains n integers ai (0 ≤ ai &lt; c), separated by single spaces — the original message.  The third input line contains m integers bi (0 ≤ bi &lt; c), separated by single spaces — the encryption key. The input limitations for getting 30 points are:    1 ≤ m ≤ n ≤ 103  1 ≤ c ≤ 103  The input limitations for getting 100 points are:    1 ≤ m ≤ n ≤ 105  1 ≤ c ≤ 103 ",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1500,
    "file_name": "train_051.jsonl",
    "code_uid": "b252c5c39415553b65c728eae942bfe5",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4 3 2\\n1 1 1 1\\n1 1 1\", \"3 1 5\\n1 2 3\\n4\"]",
    "exec_outcome": "PASSED",
    "source_code": "n,m,c = map(int,input().split())\na = list(input().split())\nb = list(input().split())\n\nsum = 0\n\nfor i in range(n):\n    if i<m:\n        sum = sum + int(b[i])\n        sum = sum%c\n\n    if i >= n - m + 1:\n        sum = c - int(b[i-n+m-1]) + sum\n        sum = sum%c\n\n    print((int(a[i])+sum)%c,end = ' ')\n",
    "prob_desc_created_at": "1335016800",
    "tags": [
        "data structures"
    ],
    "hidden_unit_tests": ""
}