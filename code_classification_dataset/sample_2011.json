{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"1\", \"8\", \"17\"]",
    "src_uid": "a0a4caebc8e2ca87e30f33971bff981d",
    "prob_desc_notes": "NoteIn the first sample all the numbers written on the cards are equal, so you can't take more than one card, otherwise you'll violate the first condition.",
    "prob_desc_description": "Vladik was bored on his way home and decided to play the following game. He took n cards and put them in a row in front of himself. Every card has a positive integer number not exceeding 8 written on it. He decided to find the longest subsequence of cards which satisfies the following conditions:  the number of occurrences of each number from 1 to 8 in the subsequence doesn't differ by more then 1 from the number of occurrences of any other number. Formally, if there are ck cards with number k on them in the subsequence, than for all pairs of integers  the condition |ci - cj| ≤ 1 must hold.  if there is at least one card with number x on it in the subsequence, then all cards with number x in this subsequence must form a continuous segment in it (but not necessarily a continuous segment in the original sequence). For example, the subsequence [1, 1, 2, 2] satisfies this condition while the subsequence [1, 2, 2, 1] doesn't. Note that [1, 1, 2, 2] doesn't satisfy the first condition. Please help Vladik to find the length of the longest subsequence that satisfies both conditions.",
    "prob_desc_output_spec": "Print single integer — the length of the longest subsequence of Vladik's sequence that satisfies both conditions.",
    "prob_desc_input_spec": "The first line contains single integer n (1 ≤ n ≤ 1000) — the number of cards in Vladik's sequence. The second line contains the sequence of n positive integers not exceeding 8 — the description of Vladik's sequence.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_016.jsonl",
    "code_uid": "4caf71e3750baa6a50a488fd1a9c3e5b",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n1 1 1\", \"8\\n8 7 6 5 4 3 2 1\", \"24\\n1 8 1 2 8 2 3 8 3 4 8 4 5 8 5 6 8 6 7 8 7 8 8 8\"]",
    "exec_outcome": "PASSED",
    "source_code": "import copy\n\ndef solve():\n    n = int(input())\n    a = [int(c)-1 for c in input().split(' ')]\n\n    nextcard = [[-1 for i in range(8)] for j in range(n)]\n    for i in range(n-2, -1, -1):\n        nextcard[i] = copy.copy(nextcard[i+1])\n        nextcard[i][a[i+1]] = i+1\n\n    jump = [[-1 for i in range(n+1)] for j in range(n)]\n    for i in range(n):\n        card = a[i]\n        cpos = i\n        j = 1\n        \n        while cpos != -1:\n            jump[i][j] = cpos\n            j+=1\n            cpos = nextcard[cpos][card]\n\n    #Find dp solution for range (val, val+1)\n    def getLen(val):\n        dp = [[-1 for i in range(1<<8)] for j in range(n+1)]\n        dp[0][0] = 0\n\n        for i in range(n):\n            card = a[i]\n            for comb in range(1<<8):\n                if (comb & (1<<card)) == 0 and dp[i][comb] != -1:\n                    ncomb = comb + (1<<card)\n                    \n                    if jump[i][val] != -1:\n                        j = jump[i][val]+1\n                        dp[j][ncomb] = max(dp[j][ncomb], dp[i][comb] + val)\n                        \n                    if jump[i][val+1] != -1:\n                        j = jump[i][val+1]+1\n                        dp[j][ncomb] = max(dp[j][ncomb], dp[i][comb] + val + 1)\n\n                dp[i+1][comb] = max(dp[i+1][comb], dp[i][comb])\n\n        return dp[n][(1<<8)-1]\n\n    appear = [False for i in range(8)]\n    for c in a:\n        appear[c] = True\n\n    result = 0\n    for c in appear:\n        result += int(c)\n\n    #Finally binary search to find the result\n\n    cur = 0\n    for lev in range(9, -1, -1):\n        tpow = (1<<lev)\n        if cur + tpow < n:\n            ret = getLen(cur + tpow)\n\n            if(ret != -1):\n                result = max(result, ret)\n                cur += tpow\n\n    return result\n\nprint(solve())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "prob_desc_created_at": "1481726100",
    "tags": [
        "dp",
        "binary search",
        "bitmasks",
        "brute force"
    ],
    "hidden_unit_tests": ""
}