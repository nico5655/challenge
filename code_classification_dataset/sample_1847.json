{
    "prob_desc_time_limit": "5 seconds",
    "prob_desc_sample_outputs": "[\"3\", \"0\", \"1\"]",
    "src_uid": "fc91e26a2cae7ef51f61114e4bf428eb",
    "prob_desc_notes": null,
    "prob_desc_description": "You are given an array $$$a$$$ consisting of $$$n$$$ integers. We denote the subarray $$$a[l..r]$$$ as the array $$$[a_l, a_{l + 1}, \\dots, a_r]$$$ ($$$1 \\le l \\le r \\le n$$$).A subarray is considered good if every integer that occurs in this subarray occurs there exactly thrice. For example, the array $$$[1, 2, 2, 2, 1, 1, 2, 2, 2]$$$ has three good subarrays:  $$$a[1..6] = [1, 2, 2, 2, 1, 1]$$$;  $$$a[2..4] = [2, 2, 2]$$$;  $$$a[7..9] = [2, 2, 2]$$$. Calculate the number of good subarrays of the given array $$$a$$$.",
    "prob_desc_output_spec": "Print one integer â€” the number of good subarrays of the array $$$a$$$.",
    "prob_desc_input_spec": "The first line contains one integer $$$n$$$ ($$$1 \\le n \\le 5 \\cdot 10^5$$$). The second line contains $$$n$$$ integers $$$a_1$$$, $$$a_2$$$, ..., $$$a_n$$$ ($$$1 \\le a_i \\le n$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2500,
    "file_name": "train_013.jsonl",
    "code_uid": "096dc46fcbab29838aac55503b9b3f35",
    "prob_desc_memory_limit": "512 megabytes",
    "prob_desc_sample_inputs": "[\"9\\n1 2 2 2 1 1 2 2 2\", \"10\\n1 2 3 4 1 2 3 1 2 3\", \"12\\n1 2 3 4 3 4 2 1 3 4 2 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import Counter\nfrom random import randint\nimport sys\ninput = sys.stdin.buffer.readline\n \ndef prog():\n    n = int(input())\n    a = list(map(int,input().split()))\n    curr_occurences = [0]*(n + 1)\n    mult = [randint(1,10**20) for i in range(n + 1)]\n    hash_at_idx = [0]*(n + 1)\n    hashes = Counter([0])\n    curr_hash = 0\n    last_3 = [[] for i in range(n + 1)]\n    ans = 0\n    least_start = -1\n    \n    for i in range(n):\n        x = a[i]\n        if len(last_3[x]) == 3:\n            new_start = last_3[x][0]\n            while least_start < new_start:\n                hashes[hash_at_idx[least_start]] -= 1\n                least_start += 1\n            del last_3[x][0]\n            \n        curr_hash -= curr_occurences[x]*mult[x]\n        curr_occurences[x] = (curr_occurences[x] + 1) % 3\n        curr_hash += curr_occurences[x]*mult[x]\n        ans += hashes[curr_hash]\n        hashes[curr_hash] += 1\n        hash_at_idx[i] = curr_hash\n        last_3[x].append(i)\n \n    print(ans)\n    \nprog()",
    "prob_desc_created_at": "1600094100",
    "tags": [
        "data structures",
        "two pointers",
        "hashing",
        "divide and conquer"
    ],
    "hidden_unit_tests": ""
}