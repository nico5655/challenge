{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"6 3 2 1 0 0\", \"5 1 0 0 0\", \"12 6 4 3 2 2 1 1 1 1 1 1\"]",
    "src_uid": "c914a0f00403ece367f05ba5e8d558ec",
    "prob_desc_notes": "NoteLet's consider the first test case:  if $$$x = 1$$$ and $$$s = 110000$$$ or $$$s = 111000$$$ then there are six finished sets;  if $$$x = 2$$$ and $$$s = 110000$$$ then there are three finished sets;  if $$$x = 3$$$ and $$$s = 111000$$$ then there are two finished sets;  if $$$x = 4$$$ and $$$s = 110000$$$ then there is one finished set;  if $$$x = 5$$$ then there are no finished sets;  if $$$x = 6$$$ then there are no finished sets. ",
    "prob_desc_description": "Alice and Bob play a game. The game consists of several sets, and each set consists of several rounds. Each round is won either by Alice or by Bob, and the set ends when one of the players has won $$$x$$$ rounds in a row. For example, if Bob won five rounds in a row and $$$x = 2$$$, then two sets ends.You know that Alice and Bob have already played $$$n$$$ rounds, and you know the results of some rounds. For each $$$x$$$ from $$$1$$$ to $$$n$$$, calculate the maximum possible number of sets that could have already finished if each set lasts until one of the players wins $$$x$$$ rounds in a row. It is possible that the last set is still not finished — in that case, you should not count it in the answer.",
    "prob_desc_output_spec": "In the only line print $$$n$$$ integers. The $$$i$$$-th integer should be equal to the maximum possible number of sets that could have already finished if each set lasts until one of the players wins $$$i$$$ rounds in a row.",
    "prob_desc_input_spec": "The first line contains one integer $$$n$$$ ($$$1 \\le n \\le 10^6$$$) — the number of rounds. The second line contains one string $$$s$$$ of length $$$n$$$ — the descriptions of rounds. If the $$$i$$$-th element of the string is 0, then Alice won the $$$i$$$-th round; if it is 1, then Bob won the $$$i$$$-th round, and if it is ?, then you don't know who won the $$$i$$$-th round.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2500,
    "file_name": "train_040.jsonl",
    "code_uid": "94293dac3fed3474840143c8a9bcf4c3",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"6\\n11?000\", \"5\\n01?01\", \"12\\n???1??????1?\"]",
    "exec_outcome": "PASSED",
    "source_code": "#   Author: yumtam\n#   Created at: 2020-08-28 05:07\n\nfrom __future__ import division, print_function\n_interactive = False\n\n\ndef stupid(n, ar):\n    from itertools import product\n    unknowns = ar.count(-1)\n    print(n, end=' ')\n    for consec in range(2, n+1):\n        ans = 0\n        for p in product(range(1+1), repeat=unknowns):\n            cur = 0\n            it = iter(p)\n            arc = ar[:]\n            for i, e in enumerate(arc):\n                if e == -1:\n                    arc[i] = next(it)\n            prev = -1\n            cnt = 0\n            for x in arc:\n                if x == prev:\n                    cnt += 1\n                else:\n                    cnt = 1\n                if cnt >= consec:\n                    cur += 1\n                    cnt = 0\n                prev = x\n            ans = max(ans, cur)\n        print(ans, end=' ')\n\n\ndef solve(n, ar):\n    from bisect import bisect_left\n\n    nxt = array_of(int, 2, n+1)\n    jmp = array_of(list, n+1)\n\n    for i in reversed(range(n)):\n        x = ar[i]\n        nxt[0][i] = nxt[0][i+1]+1\n        nxt[1][i] = nxt[1][i+1]+1\n        if x == 0:\n            nxt[1][i] = 0\n        elif x == 1:\n            nxt[0][i] = 0\n\n    for i in range(1, n):\n        for nxti in nxt:\n            if nxti[i-1] == 0 and nxti[i] > 0:\n                for j in range(1, nxti[i]+1):\n                    jmp[j].append(i)\n\n    debug_print(nxt)\n    debug_print(jmp)\n\n    for k in range(1, n+1):\n        i = 0\n        ans = 0\n        while True:\n            if max(nxt[0][i], nxt[1][i]) >= k:\n                i += k\n            else:\n                idx = bisect_left(jmp[k], i)\n                if idx == len(jmp[k]):\n                    break\n                else:\n                    i = jmp[k][idx] + k\n            ans += 1\n        print(ans, end=' ')\n\n\ndef main():\n    n = int(input())\n    s = input()\n    d = {'0': 0, '1': 1, '?': -1}\n    ar = [d[c] for c in s]\n\n    solve(n, ar)\n    if LOCAL:\n        print()\n        stupid(n, ar)\n\n\n# Constants\nINF = float('inf')\nMOD = 10**9+7\n\n# Python3 equivalent names\nimport os, sys, itertools\nif sys.version_info[0] < 3:\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\n# print-flush in interactive problems\nif _interactive:\n    flush = sys.stdout.flush\n    def printf(*args, **kwargs):\n        print(*args, **kwargs)\n        flush()\n\n# Debug print, only works on local machine\nLOCAL = \"LOCAL_\" in os.environ\ndebug_print = (print) if LOCAL else (lambda *x, **y: None)\n\n# Fast IO\nif (not LOCAL) and (not _interactive):\n    from io import BytesIO\n    from atexit import register\n    sys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\n    sys.stdout = BytesIO()\n    register(lambda: os.write(1, sys.stdout.getvalue()))\n    input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n# Some utility functions(Input, N-dimensional lists, ...)\ndef input_as_list():\n    return [int(x) for x in input().split()]\n\ndef input_with_offset(o):\n    return [int(x)+o for x in input().split()]\n\ndef input_as_matrix(n, m):\n    return [input_as_list() for _ in range(n)]\n\ndef array_of(f, *dim):\n    return [array_of(f, *dim[1:]) for _ in range(dim[0])] if dim else f()\n\n# Start of external code templates...\n# End of external code templates.\n\nmain()\n",
    "prob_desc_created_at": "1597415700",
    "tags": [
        "dp",
        "greedy",
        "two pointers",
        "data structures",
        "binary search"
    ],
    "hidden_unit_tests": ""
}