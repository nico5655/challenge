{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"NO\", \"YES\", \"YES\", \"NO\"]",
    "src_uid": "8b61213e2ce76b938aa68ffd1e4c1429",
    "prob_desc_notes": "NoteIn the first sample there are intersections located on the border of the strip, but there are no intersections located strictly inside it.  ",
    "prob_desc_description": "The teacher gave Anton a large geometry homework, but he didn't do it (as usual) as he participated in a regular round on Codeforces. In the task he was given a set of n lines defined by the equations y = ki·x + bi. It was necessary to determine whether there is at least one point of intersection of two of these lines, that lays strictly inside the strip between x1 &lt; x2. In other words, is it true that there are 1 ≤ i &lt; j ≤ n and x', y', such that:   y' = ki * x' + bi, that is, point (x', y') belongs to the line number i;  y' = kj * x' + bj, that is, point (x', y') belongs to the line number j;  x1 &lt; x' &lt; x2, that is, point (x', y') lies inside the strip bounded by x1 &lt; x2. You can't leave Anton in trouble, can you? Write a program that solves the given task.",
    "prob_desc_output_spec": "Print \"Yes\" (without quotes), if there is at least one intersection of two distinct lines, located strictly inside the strip. Otherwise print \"No\" (without quotes).",
    "prob_desc_input_spec": "The first line of the input contains an integer n (2 ≤ n ≤ 100 000) — the number of lines in the task given to Anton. The second line contains integers x1 and x2 ( - 1 000 000 ≤ x1 &lt; x2 ≤ 1 000 000) defining the strip inside which you need to find a point of intersection of at least two lines. The following n lines contain integers ki, bi ( - 1 000 000 ≤ ki, bi ≤ 1 000 000) — the descriptions of the lines. It is guaranteed that all lines are pairwise distinct, that is, for any two i ≠ j it is true that either ki ≠ kj, or bi ≠ bj.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 2",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_007.jsonl",
    "code_uid": "e3947f6b1ab23bbd5aad75badaac0902",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2\", \"2\\n1 3\\n1 0\\n-1 3\", \"2\\n1 3\\n1 0\\n0 2\", \"2\\n1 3\\n1 0\\n0 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "# -*- coding: utf-8 -*-\nfrom operator import itemgetter\n\nn = int(raw_input())\nx1, x2 = map(int, raw_input().split(' '))\nx1 += 0.0000001\nx2 -= 0.0000001\nk = []\nb = []\npositive = False\n\nstarts, ends = [], []\n\nfor i in xrange(n):\n    new_k, new_b = map(int, raw_input().split(' '))\n    starts.append({\n        'index': i,\n        'value': new_k * x1 + new_b\n    })\n    ends.append({\n        'index': i,\n        'value': new_k * x2 + new_b\n    })\n\nstarts.sort(key=itemgetter('value'))\nends.sort(key=itemgetter('value'))\n\nfor i in xrange(n):\n    if starts[i]['index'] != ends[i]['index']:\n        print('YES')\n        break\nelse:\n    print('NO')\n",
    "prob_desc_created_at": "1446655500",
    "tags": [
        "sortings",
        "geometry"
    ],
    "hidden_unit_tests": ""
}