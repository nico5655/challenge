{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"6\\n0\\n36\\n4\"]",
    "src_uid": "e4685bb0a1bf8c2da326cd0e5b8f4fe7",
    "prob_desc_notes": "NoteIn the first test case, since all the numbers are equal, whatever permutation we take, the sequence is good. There are a total of $$$6$$$ permutations possible with numbers from $$$1$$$ to $$$3$$$: $$$[1,2,3]$$$, $$$[1,3,2]$$$, $$$[2,1,3]$$$, $$$[2,3,1]$$$, $$$[3,1,2]$$$, $$$[3,2,1]$$$.In the second test case, it can be proved that no permutation exists for which the sequence is good.In the third test case, there are a total of $$$36$$$ permutations for which the sequence is good. One of them is the permutation $$$[1,5,4,2,3]$$$ which results in the sequence $$$s=[0,0,3,2,0]$$$. This is a good sequence because   $$$ s_1 = s_2 \\: \\&amp; \\: s_3 \\: \\&amp; \\: s_4 \\: \\&amp; \\: s_5 = 0$$$,  $$$ s_1 \\: \\&amp; \\: s_2 = s_3 \\: \\&amp; \\: s_4 \\: \\&amp; \\: s_5 = 0$$$,  $$$ s_1 \\: \\&amp; \\: s_2 \\: \\&amp; \\: s_3 = s_4 \\: \\&amp; \\: s_5 = 0$$$,  $$$ s_1 \\: \\&amp; \\: s_2 \\: \\&amp; \\: s_3 \\: \\&amp; \\: s_4 = s_5 = 0$$$.  ",
    "prob_desc_description": "A sequence of $$$n$$$ non-negative integers ($$$n \\ge 2$$$) $$$a_1, a_2, \\dots, a_n$$$ is called good if for all $$$i$$$ from $$$1$$$ to $$$n-1$$$ the following condition holds true: $$$$$$a_1 \\: \\&amp; \\: a_2 \\: \\&amp; \\: \\dots \\: \\&amp; \\: a_i = a_{i+1} \\: \\&amp; \\: a_{i+2} \\: \\&amp; \\: \\dots \\: \\&amp; \\: a_n,$$$$$$ where $$$\\&amp;$$$ denotes the bitwise AND operation.You are given an array $$$a$$$ of size $$$n$$$ ($$$n \\geq 2$$$). Find the number of permutations $$$p$$$ of numbers ranging from $$$1$$$ to $$$n$$$, for which the sequence $$$a_{p_1}$$$, $$$a_{p_2}$$$, ... ,$$$a_{p_n}$$$ is good. Since this number can be large, output it modulo $$$10^9+7$$$.",
    "prob_desc_output_spec": "Output $$$t$$$ lines, where the $$$i$$$-th line contains the number of good permutations in the $$$i$$$-th test case modulo $$$10^9 + 7$$$.",
    "prob_desc_input_spec": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$), denoting the number of test cases. The first line of each test case contains a single integer $$$n$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$) — the size of the array. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\le a_i \\le 10^9$$$) — the elements of the array. It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_088.jsonl",
    "code_uid": "69cf754c2eb7e513e7f069f278a45395",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"4\\n3\\n1 1 1\\n5\\n1 2 3 4 5\\n5\\n0 2 0 3 0\\n4\\n1 3 5 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\nimport math\r\ndef solve():\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    x = arr[0]\r\n    for i in range(1, n):\r\n        x &= arr[i]\r\n    count = arr.count(x)\r\n    if count < 2:\r\n        print(0)\r\n        return\r\n    print((count * (count - 1) * (math.factorial(n - 2))) % num)\r\n    \r\nnum = int(1E9 + 7)         \r\nfor _ in range(int(input())):\r\n    solve()",
    "prob_desc_created_at": "1618151700",
    "tags": [
        "bitmasks",
        "combinatorics",
        "constructive algorithms",
        "math"
    ],
    "hidden_unit_tests": ""
}