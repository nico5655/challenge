{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"0\\n1\\n1\\n2\\n0\"]",
    "src_uid": "dc10b869293df2b7a557262c805635ba",
    "prob_desc_notes": "NoteIn the first test, all elements are equal, therefore no operations are needed.In the second test, you can apply one operation with $$$k=1$$$ and $$$l=1$$$, set $$$a_1 := a_2$$$, and the array becomes $$$[1, 1]$$$ with $$$1$$$ operation.In the third test, you can apply one operation with $$$k=1$$$ and $$$l=4$$$, set $$$a_4 := a_5$$$, and the array becomes $$$[4, 4, 4, 4, 4]$$$.In the fourth test, you can apply one operation with $$$k=1$$$ and $$$l=3$$$, set $$$a_3 := a_4$$$, and the array becomes $$$[4, 2, 3, 3]$$$, then you can apply another operation with $$$k=2$$$ and $$$l=1$$$, set $$$a_1 := a_3$$$, $$$a_2 := a_4$$$, and the array becomes $$$[3, 3, 3, 3]$$$.In the fifth test, there is only one element, therefore no operations are needed.",
    "prob_desc_description": "You are given an array $$$a$$$ of $$$n$$$ elements. You can apply the following operation to it any number of times:  Select some subarray from $$$a$$$ of even size $$$2k$$$ that begins at position $$$l$$$ ($$$1\\le l \\le l+2\\cdot{k}-1\\le n$$$, $$$k \\ge 1$$$) and for each $$$i$$$ between $$$0$$$ and $$$k-1$$$ (inclusive), assign the value $$$a_{l+k+i}$$$ to $$$a_{l+i}$$$. For example, if $$$a = [2, 1, 3, 4, 5, 3]$$$, then choose $$$l = 1$$$ and $$$k = 2$$$, applying this operation the array will become $$$a = [3, 4, 3, 4, 5, 3]$$$.Find the minimum number of operations (possibly zero) needed to make all the elements of the array equal.",
    "prob_desc_output_spec": "Print $$$t$$$ lines, each line containing the answer to the corresponding test case — the minimum number of operations needed to make equal all the elements of the array with the given operation.",
    "prob_desc_input_spec": "The input consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 2 \\cdot 10^4$$$) — the number of test cases. Description of the test cases follows. The first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$) — the length of the array. The second line of each test case consists of $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq n$$$) — the elements of the array $$$a$$$. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 3-64",
    "lang_cluster": "Python",
    "difficulty": 1100,
    "file_name": "train_088.jsonl",
    "code_uid": "3339940b07c6791fec056aaa84cffb4c",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"5\\n\\n3\\n\\n1 1 1\\n\\n2\\n\\n2 1\\n\\n5\\n\\n4 4 4 2 4\\n\\n4\\n\\n4 2 1 3\\n\\n1\\n\\n1\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\r\nimport math\r\n\r\n\r\n\r\nSI = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\nMI = lambda: map(int,SI().split())\r\nII = lambda: int(SI())\r\nLI = lambda: list(MI())\r\nlcm = lambda x,y:abs(x * y) // math.gcd(x,y)\r\nFA = lambda size,value: [value for _ in range(size)]\r\nFCT = lambda x:eval('*'.join([i for i in range(1,x+1)])) if x>1 else 1\r\n\r\n\r\nfor _ in range(II()):\r\n    n = II()\r\n    a = LI()\r\n    b = a[-1]\r\n    i = n - 1\r\n    k = 0\r\n    while(i>=0):\r\n        if b != a[i]:\r\n            l = n - i - 1\r\n            i -= l\r\n            k += 1\r\n        else:\r\n            i-=1\r\n    print(k)\r\n\r\n\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n",
    "prob_desc_created_at": "1643294100",
    "tags": [
        "dp",
        "greedy"
    ],
    "hidden_unit_tests": ""
}