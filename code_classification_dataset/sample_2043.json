{
    "prob_desc_time_limit": "1 second",
    "prob_desc_sample_outputs": "[\"2\\nRBGRGBRGR\", \"2\\nBRBGBRGR\", \"6\\nBGRBRBGBGBGRG\"]",
    "src_uid": "ddaf86169a79942cefce8e5b5f3d6118",
    "prob_desc_notes": null,
    "prob_desc_description": "You have a garland consisting of $$$n$$$ lamps. Each lamp is colored red, green or blue. The color of the $$$i$$$-th lamp is $$$s_i$$$ ('R', 'G' and 'B' — colors of lamps in the garland).You have to recolor some lamps in this garland (recoloring a lamp means changing its initial color to another) in such a way that the obtained garland is diverse.A garland is called diverse if any two adjacent (consecutive) lamps (i. e. such lamps that the distance between their positions is $$$1$$$) have distinct colors.In other words, if the obtained garland is $$$t$$$ then for each $$$i$$$ from $$$1$$$ to $$$n-1$$$ the condition $$$t_i \\ne t_{i + 1}$$$ should be satisfied.Among all ways to recolor the initial garland to make it diverse you have to choose one with the minimum number of recolored lamps. If there are multiple optimal solutions, print any of them.",
    "prob_desc_output_spec": "In the first line of the output print one integer $$$r$$$ — the minimum number of recolors needed to obtain a diverse garland from the given one. In the second line of the output print one string $$$t$$$ of length $$$n$$$ — a diverse garland obtained from the initial one with minimum number of recolors. If there are multiple optimal solutions, print any of them.",
    "prob_desc_input_spec": "The first line of the input contains one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the number of lamps. The second line of the input contains the string $$$s$$$ consisting of $$$n$$$ characters 'R', 'G' and 'B' — colors of lamps in the garland.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1400,
    "file_name": "train_016.jsonl",
    "code_uid": "b7344a89fd4551e358489413957c5541",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"9\\nRBGRRBRGG\", \"8\\nBBBGBRRR\", \"13\\nBBRRRRGGGGGRR\"]",
    "exec_outcome": "PASSED",
    "source_code": "n=int(input())\ns0=input()\ns=[]\nres=0\nfor i in range(len(s0)):\n    s.append(s0[i])\ns.append('B')\nfor i in range(len(s)-2):\n    if(s[i]==s[i+1]):\n        if(s[i]=='R'):\n            if (s[i+2] == 'R'):\n                s[i+1]='G'\n            if (s[i+2] == 'G'):\n                s[i+1]='B'\n            if (s[i+2] == 'B'):\n                s[i+1]='G'\n        if (s[i] == 'B'):\n            if (s[i + 2] == 'B'):\n                s[i + 1] = 'G'\n            if (s[i + 2] == 'G'):\n                s[i + 1] = 'R'\n            if (s[i + 2] == 'R'):\n                s[i + 1] = 'G'\n        if (s[i] == 'G'):\n            if (s[i + 2] == 'G'):\n                s[i + 1] = 'B'\n            if (s[i + 2] == 'R'):\n                s[i + 1] = 'B'\n            if (s[i + 2] == 'B'):\n                s[i + 1] = 'R'\n        res+=1\nprint(res)\nprint(''.join(map(str,s[:n])))",
    "prob_desc_created_at": "1548254100",
    "tags": [
        "dp",
        "constructive algorithms",
        "greedy"
    ],
    "hidden_unit_tests": ""
}