{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\\n001\\n001\\n110\", \"NO\"]",
    "src_uid": "8adebeaed713b7e90c68553127d17b19",
    "prob_desc_notes": null,
    "prob_desc_description": "Given three numbers $$$n, a, b$$$. You need to find an adjacency matrix of such an undirected graph that the number of components in it is equal to $$$a$$$, and the number of components in its complement is $$$b$$$. The matrix must be symmetric, and all digits on the main diagonal must be zeroes.In an undirected graph loops (edges from a vertex to itself) are not allowed. It can be at most one edge between a pair of vertices.The adjacency matrix of an undirected graph is a square matrix of size $$$n$$$ consisting only of \"0\" and \"1\", where $$$n$$$ is the number of vertices of the graph and the $$$i$$$-th row and the $$$i$$$-th column correspond to the $$$i$$$-th vertex of the graph. The cell $$$(i,j)$$$ of the adjacency matrix contains $$$1$$$ if and only if the $$$i$$$-th and $$$j$$$-th vertices in the graph are connected by an edge.A connected component is a set of vertices $$$X$$$ such that for every two vertices from this set there exists at least one path in the graph connecting this pair of vertices, but adding any other vertex to $$$X$$$ violates this rule.The complement or inverse of a graph $$$G$$$ is a graph $$$H$$$ on the same vertices such that two distinct vertices of $$$H$$$ are adjacent if and only if they are not adjacent in $$$G$$$.",
    "prob_desc_output_spec": "If there is no graph that satisfies these constraints on a single line, print \"NO\" (without quotes). Otherwise, on the first line, print \"YES\"(without quotes). In each of the next $$$n$$$ lines, output $$$n$$$ digits such that $$$j$$$-th digit of $$$i$$$-th line must be $$$1$$$ if and only if there is an edge between vertices $$$i$$$ and $$$j$$$ in $$$G$$$ (and $$$0$$$ otherwise). Note that the matrix must be symmetric, and all digits on the main diagonal must be zeroes.  If there are several matrices that satisfy the conditions â€” output any of them.",
    "prob_desc_input_spec": "In a single line, three numbers are given $$$n, a, b \\,(1 \\le n \\le 1000, 1 \\le a, b \\le n)$$$: is the number of vertexes of the graph, the required number of connectivity components in it, and the required amount of the connectivity component in it's complement. ",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_029.jsonl",
    "code_uid": "a55ece13fa24b0b2162e5bcbaa81ab1d",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 1 2\", \"3 3 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "\nfrom collections import defaultdict\n\nn,a,b = map(int,input().split())\n\nhash = defaultdict(list)\n\n# debug\n# def dfs(n):\n# \n# \n#     bool[n] = True\n#     for i in hash[n]:\n#         if bool[i] == False:\n#             dfs(i)\n\n\n\nif a == 1 and b == 1:\n    if n == 2 or n == 3:\n        print('NO')\n        exit()\n\nif a == 1 or b == 1:\n\n\n    bool = [False]*(n+1)\n\n    if a>n or b>n:\n        print('NO')\n        exit()\n    print('YES')\n\n    l = []\n    for i in range(n):\n        z = ['0']*(n)\n        l.append(z)\n    ans = []\n\n    for i in range(n):\n        z = ['0']*(n)\n        ans.append(z)\n\n    if b == 1:\n\n\n\n\n        for i in range(a-1,n-1):\n            # hash[i].add(i+1)\n            # hash[i+1].add(i)\n            l[i][i+1] = '1'\n            l[i+1][i] = '1'\n            # hash[i+1].append(i)\n            # hash[i].append(i+1)\n\n\n        # count = 0\n        # for i in range(n):\n        #     if bool[i] == False:\n        #\n        #         dfs(i)\n        #         count+=1\n        # if a == 1 and b == 1:\n\n        for i in l:\n            print(''.join(i))\n    else:\n\n\n        ans = []\n\n        for i in range(n):\n           z = ['0']*(n)\n           ans.append(z)\n\n        for i in range(b-1,n-1):\n            # hash[i].add(i+1)\n            # hash[i+1].add(i)\n            l[i][i+1] = '1'\n            l[i+1][i] = '1'\n            # hash[i+1].append(i)\n            # hash[i].append(i+1)\n        # for i in l:\n        #     print(*i)\n        for i in range(n):\n            for j in range(n):\n                if i!=j:\n                    if l[i][j] == '1':\n                        ans[i][j] = '0'\n                    if l[i][j] == '0':\n                        ans[i][j] = '1'\n                        # hash[i+1].append(j+1)\n        # count = 0\n        # for i in range(n):\n        #     if bool[i] == False:\n        #\n        #         dfs(i)\n        #         count+=1\n\n\n        for i in ans:\n            print(''.join(i))\n\n\n\nelse:\n    print('NO')\n\n",
    "prob_desc_created_at": "1528625100",
    "tags": [
        "constructive algorithms",
        "implementation",
        "graphs"
    ],
    "hidden_unit_tests": ""
}