{
    "prob_desc_time_limit": "3 seconds",
    "prob_desc_sample_outputs": "[\"3\", \"5\", \"0\"]",
    "src_uid": "5642e74bc558ca3187d062ebac6e3a95",
    "prob_desc_notes": "NoteAll the paths from the first example:   $$$(1, 1) \\rightarrow (2, 1) \\rightarrow (3, 1) \\rightarrow (3, 2) \\rightarrow (3, 3)$$$;  $$$(1, 1) \\rightarrow (2, 1) \\rightarrow (2, 2) \\rightarrow (2, 3) \\rightarrow (3, 3)$$$;  $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (3, 2) \\rightarrow (3, 3)$$$. All the paths from the second example:   $$$(1, 1) \\rightarrow (2, 1) \\rightarrow (3, 1) \\rightarrow (3, 2) \\rightarrow (3, 3) \\rightarrow (3, 4)$$$;  $$$(1, 1) \\rightarrow (2, 1) \\rightarrow (2, 2) \\rightarrow (3, 2) \\rightarrow (3, 3) \\rightarrow (3, 4)$$$;  $$$(1, 1) \\rightarrow (2, 1) \\rightarrow (2, 2) \\rightarrow (2, 3) \\rightarrow (2, 4) \\rightarrow (3, 4)$$$;  $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2) \\rightarrow (2, 3) \\rightarrow (3, 3) \\rightarrow (3, 4)$$$;  $$$(1, 1) \\rightarrow (1, 2) \\rightarrow (1, 3) \\rightarrow (2, 3) \\rightarrow (3, 3) \\rightarrow (3, 4)$$$. ",
    "prob_desc_description": "There is a rectangular grid of size $$$n \\times m$$$. Each cell has a number written on it; the number on the cell ($$$i, j$$$) is $$$a_{i, j}$$$. Your task is to calculate the number of paths from the upper-left cell ($$$1, 1$$$) to the bottom-right cell ($$$n, m$$$) meeting the following constraints:  You can move to the right or to the bottom only. Formally, from the cell ($$$i, j$$$) you may move to the cell ($$$i, j + 1$$$) or to the cell ($$$i + 1, j$$$). The target cell can't be outside of the grid.  The xor of all the numbers on the path from the cell ($$$1, 1$$$) to the cell ($$$n, m$$$) must be equal to $$$k$$$ (xor operation is the bitwise exclusive OR, it is represented as '^' in Java or C++ and \"xor\" in Pascal). Find the number of such paths in the given grid.",
    "prob_desc_output_spec": "Print one integer â€” the number of paths from ($$$1, 1$$$) to ($$$n, m$$$) with xor sum equal to $$$k$$$.",
    "prob_desc_input_spec": "The first line of the input contains three integers $$$n$$$, $$$m$$$ and $$$k$$$ ($$$1 \\le n, m \\le 20$$$, $$$0 \\le k \\le 10^{18}$$$) â€” the height and the width of the grid, and the number $$$k$$$. The next $$$n$$$ lines contain $$$m$$$ integers each, the $$$j$$$-th element in the $$$i$$$-th line is $$$a_{i, j}$$$ ($$$0 \\le a_{i, j} \\le 10^{18}$$$).",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "PyPy 2",
    "lang_cluster": "Python",
    "difficulty": 2100,
    "file_name": "train_047.jsonl",
    "code_uid": "dd43244d88d731063e0c13547ff9aa2f",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\", \"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\", \"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import Counter\nrd = lambda: map(int, raw_input().split(' '))\nn, m, k = rd()\na = [0] * n\nfor i in xrange(n):\n    a[i] = rd()\n\nln = (n + m - 2) / 2\ncnt = Counter()\n\ndef rec(i, j, cur):\n    global cnt, ln, n, m, a\n\n    cur ^= a[i][j]\n\n    if i + j > ln:\n        return\n    if i + j == ln:\n        cnt[(i, j, cur)] += 1\n\n    if i + 1 < n:\n        rec(i + 1, j, cur)\n    if j + 1 < m:\n        rec(i, j + 1, cur)\n\nans = 0\nln2 = n + m - 2 - ln\ndef rec2(i, j, cur):\n    global cnt, ln, n, m, k, ans\n\n    if i + j > ln2:\n        return\n    if i + j == ln2:\n        ans += cnt[(n - i - 1, m - j - 1, cur ^ k)]\n\n    cur ^= a[n - i - 1][m - j - 1]\n    if i + 1 < n:\n        rec2(i + 1, j, cur)\n    if j + 1 < m:\n        rec2(i, j + 1, cur)\n\nrec(0, 0, 0)\nrec2(0, 0, 0)\nprint ans",
    "prob_desc_created_at": "1531751700",
    "tags": [
        "dp",
        "meet-in-the-middle",
        "bitmasks",
        "brute force"
    ],
    "hidden_unit_tests": ""
}