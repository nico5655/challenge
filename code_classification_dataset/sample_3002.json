{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"YES\\n1\", \"YES\\n0\", \"YES\\n1\"]",
    "src_uid": "da38d1a63152e0a354b04936e9511969",
    "prob_desc_notes": "NoteIn the first example you can simply make one move to obtain sequence [0, 2] with .In the second example the gcd of the sequence is already greater than 1. ",
    "prob_desc_description": "Mike has a sequence A = [a1, a2, ..., an] of length n. He considers the sequence B = [b1, b2, ..., bn] beautiful if the gcd of all its elements is bigger than 1, i.e. . Mike wants to change his sequence in order to make it beautiful. In one move he can choose an index i (1 ≤ i &lt; n), delete numbers ai, ai + 1 and put numbers ai - ai + 1, ai + ai + 1 in their place instead, in this order. He wants perform as few operations as possible. Find the minimal number of operations to make sequence A beautiful if it's possible, or tell him that it is impossible to do so. is the biggest non-negative number d such that d divides bi for every i (1 ≤ i ≤ n).",
    "prob_desc_output_spec": "Output on the first line \"YES\" (without quotes) if it is possible to make sequence A beautiful by performing operations described above, and \"NO\" (without quotes) otherwise. If the answer was \"YES\", output the minimal number of moves needed to make sequence A beautiful.",
    "prob_desc_input_spec": "The first line contains a single integer n (2 ≤ n ≤ 100 000) — length of sequence A. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — elements of sequence A.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1700,
    "file_name": "train_038.jsonl",
    "code_uid": "0ee0ebb1fa960ef16bdb68e80a570993",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"2\\n1 1\", \"3\\n6 2 4\", \"2\\n1 3\"]",
    "exec_outcome": "PASSED",
    "source_code": "def main():\n    from math import gcd\n    input()\n    aa = list(map(int, input().split()))\n    g = r = t = 0\n    while aa and g != 1:\n        a = aa.pop()\n        if t:\n            r += 2 - (a & 1)\n            t = 0\n        else:\n            t = (a & 1) * 2\n        g = gcd(a, g)\n    for a in reversed(aa):\n        if t:\n            r += 2 - (a & 1)\n            t = 0\n        else:\n            t = (a & 1) * 2\n    print(\"YES\", (r + t) * (g < 2), sep='\\n')\n\n\nif __name__ == '__main__':\n    main()\n",
    "prob_desc_created_at": "1492785300",
    "tags": [
        "dp",
        "number theory",
        "greedy"
    ],
    "hidden_unit_tests": ""
}