{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"2\", \"2 3\", \"-1\"]",
    "src_uid": "fc29e8c1a9117c1dd307131d852b6088",
    "prob_desc_notes": "NoteIn the first example, Alice could get the input sequence from [6, 20] as the original sequence.In the second example, Alice's original sequence could be either [4, 5] or [3, 3, 3].",
    "prob_desc_description": "It can be shown that any positive integer x can be uniquely represented as x = 1 + 2 + 4 + ... + 2k - 1 + r, where k and r are integers, k ≥ 0, 0 &lt; r ≤ 2k. Let's call that representation prairie partition of x.For example, the prairie partitions of 12, 17, 7 and 1 are:  12 = 1 + 2 + 4 + 5,17 = 1 + 2 + 4 + 8 + 2,7 = 1 + 2 + 4,1 = 1. Alice took a sequence of positive integers (possibly with repeating elements), replaced every element with the sequence of summands in its prairie partition, arranged the resulting numbers in non-decreasing order and gave them to Borys. Now Borys wonders how many elements Alice's original sequence could contain. Find all possible options!",
    "prob_desc_output_spec": "Output, in increasing order, all possible values of m such that there exists a sequence of positive integers of length m such that if you replace every element with the summands in its prairie partition and arrange the resulting numbers in non-decreasing order, you will get the sequence given in the input. If there are no such values of m, output a single integer -1.",
    "prob_desc_input_spec": "The first line contains a single integer n (1 ≤ n ≤ 105) — the number of numbers given from Alice to Borys. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1012; a1 ≤ a2 ≤ ... ≤ an) — the numbers given from Alice to Borys.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 2200,
    "file_name": "train_019.jsonl",
    "code_uid": "abaf5c9b1f807e77d649e84c9044fd18",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"8\\n1 1 2 2 3 4 5 8\", \"6\\n1 1 1 2 2 2\", \"5\\n1 2 4 4 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "from collections import Counter\nfrom math import log2, ceil\n\nMAX = ceil(log2(10 ** 12))\n\n\ndef can():\n    seqs_cp = Counter(seqs)\n    for num in set(nums):\n        cnt = nums[num]\n        while cnt != 0 and num < 2 ** 63:\n            dif = min(cnt, seqs_cp[num])\n            cnt -= dif\n            seqs_cp[num] -= dif\n            num *= 2\n        if cnt > 0:\n            return False\n    return True\n\n\nn = int(input())\n\nseq = list(map(int, input().split()))\ncnt = Counter(seq)\nnums = Counter(seq)\n\nseqs = Counter()\ncur_cnt = cnt[1]\ncur_pow = 1\nwhile cur_cnt != 0:\n    nums[cur_pow] -= cur_cnt\n    cur_pow *= 2\n    if cur_cnt > cnt[cur_pow]:\n        seqs[cur_pow // 2] = cur_cnt - cnt[cur_pow]\n        cur_cnt = cnt[cur_pow]\n\nfor num in set(nums):\n    addition = nums[num]\n    nums[num] = 0\n    nums[2 ** int(log2(num))] += addition\n\n# remove elements with zero count\nnums -= Counter()\nseqs -= Counter()\n\ncur_len = sum(seqs[num] for num in set(seqs))\nres = []\ncur_pow = 1\n\nwhile can():\n    res.append(cur_len)\n    while seqs[cur_pow] == 0 and cur_pow <= 2 ** 63:\n        cur_pow *= 2\n    if cur_pow > 2 ** 63:\n        break\n    other_pow = 1\n    while other_pow <= cur_pow:\n        nums[other_pow] += 1\n        other_pow *= 2\n    seqs[cur_pow] -= 1\n    cur_len -= 1\n\nprint(-1 if len(res) == 0 else ' '.join(map(str, reversed(res))))\n",
    "prob_desc_created_at": "1494171900",
    "tags": [
        "binary search",
        "greedy"
    ],
    "hidden_unit_tests": ""
}