{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\\n1 3 2\", \"5\\n1 3 2 5 4\", \"3\\n1 2 3 1 2\"]",
    "src_uid": "2aaa31d52d69ff3703f93177b25671a3",
    "prob_desc_notes": "NoteIn the first sample the park consists of three squares: 1 → 3 → 2. Thus, the balloon colors have to be distinct.    Illustration for the first sample. In the second example there are following triples of consequently connected squares:   1 → 3 → 2  1 → 3 → 4  1 → 3 → 5  2 → 3 → 4  2 → 3 → 5  4 → 3 → 5  We can see that each pair of squares is encountered in some triple, so all colors have to be distinct.    Illustration for the second sample. In the third example there are following triples:   1 → 2 → 3  2 → 3 → 4  3 → 4 → 5  We can see that one or two colors is not enough, but there is an answer that uses three colors only.    Illustration for the third sample. ",
    "prob_desc_description": "Andryusha goes through a park each day. The squares and paths between them look boring to Andryusha, so he decided to decorate them.The park consists of n squares connected with (n - 1) bidirectional paths in such a way that any square is reachable from any other using these paths. Andryusha decided to hang a colored balloon at each of the squares. The baloons' colors are described by positive integers, starting from 1. In order to make the park varicolored, Andryusha wants to choose the colors in a special way. More precisely, he wants to use such colors that if a, b and c are distinct squares that a and b have a direct path between them, and b and c have a direct path between them, then balloon colors on these three squares are distinct.Andryusha wants to use as little different colors as possible. Help him to choose the colors!",
    "prob_desc_output_spec": "In the first line print single integer k — the minimum number of colors Andryusha has to use. In the second line print n integers, the i-th of them should be equal to the balloon color on the i-th square. Each of these numbers should be within range from 1 to k.",
    "prob_desc_input_spec": "The first line contains single integer n (3 ≤ n ≤ 2·105) — the number of squares in the park. Each of the next (n - 1) lines contains two integers x and y (1 ≤ x, y ≤ n) — the indices of two squares directly connected by a path. It is guaranteed that any square is reachable from any other using the paths.",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1600,
    "file_name": "train_010.jsonl",
    "code_uid": "8dceb524d18acfc8dea92ba97b9d3674",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"3\\n2 3\\n1 3\", \"5\\n2 3\\n5 3\\n4 3\\n1 3\", \"5\\n2 1\\n3 2\\n4 3\\n5 4\"]",
    "exec_outcome": "PASSED",
    "source_code": "import sys\nsys.setrecursionlimit(200000)\n\nn = int(input())\narr = [[] for i in range(n)]\nfor i in range(n - 1):\n    a, b = map(int, input().split())\n    arr[a - 1].append(b - 1)\n    arr[b - 1].append(a - 1)\ns = max([len(p) for p in arr]) + 1\nprint(s)\n\ncolored = [0] * n\ndef dfs(v, c, d):\n    colored[v] = p = c\n    for u in arr[v]:\n        if not colored[u]:\n            c = c + 1 if c < s else 1\n            if c == d:\n                c = c + 1 if c < s else 1\n            dfs(u, c, p)\nif s > 3:\n    dfs(0, 1, 0)\nelse:\n    i = 0\n    c = 1\n    while len(arr[i]) != 1:\n        i += 1\n    for j in range(n):\n        colored[i] = c\n        c = c + 1 if c < s else 1\n        if j < n - 1:\n            i = arr[i][0] if not colored[arr[i][0]] else arr[i][1]\nprint(\" \".join(map(str, colored)))",
    "prob_desc_created_at": "1488705300",
    "tags": [
        "greedy",
        "dfs and similar",
        "trees",
        "graphs"
    ],
    "hidden_unit_tests": ""
}