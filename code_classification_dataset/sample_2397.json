{
    "prob_desc_time_limit": "2 seconds",
    "prob_desc_sample_outputs": "[\"3\\n5\\n4\\n2\\n1\", \"1\\n2\\n5\\n4\\n3\", \"2\\n4\\n5\\n3\\n1\"]",
    "src_uid": "9d3c0f689ae1e6215448463def55df32",
    "prob_desc_notes": "NoteIn the first example, the positions of stones 1, 2, 3, 4, 5 will be , respectively. So you should print the sequence: 3, 5, 4, 2, 1.",
    "prob_desc_description": "Squirrel Liss lived in a forest peacefully, but unexpected trouble happens. Stones fall from a mountain. Initially Squirrel Liss occupies an interval [0, 1]. Next, n stones will fall and Liss will escape from the stones. The stones are numbered from 1 to n in order.The stones always fall to the center of Liss's interval. When Liss occupies the interval [k - d, k + d] and a stone falls to k, she will escape to the left or to the right. If she escapes to the left, her new interval will be [k - d, k]. If she escapes to the right, her new interval will be [k, k + d].You are given a string s of length n. If the i-th character of s is \"l\" or \"r\", when the i-th stone falls Liss will escape to the left or to the right, respectively. Find the sequence of stones' numbers from left to right after all the n stones falls.",
    "prob_desc_output_spec": "Output n lines — on the i-th line you should print the i-th stone's number from the left.",
    "prob_desc_input_spec": "The input consists of only one line. The only line contains the string s (1 ≤ |s| ≤ 106). Each character in s will be either \"l\" or \"r\".",
    "prob_desc_output_to": "standard output",
    "prob_desc_input_from": "standard input",
    "lang": "Python 3",
    "lang_cluster": "Python",
    "difficulty": 1200,
    "file_name": "train_022.jsonl",
    "code_uid": "174a6dc1fc7f5bc64c7fb638b44442ac",
    "prob_desc_memory_limit": "256 megabytes",
    "prob_desc_sample_inputs": "[\"llrlr\", \"rrlll\", \"lrlrr\"]",
    "exec_outcome": "PASSED",
    "source_code": "a = input()\nn = len(a)\nfor i in range(n):\n\tif (a[i] == 'r'):\n\t\tprint(i + 1)\nfor i in range(n - 1, -1, -1):\n\tif (a[i] == 'l'):\n\t\tprint(i + 1)",
    "prob_desc_created_at": "1358686800",
    "tags": [
        "data structures",
        "constructive algorithms",
        "implementation",
        "two pointers"
    ],
    "hidden_unit_tests": ""
}